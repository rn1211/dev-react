{
    "version": "https://jsonfeed.org/version/1",
    "title": "Aman Mittal' blog",
    "home_page_url": "https://amanhimself.dev/",
    "feed_url": "https://amanhimself.dev//rss/feed.json",
    "author": {
        "name": "Aman Mittal",
        "url": "https://twitter.com/amanhimself"
    },
    "items": [
        {
            "id": "https://amanhimself.dev//blog/use-key-extractor-in-react-native-flatlist",
            "content_html": "---\ntitle: \"When to use keyExtractor prop in React Native's FlatList\"\nslug: 'use-key-extractor-in-react-native-flatlist'\ndate: '2022-03-27'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://amanhimself.dev/blog/use-key-extractor-in-react-native-flatlist'\n---\n\n![cover_image](https://i.imgur.com/sRxXsyt.png)\n\n# When to use keyExtractor in React Native's FlatList\n\nIn React Native, the [FlatList component](https://reactnative.dev/docs/flatlist) works well to render a long list of data. It renders only the items are shown on the screen in a scrolling list and not all the data items at once.\n\nTo render a scrollable list of items using `FlatList`, you need to pass the required `data` prop to the component. The `data` prop accepts an array of items. Each item in the array represents a single item in the list. Another required prop is `renderItem`, which takes an item from the `data` and renders it on the list. This prop accepts a function that returns the JSX to be rendered.\n\nTo display an item in the scrollable list, the `FlatList` component requires that each item has a unique key such as an `id`. This key is what allows the `FlatList` component (since it uses [VirtualizedList](https://reactnative.dev/docs/virtualizedlist) under the hood) to track the order of items in the list. The key from the data array is extracted using the `keyExtractor` prop on the `FlatList` component.\n\nIn this post, let's talk about where you might need to use `keyExtractor` and what scenarios it is not required.\n\n## Display a list of items using FlatList\n\nConsider the following structure of data. There are ten items in the array, and each item has two properties, `id` and `title`. The `id` is the unique key for each item.\n\n```js\nconst DATA_WITH_ID = [\n  {\n    id: 1,\n    title: 'quidem molestiae enim'\n  },\n  {\n    id: 2,\n    title: 'sunt qui excepturi placeat culpa'\n  },\n  {\n    id: 3,\n    title: 'omnis laborum odio'\n  },\n  {\n    id: 4,\n    title: 'non esse culpa molestiae omnis sed optio'\n  },\n  {\n    id: 5,\n    title: 'eaque aut omnis a'\n  },\n  {\n    id: 6,\n    title: 'natus impedit quibusdam illo est'\n  },\n  {\n    id: 7,\n    title: 'quibusdam autem aliquid et et quia'\n  },\n  {\n    id: 8,\n    title: 'qui fuga est a eum'\n  },\n  {\n    id: 9,\n    title: 'saepe unde necessitatibus rem'\n  },\n  {\n    id: 10,\n    title: 'distinctio laborum qui'\n  }\n];\n```\n\nUsing the `FlatList` component, you want to render the `title` of each item as shown below:\n\n```js\nexport default function App() {\n  const renderList = ({ item }) => {\n    return (\n      <View style={styles.listItem}>\n        <Text style={styles.listItemText}>{item.title}</Text>\n      </View>\n    );\n  };\n\n  return (\n    <View style={styles.container}>\n      <FlatList data={DATA_WITH_ID} renderItem={renderList} />\n    </View>\n  );\n}\n```\n\nThe result of the above component will display a list of items without any errors or warnings. In addition, the `FlatList` component doesn't require a unique key to identify each item since the original data structure already contains a key called `id`.\n\nHere is the output on a device's screen from the above snippet:\n\n![ss2](https://i.imgur.com/ShoysNV.png)\n\n## Using the keyExtractor prop\n\nBy default, the `keyExtractor` prop checks for properties like `key` and `id` (in that order). If any of the two is present in the original data structure, it will be considered a the unique key by the `FlatList` component. In this case(as in the previous example), you do not have to explicitly use the `keyExtractor` prop.\n\nIf none of them are provided, the `FlatList` component will throw a warning \"VirtualizedList: missing keys for items ...\":\n\n![ss1](https://i.imgur.com/0zN4FXy.png)\n\nNow, let's consider a scenario where array of data contains a unique key with each list item but the name of the unique key is neither `key` nor `id`. It contains a unique key property with the name of `userId`.\n\n```js\nconst DATA_WITH_USER_ID = [\n  {\n    userId: 1,\n    title: 'quidem molestiae enim'\n  },\n  {\n    userId: 2,\n    title: 'sunt qui excepturi placeat culpa'\n  },\n  {\n    userId: 3,\n    title: 'omnis laborum odio'\n  },\n  {\n    userId: 4,\n    title: 'non esse culpa molestiae omnis sed optio'\n  },\n  {\n    userId: 5,\n    title: 'eaque aut omnis a'\n  },\n  {\n    userId: 6,\n    title: 'natus impedit quibusdam illo est'\n  },\n  {\n    userId: 7,\n    title: 'quibusdam autem aliquid et et quia'\n  },\n  {\n    userId: 8,\n    title: 'qui fuga est a eum'\n  },\n  {\n    userId: 9,\n    title: 'saepe unde necessitatibus rem'\n  },\n  {\n    userId: 10,\n    title: 'distinctio laborum qui'\n  }\n];\n```\n\nWhen rendering the list, you will see the warning in this case because the `FlatList` component doesn't recognize the `userId` as the `key` or `id` name in the original data structure.\n\nFor custom key names such as `userId` in the example above, the `keyExtractor` prop is used. It extracts the unique key name and its value and tells the `FlatList` component to track the items based on that value.\n\nFor the above array of data, modify the `FlatList` component and use the `keyExtractor` prop to extract the key:\n\n```js\n<FlatList\n  data={DATA_WITH_ID}\n  renderItem={renderList}\n  keyExtractor={item => item.userId}\n/>\n```\n\nThe warning will also disappear after this step.\n\n## Conclusion\n\nWhen using a `FlatList` component, if the data array has a unique `id` or a `key` property, you do not need to use the `keyExtractor` prop explicitly. However, for custom id names, use the `keyExtractor` prop to explicitly tell the component which unique key to extract.\n\nIf you like to learn more about React Native, check out the [React Native category](https://amanhimself.dev/tags/react-native/) and [Expo category](https://amanhimself.dev/tags/expo/) pages on my blog. You can also subscribe my [newsletter](https://www.getrevue.co/profile/amanhimself) or follow on [Twitter](https://twitter.com/amanhimself) to get updates on whenever I publish a new article or tutorial.\n",
            "url": "https://amanhimself.dev//blog/use-key-extractor-in-react-native-flatlist",
            "title": "When to use keyExtractor prop in React Native's FlatList",
            "summary": "When to use keyExtractor prop in React Native's FlatList",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/setup-nextjs-project-with-eslint-prettier-husky-lint-staged",
            "content_html": "---\ntitle: 'Set up a Next.js project with ESLint, Prettier, Husky, and Lint Staged'\nslug: 'setup-nextjs-project-with-eslint-prettier-husky-lint-staged'\ndate: '2022-02-13'\nthumbnail: '/thumbnails/nextjs.png'\ntag: 'nextjs'\ncanonicalUrl: 'https://amanhimself.dev/blog/setup-nextjs-project-with-eslint-prettier-husky-lint-staged/'\n---\n\nWorking on a large codebase, having a consistent style guide is important. Inconsistencies can occur by using single quotes instead of double quotes, tabs instead of spaces, etc.\n\nA pre-commit hook can address this problem. Before making a new commit, a pre-commit hook can check for types in TypeScript files, run a lint test, use prettier to format files, etc. All of this is possible by using:\n\n- ESLint\n- Prettier\n- Husky\n- Lint Staged\n\nI'll share my personal and minimal configuration that I have recently started using for Next.js projects in this post.\n\n## Setting up a new Next.js project\n\nCreating a new Next.js project with TypeScript enabled is done by running the following command from a terminal:\n\n```shell\nnpx create-next-app@latest --typescript\n\n# After the project directory is created\n# Navigate inside it\ncd next-typescript-config\n```\n\nAfter the project directory generated, navigate inside it.\n\nThe `--typescript` flag prepares the Next.js app with all the configuration required to enable and use TypeScript. In addition, it comes with a `tsconfig.json` file:\n\n```js\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\"],\n  \"exclude\": [\"node_modules\"]\n}\n```\n\nThe flag also installs the required dependencies and type definitions installed as devDependencies found in the `package.json` file.\n\n## ESLint is already set up\n\nLinting is a technique to check the code for syntax errors. It also allows checking for code style issues. All the checking happens based on the defined set of rules and plugins.\n\nSince [Next.js version 11](https://nextjs.org/blog/next-11#conformance), it comes with ESLint integration out-of-the-box. This means that Next.js installs devDependencies like `eslint` and `eslint-config-next` and creates an `eslintrc.json` file. Next.js uses the `next lint` command to catch ESLint errors.\n\nThe [eslint-config-plugin](https://github.com/vercel/next.js/tree/canary/packages/eslint-config-next) by Next.js team contains pre-defined set of rules. You do not have to define them explicitly. These rules include some common and best practices in React ecosystem.\n\nFor example, the `eslint-config-plugin` uses `eslint-plugin-react-hooks` and `eslint-plugin-react` as dependencies, and the recommended set of rules from both these packages are already included. This takes care of installing the standard eslint packages for React apps in the Next.js app and then manually adding them as `plugins`.\n\nNext.js ESLint plugin also includes best practices around Core Web Vitals and accessibility.\n\n## Setting up Prettier\n\nPrettier is a code formatter that ensures that all the code files follow a consistent styling. If you are into Web development, chances are you are already using it.\n\nESLint rules in Next.js already come with some code formatting rules. To override them and initiate your personal prettier config, start by installing the following devDependencies:\n\n```shell\nyarn add --dev prettier eslint-plugin-prettier eslint-config-prettier\n```\n\nTo do Prettier work with ESLint, add `\"prettier\"` to the `extends` and the `plugins` array in the `.eslintrc.json` file.\n\n```json\n{\n  \"extends\": [\"next/core-web-vitals\", \"prettier\"],\n  \"plugins\": [\"prettier\"]\n}\n```\n\nIn the `extends` array, make sure `prettier` is the last item so that when you define your Prettier configuration that takes precedence over other configurations that may have their way of formatting code.\n\nYou can also define the `rules` in this file. For example, whenever there is a code formatting issue with any of the files in my Next.js app, I like it to be exposed as a warning rather than an error.\n\n```json\n{\n  \"extends\": [\"next\", \"next/core-web-vitals\", \"prettier\"],\n  \"plugins\": [\"prettier\"],\n  \"rules\": {\n    \"prettier/prettier\": \"warn\",\n    \"no-console\": \"warn\"\n  }\n}\n```\n\nCreate a new file `.prettierrc` and add a custom Prettier configuration:\n\n```json\n{\n  \"singleQuote\": true,\n  \"trailingComma\": \"none\",\n  \"arrowParens\": \"avoid\",\n  \"proseWrap\": \"preserve\",\n  \"quoteProps\": \"as-needed\",\n  \"bracketSameLine\": false,\n  \"bracketSpacing\": true,\n  \"tabWidth\": 2\n}\n```\n\nAlso, add a `.prettierignore` file to ignore formatting on certain directories and files:\n\n```js\n.next\n.cache\npackage-lock.json\npublic\nnode_modules\nnext-env.d.ts\nnext.config.ts\nyarn.lock\n```\n\n## Installing Husky\n\n[Husky](https://typicode.github.io/husky/#/) is a utility that allows linting and testing when committing the code.\n\nTo set it up, initially, install the package as a dev dependency:\n\n```shell\nyarn add --dev husky\n```\n\nTo enable Husky run:\n\n```shell\nyarn husky install\n```\n\nIn the next step, I will configure Husky's pre-commit hook after setting up lint-staged.\n\n## Setting up Lint Staged\n\nThe [lint-staged](https://github.com/okonet/lint-staged) package allows linting staged git files. It also checks for the changed files instead of the whole source code.\n\nYou can configure lint-staged to not lint files in markdown or json format. You can also separate ESLint checks based on a file's extension.\n\nCreate a `.lintstagedrc.js` file at the root of the Next.js app and add the following snippet:\n\n```js\nmodule.exports = {\n  // Type check TypeScript files\n  '**/*.(ts|tsx)': () => 'yarn tsc --noEmit',\n\n  // Lint & Prettify TS and JS files\n  '**/*.(ts|tsx|js)': filenames => [\n    `yarn eslint ${filenames.join(' ')}`,\n    `yarn prettier --write ${filenames.join(' ')}`\n  ],\n\n  // Prettify only Markdown and JSON files\n  '**/*.(md|json)': filenames => `yarn prettier --write ${filenames.join(' ')}`\n};\n```\n\nAfter setting up the lint-staged configuration, open the `/.husky/pre-commit` file and add the following pre-commit hook:\n\n```shell\n#!/bin/sh\n. \"$(dirname \"$0\")/_/husky.sh\"\n\n# Add the following\nyarn lint-staged\n\n# If using npm, remove above and uncomment below\n# npm run lint-staged\n```\n\nTo test it, I have modified the `/pages/_app.tsx` file and removed the reference of `AppProps`. This will return a type error when committing this file:\n\n![ss1](https://i.imgur.com/ubLHL12.png)\n\n## Conclusion\n\nThat's all for setting up ESLint, Prettier, Husky, and Lint Staged with a minimal configuration. You can expand the configuration for any tools as per your needs or modify the pre-commit hook.\n",
            "url": "https://amanhimself.dev//blog/setup-nextjs-project-with-eslint-prettier-husky-lint-staged",
            "title": "Set up a Next.js project with ESLint, Prettier, Husky, and Lint Staged",
            "summary": "Set up a Next.js project with ESLint, Prettier, Husky, and Lint Staged",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/install-nodejs-using-nvm-on-macos-m1",
            "content_html": "---\ntitle: 'How to install Node.js using NVM on macOS M1'\ndate: '2022-02-06'\nslug: 'install-nodejs-using-nvm-on-macos-m1'\nthumbnail: '/thumbnails/node.png'\ntag: 'nodejs'\ncanonicalUrl: 'https://amanhimself.dev/blog/install-nodejs-using-nvm-on-macos-m1/'\n---\n\nNode.js can be installed in different ways. I recently started working on an organization repository that requires using different Node.js versions. Using [Node Version Manager (NVM)](https://github.com/nvm-sh/nvm) it is possible to switch between different Node.js versions on the fly. It also allows testing code with older Node.js versions.\n\nNVM is a shell script used for installing and managing Node.js on a Unix based system. It allows switching between different versions of Node.js via the command line quickly. It also works with any [POSIX](https://en.wikipedia.org/wiki/POSIX) shell such as `zsh`.\n\n## Prerequisites\n\nMake sure you have installed the following before proceeding:\n\n- [Command line tools](https://amanhimself.dev/blog/setup-macbook-m1/#xcode)\n- [Homebrew](https://amanhimself.dev/blog/setup-macbook-m1/#homebrew)\n- [Git](https://amanhimself.dev/blog/setup-macbook-m1/#git)\n- [zsh](https://amanhimself.dev/blog/setup-macbook-m1/#zsh-and-oh-my-zsh)\n\n## Remove existing installed Node.js version\n\n> This step is optional. If you haven't installed Node.js previously using Homebrew, skip this.\n\nIf you have an existing Node.js version installed, please remove it before installing NVM. For example, my machine already has a node version installed via Homebrew.\n\nOpen the terminal window and run:\n\n```shell\nbrew uninstall --ignore-dependencies node\nbrew uninstall --force node\n```\n\n## Install NVM via Homebrew\n\nInstall NVM using Homebrew:\n\n```shell\nbrew install nvm\n```\n\nAfter the above command runs, create a directory for NVM at the home working directory:\n\n```shell\nmkdir ~/.nvm\n```\n\nWhen using the `zsh` shell, add the following config inside `~/.zshrc`:\n\n```shell\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"/opt/homebrew/opt/nvm/nvm.sh\" ] && \\. \"/opt/homebrew/opt/nvm/nvm.sh\"  # This loads nvm\n[ -s \"/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm\" ] && \\. \"/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm\"  # This loads nvm bash_completion\n```\n\nNow, either restart the terminal app or execute `source ~/.zshrc` to re-load the latest config for the `zsh` shell from the file.\n\nRun the command `nvm --version` to verify. For example, if the config has loaded, this command would display a version.\n\n## Install Node.js via NVM\n\nNode.js is available in two different versions:\n\n- Long Term Support (LTS)\n- Current with latest features\n\nAlthough I used to love using the Current version with the latest features on my personal machine, I use the LTS version for work. At the time of writing this post, the current LTS version is `16`.\n\nRunning the command `nvm install node` would install the current version with the latest features.\n\nTo install the current LTS Node.js version, execute:\n\n```shell\nnvm install --lts\n```\n\nThen, verify the version by running:\n\n```shell\nnode --version\n\n# Output: v16.13.2\n```\n\n## Multiple Node.js versions\n\nTo install different versions of Node.js, you can run:\n\n```shell\n# nvm install Version-Number\nnvm install 14\n```\n\n## Use a specific Node.js version\n\nAfter installing multiple versions, use the command below to set a specific version as the default version and use it:\n\n```shell\nnvm use 16\n```\n\n## Uninstall a Node.js version\n\nBefore uninstalling a Node.js version, make sure it is not the active version or currently used version on the machine. Switch to a different version and then run the command:\n\n```shell\nnvm uninstall 14\n```\n",
            "url": "https://amanhimself.dev//blog/install-nodejs-using-nvm-on-macos-m1",
            "title": "How to install Node.js using NVM on macOS M1",
            "summary": "How to install Node.js using NVM on macOS M1",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/infinite-scroll-with-react-query-and-flatlist-in-react-native",
            "content_html": "---\ntitle: 'Implementing Infinite Scroll with React Query and FlatList in React Native'\ndate: '2022-01-30'\nslug: 'infinite-scroll-with-react-query-and-flatlist-in-react-native'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://blog.jscrambler.com/implementing-infinite-scroll-with-react-query-and-flatlist-in-react-native/'\n---\n\n> Originally published at [Jscrambler.com](https://blog.jscrambler.com/implementing-infinite-scroll-with-react-query-and-flatlist-in-react-native/)\n\nInfinite Scrolling is a way to implement pagination in mobile devices. It is common among mobile interfaces due to the limited amount of space. If you use social media applications like Instagram or Twitter, this implementation is commonly used across those apps.\n\nIn this tutorial, let's learn how to implement an infinite scroll using the FlatList component in React Native. To fetch data, we will use a real REST API service provided by [RAWG](https://rawg.io/apidocs). It is one of the largest video game databases, and they have a free tier when it comes to using their API for personal or hobby projects. React Query library will help us make the process of fetching data a lot smoother.\n\n## Prerequisites\n\nTo follow this tutorial, please make sure you have the following tools and utilities installed on your local development environment and have access to the services mentioned below:\n\n- [Node.js](https://nodejs.org/en/) version `12.x.x` or above installed\n- Have access to one package manager such as npm or yarn or npx\n- [RAWG API key](https://rawg.io/apidocs)\n\nYou can also check the [complete source code for this example is at this GitHub repo](https://github.com/amandeepmittal/react-native-examples/tree/main/infinite-scroll-with-react-query).\n\n## Creating a new React Native app\n\nTo create a new React Native app, let's generate a project using [create-react-native-app](https://github.com/expo/create-react-native-app) command-line tool. This tool helps create universal React Native apps, supports React Native Web, and you can use native modules. It is currently being maintained by the awesome Expo team.\n\nOpen up a terminal window and execute the following command:\n\n```shell\nnpx create-react-native-app\n\n# when prompted following questions\nWhat is your app named? infinite-scroll-with-react-query\nHow would you like to start › Default new app\n\n# navigate inside the project directory after it has been created\ncd infinite-scroll-with-react-query\n```\n\nThen, let's install all the dependencies that will be used to create the demo app. In the same terminal window:\n\n```shell\nyarn add native-base react-query && expo install react-native-safe-area-context react-native-svg\n```\n\nThis command should download all the required dependencies. To run the app in its vanilla state, you can execute either of the following commands (depending on the mobile OS you're using). These commands will build the app.\n\n```shell\n# for iOS\nyarn ios\n\n# for android\nyarn android\n```\n\n## Creating a Home Screen\n\nLet's create a new directory called `/src`. This directory will contain all the code related to the demo app. Inside it, create a sub-directory called `/screens` that will contain the component file, `HomeScreen.js`.\n\nIn this file, let's add some JSX code to display the title of the app screen.\n\n```js\nimport React from 'react';\nimport { Box, Text, Divider } from 'native-base';\n\nexport const HomeScreen = () => {\n  return (\n    <Box flex={1} safeAreaTop backgroundColor=\"white\">\n      <Box height={16} justifyContent={'center'} px={2}>\n        <Text fontSize={28} fontWeight={'600'} color={'emerald.500'}>\n          Explore Games\n        </Text>\n      </Box>\n      <Divider />\n    </Box>\n  );\n};\n```\n\nThe `Box` component from NativeBase is a generic component. It comes with many props, a few of them are to apply SafeAreaView of the device. The prop `safeAreaTop` applies padding from the top of the device's screen. One advantage of using the NativeBase library is its built-in components provide props like handling safe area views.\n\nMost NativeBase components also use utility props for most commonly used styled properties such as `justifyContent`, `backgroundColor`, etc., and shorthands for these utility props such as `px` for padding horizontal.\n\n## Setting up providers\n\nBoth NativeBase and React Query libraries require their corresponding providers to set up at the root of the app. Open the `App.js` file and add the following:\n\n```js\nimport React from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { NativeBaseProvider } from 'native-base';\nimport { QueryClient, QueryClientProvider } from 'react-query';\n\nimport { HomeScreen } from './src/screens/HomeScreen';\n\nconst queryClient = new QueryClient();\n\nexport default function App() {\n  return (\n    <>\n      <StatusBar style=\"auto\" />\n      <NativeBaseProvider>\n        <QueryClientProvider client={queryClient}>\n          <HomeScreen />\n        </QueryClientProvider>\n      </NativeBaseProvider>\n    </>\n  );\n}\n```\n\nAll the providers must wrap the entry point or the first screen of the application. In the above snippet, there is only one screen, so all the providers are wrapping `HomeScreen`.\n\nThe `QueryClientProvider` component provides an instance in the form of `QueryClient` that can be further used to interact with the cache.\n\nAfter modifying `App.js`, you will get the following output on a device:\n\n![ss1](https://i.imgur.com/aFep48m.png)\n\n## Add a Base URL to use RAWG REST API\n\nIf you want to continue reading this post and build along with the demo app, make sure you have access to the API key for your RAWG account. Once you've done that, create a new file called `index.js` inside the `/src/config` directory. This file will export the base url of the API and API key.\n\n```js\nconst BASE_URL = 'https://api.rawg.io/api';\n// Replace the Xs below with your own API key\nconst API_KEY = 'XXXXXX';\n\nexport { BASE_URL, API_KEY };\n```\n\nReplace the Xs in the above snippet with your own API key.\n\n## Fetching data from the API\n\nTo fetch the data, we will use JavaScript `fetch` API method. Create a new file called `index.js` inside `/src/api`. It will import the base url and the API key from the `/config` directory and expose a function that fetches the data.\n\n```js\nimport { BASE_URL, API_KEY } from '../config';\n\nexport const gamesApi = {\n  // later convert this url to infinite scrolling\n  fetchAllGames: () =>\n    fetch(`${BASE_URL}/games?key=${API_KEY}`).then(res => {\n      return res.json();\n    })\n};\n```\n\nNext, in the `HomeScreen.js` file, import React Query hook called `useQuery`. This hook accepts two arguments. The first argument is a unique key. This key is a unique identifier in the form of a string. It tracks the result of the query and caches it.\n\nThe second argument is a function that returns a promise. This promise is resolved when there is data or throws an error when there is something wrong when fetching the data. We've already created the promise function that fetches data asynchronously from the API's base Url in the form of `gamesApi.fetchAllGames()`. Let's import the `gamesApi` as well.\n\nInside the `HomeScreen`, let's call this hook to get the data.\n\n```js\nimport React from 'react';\nimport { Box, Text, FlatList, Divider, Spinner } from 'native-base';\nimport { useQuery } from 'react-query';\n\nimport { gamesApi } from '../api';\n\nexport const HomeScreen = () => {\n  const { isLoading, data } = useQuery('games', gamesApi.fetchAllGames);\n\n  const gameItemExtractorKey = (item, index) => {\n    return index.toString();\n  };\n\n  const renderData = item => {\n    return (\n      <Text fontSize=\"20\" py=\"2\">\n        {item.item.name}\n      </Text>\n    );\n  };\n\n  return isLoading ? (\n    <Box\n      flex={1}\n      backgroundColor=\"white\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <Spinner color=\"emerald.500\" size=\"lg\" />\n    </Box>\n  ) : (\n    <Box flex={1} safeAreaTop backgroundColor=\"white\">\n      <Box height={16} justifyContent={'center'} px={2}>\n        <Text fontSize={28} fontWeight={'600'} color={'emerald.500'}>\n          Explore Games\n        </Text>\n      </Box>\n      <Divider />\n      <Box px={2}>\n        <FlatList\n          data={data.results}\n          keyExtractor={gameItemExtractorKey}\n          renderItem={renderData}\n        />\n      </Box>\n    </Box>\n  );\n};\n```\n\nIn the above snippet, take a note that React Query comes with the implementation of request states such as `isLoading`. The `isLoading` state implies that there is no data and is currently in the \"fetching\" state. To improve the user experience, while the `isLoading` state is true, a loading indicator or a spinner component can be displayed (as did in the above snippet using the `Spinner` component from NativeBase).\n\nHere is the output after this step:\n\n![ss2](https://i.imgur.com/jSX1Aqu.gif)\n\n## Adding pagination to the API request\n\nThe `useInfiniteQuery` hook provided by the React Query library is a modified version of the `useQuery` hook. In addition to the request states such as `isLoading` and `data`, it utilizes a function to get the next page number using `getNextPageParam`.\n\nIn the case of RAWG REST API, the data fetch on each request contains the following keys:\n\n- `count`: the total count of games.\n- `next`: the url to the next page.\n- `previous`: the url of the previous page. Is `null` if the current page is first.\n- `results`: the array of items on an individual page.\n\nThe key names `next`, and `previous` will depend on the response structure of the API request. Make sure to check your data response what are the key names and what are their values.\n\nCurrently, the API request made in the `/api/index.js` file does not consider the number of the current page. Modify as shown below to fetch the data based on the page number.\n\n```js\nexport const gamesApi = {\n  // later convert this url to infinite scrolling\n  fetchAllGames: ({ pageParam = 1 }) =>\n    fetch(`${BASE_URL}/games?key=${API_KEY}&page=${pageParam}`).then(res => {\n      return res.json();\n    })\n};\n```\n\nThe addition `&page=${pageParam}` in the above snippet is how the `getNextPageParam` function will traverse to the next page if the current page number is passed in the request endpoint. Initially, the value of `pageParam` is `1`.\n\n## Using useInfiniteQuery hook\n\nLet's import the `useInfiniteQuery` hook in the `HomeScreen.js` file.\n\n```js\n// rest of the import statements remain same\nimport { useInfiniteQuery } from 'react-query';\n```\n\nNext, inside the `HomeScreen` component, replace the `useQuery` hook with the `useInfiniteQuery` hook as shown below. Along with the two arguments, the new hook will also contain an object as the third argument. This object contains the logic to fetch the data from the next page using the `getNextPageParam` function.\n\nThe function retrieves the page number of the next page. It accepts a parameter called `lastPage` that contains the response of the last query. As per the response structure we discussed earlier in the previous section, check the value of `lastPage.next`. If it is not `null`, return the next page's number. If it is `null`, return the response from the last query.\n\n```js\nconst { isLoading, data, hasNextPage, fetchNextPage } = useInfiniteQuery(\n  'games',\n  gamesApi.fetchAllGames,\n  {\n    getNextPageParam: lastPage => {\n      if (lastPage.next !== null) {\n        return lastPage.next;\n      }\n\n      return lastPage;\n    }\n  }\n);\n```\n\n## Implementing infinite scroll on FlatList\n\nIn the previous snippet, the `hasNextPage` and `fetchNextPage` are essential. The `hasNextPage` contains a boolean. If it is `true`, it indicates that more data can be fetched. The `fetchNextPage` is the function provided by the `useInfiniteQuery` to fetch the data of the next page.\n\nAdd a handle method inside the `HomeScreen` component called `loadMore`. This function will be used on the FlatList prop called `onEndReached`. This prop is called when the scroll position reaches a threshold value.\n\n```js\nconst loadMore = () => {\n  if (hasNextPage) {\n    fetchNextPage();\n  }\n};\n```\n\nAnother difference between `useInfiniteQuery` and `useQuery` is that the former's response structure includes an array of fetched pages in the form of `data.pages`. Using JavaScript `map` function, get the `results` array of each page.\n\nModify the `FlatList` component as shown below:\n\n```js\n<FlatList\n  data={data.pages.map(page => page.results).flat()}\n  keyExtractor={gameItemExtractorKey}\n  renderItem={renderData}\n  onEndReached={loadMore}\n/>\n```\n\nHere is the output after this step. Notice the scroll indicator on the right-hand side of the screen. As soon as it reaches a little below half of the list, it repositions itself. This repositioning indicates that the data from the next page is fetched by the `useInfiniteQuery` hook.\n\n![ss3](https://i.imgur.com/IiJMVA7.gif)\n\nThe default value of the threshold is `0.5`. This means that the `loadMore` will get triggered at the half-visible length of the list. To modify this value, you can add another prop, `onEndReachedThreshold`. It accepts a value between 0 and 1, where 0 is the end of the list.\n\n```js\n<FlatList\n  data={data.pages.map(page => page.results).flat()}\n  keyExtractor={gameItemExtractorKey}\n  renderItem={renderData}\n  onEndReached={loadMore}\n  onEndReachedThreshold={0.3}\n/>\n```\n\n## Display a spinner when fetching next page data\n\nAnother way to enhance the user experience is when the end of the list is reached, and the data of the next page is still being fetched (let's say, the network is weak). While the app user waits for the data, it is good to display a loading indicator.\n\nThe `useInfiniteQuery` hook provides a state called `isFetchingNextPage`. Its value will be true when the data from the next page is fetched using `fetchNextPage`.\n\nModify the `HomeScreen` component as shown below. The loading spinner renders when the value of `isFetchingNextPage` is true. The `ListFooterComponent` on the FlatList component is used to display the loading indicator at the end of the list items.\n\n```js\nexport const HomeScreen = () => {\n  const { isLoading, data, hasNextPage, fetchNextPage, isFetchingNextPage } =\n    useInfiniteQuery('games', gamesApi.fetchAllGames, {\n      getNextPageParam: lastPage => {\n        if (lastPage.next !== null) {\n          return lastPage.next;\n        }\n\n        return lastPage;\n      }\n    });\n\n  const loadMore = () => {\n    if (hasNextPage) {\n      fetchNextPage();\n    }\n  };\n\n  const renderSpinner = () => {\n    return <Spinner color=\"emerald.500\" size=\"lg\" />;\n  };\n\n  const gameItemExtractorKey = (item, index) => {\n    return index.toString();\n  };\n\n  const renderData = item => {\n    return (\n      <Box px={2} mb={8}>\n        <Text fontSize=\"20\">{item.item.name}</Text>\n      </Box>\n    );\n  };\n\n  return isLoading ? (\n    <Box\n      flex={1}\n      backgroundColor=\"white\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <Spinner color=\"emerald.500\" size=\"lg\" />\n    </Box>\n  ) : (\n    <Box flex={1} safeAreaTop backgroundColor=\"white\">\n      <Box height={16} justifyContent={'center'} px={2}>\n        <Text fontSize={28} fontWeight={'600'} color={'emerald.500'}>\n          Explore Games\n        </Text>\n      </Box>\n      <Divider />\n      <Box px={2}>\n        <FlatList\n          data={data.pages.map(page => page.results).flat()}\n          keyExtractor={gameItemExtractorKey}\n          renderItem={renderData}\n          onEndReached={loadMore}\n          onEndReachedThreshold={0.3}\n          ListFooterComponent={isFetchingNextPage ? renderSpinner : null}\n        />\n      </Box>\n    </Box>\n  );\n};\n```\n\nHere is the output:\n\n![ss4](https://i.imgur.com/uLmbrjC.gif)\n\n## Wrapping up\n\nIn this tutorial, you've successfully implemented infinite scroll using `useInfiniteQuery` from React Query. Using this library for fetching and managing data inside a React Native app takes away a lot of pain points. Make sure to check out the [Infinite Queries](https://react-query.tanstack.com/guides/infinite-queries) documentation here.\n\nYou can also check the [complete source code for this example is at this GitHub repo](https://github.com/amandeepmittal/react-native-examples/tree/main/infinite-scroll-with-react-query).\n",
            "url": "https://amanhimself.dev//blog/infinite-scroll-with-react-query-and-flatlist-in-react-native",
            "title": "Implementing Infinite Scroll with React Query and FlatList in React Native",
            "summary": "Implementing Infinite Scroll with React Query and FlatList in React Native",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/how-to-rename-default-branch-name-in-git-and-github",
            "content_html": "---\ntitle: 'How to rename default branch in Git and GitHub'\ndate: '2022-01-10'\nthumbnail: '/thumbnails/git.png'\nslug: 'how-to-rename-default-branch-name-in-git-and-github'\ntag: 'git'\ncanonicalUrl: 'https://amanhimself.dev/blog/how-to-rename-default-branch-name-in-git-and-github/'\n---\n\nI'm currently [maintaining a GitHub repo](https://github.com/amandeepmittal/react-native-examples) that has grown over the last year. It primarily contains all the example code that I create when working on React Native and Expo articles and tutorials.\n\nRecently, I switched the default branch to `main`. Here are the steps I took. All of these commands execute inside a terminal window.\n\nStart by moving the default branch locally using the `-m` flag.\n\n```shell\ngit branch -m master main\n```\n\nAbove, `master` is the old branch name and `main` is the new branch name.\n\nSet the new branch as the local default on the remote. By default, Git doesn't allow renaming a remote branch.\n\n```shell\ngit push -u origin main\n\n# output\n* [new branch]      main -> main\nBranch 'main' set up to track remote branch 'main' from 'origin'.\n```\n\nSet the current local HEAD branch to point to the new branch on GitHub.\n\n```shell\ngit remote set-head origin main\n```\n\nNow, go to the GitHub repo. Open Settings > Branches. Under Default Branch, click the edit button to switch to the `main` branch.\n\n![ss1](https://i.imgur.com/T9Mm8g5.png)\n\nNow, go back to the terminal window and run the following command to delete the previous default branch name.\n\n```shell\ngit push origin --delete master\n\n# output\nTo https://github.com/account/repo.git\n- [deleted]         master\n```\n\nThat's it!\n",
            "url": "https://amanhimself.dev//blog/how-to-rename-default-branch-name-in-git-and-github",
            "title": "How to rename default branch in Git and GitHub",
            "summary": "How to rename default branch in Git and GitHub",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/tamagui-for-react-native",
            "content_html": "---\ntitle: 'Tamagui for React Native: Create faster design systems'\nslug: 'tamagui-for-react-native'\ndate: '2022-01-09'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://blog.logrocket.com/tamagui-react-native-create-faster-design-systems/'\n---\n\n> Originally Published at [Blog.Logrocket.com](https://blog.logrocket.com/tamagui-react-native-create-faster-design-systems/) on December 24, 2021\n\nThe React Native system is gradually progressing towards solutions for sharing code between React Native and React Native web applications.\n\nOne recent addition to the React Native ecosystem is [Tamagui](https://tamagui.dev), a UI kit that includes a series of themes, media queries, and typed inline styles, as well as an optimizing compiler. Tamagui aims to close the gap between React Native and React Native web applications by covering the foundational elements of an app, like styling, theming, and providing cross-platform components, all while keeping the app’s performance in mind.\n\nIn this article, we’ll learn how to configure Tamagui in a React Native app and a React Native Web app, checking out the components it offers in its current state. Let’s get started!\n\n## Create a new React Native app\n\nWe’ll start by creating a new React Native project using [Expo CLI](https://docs.expo.dev/workflow/expo-cli/), which enhances the developer experience with tools in the React Native ecosystem, for example, a variety of templates. Choosing one of these templates is a great starting point for the demo app we’ll build in this tutorial. Open up a terminal window and execute the following command:\n\n```shell\nnpx expo init tamagui-app\n# after the project directory is created, navigate inside it\ncd tamagui-app\n```\n\nOn running the command, you’ll be prompted to choose a template. Choose `blank (TypeScript)`. It will create a project with minimal TypeScript configuration.\n\n## Installing dependencies\n\nAfter navigating inside the project directory, we’ll install the libraries required to configure Tamagui inside a React Native project. But first, run the following command from the terminal:\n\n```shell\nyarn add tamagui@1.0.0-alpha.37 @tamagui/babel-plugin@1.0.0-alpha.37\n```\n\nSince Tamagui is still in its alpha release, I'm using specific package versions. However, when a more stable version is released in the future, this may change. Be sure to refer to the [official documentation](https://tamagui.dev/docs/intro/installation) for the most up to date information on installing dependencies.\n\n`tamagui` is the UI kit, and `@tamagui/babel-plugin` is the babel plugin that loads the design system properties defined inside another file called `tamagui.config.ts`. You’ll need to create this file in the root of your project, but you can leave it blank for now. We’ll return to it later.\n\nThe `@unimodules/core` dependency is required by the Tamagui UI kit to work with an Expo project. Open the terminal window and execute the following command:\n\n```shell\nexpo install @unimodules/core\n```\n\nNext, we need to install dev dependencies to use Tamagui with Expo web. Open the terminal window and execute the command below:\n\n```shell\nyarn add -D @expo/webpack-config@0.16.14 esbuild-loader@2.17.0 tamagui-loader@1.0.0-alpha.37 thread-loader@3.0.4\n```\n\nAs before, we've installed packages with specific versions. In the `package.json` file, you’ll find the following summary of dependencies and dev dependencies that we installed:\n\n```json\n{\n  \"dependencies\": {\n    \"@tamagui/babel-plugin\": \"^1.0.0-alpha.37\",\n    \"@unimodules/core\": \"~7.2.0\",\n    \"expo\": \"~43.0.2\",\n    \"expo-status-bar\": \"~1.1.0\",\n    \"react\": \"17.0.2\",\n    \"react-dom\": \"17.0.2\",\n    \"react-native\": \"0.64.3\",\n    \"react-native-web\": \"0.17.5\",\n    \"tamagui\": \"^1.0.0-alpha.37\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.12.9\",\n    \"@types/react\": \"~17.0.21\",\n    \"@types/react-native\": \"~0.66.6\",\n    \"typescript\": \"~4.5.2\",\n    \"@expo/webpack-config\": \"^0.16.14\",\n    \"esbuild-loader\": \"^2.17.0\",\n    \"tamagui-loader\": \"^1.0.0-alpha.37\",\n    \"thread-loader\": \"^3.0.4\"\n  }\n}\n```\n\nNow that our dependencies are installed, add `@tamagui/babel-plugin` to the `babel.config.js` file:\n\n```js\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: [\n      [\n        '@tamagui/babel-plugin',\n        {\n          components: ['tamagui'],\n          config: './tamagui.config.ts'\n        }\n      ]\n    ]\n  };\n};\n```\n\nIn the code snippet above, ensure that the path defined for `config` is the relative path to the Tamagui config file. `components` contains an array of npm modules containing Tamagui components. For this example app, we're using Tamagui base components. Therefore, we don't need to add any further configuration.\n\n## Setting up Tamagui configuration\n\nTamagui lets you create themes, define tokens, add shorthands, and more. However, it requires you to describe all the properties and set up the foundation of a design system before you dive into building the components for your React Native app.\n\nTo set up the required Tamagui configuration, we’ll use the `createTamagui` function. We’ll need to define the following:\n\n- `tokens`: Generate variables in `theme` and `app`\n- `media`: Defines reusable responsive media queries\n- `themes`: Defines your design theme\n- `shorthands`: Allows you to define keys that expand the `style value` props. For example, you can define `f` for flex, `ai` for `alignItems`, `jc` for `justifyContent`, etc.\n\nYou can start setting up the configuration with the `size` and `space` properties. We’ll also need `defaultFont` using the `createFont` function with a configuration object that contains values for font `family`, `size`, `lineHeight`, `fontWeight`, and `letter spacing`.\n\nAll of the values above are used inside of the `createTokens` function, which allows you to create tokens, or the variables mapped to CSS variables at build time. The `createTokens` function requires the `size `, `space`, `font`, `color`, `radius`, and `zIndex` properties in its configuration object.\n\nThe code block below contains a minimal configuration that I've created for the demo app with all of the required properties:\n\n```ts\nimport { createFont, createTokens, createTamagui } from 'tamagui';\nconst size = {\n  0: 0,\n  1: 4,\n  2: 8\n};\nconst space = {\n  ...size,\n  '-0': -0,\n  '-1': -5\n};\nconst defaultFont = createFont({\n  family: 'Arial',\n  size: {\n    1: 14,\n    2: 18,\n    3: 22\n  },\n  lineHeight: {\n    1: 15,\n    2: 20\n  },\n  weight: {\n    4: '300',\n    7: '600'\n  },\n  letterSpacing: {\n    4: 0,\n    7: -1\n  }\n});\nconst tokens = createTokens({\n  size,\n  space,\n  font: {\n    title: defaultFont,\n    body: defaultFont\n  },\n  color: {\n    lightPurple: '#EDD2F3',\n    darkPurple: '#544179'\n  },\n  radius: {\n    0: 0,\n    1: 3,\n    2: 5,\n    3: 10,\n    4: 15,\n    5: 20\n  },\n  zIndex: {\n    0: 0,\n    1: 100,\n    2: 200,\n    3: 300,\n    4: 400,\n    5: 500\n  }\n});\nconst shorthands = {\n  ai: 'alignItems',\n  bg: 'backgroundColor',\n  br: 'borderRadius',\n  f: 'flex',\n  h: 'height',\n  jc: 'justifyContent',\n  m: 'margin',\n  p: 'padding',\n  w: 'width',\n  lh: 'lineHeight',\n  ta: 'textAlign'\n} as const;\nconst media = {\n  xs: { maxWidth: 660 },\n  gtXs: { minWidth: 660 + 1 },\n  sm: { maxWidth: 860 },\n  gtSm: { minWidth: 860 + 1 },\n  md: { minWidth: 980 },\n  gtMd: { minWidth: 980 + 1 },\n  lg: { minWidth: 1120 },\n  gtLg: { minWidth: 1120 + 1 },\n  xl: { minWidth: 1280 },\n  xxl: { minWidth: 1420 },\n  short: { maxHeight: 820 },\n  tall: { minHeight: 820 },\n  hoverNone: { hover: 'none' },\n  pointerCoarse: { pointer: 'coarse' }\n};\nconst config = createTamagui({\n  defaultTheme: 'light',\n  shorthands,\n  media,\n  tokens,\n  themes: {\n    light: {\n      bg: tokens.color.lightPurple\n    }\n  }\n});\ntype Conf = typeof config;\ndeclare module 'tamagui' {\n  interface TamaguiCustomConfig extends Conf {}\n}\nexport default config;\n```\n\n## Using Tamagui Provider\n\nTamagui configuration provides a [Tamagui.Provider](https://tamagui.dev/docs/intro/configuration#add-provider) component that wraps all the other components inside your app:\n\n```tsx\nimport React from 'react';\nimport Tamagui from './tamagui.config';\nexport default function App() {\n  return <Tamagui.Provider>{/* The rest of your app here */}</Tamagui.Provider>;\n}\n```\n\n## Tamagui views, utility props, and shorthands\n\nIn Tamagui, stacks are the core view elements for creating flex-based layouts. There are three different types of stacks available, `XStack`, `YStack`, and `ZStack`, and each implies a different axis.\n\nIn the example below, the `defaultTheme` takes the value of the theme you've defined in the config file. The `XStack` uses several shorthands; for example, `f` stands for `flex`, `ai` for `alignItems`, `jc` for `justifyContent`, and `bg` for `backgroundColor`.\n\nThe value of the `$bg` prop is also coming from the config file, where we’ve explicitly defined that the `bg` property for the `light` theme should have a particular color value. The value of `space` on the `YStack` is set to `$2` from the config file itself:\n\n```tsx\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { YStack, Text, XStack } from 'tamagui';\nimport Tamagui from './tamagui.config';\nexport default function App() {\n  return (\n    <Tamagui.Provider defaultTheme=\"light\">\n      <StatusBar style=\"dark\" />\n      <XStack f={1} ai=\"center\" jc=\"center\" bg=\"$bg\">\n        <YStack space=\"$2\">\n          <Text fontSize={20} marginBottom={20}>\n            Tamagui\n          </Text>\n          <Text fontSize={20}>Tamagui</Text>\n        </YStack>\n      </XStack>\n    </Tamagui.Provider>\n  );\n}\n```\n\nYou can further define shorthands for properties like `margin`, `marginBottom`, and `padding` and use them as utility props on components, giving you more control over your styles and themes, as seen in the following example\n\n![ss1](https://i.imgur.com/kZX0PQk.png)\n\n## Making Tamagui work on the web\n\nNow, we’ll take advantage of the `@expo/webpack-config` package that we installed earlier, which is used to create a custom webpack configuration. When running the `expo start --web` command, the Expo CLI checks whether the project has a custom webpack configuration in the root directory. If the project does not have a custom webpack configuration, Expo uses the default configuration.\n\nTo create our custom webpack configuration, we’ll first run the following command from a terminal window, which will create a `config` file for you to customize the webpack configuration. When you run this command, you’ll be prompted to choose from several options. Select the `webpack.config.js` option:\n\n```shell\nexpo customize:web\n```\n\nNext, add the custom configuration to the `webpack.config.js` file, as recommend by the [Tamagui documentation](http://(https://tamagui.dev/docs/intro/installation). The configuration will allow us to run `tamagui-loader` on the web:\n\n```js\nconst createExpoWebpackConfigAsync = require('@expo/webpack-config');\nmodule.exports = async function (env, argv) {\n      const config = await createExpoWebpackConfigAsync(env, argv);\n      // Customize the config before returning it.\n      // add TAMAGUI_TARGET = web to defines\n      const DefinePlugin = config.plugins.find(\n        x => x.constructor.name === 'DefinePlugin'\n      );\n      DefinePlugin.definitions\\['process.env'\\]['TAMAGUI_TARGET'] = `\"web\"`;\n      // replace babel-loader with our snackui + esbuild loaders\n      const rules = config.module.rules[1].oneOf;\n      const ruleIndex = rules.findIndex(x =>\n        x.use?.loader?.includes('babel-loader')\n      );\n      rules[ruleIndex] = {\n        test: /\\.(mjs|[jt]sx?)$/,\n        use: [\n          'thread-loader',\n          {\n            loader: require.resolve('esbuild-loader'),\n            options: {\n              loader: 'tsx',\n              target: 'es2019',\n              keepNames: true\n            }\n          },\n          {\n            loader: require.resolve('tamagui-loader'),\n            options: {\n              config: './tamagui.config.ts',\n              components: ['tamagui']\n            }\n          }\n        ]\n      };\n      return config;\n};\n```\n\nAfter adding the configuration, execute the command `yarn web` or `expo start --web`.\nYou’ll get the following output at `http://localhost:19006/`:\n\n![ss2](https://i.imgur.com/jlLUyaX.png)\n\n## Responsive styles using media queries\n\nYou can incorporate media queries directly in the UI elements of your app. After defining your media queries in the `tamagui.config.ts` file, you’ll use a Hook called `useMedia` provided by the library:\n\n```tsx\nimport { YStack, Text, XStack, useMedia } from 'tamagui';\n```\n\nNow, let's add a background color to `YStack`. The color value will vary on the screen's minimum width using the media query `md: { minWidth: 980 }`.\n\nIn the code snippet below, the `backgroundColor` value is set to `yellow` if the screen width is less than `980`, otherwise, it's set to `red`:\n\n```tsx\nexport default function App() {\n  const media = useMedia();\n  return (\n    <Tamagui.Provider defaultTheme=\"light\">\n      <StatusBar style=\"dark\" />\n      <XStack f={1} ai=\"center\" jc=\"center\" bg=\"$bg\">\n        <YStack\n          space=\"$2\"\n          width={200}\n          height={100}\n          p={10}\n          bg={media.md ? 'red' : 'yellow'}\n        >\n          <Text fontSize={media.md ? 32 : 18} marginBottom={20}>\n            Tamagui\n          </Text>\n          <Text fontSize={20}>React Native</Text>\n        </YStack>\n      </XStack>\n    </Tamagui.Provider>\n  );\n}\n```\n\nYou can check out the following example:\n\n![ss3](https://i.imgur.com/LpckfEH.png).\n\nSimilarly, the `fontSize` property also changes based on the media query, as seen in the example:\n\n![ss4](https://i.imgur.com/InzeIX3.gif)\n\n## Conclusion\n\nAlthough Tamagui is still in its [alpha release](https://tamagui.dev/docs/intro/releases), it provides [benchmarks](https://tamagui.dev/docs/intro/benchmarks) over other UI kits in the React Native space that support web and outperforms them. In this tutorial, we took a first look at Tamagui, learning the best way to configure it for different use cases.\n\nAs a developer, I'll be keeping a close eye on Tamagui’s development and growth. The idea of creating a custom design system from scratch to support both native and web platforms is both fascinating and useful. I hope you enjoyed this tutorial!\n",
            "url": "https://amanhimself.dev//blog/tamagui-for-react-native",
            "title": "Tamagui for React Native: Create faster design systems",
            "summary": "Tamagui for React Native: Create faster design systems",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/year-in-review-2021",
            "content_html": "---\ntitle: '2021 - A year in review'\nslug: 'year-in-review-2021'\ndate: '2021-12-31'\nthumbnail: '/thumbnails/writing.png'\ntag: 'year-review'\ncanonicalUrl: 'https://amanhimself.dev/blog/year-in-review-2021/'\n---\n\nAs we transition to 2022 and leave 2021 behind, it's a great time to reflect on the year passing by. It is my second year writing a [\"year review\"](https://amanhimself.dev/blog/year-rewind-2020/). It's fun for me to look back over what I did and what I focused on last year. I want to continue the tradition this year as well.\n\nI started this year in a burnout phase. I didn't feel like doing things that generally excite me. It took me a while to realize that I was in the phase. If you don't realize it, you won't know what hit you. Getting burned out from last year was not over. It takes time to accept it and get out of it. That's okay, and I'm glad I took my time.\n\nThat said, I focused on the areas I could or had the energy to do so. And I'm happy with the choices I've made so far.\n\n## Working as a Developer Advocate 🥑\n\nI got my first role in DevRel early this year from a career perspective. I started [working as a Developer Advocate at Draftbit](https://amanhimself.dev/blog/first-three-months-as-developer-advocate/). It was not something I was actively looking for, but I couldn't say no to it when the opportunity arrived. It was a significant change for me, the kind of change I needed without knowing.\n\nWorking as a Developer Advocate allowed me to learn a lot about different things, majorly about documentation and working in a fast-paced environment. Working closely with a team with a lot of experience and learning about moving pieces of a business is a precious addition to any technical career.\n\nMost of my work time was spent on writing content and leading documentation. Picking up pieces and trying to recognize the gaps were challenging. That's still a work in progress. For me, technical writing and blogging have been an integral part of my career. This year was better because I used my skills and experience and acquired more knowledge.\n\n## I wrote 43 articles ✍️\n\nWriting tech articles or tutorials is a gateway for me to engage with the tech community and keep me indulging in upcoming updates, starting conversations with people, and meeting new folks. I enjoy the process of writing and everything that comes with it. I still get to learn and share many long-form tutorials, but I also tried publishing a few short notes on this blog. Something that I haven't done in a long time and turns out people like to read them too.\n\nHere are some of the most popular posts I wrote this year:\n\n- [Setup Macbook M1 for Web and React Native development](https://amanhimself.dev/blog/setup-macbook-m1/): one of the most read blog posts. I'm glad I wrote it. The process of setting up a new laptop thrice a year can be daunting (the laptop that I bought at the start of this year went dead for no apparent reason, and then I had to buy a replacement for it while it went for repair, fun times 😬). I'm also actively updating this post and will continue to do so for a while.\n\n- [How to Create a Custom Image Gallery in React Native](https://amanhimself.dev/blog/custom-preview-image-gallery-in-react-native/) In this tutorial, I talk about how to create a custom gallery of images using react-native-snap-carousel and FlatList component from React Native. The FlatList is used to display the thumbnail view for each image below the carousel. The construction of the syncing part between the two is to add functionality such that when an image in the carousel is scrolled either left or right, the thumb in the FlatList is also going to be scrolled along with it. To achieve this synchronization between the two, I used React Hooks.\n\n- [How to use shared element transitions in React Native](https://amanhimself.dev/blog/shared-element-transitions/) I learned a bit about using Shared Elements in React Native and React Navigation. Transitions in mobile applications provide design continuity. This continuity is provided by connecting common elements from one view to the next while navigating in the app. I wrote about the process of doing that in this post.\n\n- [How to Create a Custom Tab Bar in React Native](https://amanhimself.dev/blog/create-custom-tab-bar-in-react-native/) Another post that I was excited to work on. Creating a custom tab bar using Bottom Tab Navigator from React Navigation and Blur View.\n\nMy personal blog is one of the most consistent things in my life. I didn't run experiments on it, move to a new framework, or try a complete overhaul. It is still flawed. I have an ongoing list of things that I'd like to implement as I find myself writing more active over the years. I also love that people like to visit it and read the content I share here.\n\nOverall, I got a pretty consistent readership this year with over 90k+ views:\n\n![ss1](https://i.imgur.com/0gGHK68.png)\n\nIt is also interesting to see that what’s driving most of the traffic is old articles:\n\n![ss3](https://i.imgur.com/msuWpjr.png)\n\nAnd, also that visitors are coming mostly through organic search:\n\n![ss4](https://i.imgur.com/xErLMj1.png)\n\nI still cross-post stuff at times on [Medium](https://medium.com/@amanhimself), [Dev.to](https://dev.to/amanhimself) and [Hashnode](https://amanhimself.hashnode.dev/). Not as much as I would like to, but I am eager to explore Hashnode more next year.\n\nDev.to has been my focus on cross-posting this year. I did manage to get 70k+ views and 15k followers.\n\n![ss2](https://i.imgur.com/B8tQxBN.png)\n\n## I spoke at a few events 🗣\n\nGiving talks or speaking is not my strongest asset, and I used to find it quite challenging (at least in my head). Although, after going through some appearances, I did find it quite satisfying.\n\nThanks to React Day Bangalore for inviting me for a panel discussion on React Native. It's on [YouTube](https://www.youtube.com/watch?v=_HKzhe8f47Y). I also [gave workshops](https://amanhimself.dev/speaking) due to my role of working as a Developer Advocate.\n\nI also got invited [to speak at a Twitter space](https://twitter.com/TheAnkurTyagi/status/1465624585773228034). Thanks to my friend Ankur ([@TheAnkurTyagi](https://twitter.com/TheAnkurTyagi/)) for the invitation and hosting it. We talked about tech writing and its impact on being a Developer Advocate role and working with startups.\n\n## Highlights from my GitHub 🐙\n\nLast year, I started to maintain [a single GitHub repo](https://github.com/amandeepmittal/react-native-examples) for all the demos and example apps I write using React Native and Expo. These example apps are part of the tutorials you see on this blog. I continued to do it this year as well.\n\nAnother thing I maintain is an [Expo Community project](https://github.com/expo-community/expo-firebase-starter) that integrates Firebase JS SDK in an Expo app. Since the Expo SDK's exponential growth in the past year with the awesome tooling, Developer Experience (DX), and support for native modules, I have some thoughts on what changes I'll be doing next year. Keep an eye on this [GitHub repo](https://github.com/expo-community/expo-firebase-starter).\n\nI also got my first [GitHub sponsor](https://twitter.com/amanhimself/status/1454352509124820994) this year 🤩\n\n## Newsletter saga continues 💌\n\nI failed to run my [weekly newsletter](https://www.getrevue.co/profile/amanhimself). First, it became bi-weekly and then monthly. It's all due to my inconsistency in sending out and not managing my time with publishing posts. However, it did grow to 1319 subscribers from 1201 last year. I appreciate folks who stick around after me being inconsistent enough to deliver.\n\nI did move it from Substack to Revue after Twitter acquired Revue. With Revue, I like the experience so far. I've been using it for three months and have sent three newsletters. Anyone using Twitter can now easily subscribe from [my Twitter profile](https://twitter.com/amanhimself). Thanks to my buddy [Scott Spence](https://twitter.com/spences10) who showed me how easy it was to migrate to Revue. If you're on Twitter, then give Scott a follow. He's an amazing person, an experienced developer, and he creates awesome content in the Web Dev space.\n\n## Reading 📚\n\nI did manage to go through some good books this year. Here are some of my picks that I enjoyed reading:\n\n- [Getting Started in Developer Relations by Sam Julien](https://www.goodreads.com/book/show/57735972-getting-started-in-developer-relations) - One of the best resources I read starting out. Sam concisely talks about what a Dev Rel/Advocacy role is about, the skillset, the mindset, and some red flags when seeking a role like this one. I highly recommend this book.\n- [The Business Value of Developer Relations: How and Why Technical Communities Are Key to Your Success](https://www.goodreads.com/book/show/40167835-the-business-value-of-developer-relations) - It goes more in-depth and talks about the importance of nurturing a community, maintaining positive relations, building a team of DevRels, and much more.\n- [Before the Coffee Gets Cold: Tales from the Café](https://www.goodreads.com/book/show/54373691-before-the-coffee-gets-cold) - I've only one word for it: mesmerizing!\n\n## Travelling\n\nDuring the end of the year, I managed to get out of New Delhi for the first time in two years for a [weekend trip](https://www.instagram.com/p/CXsVqr9lJyY/):\n\n![ss5](https://i.imgur.com/qRBwCNO.jpg)\n\n## Wrapping up\n\nEven though I have been inconsistent with my personal goals this year, failing to achieve many of them, yet, there is a lot of things when I look back at this year that I did and the choices I made, I am glad it happened.\n\nThank you for reading this post and reading any other post, opening and reading email newsletters, reading my tweets on Twitter, and listening to me 🙏\n\nHave a great 2022!\n",
            "url": "https://amanhimself.dev//blog/year-in-review-2021",
            "title": "2021 - A year in review",
            "summary": "2021 - A year in review",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/show-hide-password-in-react-native-using-custom-hook",
            "content_html": "---\ntitle: 'Create a custom hook to Show/Hide Password Visibility in React Native'\ndate: '2021-12-11'\nthumbnail: '/thumbnails/expo.png'\nslug: 'show-hide-password-in-react-native-using-custom-hook'\ntag: 'expo'\ncanonicalUrl: 'https://amanhimself.dev/blog/show-hide-password-in-react-native-using-custom-hook/'\n---\n\nBuilding login and signup forms in a React Native app comprise input fields and buttons. One field that you will often find yourself adding to these forms is the password field. This password field is composed of using React Native's `TextInput` component.\n\nThe common behavior of this field is to hide a user's password behind obscure characters.\n\nTake a look at an example of the `TextInput` component that is used to create a password field.\n\n```js\nimport React, { useState } from 'react';\nimport { StyleSheet, TextInput, View } from 'react-native';\n\nexport default function App() {\n  const [password, setPassword] = useState('');\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.inputContainer}>\n        <TextInput\n          style={styles.inputField}\n          name='password'\n          placeholder='Enter password'\n          autoCapitalize='none'\n          autoCorrect={false}\n          textContentType='newPassword'\n          secureTextEntry\n          value={password}\n          enablesReturnKeyAutomatically\n          onChangeText={text => setPassword(text)}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F5EEDC',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingHorizontal: 12\n  },\n  inputContainer: {\n    backgroundColor: 'white',\n    width: '100%',\n    borderRadius: 8,\n    flexDirection: 'row',\n    alignItems: 'center',\n    borderWidth: 4,\n    borderColor: '#d7d7d7'\n  },\n  inputField: {\n     padding: 14,\n    fontSize: 22,\n    width: '90%'\n  }\n  }\n});\n```\n\nIt uses the `secureTextEntry` prop such that when a text value is entered in the input field, it is unclear what is being entered in that field.\n\nHere is the output of the above snippet on a device:\n\n![ss1](https://i.imgur.com/kn0yv9z.gif)\n\nHowever, giving an option to a user to let them see the current value they enter could lead to a good experience and might be necessary in some cases.\n\n## Show or Hide Password Visibility Hook\n\nTo add the ability to show or hide the password field's visibility, let's create a custom hook in a new file called `useTogglePasswordVisibility.js`.\n\nStart by importing the `useState` hook from React library. You will need to create two different state variables to toggle between the field's visibility and change the icon.\n\nThen define a function called `useTogglePasswordVisibility`. Inside this function, create two new state variables. The first one is called `passwordVisibility`. Its initial value is set to boolean `true`. The reason is that this variable will be the value of the prop `secureTextEntry` on the `TextInput` component. You would want to hide the password field initially when the user enters the password in the input field.\n\nThe second state variable defined is called `rightIcon`. It has a default value of `eye`. This value depends on the Icon Library you're using in your React Native app. For this example, I'm using **MaterialCommunityIcons** from [Expo Vector Icons](https://docs.expo.dev/guides/icons/).\n\n```js\nexport const useTogglePasswordVisibility = () => {\n  const [passwordVisibility, setPasswordVisibility] = useState(true);\n  const [rightIcon, setRightIcon] = useState('eye');\n\n  // ...\n};\n```\n\nNext, add a method called `handlePasswordVisibility` that will allow the app user to toggle the password field's visibility between shown and hidden state.\n\nLastly, do not forget to return all the variables and the handler method.\n\n```js\nexport const useTogglePasswordVisibility = () => {\n  const [passwordVisibility, setPasswordVisibility] = useState(true);\n  const [rightIcon, setRightIcon] = useState('eye');\n\n  const handlePasswordVisibility = () => {\n    if (rightIcon === 'eye') {\n      setRightIcon('eye-off');\n      setPasswordVisibility(!passwordVisibility);\n    } else if (rightIcon === 'eye-off') {\n      setRightIcon('eye');\n      setPasswordVisibility(!passwordVisibility);\n    }\n  };\n\n  return {\n    passwordVisibility,\n    rightIcon,\n    handlePasswordVisibility\n  };\n};\n```\n\n## Use the Password Visibility Hook\n\nStart by updating import statements in the `App.js` file:\n\n```js\nimport React, { useState } from 'react';\nimport { StyleSheet, Pressable, TextInput, View } from 'react-native';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\nimport { useTogglePasswordVisibility } from './hooks/useTogglePasswordVisibility';\n```\n\nNext, access the required variables and method from the `useTogglePasswordVisibility` hook. Add the following line at the top of the `App` component:\n\n```js\nexport default function App() {\n  const { passwordVisibility, rightIcon, handlePasswordVisibility } =\n    useTogglePasswordVisibility();\n  const [password, setPassword] = useState('');\n\n  // ...\n}\n```\n\nModify the `TextInput` component's prop. Make sure to add the `passwordVisibility` as the value to the `secureTextEntry` prop.\n\n```js\n<TextInput\n  secureTextEntry={passwordVisibility}\n  // ... rest of the props remain unchanged\n/>\n```\n\nInside the `View` component that wraps the `TextInput`, add a button using the `Pressable` component. This button will allow the user to toggle between the hidden and shown state of the password field.\n\nThis button wraps the icon component.\n\n```js\n<View style={styles.inputContainer}>\n  {/* After TextInput component */}\n  <Pressable onPress={handlePasswordVisibility}>\n    <MaterialCommunityIcons name={rightIcon} size={22} color=\"#232323\" />\n  </Pressable>\n</View>\n```\n\nThat's all! Here is the output after this step:\n\n![ss2](https://i.imgur.com/rTNH2Ud.gif)\n\nHere is the complete code for the `App.js` file:\n\n```js\nimport React, { useState } from 'react';\nimport { StyleSheet, Pressable, TextInput, View } from 'react-native';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\nimport { useTogglePasswordVisibility } from './hooks/useTogglePasswordVisibility';\n\nexport default function App() {\n  const { passwordVisibility, rightIcon, handlePasswordVisibility } =\n    useTogglePasswordVisibility();\n  const [password, setPassword] = useState('');\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.inputContainer}>\n        <TextInput\n          style={styles.inputField}\n          name=\"password\"\n          placeholder=\"Enter password\"\n          autoCapitalize=\"none\"\n          autoCorrect={false}\n          textContentType=\"newPassword\"\n          secureTextEntry={passwordVisibility}\n          value={password}\n          enablesReturnKeyAutomatically\n          onChangeText={text => setPassword(text)}\n        />\n        <Pressable onPress={handlePasswordVisibility}>\n          <MaterialCommunityIcons name={rightIcon} size={22} color=\"#232323\" />\n        </Pressable>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F5EEDC',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingHorizontal: 12\n  },\n  inputContainer: {\n    backgroundColor: 'white',\n    width: '100%',\n    borderRadius: 8,\n    flexDirection: 'row',\n    alignItems: 'center',\n    borderWidth: 4,\n    borderColor: '#d7d7d7'\n  },\n  inputField: {\n    padding: 14,\n    fontSize: 22,\n    width: '90%'\n  }\n});\n```\n\n[Source code at this GitHub repo](https://github.com/amandeepmittal/react-native-examples/tree/master/custom-hook-password-toggle)\n",
            "url": "https://amanhimself.dev//blog/show-hide-password-in-react-native-using-custom-hook",
            "title": "Create a custom hook to Show/Hide Password Visibility in React Native",
            "summary": "Create a custom hook to Show/Hide Password Visibility in React Native",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/safe-area-context-in-react-native-apps",
            "content_html": "---\ndate: '2021-10-14'\ntitle: 'How to avoid notches with Safe Area Context in React Native apps'\nthumbnail: '/thumbnails/react.png'\nslug: 'safe-area-context-in-react-native-apps'\ntag: 'expo'\ncanonicalUrl: 'https://amanhimself.dev/blog/safe-area-context-in-react-native-apps/'\n---\n\nMost devices nowadays come with a notch or some kind of status bar. Therefore, when building a mobile application using React Native, it is vital to ensure that the content of an app screen is rendered correctly across different types of devices.\n\nIn this article, let's take a look at two different approaches to make app screens in React Native to avoid the content being positioned behind a notch or status bar.\n\nThe first approach will discuss `SafeAreaView` component from React Native components API. The second approach will discuss the advantage of using [react-native-safe-area-context](https://github.com/th3rdwave/react-native-safe-area-context#readme) open source library and how it provides a cross-platform solution.\n\n## The Notch Problem\n\nWhen you are starting to build a screen in React Native app, you might add use the following code snippet to display text:\n\n```js\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport const HomeScreen = () => {\n  return (\n    <View style={[styles.container]}>\n      <View style={{ backgroundColor: 'blue' }}>\n        <Text style={{ fontSize: 28, color: 'white' }}>Hello World</Text>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'red'\n  }\n});\n```\n\nThe above code snippet has a parent `View` component with a background color of `red`. It wraps another `View` component with a background color of `blue` that contains a `Text` component to display some text on the screen.\n\nThis will display the content of the app screen on an iOS device as shown below:\n\n![ss1](https://i.imgur.com/Qfizjpr.png)\n\nThe contents of the nested `View` component hides behind the status bar and the notch on the iOS device.\n\nOn an Android device, the behavior is exactly the same:\n\n![ss2](https://i.imgur.com/RY1tEfz.png)\n\n## How to Use the SafeAreaView component from React Native\n\nOne approach is to use [SafeAreaView component](https://reactnative.dev/docs/safeareaview) available in React Native.\n\n```js\nimport { SafeAreaView } from 'react-native';\n```\n\nIt can be used in the place of the top-level `View` component. It renders content within the safe area boundaries around the nested content and automatically applies padding.\n\nModify the previous code snippet:\n\n```js\nimport React from 'react';\nimport { StyleSheet, Text, View, SafeAreaView } from 'react-native';\n\nexport const HomeScreen = () => {\n  return (\n    <SafeAreaView style={[styles.container]}>\n      <View style={{ backgroundColor: 'blue' }}>\n        <Text style={{ fontSize: 28, color: 'white' }}>Hello World</Text>\n      </View>\n    </SafeAreaView>\n  );\n};\n```\n\nIt works perfectly on iOS:\n\n![ss3](https://i.imgur.com/Mve0Nhu.png)\n\nIn React Native, this component is only applicable to iOS devices with iOS version 11 or later. Unfortunately, that means it doesn't work for Android devices as the screen's content is still behind the status bar.\n\n## How to Use React Native's Safe Area Context Library\n\nTo use a cross-platform solution to handle safe areas on notch devices, there is a library called [react-native-safe-area-context](https://github.com/th3rdwave/react-native-safe-area-context). It provides a flexible API to handle safe area insets in JS and works on iOS, Android, and Web.\n\nStart by installing it in your React Native app:\n\n```shell\n# for plain React Native apps\nyarn add react-native-safe-area-context\n\n# install pod dependency for iOS only\nnpx pod-install\n\n# for Expo apps\nexpo install react-native-safe-area-context\n```\n\nThis library provides a `SafeAreaProvider` that needs to wrap either your Root Navigator or the screen where you want to handle safe area insets.\n\nFor example, in the code snippet below, the `SafeAreaProvider` wraps the `HomeScreen` component since there is only one screen in the example app.\n\n```js\nimport React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport { HomeScreen } from './src/screens';\n\nexport default function App() {\n  return (\n    <SafeAreaProvider>\n      <HomeScreen />\n    </SafeAreaProvider>\n  );\n}\n```\n\nNow, you can import the `SafeAreaView` component from the `react-native-safe-area-context` library and replace it with the one from React Native.\n\n```js\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nexport const HomeScreen = () => {\n  return (\n    <SafeAreaView style={[styles.container]}>\n      <View style={{ backgroundColor: 'blue' }}>\n        <Text style={{ fontSize: 28, color: 'white' }}>Hello World</Text>\n      </View>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'red'\n  }\n});\n```\n\nIt works both for iOS and Android:\n\n![ss4](https://i.imgur.com/lfOTL3J.png)\n\nIf you give the nested `View` component, a property of `flex: 1` as:\n\n```js\n<View style={{ backgroundColor: 'blue', flex: 1 }}>\n```\n\nYou can observe the safe are edges for iOS:\n\n![ss5](https://i.imgur.com/86uwW7N.png)\n\nThe `SafeAreaView` acts like a regular `View` component from React Native and includes additional padding to position the content after the notch or the status bar of a device.\n\nIt also comes with an `edges` prop that customizes safe area insets around different edges such as top, bottom, left, and right.\n\n## How to Use the useSafeAreaInsets Hook\n\nAnother advantage of using this library is that it provides a hook called `useSafeAreaInsets`. It offers more flexibility. It also gives more control, and you can apply padding for each edge using a property from this hook. For example, a `View` component below uses only wants the padding to be applied at the top edge:\n\n```js\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nexport const HomeScreen = () => {\n  const insets = useSafeAreaInsets();\n\n  return (\n    <View\n      style={{\n        paddingTop: insets.top\n      }}\n    >\n      {children}\n    </View>\n  );\n};\n```\n\n## Conclusion\n\nHandling status bars and notches across different devices become seamless with the [react-native-safe-area-context](https://github.com/th3rdwave/react-native-safe-area-context#readme) library. Try it out in your next React Native app.\n\n_[Source code at this GitHub repository](https://github.com/amandeepmittal/react-native-examples/tree/master/rnSplashAndIconExample)_\n\n_This post was also published at [freeCodeCamp](https://www.freecodecamp.org/news/how-to-use-safe-area-context-to-avoid-notches-in-react-native-apps/)._\n",
            "url": "https://amanhimself.dev//blog/safe-area-context-in-react-native-apps",
            "title": "How to avoid notches with Safe Area Context in React Native apps",
            "summary": "How to avoid notches with Safe Area Context in React Native apps",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/how-to-configure-vscode-bracket-colors-natively",
            "content_html": "---\ntitle: 'How to configure VSCode Bracket Pair Colors Natively'\ndate: '2021-10-12'\nslug: 'how-to-configure-vscode-bracket-colors-natively'\nthumbnail: '/thumbnails/vscode.png'\ntag: 'tools'\ncanonicalUrl: 'https:/amanhimself.dev/blog/how-to-configure-vscode-bracket-colors-natively/'\n---\n\n![cover image](https://res.cloudinary.com/practicaldev/image/fetch/s--lgaAXnJK--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r84rtekdnk3qd4r4v31e.png)\n\nWith an [update in August 2021](https://code.visualstudio.com/updates/v1_60#_high-performance-bracket-pair-colorization), VSCode started supporting Bracket pair colorization natively. It means there is no need to use the [Bracket Pair Colorizer](https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer) extension (_which I love_).\n\nIn their official announcement, the VSCode team states they choose to implement this feature natively to address performance issues.\n\nI recently uninstalled the extension and thought, let's try to use the editor without any bracket color extension. I cannot. I've been using the extension [as long as I remember](https://amanhimself.dev/blog/how-i-configure-vscode-for-everything/) and I cannot go back to plain, colorless brackets.\n\n![ss1](https://i.imgur.com/JBOVcnV.png)\n\nTo enable this setting, open the `settings.json` file for the VSCode editor and add the following:\n\n```json\n{\n  // ...\n  \"editor.bracketPairColorization.enabled\": true,\n  \"workbench.colorCustomizations\": {\n    \"editorBracketHighlight.foreground1\": \"#ffb86c\",\n    \"editorBracketHighlight.foreground2\": \"#8be9fd\",\n    \"editorBracketHighlight.foreground3\": \"#bd93f9\",\n    \"editorBracketHighlight.foreground4\": \"#50fa7b\",\n    \"editorBracketHighlight.foreground5\": \"#f1fa8c\",\n    \"editorBracketHighlight.foreground6\": \"#abb2c0\",\n    \"editorBracketHighlight.unexpectedBracket.foreground\": \"#ff5555\"\n  }\n}\n```\n\nAnd tweak the colors according to your style!\n\n![ss2](https://i.imgur.com/tSgx02e.png)\n\nBy the way, the above colors are from [Dracula theme's 🧛‍♂️ color palette](https://draculatheme.com/contribute) to match the overall editor theme I am currently using.\n",
            "url": "https://amanhimself.dev//blog/how-to-configure-vscode-bracket-colors-natively",
            "title": "How to configure VSCode Bracket Pair Colors Natively",
            "summary": "How to configure VSCode Bracket Pair Colors Natively",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/how-to-add-a-splash-screen-and-app-icon-in-react-native-with-react-native-bootsplash",
            "content_html": "---\ntitle: 'How to add Splash Screen and an App Icon in React Native'\ndate: '2021-10-01'\nslug: 'how-to-add-a-splash-screen-and-app-icon-in-react-native-with-react-native-bootsplash'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://blog.jscrambler.com/how-to-add-a-splash-screen-and-app-icon-in-react-native/'\n---\n\n![cover_image](https://blog.jscrambler.com/content/images/2021/09/jscrambler-blog-how-to-add-splash-screen-and-app-icon.jpg)\n\n> [Originally Published at Jscrambler's Blog](https://blog.jscrambler.com/how-to-add-a-splash-screen-and-app-icon-in-react-native/).\n\nEvery mobile application has a splash screen and an app icon, and together they provide the first impression. An app icon is displayed in various places, such as on an app store, on the device's app drawer, etc., whereas a splash screen is shown during the app startup. Adding a splash screen or an app icon to a React Native app can be an agile process.\n\nIn this tutorial, let's learn how to use an awesome package called [react-native-bootsplash](https://github.com/zoontek/react-native-bootsplash) to display a splash screen when an app starts and then learn the process of adding app icons in a React Native app.\n\n## Prerequisites\n\nTo follow this tutorial, please make sure you have the following tools and utilities installed on your local development environment and have access to the services mentioned below:\n\n- [Node.js](https://nodejs.org/en/) version `12.x.x` or above installed\n- Have access to one package manager such as npm or yarn or npx\n- [react-native-cli](https://www.npmjs.com/package/react-native-cli) installed, or use npx\n\nNote, the example app is created using React Native version `0.65.x`.\n\n[**Complete source code for this example is at this GitHub repo**](https://github.com/amandeepmittal/react-native-examples/tree/master/rnSplashAndIconExample)\n\n## Setup a React Native app\n\nAs an example for this tutorial, we will use a React Native project with two screens and React Navigation integrated.\n\nTo create a new React Native project and install the react-navigation dependencies, run the following command from the terminal window:\n\n```shell\nnpx react-native init myAwesomeApp\n\n# after the project directory is created\n# navigate inside the directory\n# and install the following dependencies\n\nyarn add @react-navigation/native @react-navigation/native-stack react-native-safe-area-context react-native-screens\n```\n\nInside `src/` directory, create a new directory called `navigation/` with a new file named `RootNavigator.js`. Add the following code to use the stack navigation pattern inside this file:\n\n```js\nimport * as React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nimport HomeScreen from '../screens/HomeScreen';\nimport DetailScreen from '../screens/DetailScreen';\n\nconst Stack = createNativeStackNavigator();\n\nconst RootNavigator = () => {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator screenOptions={{ headerShown: false }}>\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Details\" component={DetailScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n};\n\nexport default RootNavigator;\n```\n\nModify the `App.js` file:\n\n```js\nimport React from 'react';\n\nimport RootNavigator from './src/navigation/RootNavigator';\n\nconst App = () => {\n  return <RootNavigator />;\n};\n\nexport default App;\n```\n\nNow, let’s create two new screens. Start by creating a new directory called `src/screens/` and inside it, add the first file with the name `HomeScreen.js` and with the following code snippet:\n\n```js\nimport React from 'react';\nimport { View, Text, StyleSheet, Pressable } from 'react-native';\n\nconst HomeScreen = ({ navigation }) => {\n  return (\n    <View style={styles.screenContainer}>\n      <Text style={styles.title}>Home Screen</Text>\n      <Pressable\n        style={styles.buttonStyle}\n        onPress={() => navigation.navigate('Details')}\n      >\n        <Text style={styles.buttonTextStyle}>Go To Detail Screen</Text>\n      </Pressable>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  screenContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#fff'\n  },\n  title: {\n    fontSize: 32\n  },\n  buttonStyle: {\n    height: 54,\n    width: '80%',\n    marginTop: 32,\n    borderRadius: 8,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#2EE59D',\n    shadowRadius: 5,\n    shadowOpacity: 0.7,\n    shadowColor: 'rgba(46, 229, 157, 0.5)',\n    shadowOffset: {\n      width: 0,\n      height: 3\n    }\n  },\n  buttonTextStyle: {\n    color: '#fdfdfd',\n    fontWeight: '700'\n  }\n});\n\nexport default HomeScreen;\n```\n\nNow, add the second screen component file, `DetailScreen.js`, and the following code snippet:\n\n```js\nimport React from 'react';\nimport { View, Text, StyleSheet, Pressable } from 'react-native';\n\nconst DetailScreen = ({ navigation }) => {\n  return (\n    <View style={styles.screenContainer}>\n      <Text style={styles.title}>Detail Screen</Text>\n      <Pressable\n        style={styles.buttonStyle}\n        onPress={() => navigation.navigate('Home')}\n      >\n        <Text style={styles.buttonTextStyle}>Go To Home Screen</Text>\n      </Pressable>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  screenContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#fff'\n  },\n  title: {\n    fontSize: 32\n  },\n  buttonStyle: {\n    height: 54,\n    width: '80%',\n    marginTop: 32,\n    borderRadius: 8,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#2EE59D',\n    shadowRadius: 5,\n    shadowOpacity: 0.7,\n    shadowColor: 'rgba(46, 229, 157, 0.5)',\n    shadowOffset: {\n      width: 0,\n      height: 3\n    }\n  },\n  buttonTextStyle: {\n    color: '#fdfdfd',\n    fontWeight: '700'\n  }\n});\n\nexport default DetailScreen;\n```\n\nWith the boilerplate setup done, now let’s build the apps for iOS and Android.\n\nFor iOS, run the following command:\n\n```shell\nnpx react-native run-ios\n```\n\nFor Android, run the following command:\n\n```shell\nnpx react-native run-android\n```\n\nHere is what the example app looks like in its current form. Notice that the splash screen and the app icon are defaults that come with React Native.\n\n![js1](https://i.imgur.com/dh7TYQF.gif)\n\nWe are picking an icon from [Flaticon.com](https://www.flaticon.com/premium-icon/atom_3326760?term=react&related_id=3326850&origin=search) for the example app.\n\nAfter creating the original app icon, save it inside the directory `src/assets/` and name the file `original_icon`. (_Note: you can name the original icon file as per your requirement_).\n\n![js2](https://i.imgur.com/WJakXfC.png)\n\n_Tip_: Make sure your initial app logo is `1024x1024px`.\n\n## Installing react-native-bootsplash\n\nThe initial step is to install the react-native-bootsplash package and then generate assets using it.\n\nOpen the terminal window and execute the following command to install the package:\n\n```shell\nyarn add react-native-bootsplash\n\n# or if using npm\nnpm install react-native-bootsplash\n```\n\nNext, for iOS, execute the command to install pods.\n\n```shell\nnpx pod-install ios\n```\n\nTip: If you use a React Native version lower than `0.60`, please follow the instructions [here](https://github.com/zoontek/react-native-bootsplash#-manual-linking) to link the package manually.\n\nNext, add the following script in the `package.json` file under the `\"scripts\"` section:\n\n```json\n\"scripts\": {\n  \"generate\": \"npx react-native generate-bootsplash ./src/assets/original_icon.png --background-color=2EE59D   --logo-width=100 --assets-path=./src/assets --flavor=main\"\n}\n```\n\nHere is each option described:\n\n- `generate-bootsplash` is the command to generate the assets.\n- `./src/assets/original_icon.png` is the path to the original icon file. The path may vary depending on where you save the file in your React Native project.\n- `--background-color=hexadecimal_value` is a color value in hexadecimal format. The color here is used as the background color of the splash screen.\n- `--logo-width=100` is the width of the logo. This is a default value provided by the package\n- `assets-path` is the path to the assets directory.\n- `flavor` is an Android only option. Let's pass the value `main` here to target the default version of the Android app. You can learn more about [Build Variants on Android here](https://developer.android.com/studio/build/build-variants).\n\nThis will generate assets in the path specified for the option `assets-path`, a storyboard called `BootSplash.storyboard` file inside the `ios/app-name` directory, as well as generate assets for the Android app inside different sub-directories of the `android/app/src/main/res` folder.\n\n![js3](https://i.imgur.com/xmqvhmG.png)\n\nAndroid requires five different sizes for different screen pixel densities. Icons for lower resolution are created automatically from the baseline (_mdpi_). Refer to the table below for more information on pixel densities:\n\n|   Resolution    | Density | Pixel units |\n| :-------------: | :-----: | :---------: |\n| mdpi (Baseline) | 160 dpi |     1×      |\n|      hdpi       | 240 dpi |    1.5×     |\n|      xhdpi      | 320 dpi |     2×      |\n|     xxhdpi      | 480 dpi |     3×      |\n|     xxxhdpi     | 640 dpi |     4×      |\n\n## Adding splash screen on iOS\n\nStart by opening the file `ios/app-name.xcodeproj` in Xcode.\n\n![js4](https://i.imgur.com/kjxEF8z.png)\n\nThen, drag the file `BootSplash.storyboard` under the Project directory in the Xcode file manager on the left side of the Xcode from the path `ios/app-name/` directory.\n\n![js5](https://i.imgur.com/Doa8D2k.png)\n\nAfter dragging it, Xcode will prompt the following to create a folder reference. First, make sure that under the `Add to targets` option, the `app-name` is selected. Then click the **Finish** button.\n\n![js6](https://i.imgur.com/RHMsIQL.png)\n\nThe `BootSplash.storyboard` file will now be represented in the file manager as shown below:\n\n![js7](https://i.imgur.com/cJwlRGv.png)\n\nClick on the `BootSplash.storyboard` file to verify that the background color was added when generating assets.\n\n![js8](https://i.imgur.com/hSjkXLi.png)\n\nSelect the Xcode project from the file manager and select `BootSplash` from the dropdown menu next to `Launch Screen File`.\n\n![js9](https://i.imgur.com/kdNCGCL.png)\n\nNow, open the `ios/app-name/AppDelegate.m` file and add the import to the following header reference:\n\n```c\n#import \"AppDelegate.h\"\n\n#import <React/RCTBridge.h>\n#import <React/RCTBundleURLProvider.h>\n#import <React/RCTRootView.h>\n\n#import \"RNBootSplash.h\" // <- add this\n```\n\nIn the same file, add the following line to initialize the BootSplash.\n\n```c\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n  // ... other statements\n   [RNBootSplash initWithStoryboard:@\"BootSplash\" rootView:rootView];\n  return YES;\n}\n```\n\n## Adding splash screen on Android\n\nStart by modifying the `android/app/src/main/java/com/app-name/MainActivity.java` file.\n\n```java\npackage com.rnsplashandiconexample;\n\nimport com.facebook.react.ReactActivity;\n\n// ----- Add the following imports --------\nimport android.os.Bundle;\nimport com.zoontek.rnbootsplash.RNBootSplash;\n\npublic class MainActivity extends ReactActivity {\n\n  /**\n   * Returns the name of the main component registered from JavaScript. This is used to schedule\n   * rendering of the component.\n   */\n  @Override\n  protected String getMainComponentName() {\n    return \"rnSplashAndIconExample\";\n  }\n\n  // ----- Add the following --------\n  @Override\n    protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    RNBootSplash.init(R.drawable.bootsplash, MainActivity.this);\n  }\n}\n```\n\nThen, modify the `android/app/src/main/res/values/styles.xml` file:\n\n```xml\n<resources>\n\n    <style name=\"AppTheme\" parent=\"Theme.AppCompat.DayNight.NoActionBar\">\n        <item name=\"android:textColor\">#000000</item>\n    </style>\n\n    <!-- Add the following lines (BootTheme should inherit from AppTheme) -->\n    <style name=\"BootTheme\" parent=\"AppTheme\">\n      <!-- set the generated bootsplash.xml drawable as activity background -->\n      <item name=\"android:background\">@drawable/bootsplash</item>\n    </style>\n\n</resources>\n```\n\nNext, modify the `android/app/src/main/AndroidManifest.xml` file by removing the original `<intent-filter>` tag and its contents. Replace it by adding `android:exported=\"true\"` and create a new `activity` element to use the theme created in the previous step.\n\n```xml\n<activity\n        android:name=\".MainActivity\"\n        android:label=\"@string/app_name\"\n        android:configChanges=\"keyboard|keyboardHidden|orientation|screenSize|uiMode\"\n        android:launchMode=\"singleTask\"\n        android:windowSoftInputMode=\"adjustResize\"\n        android:exported=\"true\">  <!--- Add this -->\n</activity>\n\n<!-- Then, add the following lines -->\n<activity\n      android:name=\"com.zoontek.rnbootsplash.RNBootSplashActivity\"\n      android:theme=\"@style/BootTheme\"\n      android:launchMode=\"singleTask\">\n      <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\" />\n        <category android:name=\"android.intent.category.LAUNCHER\" />\n      </intent-filter>\n</activity>\n```\n\n## Control how to display a splash screen when the navigator is mounted\n\nYou can control the behavior of the splash screen to display until all the children of the React Navigation's `NavigationContainer` are mounted for the first time. This can be done by using a prop on the `NavigationContainer` called [`onReady`](https://reactnavigation.org/docs/navigation-container/#onready).\n\nModify the `RootNavigator.js` file by importing the `react-native-bootsplash` and adding the prop `onReady`.\n\n```js\n// after other import statements\nimport RNBootSplash from 'react-native-bootsplash';\n\nconst RootNavigator = () => {\n  return (\n    <NavigationContainer onReady={() => RNBootSplash.hide()}>\n      {/* Rest remains same */}\n    </NavigationContainer>\n  );\n};\n```\n\n## Testing the splash screen configuration\n\nThe last step to see the splash screen in action is to run the build command for both iOS and Android.\n\nOpen the terminal window and run the command to build the app for iOS and Android:\n\n```shell\n# for iOS\nnpx react-native run-ios\n\n# for Android\nnpx react-native run-android\n```\n\nHere is the output after this step:\n\n![js10](https://i.imgur.com/QYtfVuP.gif)\n\n## Adding app icon to iOS app\n\nTo generate assets for different iOS devices, I am using a free app icon generator called [appicon.co](https://appicon.co/).\n\n![js11](https://i.imgur.com/odLO1I4.png)\n\nAfter generating all the image assets, you will be able to download them in a zip file.\n\nUploading an app icon for iOS follows the same process as using native iOS development. Open the file `ios/app-name.xcodeproj` in Xcode. Select the `Image.xcassets` from the file manager. Then select the **AppIcon**.\n\n![js12](https://i.imgur.com/N0iQPnH.png)\n\nDrag and drop all the required image assets after downloading and unzipping them from appicon.co. Place the images as per the necessary pixel densities. After you are done, here is how the Xcode might look like:\n\n![js13](https://i.imgur.com/Ub2KLe9.png)\n\nOpen a terminal window and run the command to build an app for iOS:\n\n```shell\nnpx react-native run-ios\n```\n\nAfter the rebuild, the app icon will display.\n\n![js14](https://i.imgur.com/ojOLDxb.png)\n\n## Adding app icon to Android app\n\nThe leverage react-native-bootsplash package generates all the app icons for Android and stores them in the multiple sub-directories under the `android/app/src/main/res` directory.\n\n![js15](https://i.imgur.com/4araXHx.png)\n\nThe simple way here is to replace the default values for the properties `android:icon` and `android:roundIcon` in the `android/app/src/main/AndroidManifest.xml` file to point to the `bootsplash_logo` file name.\n\n```xml\n<application\n  android:name=\".MainApplication\"\n  android:label=\"@string/app_name\"\n  // modify the two lines below\n  android:icon=\"@mipmap/bootsplash_logo\"\n  android:roundIcon=\"@mipmap/bootsplash_logo\"\n  // ----------------------------\n  android:allowBackup=\"false\"\n  android:theme=\"@style/AppTheme\">\n```\n\nAfter this modification, rebuild the Android app using the following command from a terminal window:\n\n```shell\nnpx react-native run-android\n```\n\nAfter the rebuild, the app icon will display.\n\n![js16](https://i.imgur.com/giZq4u9.png)\n\n## Conclusion\n\nOnce you get the hang of this process, it doesn't take much time. Those are all the necessary steps to add a splash screen and an app icon to a React Native app.\n\nFor more advanced usage of `react-native-bootsplash` please check its [official documentation here on GitHub](https://github.com/zoontek/react-native-bootsplash). There are some advanced strategies explained there, including animating the splash screen.\n\n[**Complete source code for this example is at this GitHub repo**](https://github.com/amandeepmittal/react-native-examples/tree/master/rnSplashAndIconExample)\n",
            "url": "https://amanhimself.dev//blog/how-to-add-a-splash-screen-and-app-icon-in-react-native-with-react-native-bootsplash",
            "title": "How to add Splash Screen and an App Icon in React Native",
            "summary": "How to add Splash Screen and an App Icon in React Native",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/how-to-use-ios-simulator-in-full-screen",
            "content_html": "---\ntitle: 'How to use iOS simulator in full-screen'\ndate: '2021-09-15'\nslug: 'how-to-use-ios-simulator-in-full-screen'\nthumbnail: '/thumbnails/xcode.png'\ntag: 'tools'\ncanonicalUrl: 'https://amanhimself.dev/blog/how-to-use-ios-simulator-in-full-screen/'\n---\n\nWhen working on React Native or Expo applications, it is important to create focus to get in a flow. Sometimes, there are a lot of tasks to cover and very little time. To help focus on the task ahead, one way to speed up development is to use full-screen mode for iOS simulators. For example, a focused environment on my laptop screen includes zero visibility for Dock and the menu bar.\n\nBefore Xcode version 12, the full-screen support was hidden behind a user flag. The below command can be run to solve the issue for older Xcode versions.\n\n```shell\ndefaults write com.apple.iphonesimulator AllowFullscreenMode -bool YES\n```\n\nWith the latest version of Xcode and each new macOS version trying to outperform its previous one, it has never been easy to enable full-screen mode for an iOS simulator.\n\n![ss1](https://i.imgur.com/mvSX1u2.png)\n\nIn the above image, observe that [VSCode editor](setup-macbook-m1) is on the left and the iOS simulator is on the right.\n\nTo enter the full-screen mode, click on the resize window icon (green icon) on the application (iOS simulator and the editor/IDE of your choice).\n\n![ss2](https://i.imgur.com/nhkQdNs.png)\n\nThen, you can position one application on the left and another on the right.\n\n![ss3](https://i.imgur.com/ZjU2UUi.gif)\n\nIt's already challenging to keep distractions at bay. But, sometimes, a little bit of focus can go a long way.\n",
            "url": "https://amanhimself.dev//blog/how-to-use-ios-simulator-in-full-screen",
            "title": "How to use iOS simulator in full-screen",
            "summary": "How to use iOS simulator in full-screen",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/rctbridge-required-dispatch-sync-to-load-warning",
            "content_html": "---\ntitle: 'How to solve RCTBridge required dispatch_sync to load warning on iOS for React Native'\nslug: 'rctbridge-required-dispatch-sync-to-load-warning'\ndate: '2021-09-04'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://amanhimself.dev/blog/rctbridge-required-dispatch-sync-to-load-warning/'\n---\n\nThe _RCTBridge required dispatch_sync to load RCTDevLoadingView_ has become a common occurence when developing React Native apps with version `0.64` and `0.65`.\n\n![ss1](https://i.imgur.com/IqzhnvQ.png)\n\nI came across this warning when installing packages like:\n\n- react-native-bootsplash\n- react-navigation v6\n\nRecently, I came across an open issue on [github.com/facebook/react-native](https://github.com/facebook/react-native/issues/16376) that contains the following resolution for this.\n\nOpen the file `./ios/AppName/AppDelegate.m`. First, add the following just after the import statement `#import \"AppDelegate.h\"`:\n\n```c\n#import \"AppDelegate.h\"\n\n// Add this\n#if RCT_DEV\n#import <React/RCTDevLoadingView.h>\n#endif\n// ---------------\n```\n\nThen, in the `@implementation AppDelegate`, before `RCTRootView`, add the following:\n\n```c\n  #if RCT_DEV\n    [bridge moduleForClass:[RCTDevLoadingView class]];\n  #endif\n\n  RCTRootView *rootView ...\n```\n\nBuild the iOS app again by running:\n\n```shell\nyarn run ios\n\n# or\n\nnpx react-native run-ios\n```\n\nThe warning will be gone now.\n",
            "url": "https://amanhimself.dev//blog/rctbridge-required-dispatch-sync-to-load-warning",
            "title": "How to solve RCTBridge required dispatch_sync to load warning on iOS for React Native",
            "summary": "How to solve RCTBridge required dispatch_sync to load warning on iOS for React Native",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/multi-language-support-in-react-native-with-react-i18next",
            "content_html": "---\ntitle: 'How to Offer Multi-language Support in a React Native App'\nslug: 'multi-language-support-in-react-native-with-react-i18next'\ndate: '2021-08-16'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://blog.crowdbotics.com/how-to-offer-multi-language-support-in-a-react-native-app/'\n---\n\n![cover_image](https://crowdbotics.ghost.io/content/images/2021/08/React-Native--1-.png)\n\n_[Originally Published at Crowdbotics.com](https://crowdbotics.ghost.io/how-to-offer-multi-language-support-in-a-react-native-app/)_\n\nInternationalization is an important feature to overcome the language barrier among people who use a particular software application. Not every app requires us to consider a global customer base. But if you have plans to include support for international users in your app, you’ll need internationalization in your React Native app.\n\n[i18next](https://www.i18next.com/) is an internationalization framework written in JavaScript and provides methods for localizing the app and implement the other standard i18n features.\n\nIn this tutorial, let's take a look at the steps to add multi-language support to a React Native app using i18n.\n\n## Prerequisites\n\nTo follow this tutorial, please make sure you are familiarized with JavaScript/ES6, basics of React and meet the following requirements in your local dev environment:\n\n- Node.js version `12.x.x` or above installed.\n- Have access to one package manager such as npm or yarn or npx.\n- [react-native-cli](https://www.npmjs.com/package/react-native-cli) installed, or use npx.\n\n<!-- Depending on your skill level and experience, it may be beneficial to brush up on **[how to scaffold a new custom mobile app with Crowdbotics](https://crowdbotics.ghost.io/how-to-create-a-custom-mobile-react-native-app-with-crowdbotics/)** prior to jumping into this tutorial. -->\n\n## Setting up a React Native app\n\nAfter initializing a React Native project, make sure to install the external libraries to follow along with this tutorial. Navigate inside the project directory, and then run the following command install the following libraries:\n\n```shell\nyarn add react-i18next i18next @react-navigation/native @react-navigation/bottom-tabs @react-native-async-storage/async-storage react-native-vector-icons react-native-screens react-native-safe-area-context react-native-reanimated react-native-localize react-native-gesture-handler\n\n# after this step, for iOS, install pods\nnpx pod-install ios\n```\n\nReact Native Vector Icons will be used for adding icons in the app. React Navigation is used to add and enable navigation between screens in the app. Make sure to initialize and configure navigation as described in [React Navigation library getting started doc](https://reactnavigation.org/docs/getting-started/).\n\nThe following libraries are going to be used for adding multi-language support to the app:\n\n- `i18next`: internationalization library.\n- `react-i18next`: provides binding for React and React Native projects using Hooks, High Order Components (HOCs), etc. We will use the `useTranslation` hook to translate the text within React Native function components.\n- `react-native-localize`: provides helper functions to figure based on the device's localized language preference.\n- `@react-native-async-storage/async-storage`: is an unencrypted, asynchronous, persistent, key-value storage system that is global to the app. It is used to store the user's language preference such that it persists when the app restarts.\n\n> 🔥 Tip: Always make sure to check out installation steps in the documentation of libraries installed in a React Native app. Some may differ and change over time. It's hard to keep a blog post up to date with all these changes.\n\n## Building a React Native app\n\nAfter installing libraries, let's setup the React Native app with mock screens and navigation.\n\nCreate a `src/` folder inside the project root directory and inside it, create the following files and folders:\n\n- `/constants`\n  - `/translations`\n  - `IMLocalize.js`\n- `/navigation`\n  - `RootNavigator.js`\n- `/screens`\n  - `/HomeScreen.js`\n  - `SettingsScreen.js`\n- `/components`\n  - `LanguageSelector.js`\n\nStart by adding a `RootNavigator.js` file inside the `/navigation` folder. It will have both screens as tabs and some configuration to display an icon and a label for each tab.\n\n```js\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport Ionicons from 'react-native-vector-icons/dist/Ionicons';\n\nimport HomeScreen from '../screens/HomeScreen';\nimport SettingsScreen from '../screens/SettingsScreen';\n\nconst Tab = createBottomTabNavigator();\n\nexport default function RootNavigator() {\n  return (\n    <NavigationContainer>\n      <Tab.Navigator\n        screenOptions={({ route }) => ({\n          tabBarIcon: ({ focused, color, size }) => {\n            let iconName;\n\n            if (route.name === 'Home') {\n              iconName = focused ? 'ios-home' : 'ios-home-outline';\n            } else if (route.name === 'Settings') {\n              iconName = focused ? 'ios-settings' : 'ios-settings-outline';\n            }\n\n            return <Ionicons name={iconName} size={size} color={color} />;\n          },\n          tabBarActiveTintColor: 'tomato',\n          tabBarInactiveTintColor: 'gray',\n          headerShown: false\n        })}\n      >\n        <Tab.Screen name=\"Home\" component={HomeScreen} />\n        <Tab.Screen name=\"Settings\" component={SettingsScreen} />\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\nNext, let's add code snippets for screens. In `HomeScreen.js`, add the following code. For now, it only displays a `Text` component:\n\n```js\nimport React from 'react';\nimport { Text, View } from 'react-native';\n\nexport default function HomeScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home</Text>\n    </View>\n  );\n}\n```\n\nSimilarly, the `SettingsScreen.js` file will also display a `Text` component:\n\n```js\nimport React from 'react';\nimport { Text, View } from 'react-native';\n\nexport default function SettingsScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Settings!</Text>\n    </View>\n  );\n}\n```\n\nNow, modify the `App.js` file to add the following code snippet:\n\n```js\nimport React from 'react';\n\nimport RootNavigator from './src/navigation/RootNavigator';\n\nexport default function App() {\n  return <RootNavigator />;\n}\n```\n\nAt this point, if you run the `npx react-native run-ios` or `npx react-native run-android` command, you should see the following screen on a simulator/emulator or on a device:\n\n![cb1](https://crowdbotics.ghost.io/content/images/2021/08/cb1.png)\n\n## Create translation files\n\nInitially, we will like to translate tab names based on the language selected within the app. To do this, we need to create translation config files.\n\nYou can organize these translation files in the way you want, but here we are following a pattern. Inside `constants/translations/` directory, let's create subdirectories for each language to support in this demo app. The languages supported here are `en` for English and `fr` for French.\n\nInside each language directory, create separate files that will split the translations from commonly used text to translate specific texts such as for tab navigation labels. Under `i18n`, this separation leads to creating namespaces for each language. Later in the tutorial, you will see how to access the value of a key, for example, `home` from the namespace `navigation` to translate the tab bar label.\n\nHere is how the directory structure would like under `translations/`:\n\n![cb2](https://crowdbotics.ghost.io/content/images/2021/08/cb2.png)\n\nInside `en/common.js` file, add the following snippet:\n\n```js\nexport default {\n  hello: 'Hello',\n  languageSelector: 'Select Your Language'\n};\n```\n\nInside `en/navigate.js` file, add the following code snippet:\n\n```js\nexport default {\n  hello: 'Bonjour',\n  languageSelector: 'Sélecteur de langue'\n};\n```\n\nNext, inside add translated tab labels for each language in their corresponding `navigate.js` files:\n\n```js\n// en/navigate.js\nexport default {\n  home: 'Home!',\n  settings: 'Settings'\n};\n\n\n// fr/navigate.js\nexport default {\n  home: 'Écran principal',\n  settings: 'Le réglage'\n};\n```\n\nLastly, export these translated texts:\n\n```js\n// en/index.js\nimport common from './common';\nimport navigate from './navigate';\n\nexport default {\n  common,\n  navigate\n};\n\n// fr/index.js\nimport common from './common';\nimport navigate from './navigate';\n\nexport default {\n  common,\n  navigate\n};\n```\n\n## Adding multi-language support configuration\n\nNow that you have translation files ready and dependencies installed, let's configure how to create a configuration using those libraries installed earlier.\n\nAll of this configuration will live inside `IMLocalize.js` file. Start by importing the following dependencies. Also, define a `LANGUAGES` object that requires each language file as an object and using JavaScript syntax of `Object.keys` convert the `LANGUAGES` object to an array.\n\n```js\nimport i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport * as RNLocalize from 'react-native-localize';\n\nimport en from './translations/en';\nimport fr from './translations/fr';\n\nconst LANGUAGES = {\n  en,\n  fr\n};\n\nconst LANG_CODES = Object.keys(LANGUAGES);\n```\n\nThe `i18n` is configured in a certain way. The initial step it requires is to detect a language. Hence, define your own custom language detector. It will check the user's stored language preference when the app starts. If the user's language preference is not available, you will need to define a fallback language or find the best available language to fall back on.\n\nCreate a `LANGUAGE_DETECTOR` configuration object:\n\n```js\nconst LANGUAGE_DETECTOR = {\n  type: 'languageDetector',\n  async: true,\n  detect: callback => {\n    AsyncStorage.getItem('user-language', (err, language) => {\n      // if error fetching stored data or no language was stored\n      // display errors when in DEV mode as console statements\n      if (err || !language) {\n        if (err) {\n          console.log('Error fetching Languages from asyncstorage ', err);\n        } else {\n          console.log('No language is set, choosing English as fallback');\n        }\n        const findBestAvailableLanguage =\n          RNLocalize.findBestAvailableLanguage(LANG_CODES);\n\n        callback(findBestAvailableLanguage.languageTag || 'en');\n        return;\n      }\n      callback(language);\n    });\n  },\n  init: () => {},\n  cacheUserLanguage: language => {\n    AsyncStorage.setItem('user-language', language);\n  }\n};\n```\n\nThen, add the configuration initialize `i18n`. It will start by detecting the language, passing the i18n instance to `react-i18next`, and initializes using some options. This option makes `i18n` available for all React Native components.\n\n```js\ni18n\n  // detect language\n  .use(LANGUAGE_DETECTOR)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // set options\n  .init({\n    resources: LANGUAGES,\n    react: {\n      useSuspense: false\n    },\n    interpolation: {\n      escapeValue: false\n    },\n    defaultNS: 'common'\n  });\n```\n\nThese options may vary depending on your React Native project. We recommend you to go through [available configuration options for i18n](https://www.i18next.com/overview/configuration-options).\n\nNext, import the `IMLocalize` file in `App.js` file:\n\n```js\n// after other import statements\nimport './src/constants/IMLocalize';\n```\n\n## Creating a Language Selector component\n\nSince you have initialized the languages in the React Native app, the next step is to allow the user to select between different languages available inside the app.\n\nInside `LanguageSelector.js` file, start by importing the following libraries:\n\n```js\nimport React from 'react';\nimport { View, Text, StyleSheet, Pressable } from 'react-native';\nimport Ionicons from 'react-native-vector-icons/dist/Ionicons';\nimport { useTranslation } from 'react-i18next';\n```\n\nThe `useTranslation` hook will allow accessing `i18n` instance inside this custom component which is used to change the language.\n\nNext, define an array of `LANGUAGES`.\n\n```js\nconst LANGUAGES = [\n  { code: 'en', label: 'English' },\n  { code: 'fr', label: 'Français' }\n];\n```\n\nThen, define the function component `Selector`. It will allow the user to switch between different languages inside the app and also enlist the available languages.\n\nIt will get the currently selected language from the `i18n` instance. Using a handler method called `setLanguage`, you can allow the functionality to switch between different languages from the `LANGUAGES` array defined above this function component.\n\nThis function component uses `Pressable` from React Native to change the language.\n\n```js\nconst LANGUAGES = [\n  { code: 'en', label: 'English' },\n  { code: 'fr', label: 'Français' }\n];\n\nconst Selector = () => {\n  const { i18n } = useTranslation();\n  const selectedLanguageCode = i18n.language;\n\n  const setLanguage = code => {\n    return i18n.changeLanguage(code);\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.row}>\n        <Text style={styles.title}>Select a Language</Text>\n        <Ionicons color=\"#444\" size={28} name=\"ios-language-outline\" />\n      </View>\n      {LANGUAGES.map(language => {\n        const selectedLanguage = language.code === selectedLanguageCode;\n\n        return (\n          <Pressable\n            key={language.code}\n            style={styles.buttonContainer}\n            disabled={selectedLanguage}\n            onPress={() => setLanguage(language.code)}\n          >\n            <Text\n              style={[selectedLanguage ? styles.selectedText : styles.text]}\n            >\n              {language.label}\n            </Text>\n          </Pressable>\n        );\n      })}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingTop: 60,\n    paddingHorizontal: 16\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between'\n  },\n  title: {\n    color: '#444',\n    fontSize: 28,\n    fontWeight: '600'\n  },\n  buttonContainer: {\n    marginTop: 10\n  },\n  text: {\n    fontSize: 18,\n    color: '#000',\n    paddingVertical: 4\n  },\n  selectedText: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: 'tomato',\n    paddingVertical: 4\n  }\n});\n\nexport default Selector;\n```\n\nImport the `Selector` component inside the `SettingsScreen.js` file:\n\n```js\nimport React from 'react';\nimport { View } from 'react-native';\n\nimport Selector from '../components/LanguageSelector';\n\nexport default function SettingsScreen() {\n  return (\n    <View style={{ flex: 1, backgroundColor: '#fff' }}>\n      <Selector />\n    </View>\n  );\n}\n```\n\nHere is the output in the simulator after this step:\n\n![cb3](https://crowdbotics.ghost.io/content/images/2021/08/cb3.png)\n\n## Using the useTranslation hook\n\nThe `useTranslation` hook has two important functions that you can utilize inside your React Native app. You have already seen the first one (`i18n` instance) in the previous step. The next is called `t` (my personal guess is that it is short for translation) function. You can refer the namespaces defined in the translation files and pass them as arguments to this function.\n\nLet's see that in action. Let's start with the `LanguageSelector` component itself. It has a title called `Select a Language`. While defining the translation files, we've already defined its translation in both English and French languages in their corresponding `common.js` files.\n\nThe initial step to getting the `t` function is to import the `useTranslation` hook. However, the `LanguageSelector.js` file already has it from the previous section.\n\nModify the following line to get the `t` function from the hook inside the `Selector` component:\n\n```js\nconst { t, i18n } = useTranslation();\n```\n\nNext, modify the `Text` component contents used to define the title:\n\n```js\n<Text style={styles.title}>{t('common:languageSelector')}</Text>\n```\n\nHere is the output. The default or the initial language in our case is English. When the next language is selected, it translates the title on the Settings screen.\n\n![cb4](https://crowdbotics.ghost.io/content/images/2021/08/cb4.gif)\n\nYou can also modify the text strings according to the previously defined namespaces in the translation files.\n\nFor an example, the `RootNavigator` will be modified as follows:\n\n```js\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport Ionicons from 'react-native-vector-icons/dist/Ionicons';\nimport { useTranslation } from 'react-i18next';\n\nimport HomeScreen from '../screens/HomeScreen';\nimport SettingsScreen from '../screens/SettingsScreen';\n\nconst Tab = createBottomTabNavigator();\n\nexport default function RootNavigator() {\n  const { t } = useTranslation();\n  return (\n    <NavigationContainer>\n      <Tab.Navigator\n        screenOptions={({ route }) => ({\n          tabBarIcon: ({ focused, color, size }) => {\n            let iconName;\n\n            if (route.name === 'Home') {\n              iconName = focused ? 'ios-home' : 'ios-home-outline';\n            } else if (route.name === 'Settings') {\n              iconName = focused ? 'ios-settings' : 'ios-settings-outline';\n            }\n\n            return <Ionicons name={iconName} size={size} color={color} />;\n          },\n          tabBarActiveTintColor: 'tomato',\n          tabBarInactiveTintColor: 'gray',\n          headerShown: false\n        })}\n      >\n        <Tab.Screen\n          name=\"Home\"\n          component={HomeScreen}\n          options={{ tabBarLabel: t('navigate:home') }}\n        />\n        <Tab.Screen\n          name=\"Settings\"\n          component={SettingsScreen}\n          options={{ tabBarLabel: t('navigate:settings') }}\n        />\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\nHere is the final output:\n\n![cb5](https://crowdbotics.ghost.io/content/images/2021/08/cb5.gif)\n\n## Conclusion\n\nThis completes our tutorial on how to add multi-language support in a React Native app. There are different strategies you can use inside your app to provide translation support. This tutorial is just one of the examples.\n\nPlease don't mind my translation for French text corresponding to English text. I am not good at it at all. 😅\n\n**Useful Links**\n\n- [useTranslation Hook](https://react.i18next.com/latest/usetranslation-hook)\n- [**You can find the complete source code at GitHub**](https://github.com/amandeepmittal/react-native-examples/tree/master/rnMultiLanguageExample)\n",
            "url": "https://amanhimself.dev//blog/multi-language-support-in-react-native-with-react-i18next",
            "title": "How to Offer Multi-language Support in a React Native App",
            "summary": "How to Offer Multi-language Support in a React Native App",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/get-request-with-axios",
            "content_html": "---\ntitle: 'GET Request params with Axios'\ndate: '2021-08-11'\nthumbnail: '/thumbnails/js.png'\nslug: 'get-request-params-with-axios'\ntag: 'javascript'\ncanonicalUrl: 'https://amanhimself.dev/blog/get-request-params-with-axios/'\n---\n\nOne of the popular libraries in JavaScript land to perform HTTP requests is [axios](https://github.com/axios/axios). It is promised based and allows writing code using `async await` syntax.\n\n## Installation\n\nRun the command below:\n\n```bash\nyarn add axios\n```\n\n## Simple GET HTTP request with axios\n\nA simple GET HTTP request may look like:\n\n```js\naxios.get({\n  url: `${BASE_URL}/movie/popular?api_key=${API_KEY}&page=1`,\n  method: 'get'\n});\n```\n\nThis returns a promise object. Using async await syntax, the promise object can be resolved.\n\n```js\nexport const getPopularMovies = async () => {\n  try {\n    return await axios.get(\n      `${BASE_URL}/movie/popular?api_key=${API_KEY}&page=1`\n    );\n  } catch (error) {\n    console.error(`[API RESPONSE ERROR]: ${error}`);\n  }\n};\n```\n\n## Adding parameters to GET requests\n\nA GET response can contain parameters. With Axios you can add parameters to the URL:\n\n```js\naxios.get(`${BASE_URL}/movie/popular?api_key=${API_KEY}&page=1`);\n```\n\nOr can use `params` property in the options:\n\n```js\naxios.get(`${BASE_URL}/movie/popular`, {\n  params: {\n    api_key: API_KEY,\n    page: pageNumber\n  }\n});\n```\n",
            "url": "https://amanhimself.dev//blog/get-request-with-axios",
            "title": "GET Request params with Axios",
            "summary": "GET Request params with Axios",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/environment-variables-in-expo-managed-workflow",
            "content_html": "---\ntitle: 'Environment Variables in Expo and TypeScript'\nslug: 'environment-variables-in-expo-managed-workflow'\ndate: '2021-08-04'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://amanhimself.dev/blog/environment-variables-in-expo-managed-workflow/'\n---\n\nManaging different keys for different environments, such as development or production, is common among JavaScript developers. Therefore, variables defined in this file may change during development and production, but the code remains unchanged. Hence, the mechanism of the `.env` file exists.\n\nUsing Expo, there are different ways you can set up and use environment variables. My preferred method is to use the dotenv file. Environment variables defined in this file are loaded using a package called `dotenv`.\n\n## Install dotenv\n\nTo set up environment variables in an Expo app, the initial step is to install the `dotenv` and `expo-constants` packages.\n\n```bash\nexpo init dotenv expo-constants\n```\n\n## Rename app.json\n\nNext, rename the `app.json` file to `app.config.js` or, if using TypeScript: `app.config.ts`, at the root of your project. Then, add the import statement to use the `dotenv` configuration. Since it's a JSON file, you will have to export all Expo configuration variables and add an `extra` object containing Environment variables.\n\n```ts\nimport 'dotenv/config';\n\nexport default {\n  expo: {\n    // ...\n    extra: {\n      // Add your extra configs here\n      apiKey: process.env.API_KEY\n    }\n  }\n};\n```\n\n## Constants with expo-constants\n\nAll the keys inside the extra object are readable app-wide using `expo-constants`. An environment variable is accessible through `Expo.Constants.manifest.apiKey`.\n\nIn the case of TypeScript, use optional parameter syntax to avoid squiggly: \"Object is possibly 'undefined' or 'null'\".\n\n```tsx\nconst API_KEY = Constants?.manifest?.extra?.apiKey;\n```\n",
            "url": "https://amanhimself.dev//blog/environment-variables-in-expo-managed-workflow",
            "title": "Environment Variables in Expo and TypeScript",
            "summary": "Environment Variables in Expo and TypeScript",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/no-code-way-of-payments-with-stripe-a-brief-guide",
            "content_html": "---\ntitle: 'The No-Code Way of Payments with Stripe: A Brief Guide'\ndate: '2021-07-08'\nslug: 'no-code-way-of-payments-with-stripe-a-brief-guide'\nthumbnail: '/thumbnails/stripe.png'\ntag: 'no-code'\ncanonicalUrl: 'https://amanhimself.dev/blog/no-code-way-of-payments-with-stripe-a-brief-guide/'\n---\n\n![cover_image](https://hackernoon.com/_next/image?url=https%3A%2F%2Fcdn.hackernoon.com%2Fimages%2FoBJp5NI1CqWkTYoCtrcit0KrDza2-lc3035ge.jpeg&w=3840&q=75)\n\n> Cover image credit: [Prayer X](https://unsplash.com/@x_prayer?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/galaxy?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)\n\nStripe launched a new way to accept payments via [Payment Links](https://stripe.com/en-sg/payments/payment-links) recently. It's a big deal for many use-cases. I got to know about it after trying to figure out how to support payments for offline goods and services in an Expo app using [managed workflow](https://docs.expo.io/introduction/managed-vs-bare/?ref=hackernoon.com#managed-workflow). Yes, that's a niche use case. But Stripe's no-code way to enable payments in an app goes beyond that.\n\nDisclaimer: This article is not a take on code. I love to code. It's an appreciation post on how integration utilities like Stripe Payment Links come in handy far beyond code.\n\n> Stripe Payment Links are not meant to be used as an alternative to native in-app purchase functionality. Please make sure to read [Apple's App Store review guidelines](https://developer.apple.com/app-store/review/guidelines/?ref=hackernoon.com#other-purchase-methods) to have clear instructions on what Goods and Services are available for outside of the in-app purchases when publishing the app.\n\n## Why a Payment Link?\n\nAccepting payments using a payment provider like Stripe includes a three-step process:\n\n- A server or serverless functions to handle logic, create tokens and secret keys.\n- UI for customers to enter their details when purchasing a product.\n- Tracking each transaction using [PaymentIntent](https://stripe.com/docs/payments/payment-intents).\n\nStripe Payment Links handle this process by giving you a layer of UI and a URL for the payment. Yes! Now, for the use case that I have, I do not have to write different serverless functions, host them on a backendless service like Firebase Cloud functions, or think about their technical maintenance over time.\n\nThe Payment Links work when you host a product using Stripe. It gives you an interface to create and host a product.\n\n## How to create a Payment Link\n\nGo to the Stripe Dashboard screen. From the side menu, go to Products and then click Payment Links. The example below is using Test mode, but the same process is applicable when in live mode.\n\n![ss1](https://hackernoon.com/_next/image?url=https%3A%2F%2Fcdn.hackernoon.com%2Fimages%2FoBJp5NI1CqWkTYoCtrcit0KrDza2-841335vt.jpeg&w=3840&q=75)\n\n- Click the button \"New\" to add a new product and create a payment link for it.\n- Then, under the Product section, click \"+ Add a new product\".\n- Enter the details of the product.After adding the product details, click the button Create link.\n- Stripe generates a Payment link for the product added.\n\n![ss2](https://hackernoon.com/_next/image?url=https%3A%2F%2Fcdn.hackernoon.com%2Fimages%2FoBJp5NI1CqWkTYoCtrcit0KrDza2-q01m35p1.gif&w=3840&q=75)\n\nWhile adding a new product, Stripe allows customizing product details by adding promotional codes, collecting a user's shipping, billing address, adjust quantity, etc. Managing a user's shipping and billing address is essential if the product sold is a physical entity.\n\n## Conclusion\n\nYou can now use it inside low and no-code tools like [Webflow](https://webflow.com/) or mobile apps created using [Draftbit](https://draftbit.com/?ref=hackernoon.com).\n\nI also wrote a post on how to use Stripe Payment Links when creating a mobile app using Draftbit as a \"pro code\" tool to build the mobile app. **[Learn more ↗️](https://community.draftbit.com/c/code-snippets/send-payments-with-stripe-in-draftbit)**\n\n![demo-draftbit](https://i.imgur.com/VgrEdI5.gif)\n",
            "url": "https://amanhimself.dev//blog/no-code-way-of-payments-with-stripe-a-brief-guide",
            "title": "The No-Code Way of Payments with Stripe: A Brief Guide",
            "summary": "The No-Code Way of Payments with Stripe: A Brief Guide",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/firebase-authentication-with-expo",
            "content_html": "---\ntitle: 'How To Integrate Firebase Authentication With an Expo App'\ndate: '2021-07-04'\nslug: 'firebase-authentication-with-expo'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://blog.jscrambler.com/how-to-integrate-firebase-authentication-with-an-expo-app/'\n---\n\n![cover_image](https://blog.jscrambler.com/content/images/2021/07/jscrambler-blog-integrate-firebase-authentication-with-expo-app-thumbnail-1.jpg)\n\n> Originally Published at [Jscrambler.com](https://blog.jscrambler.com/how-to-integrate-firebase-authentication-with-an-expo-app/).\n\n[Firebase](https://console.firebase.google.com/) is a Backend as a Service (BaaS) that provides a variety of services for web and mobile app development. Most of the mobile apps built using React Native and Expo require knowing the identity of a user. This allows an app to securely save user data in the cloud and provide more personalized functionalities.\n\nFirebase has an Authentication service that integrates well in a React Native and Expo app. It has a ready-to-use SDK and supports many authentication providers such as email/password, phone numbers, and federated providers (Google, Facebook, Twitter, etc.).\n\nIn this tutorial, let's take a look at how as a mobile developer building applications using Expo SDK, you can integrate and use Firebase Authentication. You are going to:\n\n- create some sample screens to display forms (login, sign-up);\n- create a home screen that only a logged-in user can access;\n- create different navigators using the [react-navigation](https://reactnavigation.org/) library;\n- create an auth flow by conditionally rendering between these navigators when a user is logged in or not;\n- and integrate Firebase Auth with the email/password method.\n\n[The source code for this tutorial is available on GitHub](https://github.com/amandeepmittal/react-native-examples/tree/master/expo-firebase-auth-example).\n\n## Prerequisites\n\nTo follow this tutorial, please make sure you have the following tools and utilities installed on your local development environment and have access to the services mentioned below:\n\n- [Nodejs](https://nodejs.org/en/) (>= 12.x.x) with a package manager installed such as npm or yarn\n- [expo-cli](https://docs.expo.io/workflow/expo-cli/) (>= 4.x.x)\n- Firebase account (a free “Spark” plan is enough).\n\n## Creating a React Native app with expo-cli\n\nThe initial step is to either create a new React Native project using expo-cli by following the steps mentioned below or, if you know the lexicons of creating projects with Expo, integrate [Firebase JS SDK](https://github.com/firebase/firebase-js-sdk).\n\nYes, this guide is using Firebase JS SDK and [Expo managed workflow](https://docs.expo.io/introduction/managed-vs-bare/#managed-workflow).\n\nOpen your favorite terminal window, and execute the following command (where `firebase-auth` is an example name of the project directory)\n\n```shell\nexpo init firebase-auth\n\n# navigate inside the directory\n\ncd firebase-auth\n```\n\nThen, install the following libraries:\n\n```shell\nnpm install @react-navigation/native @react-navigation/stack\n\n# OR is using yarn\n\nyarn add @react-navigation/native @react-navigation/stack\n\n# after the above dependencies install successfully\n\nexpo install firebase dotenv expo-constants react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/masked-view\n```\n\n**Side-note:** This example guide is using React Navigation library version 5. Make sure to check out the [official documentation](https://reactnavigation.org/docs/getting-started/), as some of the installation instructions might have changed since the writing of this tutorial.\n\n## Create a Firebase Project\n\nTo get started, you’re going to need a Firebase app. Once you’ve created a new account with Firebase and logged in, create a new project by clicking on the **Add Project** button.\n\n![ss2](https://i.imgur.com/QRL6R6K.png)\n\nNext, add the name of the new Firebase project and then click **Continue**.\n\n![ss3](https://i.imgur.com/679tjgf.png)\n\nYou can disable Google Analytics as it won't be used in this example. Then click **Create Project**\n\n![ss4](https://i.imgur.com/PQZ6MYx.png)\n\nExpo Managed workflow apps can run inside a client app Expo Go (in development mode). The Expo Go app currently supports Firebase JS SDK and not the react-native-firebase library. More information in [official Expo documentation](https://docs.expo.io/guides/using-firebase/).\n\nOn the Dashboard screen, in the left side menu, click the settings icon, and then go to the _Project Settings_ page and then look for the section _General > Your apps_. If it's a new project, there won't be any apps.\n\n![ss5](https://i.imgur.com/s5o5gsj.png)\n\nClick the Web button. It will prompt you to enter the details of your app. Enter the app’s nickname, and then click the _Register app_ button.\n\n![ss6](https://i.imgur.com/PRJmfvH.png)\n\nThen, Firebase will provide configuration objects with API keys and other keys that are required to use different Firebase services.\n\n![ss7](https://i.imgur.com/ZY40Mh4.png)\n\nThese API keys can be included in your React Native app as they are not used to access Firebase services’ backend resources. [That can only be done by Firebase security rules](https://firebase.google.com/docs/projects/api-keys).\n\nThis does not mean that you should expose these keys to a version control host such as GitHub. We will learn how to set up environment variables in an Expo app in the next section.\n\nLet's enable the email/password sign-in method. From the left side menu, go to the _Authentication_ page. If you are using this service for the first time in your Firebase project, click the _Get Started_ button.\n\nThen, in the _Sign-in method_ tab, click the status of _Email/Password_, enable it, and then click _Save_.\n\n![ss8](https://i.imgur.com/SQlngt6.png)\n\n## Using Environment Variables\n\nTo add environment variables to an Expo app, the initial step is to install the [dotenv](https://github.com/motdotla/dotenv#config) package (which should be already installed if you have been following along).\n\nCreate a `.env` file at the root of your project and add the following:\n\n```shell\nAPI_KEY=XXXX\nAUTH_DOMAIN=XXXX\nPROJECT_ID=XXXX\nSTORAGE_BUCKET=XXXX\nMESSAGING_SENDER_ID=XXXX\nAPP_ID=XXXX\n```\n\nReplace all `X's` in the above file with actual values for each key you get from the `firebaseConfig` object.\n\nNext, rename the `app.json` file to `app.config.js` at the root of your project. Add the import statement to use the `dotenv` configuration. Since it's a JSON file, you will have to export all Expo configuration variables and also add an `extra` object that contains Firebase configuration keys. Here is how the file should look like after this step:\n\n```js\nimport 'dotenv/config';\n\nexport default {\n  expo: {\n    name: 'expo-firebase-auth-example',\n    slug: 'expo-firebase-auth-example',\n    version: '1.0.0',\n    orientation: 'portrait',\n    icon: './assets/icon.png',\n    splash: {\n      image: './assets/splash.png',\n      resizeMode: 'contain',\n      backgroundColor: '#ffffff'\n    },\n    updates: {\n      fallbackToCacheTimeout: 0\n    },\n    assetBundlePatterns: ['**/*'],\n    ios: {\n      supportsTablet: true\n    },\n    android: {\n      adaptiveIcon: {\n        foregroundImage: './assets/adaptive-icon.png',\n        backgroundColor: '#FFFFFF'\n      }\n    },\n    web: {\n      favicon: './assets/favicon.png'\n    },\n    extra: {\n      apiKey: process.env.API_KEY,\n      authDomain: process.env.AUTH_DOMAIN,\n      projectId: process.env.PROJECT_ID,\n      storageBucket: process.env.STORAGE_BUCKET,\n      messagingSenderId: process.env.MESSAGING_SENDER_ID,\n      appId: process.env.APP_ID\n    }\n  }\n};\n```\n\nNow, all the keys inside the `extra` object are readable app-wide using `expo-constants`. This package allows reading values from `app.json` - or in this case, the `app.config.js` file.\n\nOpen the Expo-generated project in your code editor, create a new directory in the root called `config/` and add a file called `firebase.js`. Edit the file as shown below:\n\n```js\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport Constants from 'expo-constants';\n\n// Initialize Firebase\nconst firebaseConfig = {\n  apiKey: Constants.manifest.extra.apiKey,\n  authDomain: Constants.manifest.extra.authDomain,\n  projectId: Constants.manifest.extra.projectId,\n  storageBucket: Constants.manifest.extra.storageBucket,\n  messagingSenderId: Constants.manifest.extra.messagingSenderId,\n  appId: Constants.manifest.extra.appId\n};\n\nlet Firebase;\n\nif (firebase.apps.length === 0) {\n  Firebase = firebase.initializeApp(firebaseConfig);\n}\n\nexport default Firebase;\n```\n\n## Creating reusable components\n\nThe example app we are building in this tutorial will require some reusable components. These are visual components that can be used on different screens. Instead of writing them from scratch on every screen inside the app, let's create them once and re-use them whenever required.\n\nCreate a new directory called `components/` and the following files:\n\n- Button.js: contains a configurable `<Pressable/>` component;\n- IconButton.js: contains an icon button composed of a `<Pressable/>` component and the `@expo/vector-icons` library;\n- ErrorMessage.js: a text component that is used to display an error message when authenticating a user;\n- InputField.js: contains a configurable `<TextInput />` component.\n\nAdd the following code snippet to the `Button.js` file:\n\n```js\n// components/Button.js\nimport React from 'react';\nimport { StyleSheet, Pressable, Text } from 'react-native';\n\nconst Button = ({\n  title,\n  backgroundColor = '#000',\n  titleColor = '#fff',\n  titleSize = 14,\n  onPress,\n  width = '100%',\n  containerStyle\n}) => {\n  return (\n    <Pressable\n      onPress={onPress}\n      style={args => {\n        if (args.pressed) {\n          return [\n            styles.base,\n            {\n              opacity: 0.5,\n              backgroundColor,\n              width\n            },\n            containerStyle\n          ];\n        }\n\n        return [\n          styles.base,\n          {\n            opacity: 1,\n            backgroundColor,\n            width\n          },\n          containerStyle\n        ];\n      }}\n    >\n      <Text style={[styles.text, { color: titleColor, fontSize: titleSize }]}>\n        {title}\n      </Text>\n    </Pressable>\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    fontWeight: '600'\n  },\n  base: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    minHeight: 42,\n    borderRadius: 4,\n    paddingHorizontal: 12\n  }\n});\n\nexport default Button;\n```\n\nAdd the following code snippet in `IconButton.js`:\n\n```js\n// components/IconButton.js\n\nimport React from 'react';\nimport { Pressable, StyleSheet } from 'react-native';\nimport { AntDesign } from '@expo/vector-icons';\n\nconst IconButton = ({ color, size, onPress, name }) => {\n  return (\n    <Pressable\n      style={args => {\n        if (args.pressed) {\n          return [\n            styles.base,\n            {\n              opacity: 0.5,\n              backgroundColor: 'transparent'\n            }\n          ];\n        }\n\n        return [styles.base, { opacity: 1, backgroundColor: 'transparent' }];\n      }}\n      onPress={onPress}\n    >\n      <AntDesign name={name} size={size} color={color} />\n    </Pressable>\n  );\n};\n\nconst styles = StyleSheet.create({\n  base: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n\nexport default IconButton;\n```\n\nAdd the following code snippet in `ErrorMessage.js`. This component will be used to display error messages either when signing up or logging in to the app. These messages are human-readable and thrown by the Firebase Auth service. You can go through the complete list of messages in the [Firebase official documentation](https://firebase.google.com/docs/auth/admin/errors).\n\n```js\n// components/ErrorMessage.js\n\nimport React from 'react';\nimport { StyleSheet, Text } from 'react-native';\n\nconst ErrorMessage = ({ error, visible }) => {\n  if (!error || !visible) {\n    return null;\n  }\n\n  return <Text style={styles.errorText}>⚠️ {error}</Text>;\n};\n\nconst styles = StyleSheet.create({\n  errorText: {\n    color: '#fdca40',\n    fontSize: 20,\n    marginBottom: 10,\n    fontWeight: '600'\n  }\n});\n\nexport default ErrorMessage;\n```\n\nAdd the following code snippet in `InputField.js`:\n\n```js\n// components/InputField.js\nimport React from 'react';\nimport { View, StyleSheet, TextInput, TouchableOpacity } from 'react-native';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\nconst InputField = ({\n  leftIcon,\n  iconColor = '#000',\n  rightIcon,\n  inputStyle,\n  containerStyle,\n  placeholderTextColor = '#444',\n  handlePasswordVisibility,\n  ...rest\n}) => {\n  return (\n    <View style={[styles.container, containerStyle]}>\n      {leftIcon ? (\n        <MaterialCommunityIcons\n          name={leftIcon}\n          size={20}\n          color={iconColor}\n          style={styles.leftIcon}\n        />\n      ) : null}\n      <TextInput\n        {...rest}\n        placeholderTextColor={placeholderTextColor}\n        style={[styles.input, inputStyle]}\n      />\n      {rightIcon ? (\n        <TouchableOpacity onPress={handlePasswordVisibility}>\n          <MaterialCommunityIcons\n            name={rightIcon}\n            size={20}\n            color={iconColor}\n            style={styles.rightIcon}\n          />\n        </TouchableOpacity>\n      ) : null}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 4,\n    flexDirection: 'row',\n    padding: 12\n  },\n  leftIcon: {\n    marginRight: 10\n  },\n  input: {\n    flex: 1,\n    width: '100%',\n    fontSize: 18\n  },\n  rightIcon: {\n    alignSelf: 'center',\n    marginLeft: 10\n  }\n});\n\nexport default InputField;\n```\n\nLastly, create an `index.js` file that will expose all these components from the directory itself:\n\n```js\nimport IconButton from './IconButton';\nimport Button from './Button';\nimport ErrorMessage from './ErrorMessage';\nimport InputField from './InputField';\n\nexport { IconButton, Button, ErrorMessage, InputField };\n```\n\n## Creating screens in the app\n\nThe sole focus of this tutorial is to integrate Firebase SDK and not to teach how to create app screens in React Native from scratch. While we go briefly over which screen is going to be composed of what React Native elements, please make sure you have basic knowledge of what [core components](https://reactnative.dev/docs/components-and-apis) are included in React Native.\n\nLet's start by creating the structure of the screens directory. Once you have opened the Expo project in your preferred code editor, you will be welcomed by the default directory structure as shown below:\n\n![ss1](https://i.imgur.com/rqcklse.png)\n\nCreate a new directory called `/screens` and add the following screen files:\n\n- HomeScreen.js\n- LoginScreen.js\n- SignupScreen.js\n\nAfter creating these screen files, let's create the screens one by one. Start by modifying `HomeScreen.js`. This screen will show the user's email and their UID when the user has either successfully signed up or logged in.\n\nThe UID is generated and assigned to every user who registers with the Firebase Auth service.\n\nBoth the user's email and UID will come from `AuthenticatedUserContext`. We will get into those details later.\n\nThe `firebase.auth().signOut()` function is a method provided by the Firebase auth service to log out the user from the app.\n\nAdd the following code snippet to `HomeScreen.js`.\n\n```js\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useContext } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nimport { IconButton } from '../components';\nimport Firebase from '../config/firebase';\nimport { AuthenticatedUserContext } from '../navigation/AuthenticatedUserProvider';\n\nconst auth = Firebase.auth();\n\nexport default function HomeScreen() {\n  const { user } = useContext(AuthenticatedUserContext);\n  const handleSignOut = async () => {\n    try {\n      await auth.signOut();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark-content\" />\n      <View style={styles.row}>\n        <Text style={styles.title}>Welcome {user.email}!</Text>\n        <IconButton\n          name=\"logout\"\n          size={24}\n          color=\"#fff\"\n          onPress={handleSignOut}\n        />\n      </View>\n      <Text style={styles.text}>Your UID is: {user.uid} </Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#e93b81',\n    paddingTop: 50,\n    paddingHorizontal: 12\n  },\n  row: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 24\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: '600',\n    color: '#fff'\n  },\n  text: {\n    fontSize: 16,\n    fontWeight: 'normal',\n    color: '#fff'\n  }\n});\n```\n\nNext, let's create the login screen. Add the code snippet below inside `LoginScreen.js`. It contains two input fields and a button. Each input field represents the field where the user will enter their `email` and `password`. The value of each input field is stored inside two namesake state variables using the `useState` hook.\n\nInitially, the value for each variable is an empty string. When the user provides the value in the input field, the current value for each of these variables is updated using the corresponding update function `setEmail` and `setPassword`. The values stored by these variables will be used when sending login information to Firebase.\n\nThe three other state variables defined inside the `LoginScreen` component are:\n\n- `passwordVisibility`: to show/hide password on the input field\n- `rightIcon`: to set a default icon for the `passwordVisibility` functionality\n- `loginError`: to store any incoming error when logging in from Firebase.\n\n`onLogin` is an asynchronous method that handles whether to log in the user or not based on their `email` and `password` values. These values are passed as arguments to a method called `signInWithEmailAndPassword` provided by Firebase Auth.\n\n```js\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { useState } from 'react';\nimport { StyleSheet, Text, View, Button as RNButton } from 'react-native';\n\nimport { Button, InputField, ErrorMessage } from '../components';\nimport Firebase from '../config/firebase';\n\nconst auth = Firebase.auth();\n\nexport default function LoginScreen({ navigation }) {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [passwordVisibility, setPasswordVisibility] = useState(true);\n  const [rightIcon, setRightIcon] = useState('eye');\n  const [loginError, setLoginError] = useState('');\n\n  const handlePasswordVisibility = () => {\n    if (rightIcon === 'eye') {\n      setRightIcon('eye-off');\n      setPasswordVisibility(!passwordVisibility);\n    } else if (rightIcon === 'eye-off') {\n      setRightIcon('eye');\n      setPasswordVisibility(!passwordVisibility);\n    }\n  };\n\n  const onLogin = async () => {\n    try {\n      if (email !== '' && password !== '') {\n        await auth.signInWithEmailAndPassword(email, password);\n      }\n    } catch (error) {\n      setLoginError(error.message);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark-content\" />\n      <Text style={styles.title}>Login</Text>\n      <InputField\n        inputStyle={{\n          fontSize: 14\n        }}\n        containerStyle={{\n          backgroundColor: '#fff',\n          marginBottom: 20\n        }}\n        leftIcon=\"email\"\n        placeholder=\"Enter email\"\n        autoCapitalize=\"none\"\n        keyboardType=\"email-address\"\n        textContentType=\"emailAddress\"\n        autoFocus={true}\n        value={email}\n        onChangeText={text => setEmail(text)}\n      />\n      <InputField\n        inputStyle={{\n          fontSize: 14\n        }}\n        containerStyle={{\n          backgroundColor: '#fff',\n          marginBottom: 20\n        }}\n        leftIcon=\"lock\"\n        placeholder=\"Enter password\"\n        autoCapitalize=\"none\"\n        autoCorrect={false}\n        secureTextEntry={passwordVisibility}\n        textContentType=\"password\"\n        rightIcon={rightIcon}\n        value={password}\n        onChangeText={text => setPassword(text)}\n        handlePasswordVisibility={handlePasswordVisibility}\n      />\n      {loginError ? <ErrorMessage error={loginError} visible={true} /> : null}\n      <Button\n        onPress={onLogin}\n        backgroundColor=\"#f57c00\"\n        title=\"Login\"\n        tileColor=\"#fff\"\n        titleSize={20}\n        containerStyle={{\n          marginBottom: 24\n        }}\n      />\n      <RNButton\n        onPress={() => navigation.navigate('Signup')}\n        title=\"Go to Signup\"\n        color=\"#fff\"\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#e93b81',\n    paddingTop: 50,\n    paddingHorizontal: 12\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: '600',\n    color: '#fff',\n    alignSelf: 'center',\n    paddingBottom: 24\n  }\n});\n```\n\nThe signup screen is similar to the login screen. It uses `onHandleSignup`, which is an asynchronous method that handles the action of registering a user or not based on their `email` and `password` values. These values are passed as arguments to a method called `createUserWithEmailAndPassword` provided by Firebase Auth. Add the following code snippet to the `SignupScreen.js` file:\n\n```js\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { useState } from 'react';\nimport { StyleSheet, Text, View, Button as RNButton } from 'react-native';\n\nimport { Button, InputField, ErrorMessage } from '../components';\nimport Firebase from '../config/firebase';\n\nconst auth = Firebase.auth();\n\nexport default function SignupScreen({ navigation }) {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [passwordVisibility, setPasswordVisibility] = useState(true);\n  const [rightIcon, setRightIcon] = useState('eye');\n  const [signupError, setSignupError] = useState('');\n\n  const handlePasswordVisibility = () => {\n    if (rightIcon === 'eye') {\n      setRightIcon('eye-off');\n      setPasswordVisibility(!passwordVisibility);\n    } else if (rightIcon === 'eye-off') {\n      setRightIcon('eye');\n      setPasswordVisibility(!passwordVisibility);\n    }\n  };\n\n  const onHandleSignup = async () => {\n    try {\n      if (email !== '' && password !== '') {\n        await auth.createUserWithEmailAndPassword(email, password);\n      }\n    } catch (error) {\n      setSignupError(error.message);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark-content\" />\n      <Text style={styles.title}>Create new account</Text>\n      <InputField\n        inputStyle={{\n          fontSize: 14\n        }}\n        containerStyle={{\n          backgroundColor: '#fff',\n          marginBottom: 20\n        }}\n        leftIcon=\"email\"\n        placeholder=\"Enter email\"\n        autoCapitalize=\"none\"\n        keyboardType=\"email-address\"\n        textContentType=\"emailAddress\"\n        autoFocus={true}\n        value={email}\n        onChangeText={text => setEmail(text)}\n      />\n      <InputField\n        inputStyle={{\n          fontSize: 14\n        }}\n        containerStyle={{\n          backgroundColor: '#fff',\n          marginBottom: 20\n        }}\n        leftIcon=\"lock\"\n        placeholder=\"Enter password\"\n        autoCapitalize=\"none\"\n        autoCorrect={false}\n        secureTextEntry={passwordVisibility}\n        textContentType=\"password\"\n        rightIcon={rightIcon}\n        value={password}\n        onChangeText={text => setPassword(text)}\n        handlePasswordVisibility={handlePasswordVisibility}\n      />\n      {signupError ? <ErrorMessage error={signupError} visible={true} /> : null}\n      <Button\n        onPress={onHandleSignup}\n        backgroundColor=\"#f57c00\"\n        title=\"Signup\"\n        tileColor=\"#fff\"\n        titleSize={20}\n        containerStyle={{\n          marginBottom: 24\n        }}\n      />\n      <RNButton\n        onPress={() => navigation.navigate('Login')}\n        title=\"Go to Login\"\n        color=\"#fff\"\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#e93b81',\n    paddingTop: 50,\n    paddingHorizontal: 12\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: '600',\n    color: '#fff',\n    alignSelf: 'center',\n    paddingBottom: 24\n  }\n});\n```\n\n## Create an authenticated user provider\n\nIn this section, you are going to create an authentication provider to check whether the user is logged in or not and access them if they are logged in.\n\nCreate a new directory called `navigation/` and inside it, create a file called `AuthenticatedUserProvider.js`.\n\nWhen a user is authenticated using a sign-in method in Firebase, it returns a user object with various properties such as email, photo URL, UID, display name, etc. To create the auth flow in the example app we are building, we need a way of knowing whether this user object exists or not. Thus, we conditionally render two different stack navigators (we will create them in the next section). So, a user will only be able to log in and access `HomeScreen` if their respective user object exists.\n\nOne way to share data that is considered global in a React app is to use the React Context API. When creating a context, we must pass a default value. This value is used when a component has a matching Provider.\n\nThe Provider allows the React components to subscribe to the context changes. It wraps all other components in the React or React Native app.\n\nTo create an authenticated user provider, export a function called `AuthenticatedUserProvider`. This provider is going to allow the screen components to access the logged-in or logged-out state of a user in the application. So, in the code snippet below, we define a state variable called `user`.\n\n```js\nimport React, { useState, createContext } from 'react';\n\nexport const AuthenticatedUserContext = createContext({});\n\nexport const AuthenticatedUserProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n\n  return (\n    <AuthenticatedUserContext.Provider value={{ user, setUser }}>\n      {children}\n    </AuthenticatedUserContext.Provider>\n  );\n};\n```\n\n## Creating Home and Auth stacks\n\nIn this example app, there are two different stack navigator files to create:\n\n- `HomeStack.js`: composed of `HomeScreen`\n- `AuthStack.js`: composed of `LoginScreen` and `SignupScreen`\n\nCreate these new files inside the `navigation/` directory.\n\nAdd the following code snippet inside `HomeStack.js`:\n\n```js\nimport React from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nimport HomeScreen from '../screens/HomeScreen';\n\nconst Stack = createStackNavigator();\n\nexport default function HomeStack() {\n  return (\n    <Stack.Navigator headerMode=\"none\">\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n    </Stack.Navigator>\n  );\n}\n```\n\nNext, add the following code snippet inside `AuthStack.js`:\n\n```js\nimport React from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nimport LoginScreen from '../screens/LoginScreen';\nimport SignupScreen from '../screens/SignupScreen';\n\nconst Stack = createStackNavigator();\n\nexport default function AuthStack() {\n  return (\n    <Stack.Navigator headerMode=\"none\">\n      <Stack.Screen name=\"Login\" component={LoginScreen} />\n      <Stack.Screen name=\"Signup\" component={SignupScreen} />\n    </Stack.Navigator>\n  );\n}\n```\n\n## Check a user's authenticated state\n\nThe Firebase Auth service provides a listener called `onAuthStateChanged` to detect changes to a user's logged-in state. It subscribes to a user's current authenticated state and receives an event whenever that state changes.\n\nUsing this listener, if the returned state of a user is `null`, it means that the user is currently logged out. If it does not return `null`, it will return a user object. This helps in persisting a user's authentication state in the app.\n\nWe will use this listener method at the top of our navigator. Create a new file called `RootNavigator.js` inside the `navigation/` directory. Start by importing the following statements:\n\n```js\nimport React, { useContext, useEffect, useState } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { View, ActivityIndicator } from 'react-native';\n\nimport Firebase from '../config/firebase';\nimport { AuthenticatedUserContext } from './AuthenticatedUserProvider';\nimport AuthStack from './AuthStack';\nimport HomeStack from './HomeStack';\n\nconst auth = Firebase.auth();\n```\n\nNext, create a function component called `RootNavigator`. Inside it, define a state variable called `isLoading` when a user's authenticated state is currently being checked with the Firebase Auth service.\n\nUsing the `useContext` hook, get the current value of `user` and the method `setUser` to update that value from `AuthenticatedUserContext`.\n\nThis hook will trigger a re-render whenever the value of `user` changes from the `AuthenticatedUserContext`.\n\nThe `onAuthStateChanged` listener will trigger inside the `useEffect` hook. It also returns an unsubscriber function which allows the app to stop listening for events whenever the hook is no longer in use.\n\nAdd the following code snippet inside the `RootNavigator.js` file:\n\n```js\nexport default function RootNavigator() {\n  const { user, setUser } = useContext(AuthenticatedUserContext);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // onAuthStateChanged returns an unsubscriber\n    const unsubscribeAuth = auth.onAuthStateChanged(async authenticatedUser => {\n      try {\n        await (authenticatedUser ? setUser(authenticatedUser) : setUser(null));\n        setIsLoading(false);\n      } catch (error) {\n        console.log(error);\n      }\n    });\n\n    // unsubscribe auth listener on unmount\n    return unsubscribeAuth;\n  }, []);\n\n  if (isLoading) {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <ActivityIndicator size=\"large\" />\n      </View>\n    );\n  }\n\n  return (\n    <NavigationContainer>\n      {user ? <HomeStack /> : <AuthStack />}\n    </NavigationContainer>\n  );\n}\n```\n\nIn the above code snippet, note that both the stack navigators are conditionally rendered depending on the state of the user.\n\n## Wrapping RootNavigator with AuthenticatedUserProvider\n\nNow that `RootNavigator` is defined, the question remains on how to use `AuthenticatedUserProvider` to wrap a set of components in the current app tree.\n\nWell, you have to wrap this provider around the `RootNavigator` in order to use the helper functions as well as the value of the current user in the screen components.\n\nCreate an `index.js` file inside the `navigation/` directory and add the following code snippet:\n\n```js\nimport React from 'react';\n\nimport { AuthenticatedUserProvider } from './AuthenticatedUserProvider';\nimport RootNavigator from './RootNavigator';\n\n/**\n * Wrap all providers here\n */\n\nexport default function Routes() {\n  return (\n    <AuthenticatedUserProvider>\n      <RootNavigator />\n    </AuthenticatedUserProvider>\n  );\n}\n```\n\nAlso, modify the `App.js` file to return `Routes`.\n\nHere is the demo of the complete authentication flow you will get after this step:\n\n![ss9](https://i.imgur.com/aEN728J.gif)\n\nIf you head over to the Firebase console and go to the **Users** tab on the Authentication page, you will see the details of the signed up user.\n\n![ss10](https://i.imgur.com/NEiqR2O.png)\n\n## Conclusion\n\nYou have now successfully integrated the Firebase Auth service in a React Native app using Expo SDK.\n\nUsing Firebase JS SDK allows integrating other sign-in providers such as Phone authentication, Facebook and Google. Refer to [Expo’s official documentation](https://docs.expo.io/guides/using-firebase/#login-methods) to try out other login providers.\n\nIf you need to take a look at the code for this tutorial, you can refer to this [GitHub repo](https://github.com/amandeepmittal/react-native-examples/tree/master/expo-firebase-auth-example).\n",
            "url": "https://amanhimself.dev//blog/firebase-authentication-with-expo",
            "title": "How To Integrate Firebase Authentication With an Expo App",
            "summary": "How To Integrate Firebase Authentication With an Expo App",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/common-proptypes-in-react-and-typescript",
            "content_html": "---\ntitle: 'Common Prop Types in TypeScript and React'\ndate: '2021-06-29'\nslug: 'common-prop-types-in-typescript-and-react'\nthumbnail: '/thumbnails/typescript.png'\ntag: 'react'\ncanonicalUrl: 'https://amanhimself.dev/blog/common-prop-types-in-typescript-and-react'\n---\n\nAll **primitives in JS** are available in TS.\n\n```ts\ntype Props = {\n  size: number;\n  name: string;\n  disabled: boolean;\n};\n```\n\nAn **object** **type** is simply an empty object or an object with keys. An empty object can have any number of properties and values.\n\nIf the object is defined explicitly with keys, it will only accept those values. The shape of the object will remain certain.\n\n```ts\ntype Props = {\n  emptyObject: {};\n  product: {\n    id: string;\n    price: number;\n  };\n};\n```\n\nUsing square brackets `[]`, an **array type** is defined:\n\n```ts\ntype ListProps = {\n  items: string[];\n};\n```\n\nThe prop `items` here only expects values in the array of `string` type. To define an array of objects of a certain shape:\n\n```ts\ntype ListProps = {\n  items: {\n    id: string;\n    name: string;\n    price: number;\n  }[];\n};\n```\n\nTypeScript does not asks you to define the shape of each object. Although, refactoring `ListProps` as below is valid:\n\n```ts\ntype Item = {\n  id: string;\n  name: string;\n  price: number;\n};\n\ntype ListProps = {\n  item: Item;\n  items: Item[];\n};\n```\n\nUsing **[union type](https://react-typescript-cheatsheet.netlify.app/docs/basic/troubleshooting/types/#union-types-and-type-guarding)**, certain values for a prop can be described as:\n\n```ts\ntype Button = {\n  variant: 'primary' | 'danger' | 'info';\n  value: string | number;\n};\n```\n\nTypeScript cares when it comes to passing arguments on a function.\n\n```ts\ntype Props = {\n  onEventListener: () => void; // some times event listeners do not have return type\n  onChangeText: (title: string) => void;\n};\n```\n\nOn a function, it is possible to define return type as inline type declaration:\n\n```ts\nfunction add(x: number, y: number): number {\n  return a + b;\n}\n```\n",
            "url": "https://amanhimself.dev//blog/common-proptypes-in-react-and-typescript",
            "title": "Common Prop Types in TypeScript and React",
            "summary": "Common Prop Types in TypeScript and React",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/prop-types-in-react-and-typescript",
            "content_html": "---\ntitle: 'Prop types in React and TypeScript'\ndate: '2021-06-28'\nslug: 'prop-types-in-react-and-typescript'\nthumbnail: '/thumbnails/typescript.png'\ntag: 'react'\ncanonicalUrl: 'https://amanhimself.dev/blog/prop-types-in-react-and-typescript/'\n---\n\n[PropTypes](https://www.npmjs.com/package/prop-types) provide built-in typechecking capabilities when writing a React app. Checking the type of prop in a React component in a large application helps catch bugs at run-time.\n\nTypically in a React app, you will need to install the package `yarn add prop-types`. Then, inside a component, explicitly define the type of a prop.\n\n```js\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// A component that accepts \"color\" prop\nfunction FavoriteColor({ color }) {\n  return <h2>My favorite Color is {color}</h2>;\n}\n\nFavoriteColor.propTypes = {\n  color: PropTypes.string\n};\n\n// Parent component\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FavoriteColor color={'Red'} />\n    </div>\n  );\n}\n\nexport default App;\n```\n\nAbove code snippet will run fine, and there no errors or warnings yet. If you use VSCode, hover over the prop `color` in the `App` component. You will see the expected data type on the prop.\n\n![s1](https://res.cloudinary.com/amanmittal/image/upload/v1624823701/s1_beblnm.png)\n\nBut what if in the `App` component, the value of prop `color` is changed to a number by mistake. The component will still render in the web browser.\n\n```js\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FavoriteColor color={120} />\n    </div>\n  );\n}\n```\n\nBut if you open the browser's Developer Tools and go to console, you will see the error.\n\n![s2](https://res.cloudinary.com/amanmittal/image/upload/v1624823701/s2_p9h3mq.png)\n\nThe `prop-types` package provide validation at run-time. Not a great developer experience (imagine large applications). Using TypeScript in a React application can make the developer experience better.\n\n## PropTypes with TypeScript and React\n\nTake the previous code snippet, copy it in a `.tsx` file. Here is how the components will look. Notice the red squiggly line beneath the prop `color`.\n\n![s3](https://res.cloudinary.com/amanmittal/image/upload/v1624823702/s3_okboft.png)\n\nTypeScript is smart enough not to compile the code if a prop has a type of `any`.\n\n## Inferring PropTypes in TypeScript\n\n`PropTypes` package offers `InferProps` that enables to infer the types for an existing prop-type definition on a component. It uses the `@types/prop-types` package to create type definitions.\n\nTo use `InferProps`, import it from the `prop-types` library and then define type declarations on the components prop.\n\n```tsx\nimport PropTypes, { InferProps } from 'prop-types';\n\nfunction FavoriteColor({ color }: InferProps<typeof FavoriteColor.propTypes>) {\n  return <h2>My favorite Color is </h2>;\n}\n\nFavoriteColor.propTypes = {\n  color: PropTypes.string\n};\n```\n\nCode compiles, and there are no errors.\n\n## Using type keyword to declare prop type definitions\n\nTypeScript comes with a `type` keyword. It can be used to define prop types without using the `prop-types` package.\n\n```tsx\ntype Props = {\n  color: string;\n};\n\nfunction FavoriteColor({ color }: Props) {\n  return <h2>My favorite Color is {color} </h2>;\n}\n```\n\nThe VSCode IntelliSense will detect the type of `color` prop in the `App` component. It will allow you to provide anything other than a `string` value for this prop.\n\n![s4](https://res.cloudinary.com/amanmittal/image/upload/v1624823701/s4_fyz6bw.png)\n\n## Props are required in TypeScript\n\nAnother difference to notice here is that, with TypeScript, all props required by default. In the `prop-types` package, all props are optional by default. To make a prop required, you will have to use `.isRequired` explicitly.\n\nWith TypeScript, that is not the case.\n\n![s5](https://res.cloudinary.com/amanmittal/image/upload/v1624823702/s5_m36cnq.png)\n\n## Optional props in TypeScript\n\nIf a component has an optional prop, add a question mark when declaring prop type:\n\n```tsx\ntype Props = {\n  color?: string;\n};\n```\n",
            "url": "https://amanhimself.dev//blog/prop-types-in-react-and-typescript",
            "title": "Prop types in React and TypeScript",
            "summary": "Prop types in React and TypeScript",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/first-three-months-as-developer-advocate",
            "content_html": "---\ntitle: '🌱 Life at Draftbit - First 3 Months as a Developer Advocate'\ndate: '2021-05-25'\nthumbnail: '/thumbnails/avo.png'\nslug: 'first-three-months-as-developer-advocate'\ntag: 'devrel'\ncanonicalUrl: 'https://amanhimself.dev/blog/first-three-months-as-developer-advocate/'\n---\n\n![cover_image](https://i.imgur.com/TBebjua.jpg)\n\n<blockquote>\nPhoto by <a href=\"https://unsplash.com/@x_prayer?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Prayer X</a> on <a href=\"https://unsplash.com/s/photos/galaxy?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n</blockquote>\n\n<br />\n\nIt has been 3 months since I joined [Draftbit](https://draftbit.com/). It feels like I’ve been on a journey. I was initially hired as a tech writer but the role eventually evolved (within a month) into Developer Advocate 🥑.\n\nOn a personal level, the first thing I learned is that embrace your surroundings (new) without overthinking too much. It has been the highlight for me this year, so far.\n\nThe reason I say this is because my background is not in Developer Advocacy or Relations per se. I've been working as a contract developer/consultant for most of my time, in the last three years. I've worked with different tech stacks inside the JavaScript ecosystem such as Node.js, AngularJS, React and React Native but not on things outside it.\n\nBut for the past few years, I have been writing blog posts and tutorials. Trying to document what I am learning in a way I could go back and read the stuff myself or refer to someone else when required. I do not have an extraordinary memory and like to take notes when I am learning. I enjoy the process. It doesn't feel like \"work\".\n\n## What is a Developer Advocate?\n\nIn 2019, when I first got to know about Draftbit at [App.js conf](https://appjs.co/), I was excited to learn that there's a world beyond building mobile apps inside VSCode (insert your preferred editor here). At that time though I did not know what exactly a Dev Advocate is.\n\nWhat I've gathered about Dev Advocacy or understand right now is that various organizations differ in responsibilities when it comes to the role. Though there are common responsibilities or activities that most people working in Dev Advocacy share. Content creating is one. Brand awareness. Creating and sharing resources through the medium of blogging or live streams publishing videos and speaking at remote or offline events. Building community is also one aspect of it. Creating demos using the product to solve specific use cases is another aspect.\n\nWithout spreading out my unorganized thoughts around the matter too much, here are some of the resources that helped me get the context on what Developer Advocacy is:\n\n- Sam Julien's book on [Getting Started in Developer Relations](https://learn.samjulien.com/getting-started-in-developer-relations)\n\nA few weeks back I did share my thoughts in the [newsletter](https://www.getrevue.co/profile/amanhimself). I do recommend this book if you are seeking your first role or are curious about getting to know more. This is the best introduction I've found so far. It made me realize that I have been doing some of the stuff in my free time that a Dev Advocate might do.\n\n- Mary Thengvall's [The Business Value of Developer Relations](https://www.persea-consulting.com/book)\n\nIt goes more in-depth and talks about the importance of nurturing a community, maintaining positive relations, building a team of DevRels, and much more. She [has an amazing post on her blog](https://www.marythengvall.com/blog/2020/6/29/the-camunda-developer-relations-career-path) sharing her own experience.\n\n## Working with Draftbit\n\nSince joining, a common question I get asked is how my day as a Developer Advocate looks like. I would say, depending on the day, that it depends. 🙃\n\nIt depends on some factors as to the kind of thing I am working on, in the following week. Usually, I spend a huge amount of time creating guides and tutorials for various use cases or some of the features that get released. At times, I am trying to help community members to resolve their issues.\n\nLiving in an Eastern time zone is one of the reasons that I had missed out on some of the exciting opportunities in past. But here, it is a welcoming aspect. I think it is good to have open mind about it in this ever connected world.\n\nThe experience has been a delightful one. I have huge gratitude to express for the entire team at Draftbit. They are friendly, have tons of experience, are willing to offer feedback and helpful suggestions, and allow me to express my own ideas (which I think is vital to be a part of something and be excited about it at the same time).\n\n## Some challenges and personal obstacles\n\nOne challenge that I face at times is explaining the semantics of the product from a non-engineering point of view, in written words.\n\nDraftbit is a visual tool to build a mobile app. It is uses React Native and Expo's ecosystem under the hood. The end-user does not have to know about that and there is no requirement for them to know React Native framework.\n\nI've spent a lot of time in the first three months on a feature called [Custom Code](https://docs.draftbit.com/docs/custom-code). It is an advanced feature where an individual can utilize open-source libraries available with Expo and React Native to achieve custom functionalities like integrating a Camera within their app or utilize Firebase Authentication.\n\nThis requires me to create demos and write guides in a way that an individual from non-technical background or having no React Native experience can understand with little effort. One way I am trying to tackle is to explain concepts without including too much technical jargon.\n\nIf I cannot avoid mentioning something that I think is too technical, I try to provide references or links to documentation wherever necessary to provide a better context (or try improve the internal documentation). Including GIFs of the flow of work or documenting steps to achieve the desired result is another thing that has become a part of my flow.\n\nMaking cameo appearances on [Draftbit’s YouTube channel](https://www.youtube.com/c/Draftbit/videos) is one more thing I am getting comfortable with. I never thought I would engage in [speaking in public](https://www.youtube.com/watch?v=YIRxTUCY0NQ) (👋 hello, anxiety) but now I've done it a few times in a row. I won't say I am good at it. There is a lot of room to improve on a personal level but without doing it I wouldn't know that. Engaging in this activity has helped me realize that coming out of my shell is important.\n\nHere is me talking about Custom Code during Draftbit office hours:\n\n[![IMAGE ALT TEXT HERE](https://img.youtube.com/vi/pMz4XRjdOd0/0.jpg)](https://www.youtube.com/watch?v=pMz4XRjdOd0)\n\n🙌 Shoutout to my colleague [Nick](https://twitter.com/nickselman) for these timely opportunities.\n\n## Final Thoughts\n\nProviding a value is vital and it is with this mindset I try to approach things. Working as a Developer Advocate, I get to do it more often and it is fun!\n\nIf you want to work with me, check out [draftbit.com/jobs](https://draftbit.com/jobs#openings) to see if there's a role that is exciting to you.\n\nIf you want to talk about Draftbit, have questions, or React Native, or DevRel, please DM me on [Twitter](https://twitter.com/amanhimself).\n\n💌 To get notified about my future articles, subscribe my [personal newsletter here](https://www.getrevue.co/profile/amanhimself).\n",
            "url": "https://amanhimself.dev//blog/first-three-months-as-developer-advocate",
            "title": "🌱 Life at Draftbit - First 3 Months as a Developer Advocate",
            "summary": "🌱 Life at Draftbit - First 3 Months as a Developer Advocate",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/custom-preview-image-gallery-in-react-native",
            "content_html": "---\ntitle: 'How to Create a Custom Image Gallery in React Native'\nslug: 'custom-preview-image-gallery-in-react-native'\ndate: '2021-05-17'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://blog.crowdbotics.com/how-to-create-a-custom-tab-bar-in-react-native/'\n---\n\nIn React Native, there are many ways to display a collection of images in a gallery view. One form is commonly known as carousel. Using an open-source library such as [react-native-swiper](https://github.com/leecade/react-native-swiper) or more advance [react-native-snap-carousel](https://github.com/meliorence/react-native-snap-carousel) serves the purpose. But what if we want to create a custom gallery view with additional functionality?\n\nIn this tutorial, let's create a custom gallery of images using `react-native-snap-carousel` and `FlatList` from React Native. The open-source library is going to display each image in a carousel view. The `FlatList` is what we will use to display the thumbnail view for each image below the carousel. The construction of the syncing part between the two is to add a functionality such that when an image in the carousel is scrolled either left or right, the thumb in the `FlatList` is also going to be scrolled along with it. Of course, to achieve this synchronization between the two, we are going to use React Hooks such that you will be able to implement such a pattern in your own React Native apps.\n\n## Pre-requisites\n\nTo follow this tutorial, please make sure you are familiarized with JavaScript/ES6 and meet the following requirements in your local dev environment:\n\n- [Node.js](https://nodejs.org/en/) version >= 12.x.x installed.\n- Have access to one package manager such as npm or yarn or npx.\n- [react-native-cli](https://www.npmjs.com/package/react-native-cli) installed, or use npx.\n\n## Setup a React Native Project\n\nTo follow along with this tutorial, set up a new React Native project and install all the dependencies that are required to implement the example. Open up a terminal window and run each command as mentioned in the order:\n\n```shell\nnpx react-native init rnPreviewImageGallery\n\ncd rnPreviewImageGallery\n\nyarn add react-native-snap-carousel\n```\n\nThe reason I like to use `react-native-snap-carousel` is that it does not require any additional steps to configure to be used on native devices. Plus, it offers different layouts to configure the carousel view, out of the box.\n\nAfter installing the dependencies, let's bring in the image assets to use. I am using images from [Unsplash](https://unsplash.com/s/photos/amsterdam) to demonstrate. To follow along, the images are stored at [this location](https://github.com/amandeepmittal/react-native-examples/tree/master/rnPreviewImageGallery/assets/images) in the example GitHub repo.\n\nAfter setting up the source images to be used, open up the `App.js` file, and let's initiate it with a title of the screen to display. Import the following statements, then create an `IMAGES` object by importing each image using Common JS require statements.\n\nUsing the `useState` React hook, create an array of images called `images`, with each image having a unique `id` to differentiate between each object in the array.\n\n```js\nconst [images, setImages] = useState([]);\n```\n\nThe `useState` hook returns two values in an array. The first value is the current value of the state object, and the second value in the array is the function to update the state value of the first. This why the second value starts with a conventional prefix of a set. You can technically name it anything, but following conventions that are commonly used in the React world is a good practice to follow.\n\nAlso, define some constants that will be used throughout the example such as the overall spacing between each thumbnail and the width and height of each thumbnail to represent in the `FlatList`.\n\nTo set up the carousel view of an image for different screen sizes, let's use the `Dimensions` API from React Native.\n\nAdd the following code snippet to `App.js` and make sure to define state variables at the top of the `App` function. Hooks are always called at the top level of a functional component in React. When defining a state, they must be the first thing in the function, especially before returning a JSX.\n\n```js\nimport React, { useState, useRef } from 'react';\nimport {\n  TouchableOpacity,\n  View,\n  Text,\n  Image,\n  FlatList,\n  Dimensions\n} from 'react-native';\n\nconst { width } = Dimensions.get('window');\nconst SPACING = 10;\nconst THUMB_SIZE = 80;\n\nconst IMAGES = {\n  image1: require('./assets/images/1.jpeg'),\n  image2: require('./assets/images/2.jpeg'),\n  image3: require('./assets/images/3.jpeg'),\n  image4: require('./assets/images/4.jpeg'),\n  image5: require('./assets/images/5.jpeg'),\n  image6: require('./assets/images/6.jpeg'),\n  image7: require('./assets/images/7.jpeg')\n};\n\nconst App = () => {\n  const [images, setImages] = useState([\n    { id: '1', image: IMAGES.image1 },\n    { id: '2', image: IMAGES.image2 },\n    { id: '3', image: IMAGES.image3 },\n    { id: '4', image: IMAGES.image4 },\n    { id: '5', image: IMAGES.image5 },\n    { id: '6', image: IMAGES.image6 },\n    { id: '7', image: IMAGES.image7 }\n  ]);\n\n  return (\n    <View style={{ flex: 1, backgroundColor: 'black', alignItems: 'center' }}>\n      <Text\n        style={{\n          color: 'white',\n          fontSize: 32,\n          marginTop: 50,\n          marginBottom: 25\n        }}\n      >\n        Custom Gallery\n      </Text>\n      {/* Carousel View */}\n      {/* Thumbnail component using FlatList */}\n    </View>\n  );\n};\n\nexport default App;\n```\n\nTo initialize the development server for iOS, please execute the command `npx react-native run-ios` from a terminal window. Similarly, the build command for Android is `npx react-native run-android`.\n\nHere is the app running after this step on an iOS simulator:\n\n<img src='https://miro.medium.com/max/880/0*kS7PBYWOT71qfQ-g.png' />\n\n## Add a carousel view with react-native-snap-carousel\n\nThe component library `react-native-snap-carousel` has a vast API of properties and different layout patterns that are plug-n-use and even allows you as a developer to implement custom interpolations and animations. You can find more information on how to customize it in the official documentation [here](https://github.com/meliorence/react-native-snap-carousel/blob/master/doc/CUSTOM_INTERPOLATIONS.md).\n\nFor the current example, let's stick to the default layout pattern to display a carousel. To create a carousel view, import the component from `react-native-snap-carousel` by adding the following import statement in the `App.js` file. Let's also import the `Pagination` component offered separately by this library to display the dot indicator.\n\n```js\n// after other import statements\nimport Carousel, { Pagination } from 'react-native-snap-carousel';\n```\n\nThen, add a `View` component after the title in the `App.js` file. It is going to wrap the `Carousel` component which takes a set of required props to work:\n\n- `data` the array of `images` or items to loop.\n- `layout` to define the way images are rendered and animated. We will use the `default` value.\n- `sliderWidth` to define the width in pixels for the carousel container.\n- `itemWidth` to define the width in pixels for each item rendered inside the carousel.\n- `renderItem` takes an image item from the `data` array and renders it as a list. To render the image, the `Image` component from React Native is used.\n\nAdd the following code snippet in `App.js` to see the carousel in action:\n\n```js\nreturn (\n  <View style={{ flex: 1, backgroundColor: 'black', alignItems: 'center' }}>\n    {/* Title JSX Remains same */}\n    {/* Carousel View */}\n    <View style={{ flex: 1 / 2, marginTop: 20 }}>\n      <Carousel\n        layout=\"default\"\n        data={images}\n        sliderWidth={width}\n        itemWidth={width}\n        renderItem={({ item, index }) => (\n          <Image\n            key={index}\n            style={{ width: '100%', height: '100%' }}\n            resizeMode=\"contain\"\n            source={item.image}\n          />\n        )}\n      />\n    </View>\n  </View>\n);\n```\n\nIn the simulator you are going to get the following result:\n\n<img src='https://miro.medium.com/max/536/0*9-RZy5PEztyt-lEF.gif' />\n\n## Add a dot indicator\n\nThe `Pagination` component from the `react-native-snap-carousel` is used to display a dot indicator. This dot indicator requires the following props:\n\n- `activeDotIndex` to represent the current image shown in the carousel.\n- `dotsLength` to calculate how many dots to display based on the number of items or images in the carousel.\n- `inactiveDotColor` to display the dot indicator color when it is inactive.\n- `dotColor` to display the dot indicator color when it is active.\n- `inactiveDotScale` is used to set the value to scale the dot indicator when it's inactive.\n- `animatedDuration` is used to control the length of dot animation in milliseconds. The default value for it is `250`. It is not required, but to change the value, use this prop.\n\nAdd the following code snippet after the `Carousel` component in `App.js` file:\n\n```js\n<View>\n  {/* Carousel Component code remains same */}\n  <Pagination\n    inactiveDotColor=\"gray\"\n    dotColor={'orange'}\n    activeDotIndex={indexSelected}\n    dotsLength={images.length}\n    animatedDuration={150}\n    inactiveDotScale={1}\n  />\n</View>\n```\n\nThe value of `activeDotIndex` is calculated based on the current index of the image item. Let's add a state variable called `indexSelected` in the `App` component with a value of zero. It is going to update when the index value of the current image changes. The initial value of this state variable is going to be `0`. Create a handler method called `onSelect()` which updates the value of the current index.\n\nAdd the following code snippet before rendering the JSX in `App` component:\n\n```js\nconst App = () => {\n  // code remains same\n  const [indexSelected, setIndexSelected] = useState(0);\n\n  const onSelect = indexSelected => {\n    setIndexSelected(indexSelected);\n  };\n};\n```\n\nNow, add a prop to the `Carousel` component called `onSnapToItem`. It accepts a callback as a value. This callback is fired every time the index of the image item changes, in other words, every time the user swipes to the next image. The only argument passed to this callback is the current `index` of the item which is updated with the help of the `onSelect()` handler method.\n\n```js\n<Carousel\n  // rest remains same\n  onSnapToItem={index => onSelect(index)}\n/>\n```\n\nIn the simulator, you will get the following result. The dot indicator now syncs with the Carousel item.\n\n<img src='https://miro.medium.com/max/588/0*hE8I2aJxoFp5UnDu.gif' />\n\nLet's add another view component below the `View` that wraps the carousel to display the total number of images and the current image index number.\n\n```js\n// Carousel View\n<View\n  style={{\n    marginTop: 20,\n    paddingHorizontal: 32,\n    alignSelf: 'flex-end'\n  }}\n>\n  <Text\n    style={{\n      color: 'white',\n      fontSize: 22\n    }}\n  >\n    {indexSelected + 1}/{images.length}\n  </Text>\n</View>\n```\n\nHere is the result after this step:\n\n<img src='https://miro.medium.com/max/800/0*9h1KAqUOt9LzOORL.png' />\n\nAwesome! The configuration for the Carousel component is now complete. Let's see how to sync it with a custom FlatList component in the next section.\n\n## Create a list of thumbnails using FlatList\n\nLet's display a list of thumbnails using `FlatList` from React Native using the same array of `images` from the state variable. This list is going to be displayed at the bottom of the device's screen and is a horizontal list. To achieve that, let's set use `position: absolute` style property with a `bottom` of value `80`.\n\nEach thumbnail is composed of an `Image` component. It has the width and the height of the `THUMB_SIZE` variable we declared earlier. To show the selected thumbnail or the current thumbnail, using a ternary operator, let's manipulate the style properties `borderWidth` and `borderColor` on this `Image` component.\n\nIt is going to be wrapped by a `TouchableOpacity` component because its `onPress` prop is going to fire a handler method we have yet to create, to allow a user to change the selected image by a tap.\n\nAdd the following code snippet after Carousel's View:\n\n```js\n<FlatList\n  horizontal={true}\n  data={images}\n  style={{ position: 'absolute', bottom: 80 }}\n  showsHorizontalScrollIndicator={false}\n  contentContainerStyle={{\n    paddingHorizontal: SPACING\n  }}\n  keyExtractor={item => item.id}\n  renderItem={({ item, index }) => (\n    <TouchableOpacity activeOpacity={0.9}>\n      <Image\n        style={{\n          width: THUMB_SIZE,\n          height: THUMB_SIZE,\n          marginRight: SPACING,\n          borderRadius: 16,\n          borderWidth: index === indexSelected ? 4 : 0.75,\n          borderColor: index === indexSelected ? 'orange' : 'white'\n        }}\n        source={item.image}\n      />\n    </TouchableOpacity>\n  )}\n/>\n```\n\nThe list of thumbnails renders as shown below:\n\n<img src='https://miro.medium.com/max/800/0*JyzPZ5toA-v8mg3k.png' />\n\nIn the previous image, you will see that the first image is selected. You cannot change the currently selected image yet in the FlatList.\n\n## Syncing the Carousel view with the FlatList\n\nThe basic element that is going to allow us to sync the image change between both the Carousel view and the thumbnail is a React hook called `useRef`.\n\nIt is a function that returns a mutable ref object whose `current` property can be initialized to keep track of the current index value for each image. The index value here is the image selected. Initially, it is going to be the first thumbnail and the first image shown in the carousel.\n\nLet's create a ref that is going to be the reference of the current image from `Carousel` component and add it to the `App.js` file:\n\n```js\nconst App = () => {\n  const carouselRef = useRef();\n  // ...\n};\n```\n\nSince the `Carousel` component keeps track of the change of the current index of the image component by triggering a callback called `snapToItem()`, we can use it to sync with the `FlatList`.\n\nStart by adding a handler method called `onTouchThumbnail()` after defining the ref. It accepts one argument called `touched` which is the index value of the current image selected from the `TouchableOpacity` component or Carousel. If the value of the argument `touched` and `indexSelected` is the same, do nothing. Otherwise, when the value of the `touched` or `indexSelected` updates, change the current image in the `Carousel` and the `FlatList` at the same time.\n\n```js\nconst onTouchThumbnail = touched => {\n  if (touched === indexSelected) return;\n\n  carouselRef?.current?.snapToItem(touched);\n};\n```\n\nAdd the `ref` prop on `Carousel` component:\n\n```js\n<Carousel\n  ref={carouselRef}\n  //...\n/>\n```\n\nNext, add an `onPress` prop on the `TouchableOpacity` component:\n\n```js\n<TouchableOpacity\n  onPress={() => onTouchThumbnail(index)}\n  activeOpacity={0.9}\n>\n```\n\nHere is the output after this step:\n\n<img src='https://miro.medium.com/max/582/0*TdtJeFSTFtRUV5L_.gif' />\n\nThe selection sync works do you notice there is a problem with the `FlatList` component? It doesn't scroll on its own when an image from the Carousel is selected that is not in the current view on the screen.\n\n## Scroll the FlatList using scrollToOffset\n\nStart by creating a new ref called `flatListRef` in `App.js` and add the ref prop to `FlatList` component:\n\n```js\nconst App = () => {\n  // ...\n  const flatListRef = useRef();\n\n  return (\n    // ...\n    <FlatList\n      ref={flatListRef}\n      // rest remains same\n    />\n  );\n};\n```\n\nThe [scrollToOffset method](https://reactnative.dev/docs/flatlist#scrolltooffset) available on `FlatList` can be used to scroll the thumbnails to a certain offset. This method accepts two arguments. The first is called `offset` which accepts a number as a value. The second argument is the `animated` property which determines whether the scroll to even should be animated or not.\n\nThe value for the `offset` is going to be `indexSelected` of the thumbnail multiplied by the size of the thumbnail. Let's also set the value of `animated` to true.\n\nSince the `FlatList` has to scroll on every selection, let's add mutate the ref inside the handler method `onSelect()`.\n\n```js\nconst onSelect = indexSelected => {\n  setIndexSelected(indexSelected);\n\n  flatListRef?.current?.scrollToOffset({\n    offset: indexSelected * THUMB_SIZE,\n    animated: true\n  });\n};\n```\n\nHere is the output after this step:\n\n<img src='https://miro.medium.com/max/584/0*YVetWmnrP5zLKCi5.gif' />\n\n## Conclusion\n\nWe have discussed only one scenario of creating a custom image gallery with FlatList. The main objective here is to get familiar with the use of react-native-snap-carousel, useRef hook, and `scrollToOffset` method in FlatList.\n\n## Further reading\n\n- [A complete list of FlatList methods available](https://reactnative.dev/docs/flatlist#methods)\n- [A complete list of props available on Carousel component from react-native-snap-carousel](https://github.com/meliorence/react-native-snap-carousel/blob/master/doc/PROPS_METHODS_AND_GETTERS.md)\n- [In detail guide on how to use Hooks in React & React Native apps](https://blog.crowdbotics.com/build-a-react-app-with-localstorage-api-and-hooks/)\n\nOriginally Published at **[Crowdbotics's Blog](https://blog.crowdbotics.com/how-to-create-a-custom-tab-bar-in-react-native/)**.\n",
            "url": "https://amanhimself.dev//blog/custom-preview-image-gallery-in-react-native",
            "title": "How to Create a Custom Image Gallery in React Native",
            "summary": "How to Create a Custom Image Gallery in React Native",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/create-custom-tab-bar-in-react-native",
            "content_html": "---\ntitle: 'How to Create a Custom Tab Bar in React Native'\nslug: 'create-custom-tab-bar-in-react-native'\ndate: '2021-05-07'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://blog.crowdbotics.com/how-to-create-a-custom-tab-bar-in-react-native/'\n---\n\n[React Native](https://reactnative.dev/) is an amazing tool for creating beautiful and high performing mobile applications that run on both iOS and Android. Developing these apps, you might need navigation to navigate from one screen to another. To implement navigation in a React Native app, [React Navigation](https://reactnavigation.org/docs/getting-started) library does an awesome job of providing various navigation patterns such as stack, tabs, and drawer that can be utilized and customize based on the UI design of the app.\n\nIn this post, let's create a custom tab bar using React Navigation library bottom tabs component. We are going to create a simple tab bar and then learn how to make it translucent using a [Blur view](https://github.com/Kureev/react-native-blur).\n\n## Pre-requisites\n\nTo follow this tutorial, please make sure you are familiarized with JavaScript/ES6 and meet the following requirements in your local dev environment:\n\n- [Node.js](https://nodejs.org/) version >= `12.x.x` installed.\n- Have access to one package manager such as npm or yarn or npx.\n- [react-native-cli](https://www.npmjs.com/package/react-native-cli) installed, or use npx.\n\n## Installing react-navigation library\n\nTo create a new React Native app, please execute the following command from a terminal window on your local dev environment. Navigate inside the project directory created by `react-native-cli` and then install the dependencies:\n\n```shell\nnpx react-native init customTabBar\n\ncd customTabBar\n\n# install dependencies\nyarn add @react-navigation/native @react-navigation/bottom-tabs react-native-reanimated react-native-gesture-handler react-native-screens react-native-safe-area-context @react-native-community/masked-view react-native-vector-icons @react-native-community/blur\n```\n\nDo note that to demonstrate the example described in this article, we are using React Navigation v5 library. After installing these dependencies, please import the Gesture Handler library at the top of the `index.js` file of your React Native app:\n\n```js\nimport 'react-native-gesture-handler';\n```\n\nThen, for iOS, install the Cocoapods for all these dependencies by navigating inside the `ios` directory in a terminal window and executing the following command. Do note that, if you do not have the Cocoapods installed on your local dev machine, please follow the alternate command as described below:\n\n```shell\ncd ios && pod install\n\n# after pods are installed\ncd ..\n\n# alternate command\nnpx pod-install ios\n```\n\n## Installing react-native-vector-icons\n\nThe `react-native-vector-icons` module needs a bit more configuration steps for the iOS and Android platforms.\n\nFor iOS, you need to add the following inside `ios/customTabBar/Info.plist`:\n\n```c\n<key>UIAppFonts</key>\n<array>\n  <string>AntDesign.ttf</string>\n  <string>Entypo.ttf</string>\n  <string>EvilIcons.ttf</string>\n  <string>Feather.ttf</string>\n  <string>FontAwesome.ttf</string>\n  <string>FontAwesome5_Brands.ttf</string>\n  <string>FontAwesome5_Regular.ttf</string>\n  <string>FontAwesome5_Solid.ttf</string>\n  <string>Foundation.ttf</string>\n  <string>Ionicons.ttf</string>\n  <string>MaterialIcons.ttf</string>\n  <string>MaterialCommunityIcons.ttf</string>\n  <string>SimpleLineIcons.ttf</string>\n  <string>Octicons.ttf</string>\n  <string>Zocial.ttf</string>\n  <string>Fontisto.ttf</string>\n</array>\n```\n\nThen, the following to the `ios/Podfile` and run `cd ios && pod update` from a terminal window:\n\n```js\npod 'RNVectorIcons', :path => '../node_modules/react-native-vector-icons'\n```\n\nFor Android, add the following snippet in the file: `android/app/build.gradle`:\n\n```java\napply from: \"../../node_modules/react-native-vector-icons/fonts.gradle\"\n```\n\nThat's it to setup the react-native-vector-icons library.\n\nSince we have installed and configured everything we need to build and run the React Native app, you can now edit the `App.js` file which is the entry point of the React native app.\n\nTo build the app for iOS, please execute the command `npx react-native run-ios` from a terminal window. Similarly, the build command for Android is `npx react-native run-android`.\n\nHere is the default app running after the building for iOS:\n\n<img src='https://crowdbotics.ghost.io/content/images/2021/02/ss1-3.png' />\n\n## Add mock screens\n\nThe tab bar of this example app is going to display three different tabs. The first tab is used to display a list of items with images such that when the tab bar is added to the app, we can configure its translucency.\n\nLet's create them inside a separate directory called `screens/` and create the first file called `data.js` that contains the mock data to display inside the list view in the first tab. Add the following code snippet:\n\n```js\n// Images in this example demo are being used from Unsplash\n// Manarola - https://unsplash.com/photos/rknrvCrfS1k\n// Venezia - https://unsplash.com/photos/hFXZ5cNfkOk\n// Prague - https://unsplash.com/photos/pz0P5piDQXs\n\nexport const data = [\n  {\n    id: '1',\n    title: 'Manarola, Italy',\n    description: 'The Cliffs of Cinque Terre',\n    image_url:\n      'https://images.unsplash.com/photo-1516483638261-f4dbaf036963?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=633&q=80',\n    iconName: 'location-pin'\n  },\n\n  {\n    id: '2',\n    title: 'Venezia, Italy',\n    description: 'Rialto Bridge, Venezia, Italy',\n    image_url:\n      'https://images.unsplash.com/photo-1523906834658-6e24ef2386f9?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=630&q=80',\n    iconName: 'location-pin'\n  },\n  {\n    id: '3',\n    title: 'Prague, Czechia',\n    description: 'Tram in Prague',\n    image_url:\n      'https://images.unsplash.com/photo-1513805959324-96eb66ca8713?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=634&q=80',\n    iconName: 'location-pin'\n  },\n  {\n    id: '4',\n    title: 'Venezia, Italy',\n    description: 'Rialto Bridge, Venezia, Italy',\n    image_url:\n      'https://images.unsplash.com/photo-1523906834658-6e24ef2386f9?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=630&q=80',\n    iconName: 'location-pin'\n  }\n];\n```\n\nIn the above code snippet, you can see that `data` is an array that has different objects. Let's create the first tab screen called `Home.js` where this array of mock data will be used. Import the following statements inside it and then define a custom and width and height of the image card. This image card is displayed inside the list view as the item. Using React Native's `Dimensions` API, the width and height of the image are calculated based on the width of the device's screen.\n\n```js\nimport React from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  Image,\n  Dimensions,\n  ScrollView\n} from 'react-native';\n\nimport { data } from './data';\n\nconst { width } = Dimensions.get('screen');\n\nconst ITEM_WIDTH = width * 0.9;\nconst ITEM_HEIGHT = ITEM_WIDTH * 0.9;\n```\n\nUsing a `Text` component, the title of the tab is displayed. Using the `ScrollView` the list of items is implemented by using JavaScript's `map()` method that allows to iterate over each item. After importing the statements, add the following snippet:\n\n```js\nconst Home = () => {\n  const tabBarheight = useBottomTabBarHeight();\n  return (\n    <View style={styles.container}>\n      <View style={styles.contentContainer}>\n        <Text style={styles.title}>Home</Text>\n      </View>\n\n      {/* Scrollable Content */}\n      <View style={styles.scrollContainer}>\n        <ScrollView\n          indicatorStyle=\"white\"\n          contentContainerStyle={[\n            styles.scrollContentContainer,\n            { paddingBottom: tabBarheight }\n          ]}\n        >\n          {data.map(item => (\n            <View key={item.id} style={styles.imageContainer}>\n              <Image\n                style={styles.imageCard}\n                source={{ uri: item.image_url }}\n                resizeMode=\"cover\"\n              />\n            </View>\n          ))}\n        </ScrollView>\n      </View>\n    </View>\n  );\n};\n\nexport default Home;\n```\n\nLastly, the add the styles reference for each component in the above snippet:\n\n```js\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#0f0f0f'\n  },\n  contentContainer: {\n    marginTop: 50,\n    alignItems: 'center',\n    paddingHorizontal: 20,\n    paddingBottom: 20\n  },\n  title: {\n    fontSize: 20,\n    color: '#fff'\n  },\n  scrollContainer: {\n    flex: 1\n  },\n  scrollContentContainer: {\n    alignItems: 'center'\n  },\n  imageContainer: {\n    marginBottom: 14\n  },\n  imageCard: {\n    borderRadius: 14,\n    width: ITEM_WIDTH,\n    height: ITEM_HEIGHT\n  }\n});\n```\n\nThe other two tab screens are created inside `Browse.js` and `Library.js` and they do not render much information other than the name of the tab screen. Let's keep them bare minimum for the brevity of this example.\n\nInside the file `Browse.js`, add the following code snippet:\n\n```js\nimport React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nconst Browse = () => {\n  return (\n    <View style={styles.container}>\n      <View style={styles.contentContainer}>\n        <Text style={styles.title}>Browse</Text>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#0f0f0f'\n  },\n  contentContainer: {\n    marginTop: 50,\n    alignItems: 'center',\n    paddingHorizontal: 20\n  },\n  title: {\n    fontSize: 20,\n    color: '#fff'\n  }\n});\n\nexport default Browse;\n```\n\nInside the `Library.js` file, add the following snippet:\n\n```js\nimport React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nconst Library = () => {\n  return (\n    <View style={styles.container}>\n      <View style={styles.contentContainer}>\n        <Text style={styles.title}>Library</Text>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#0f0f0f'\n  },\n  contentContainer: {\n    marginTop: 50,\n    alignItems: 'center',\n    paddingHorizontal: 20\n  },\n  title: {\n    fontSize: 20,\n    color: '#fff'\n  }\n});\n\nexport default Library;\n```\n\nThat's it for the tab screens and mocking data inside one of the tab screen components.\n\n## How to create a tab bar\n\nCreate a new directory called `navigation/` at the root of the React Native project. In this directory, we are going to keep all the navigation configuration files. Inside it create a new directory called `TabNavigator`. It is going to have two separate files:\n\n- `index.js` to initiate the complete Tab Bar configuration\n- `CustomTabBar.js` to render the custom tab bar\n\nInside the file `TabNavigator/index.js` import the `createBottomTabNavigator` from `@react-navigation/bottom-tabs` package. Using this, a `Tab` object is initialized. This object allows defining the structure of the routes using `Tab.Navigator` and the define each route using the `Tab.Screen` component.\n\n```js\nimport React from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nimport Home from '../../screens/Home';\nimport Browse from '../../screens/Browse';\nimport Library from '../../screens/Library';\n\nconst Tab = createBottomTabNavigator();\n\nconst TabNavigator = () => {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Home\" component={Home} />\n      <Tab.Screen name=\"Browse\" component={Browse} />\n      <Tab.Screen name=\"Library\" component={Library} />\n    </Tab.Navigator>\n  );\n};\n\nexport default TabNavigator;\n```\n\nThe simple tab bar configuration is done. To see it in action, let's wrap it with the `NavigationContainer` component inside the new file called `navigation/RootNavigator.js`. This component manages the navigation tree. It contains the navigation state prop.\n\n```js\nimport * as React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\n\nimport TabNavigator from './TabNavigator';\n\nconst RootNavigator = () => {\n  return (\n    <NavigationContainer>\n      <TabNavigator />\n    </NavigationContainer>\n  );\n};\n\nexport default RootNavigator;\n```\n\nThe last step is to import and render the Root Navigator from inside the `App.js` file:\n\n```js\nimport React from 'react';\nimport { StatusBar } from 'react-native';\n\nimport RootNavigator from './navigation/RootNavigator';\n\nconst App = () => {\n  return (\n    <>\n      <StatusBar hidden />\n      <RootNavigator />\n    </>\n  );\n};\n\nexport default App;\n```\n\nOn an iOS simulator, the tab bar is shown as below. There are no custom styles currently applicable on the tab bar. The way it looks is because the tab bar component from React Navigation library has some default styles.\n\n<img src='https://crowdbotics.ghost.io/content/images/2021/02/ss2-1.png' />\n\n## Add icons to the tab bar\n\nTo add icons to each tab, first import the `Icon` component from react-native-vector-icons` library inside the`navigation/TabNavigator/index.js` file. For this example, let's use AntDesign based icons.\n\n```js\n// after other import statements\nimport Icon from 'react-native-vector-icons/AntDesign';\n```\n\nUsing the `screenOptions` object on `Tab.Navigator`, the configuration to display icons for each tab is enabled. This object has different methods and properties to enable different configurations. One such method is called `tabBarIcon` that allows us to display a custom icon for each tab. This function returns an `Icon` component that has props like `color` and `size` to apply tint color on the icon for each tab and define a numeric value for the size of the icon. It also has a prop called `name`\nthat allows defining which icon to be used for which screen.\n\nAdd the following code snippet:\n\n```js\nconst screenOptions = (route, color) => {\n  let iconName;\n\n  switch (route.name) {\n    case 'Home':\n      iconName = 'home';\n      break;\n    case 'Browse':\n      iconName = 'appstore-o';\n      break;\n    case 'Library':\n      iconName = 'folder1';\n      break;\n    default:\n      break;\n  }\n\n  return <Icon name={iconName} color={color} size={24} />;\n};\n\nconst TabNavigator = () => {\n  return (\n    <Tab.Navigator\n      screenOptions={({ route }) => ({\n        tabBarIcon: ({ color }) => screenOptions(route, color)\n      })}\n    >\n      {/* rest remains same */}\n    </Tab.Navigator>\n  );\n};\n```\n\nGo back to the iOS simulator and you will notice that the icons for each tab route are now displayed.\n\n<img src='https://crowdbotics.ghost.io/content/images/2021/02/ss3.png' />\n\n## Customizing the tab bar\n\nTo customize a tab bar, more options using the `tabBarOptions` object can be applied. This options object has properties to set active and inactive tint color for each tab, the background color for the whole tab bar, and so on.\n\nAdd the following options object on `Tab.Navigator`:\n\n```js\n<Tab.Navigator\n// ...\ntabBarOptions={{\n  activeTintColor: 'white',\n  inactiveTintColor: '#d9d9d9',\n  style: {\n    borderTopColor: '#66666666',\n    backgroundColor: 'transparent',\n    elevation: 0,\n  },\n}}\n>\n```\n\nThe property `elevation` is set to zero in the above code snippet such that there are no shadows overlap on Android when we will make the custom tab bar translucent in the next section.\n\n## Making the tab bar translucent\n\nTo make the tab bar translucent, we are going to use `BlurView` component from [@react-native-community/blur](https://github.com/Kureev/react-native-blur) component. It is used to add a blur view effect on iOS and Android. It is going to wrap a component called `BottomTabBar` from @react-navigation/bottom-tabs library. This component is a React element that is used to display the actual tab bar. It is provided by a prop called `tabBar` on `Tab.Navigator`. Using this React element, the tab bar can be defined explicitly inside the `CustomTabBar.js` component file.\n\nStart by adding the following snippet inside `TabNavigator/CustomTabBar.js` file:\n\n```js\nimport React from 'react';\nimport { BottomTabBar } from '@react-navigation/bottom-tabs';\nimport { BlurView } from '@react-native-community/blur';\n\nconst CustomTabBar = props => {\n  return <BottomTabBar {...props} />;\n};\n\nexport default CustomTabBar;\n```\n\nThe `props` received by this custom React component are passed from `tabBar` option. Add it on the `Tab.Navigator` inside `TabNavigator/index.js` file:\n\n```js\n<Tab.Navigator\n  // ... rest remains same\n  tabBar={(props) => <CustomTabBar {...props} />}\n>\n```\n\nUsing the `props` you can further modify the configuration of a bottom tab bar. We are not going to get into that since it's out of the scope of this article.\n\nInside the `CustomTabBar.js` file, wrap the `BottomTabBar` with `<BlurView>` component. It has a different set of props for iOS and Android to add the blur view effect.\n\nFor iOS, to create a blur view effect, add `blurType` which accepts the type of blur effect as a string value. On an iOS device, different values such as `light`, `dark`,` xlight`, `regular` etc. are available.\n\nAnother property `blurAmount` is applied to adjust the intensity of the blur effect. Similarly, for Android, in addition to these props, props such as `overLayColor` to set a custom overlay and `blurRadius` to manually adjust the blur effect radius are used.\n\nTo make sure to apply styles on the `BlurView` component such that the tab bar is displayed over the content of each screen, set its `position` to `absolute`.\n\nHere is the final snippet for `CustomTabBar` component:\n\n```js\n<BlurView\n  style={{\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0\n  }}\n  blurType=\"dark\"\n  blurAmount={10}\n  blurRadius={25}\n  overlayColor=\"transparent\"\n>\n  <BottomTabBar {...props} />\n</BlurView>\n```\n\nThe tab bar is now translucent. Here is the example app running on an iOS simulator.\n\n<img src='https://crowdbotics.ghost.io/content/images/2021/02/ss4.gif' />\n\nDo notice that, since the `BlurView` component has the position set to `absolute` we need to apply the `paddingBottom` property at the `ScrollView` component inside the `Home.js` tab screen. The value of this property is going to be the height of the whole tab bar. To get the height of the current tab bar, the @react-navigation/bottom-tabs module has a hook called `useBottomTabBarHeight` that gives this value.\n\nAdd the import statement in the `screens/Home.js` file and inside it, use the hook to get the height as shown below and apply it as the value of the `paddingBottom` style property at the `ScrollView` component:\n\n```js\nimport {useBottomTabBarHeight} from '@react-navigation/bottom-tabs';\n\n// ...\n\nconst Home = () => {\n  const tabBarheight = useBottomTabBarHeight();\n\n  // ...\n\n  return (\n    // ...\n    <ScrollView\n      indicatorStyle=\"white\"\n      contentContainerStyle={[\n        styles.scrollContentContainer,\n        {paddingBottom: tabBarheight},\n    ]}>\n  )\n}\n```\n\nBack in the iOS simulator, you will notice that it works fine now:\n\n<img src='https://crowdbotics.ghost.io/content/images/2021/02/ss5.gif' />\n\nRunning the app build on an Android device, the results are similar:\n\n<img src='https://crowdbotics.ghost.io/content/images/2021/02/ss6.gif' />\n\n## Conclusion\n\nWe have discussed only one scenario of customizing the bottom tab bar. The main objective here is to get familiar with the component-based configuration of the Tab Navigator in the latest version of the react-navigation library and learn the steps to create a custom tab bar.\n\nOriginally Published at **[Crowdbotics's Blog](https://blog.crowdbotics.com/how-to-create-a-custom-tab-bar-in-react-native/)**.\n",
            "url": "https://amanhimself.dev//blog/create-custom-tab-bar-in-react-native",
            "title": "How to Create a Custom Tab Bar in React Native",
            "summary": "How to Create a Custom Tab Bar in React Native",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/how-to-use-es6-import-in-nodejs",
            "content_html": "---\ntitle: 'How to use ES6 import syntax in Node.js'\ndate: '2021-04-07'\nthumbnail: '/thumbnails/node.png'\nslug: 'how-to-use-es6-import-syntax-in-node'\ntag: 'nodejs'\ncanonicalUrl: 'https://amanhimself.dev/blog/how-to-use-es6-import-syntax-in-node/'\n---\n\n![cover_image](https://i.imgur.com/mztPVQI.png)\n\n<blockquote>\nPhoto by <a href=\"https://unsplash.com/@weirick?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Jake Weirick</a> on <a href=\"https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n</blockquote>\n\n<br />\n\nA module is a JavaScript file that exports one or more values. The exported value can be a variable, an object, or a function.\n\nAn ES6 import syntax allows importing modules exported from a different JavaScript file. It is a common pattern to use modules across React and React Native applications. The syntax is composed of the following ES module standard:\n\n```js\nimport XXX from 'xxx';\n```\n\nAn ES module is the ECMAScript standard of working with modules. Node.js uses the CommonJS standard to import modules. The syntax for this type of standard can be described as:\n\n```js\nconst XXX = require('xxx');\n```\n\nNode js doesn’t support ES6 import directly. Try writing the `import` syntax in a JS file:\n\n```js\n// index.js\n\nimport { ApolloServer, gql } from 'apollo-server';\n```\n\nRun the Node.js server either by using `npm start` or `npm run dev` and you will encounter the following error:\n\n![ss1](https://i.imgur.com/lbHW7pl.png)\n\nThe solution to this error is in the first line of the above error snippet and is now [a recommend way by Node.js](https://nodejs.org/api/esm.html#esm_enabling). Set the `\"type\": \"module\"` in `package.json` file.\n\n```json\n{\n  \"type\": \"module\"\n}\n```\n\nThis solution works for the latest Node.js versions (which is `15.4.x` at the time of writing) and versions above `14.x.x`.\n\n![ss2](https://i.imgur.com/Mm92hul.png)\n\n## What about environments using Node version lower than 14\n\nAnother solution to this problem is to use [Babel](https://babeljs.io/). It's a JavaScript compiler and allows you to write JS using the latest syntax. Babel is not framework or platform opinionated. This means that it can be used in any project that is written in JavaScript and thus, in a Node.js project as well.\n\nStart by installing the following dev dependencies from a terminal window:\n\n```bash\nnpm i -D @babel/core @babel/preset-env @babel/node\n```\n\nThen create a file at the root of the Node.js project called `babel.config.json` and add the following:\n\n```json\n{\n  \"presets\": [\"@babel/preset-env\"]\n}\n```\n\nThe package `@babel/node` is a CLI utility that compiles JS code in a Node.js project with Babel presets and plugins before running it. It means it will read and apply any configuration mention in `babel.config.json` before executing the Node project.\n\nReplace the `node` with `babel-node` to execute the server in the `start` or `dev` scripts.\n\nAn example of running Node server using `npm run dev` script:\n\n```json\n{\n  \"scripts\": {\n    \"dev\": \"nodemon --exec babel-node server.js\"\n  }\n}\n```\n",
            "url": "https://amanhimself.dev//blog/how-to-use-es6-import-in-nodejs",
            "title": "How to use ES6 import syntax in Node.js",
            "summary": "How to use ES6 import syntax in Node.js",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/upload-image-to-cloudinary-using-expo-camera",
            "content_html": "---\ntitle: 'How to upload an image using Expo Camera to Cloudinary'\ndate: '2021-03-31'\nslug: 'upload-image-to-cloudinary-using-expo-camera'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://blog.jscrambler.com/how-to-upload-an-image-using-expo-camera-to-cloudinary/'\n---\n\n![cover_image](https://blog.jscrambler.com/content/images/2021/03/jscrambler-blog-how-to-upload-an-image-using-expo-camera-to-cloudinary.jpg)\n\n> Originally Published at **[Jscrambler's Blog](https://blog.jscrambler.com/how-to-upload-an-image-using-expo-camera-to-cloudinary/)**.\n\nThe camera feature in a mobile device allows it to capture pictures and record videos, making it very helpful in many circumstances. By using the expo-camera library the process of adding that camera feature to an application becomes seamless, which is why in this tutorial, we’ll take a look at how to use [Expo Camera](https://docs.expo.io/versions/latest/sdk/camera/) to take a picture and then upload that same picture to a real-time cloud service [Cloudinary](https://cloudinary.com/).\n\n## Prerequisites\n\nTo follow this tutorial, please make sure you are familiarized with JavaScript/ES6 and meet the following requirements in your local dev environment:\n\n- Have [Node.js](https://nodejs.org/) version >= 14.x.x installed.\n- Have access to one package manager such as npm or yarn or npx.\n- Have [expo-cli](https://github.com/expo/expo-cli) installed, or use npx\n\n**The source code is available at this [Github repository](https://github.com/amandeepmittal/react-native-examples/tree/master/camera-upload-to-cloudinary).**\n\n## Create an Expo app\n\nStart by creating a new Expo app and then install the dependency `expo-camera`. Execute the following commands in a terminal window:\n\n```shell\nnpx expo init project-name\n\n# select the blank template\n\ncd project-name\n\nexpo install expo-camera\n```\n\n## Create a custom camera component\n\nThe `expo-camera` library provides a React component that allows snapping pictures using a device's front or back camera. It exposes properties like zoom, autofocus, preview image after snapping, white balance, face detection, barcode scanning, and flash mode.\n\nFor this demo, let's create a component that when rendered renders the `<Camera>` component initially.\n\nStart by adding the following import statements in the `App.js` file.\n\n```js\nimport React, { useState, useRef, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Dimensions,\n  View,\n  Text,\n  TouchableOpacity\n} from 'react-native';\nimport { Camera } from 'expo-camera';\nimport { AntDesign, MaterialIcons } from '@expo/vector-icons';\n```\n\nThe `@expo/vector-icons` is another package bundled with Expo SDK and allows the use of various icons from different icon sets. You can find the references to these icons at [icons.expo.fyi](https://icons.expo.fyi/).\n\nThe `Dimensions` from React Native is used to get the application’s windows width and height.\n\n- To display the camera in full-screen mode, let's get the height of the window on which the application is running.\n- Then, define a custom variable called CAPTURE_SIZE representing 80% of the window height. This variable is used in styles later.\n- Add the following code snippet before the `App` component.\n\n```js\nconst WINDOW_HEIGHT = Dimensions.get('window').height;\nconst CAPTURE_SIZE = Math.floor(WINDOW_HEIGHT * 0.08);\n```\n\nThe `expo-camera` library exposes an API of methods. To invoke any of these methods, define a reference to the useRef React hook.\n\nAdd the following code snippet just after defining the `App`. Make sure to add a `ref` prop to the `Camera` component whose value is `cameraRef`.\n\n```js\nreturn (\n  <View style={styles.container}>\n    <Camera ref={cameraRef} style={styles.container} />\n  </View>\n);\n```\n\n## Why use absoluteFillObject to position View component\n\nThe `absoluteFillObject` automatically sets a `View` component to be full screen and absolutely positioned. It also allows overriding the values such as `top`. For example, you may want to absolute position the `View` component with an offset like `top: 30` to display it below the status bar.\n\nAdd the corresponding styles to the `App` component.\n\n```js\nconst styles = StyleSheet.create({\n  container: {\n    ...StyleSheet.absoluteFillObject\n  },\n  text: {\n    color: '#fff'\n  }\n});\n```\n\n## How to check for camera permissions\n\nTo use a device's camera, the application needs to ask a user to utilize the hardware functionality. This is done by asking the user to grant permission for camera access, and naturally, if the request gets denied, the application won't be able to use it.\n\n- First, define a state variable using the `useState` React hook called `hasPermission`.\n- Then, create a method called `onHandlePermission`. It is asynchronous and returns a Promise that resolves when the permissions are granted. To ask for permission, `Camera.requestPermissionsAsync` is used.\n- Update the state variable using the update function from the array if the promise is resolved and the permission has been granted.\n- Then, using a `useEffect` hook, invoke the method `onHandlePermission`.\n\nAdd the following code snippet in `App` component:\n\n```js\nexport default function App() {\n  const cameraRef = useRef();\n  const [hasPermission, setHasPermission] = useState(null);\n\n  useEffect(() => {\n    onHandlePermission();\n  }, []);\n\n  const onHandlePermission = async () => {\n    const { status } = await Camera.requestPermissionsAsync();\n    setHasPermission(status === 'granted');\n  };\n\n  if (hasPermission === null) {\n    return <View />;\n  }\n  if (hasPermission === false) {\n    return <Text style={styles.text}>No access to camera</Text>;\n  }\n\n  // ...\n}\n```\n\nIn the above code snippet, the two `if` statements are used either when:\n\n- The permission hasn’t been requested.\n- A user denies the permission, in which case, a text message stating that there is no access to the camera will be displayed.\n\nHere is how asking for permissions are prompted on an Android device:\n\n![ss1](https://i.imgur.com/5iOMbr1.png)\n\nAfter the permission is granted, the Camera is now accessible on the device:\n\n![ss2](https://i.imgur.com/90zdXLT.png)\n\n## Switching between Camera types\n\nTo switch between different types of cameras on a device, let's add a custom method. The Camera component has a prop called `type` and by using it, the type of camera currently in use on the device can be determined.\n\nStart by defining a state variable called `cameraType` to track the camera's current type. Give it a default value of type `back`. It determines that the default camera mode type is going to be back. The camera type is accessible from `Camera.Constants.Type.back`.\n\nDefine another state variable called `isPreview`. It will determine whether the app is in camera mode or image preview mode. It is going to have a default value of boolean `false`.\n\nAdd a method called `switchCamera` in the `App` component. Then, check if it is in the preview mode. If yes, return nothing.\n\nIf it is in the camera mode, write the logic to handle the switch between the back and front camera mode by updating the state value of `cameraType`.\n\nThen, on the `Camera` component add a prop `type={cameraType}`.\n\nDefine the state variable to determine whether the camera is ready to capture photos or not. Call it `isCameraReady` with a default value of boolean `false`. Then, add a method called `onCameraReady` to update its value. Also, add the prop `onCameraReady={onCameraReady}` on the `Camera` component.\n\n```js\nexport default function App() {\n  const cameraRef = useRef();\n  const [hasPermission, setHasPermission] = useState(null);\n  const [cameraType, setCameraType] = useState(Camera.Constants.Type.back);\n  const [isPreview, setIsPreview] = useState(false);\n  const [isCameraReady, setIsCameraReady] = useState(false);\n\n  useEffect(() => {\n    onHandlePermission();\n  }, []);\n\n  const onHandlePermission = async () => {\n    const { status } = await Camera.requestPermissionsAsync();\n    setHasPermission(status === 'granted');\n  };\n\n  const onCameraReady = () => {\n    setIsCameraReady(true);\n  };\n\n  const switchCamera = () => {\n    if (isPreview) {\n      return;\n    }\n    setCameraType(prevCameraType =>\n      prevCameraType === Camera.Constants.Type.back\n        ? Camera.Constants.Type.front\n        : Camera.Constants.Type.back\n    );\n  };\n\n  if (hasPermission === null) {\n    return <View />;\n  }\n  if (hasPermission === false) {\n    return <Text style={styles.text}>No access to camera</Text>;\n  }\n\n  return (\n    <View style={styles.container}>\n      <Camera\n        ref={cameraRef}\n        style={styles.container}\n        type={cameraType}\n        onCameraReady={onCameraReady}\n      />\n    </View>\n  );\n}\n```\n\nTo allow the Camera to switch, add a custom icon button to switch between two different camera types. The icon is used from the `MaterialIcons` set from the `@expo/vector-icons library`.\n\nAfter the `Camera` component in JSX code, add a `View` component that wraps the buttons such as switch camera types and capture a picture.\n\nInside the `View` component, create an icon button using `TouchableOpacity`. The `onPress` prop on this component is used to trigger an action. In this case, it is used to invoke the `switchCamera` method.\n\nAdd a `disabled` prop on `TouchableOpacity` that disables the button depending on the value of `isCameraReady`. If its value is false, then this button will not function.\n\n```js\n<View style={styles.container}>\n  <Camera\n    ref={cameraRef}\n    style={styles.container}\n    type={cameraType}\n    onCameraReady={onCameraReady}\n  />\n  <View style={styles.container}>\n    {!isPreview && (\n      <View style={styles.bottomButtonsContainer}>\n        <TouchableOpacity disabled={!isCameraReady} onPress={switchCamera}>\n          <MaterialIcons name=\"flip-camera-ios\" size={28} color=\"white\" />\n        </TouchableOpacity>\n      </View>\n    )}\n  </View>\n</View>\n```\n\nAdd the styles for the above code snippet:\n\n```js\nconst styles = StyleSheet.create({\n  // ...\n  bottomButtonsContainer: {\n    position: 'absolute',\n    flexDirection: 'row',\n    bottom: 28,\n    width: '100%',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n```\n\nHere is how the switch button is displayed:\n\n![ss3](https://i.imgur.com/aPslkxl.png)\n\n## Take a picture from the Camera and preview it\n\nCamera API from the `expo-camera` library uses a method called `takePictureAsync()` to take a picture. It saves the photographed image in the app's cache directory by default.\n\nThe method accepts a configuration object with different options such as quality, base64, skipProcessing, exif, etc. We will use two options:\n\n- `quality` to specify the compression rate of the image snapped\n- `base64` to include the image data in Base64 format.\n\nThese options are passed as properties in a JavaScript object. This object is then further passed as an argument to the `takePictureAsync` method.\n\nStart by adding a new asynchronous method called `onSnap`. Start by checking the value of the `cameraRef.current`. If available, then the following logic defined in the code snippet below to take a picture will execute from this method.\n\nThen, define an object called `options` with the following properties:\n\n- quality and set its value to `0.7`. This option selects a value between 0 to 1.\n- base64 and set its value to `true`. It accepts a boolean value of true or false\n\nThe `takePictureAsync` method, when invoked, returns a promise that resolves into an object. Store the value resolved in a variable called `data`. It contains the image data in form of the following properties:\n\n- uri of the image stored in the app's cache.\n- width and height of the image.\n- if the base64 option is enabled, it will return the base64 data of the image.\n\nStore the base64 data of the image in another variable called `source`.\n\nNext, add an if condition to check if the source exists. If it exists, pause the camera mode and set the image preview mode to true to show the current picture after it is taken.\n\n```js\nconst onSnap = async () => {\n  if (cameraRef.current) {\n    const options = { quality: 0.7, base64: true };\n    const data = await cameraRef.current.takePictureAsync(options);\n    const source = data.base64;\n\n    if (source) {\n      await cameraRef.current.pausePreview();\n      setIsPreview(true);\n    }\n  }\n};\n```\n\nTo go back from the image preview mode to camera mode, add a method called `cancelPreview`. When this method invokes, it resumes the camera mode.\n\n```js\nconst cancelPreview = async () => {\n  await cameraRef.current.resumePreview();\n  setIsPreview(false);\n};\n```\n\nAdd the `onSnap` method as an action on `TouchableOpacity` component as the value of `onPress` prop. This button is responsible for capturing an image and is wrapped by the View component when the image preview mode is false.\n\n```js\n<View style={styles.container}>\n  {!isPreview && (\n    <View style={styles.bottomButtonsContainer}>\n      <TouchableOpacity disabled={!isCameraReady} onPress={switchCamera}>\n        <MaterialIcons name=\"flip-camera-ios\" size={28} color=\"white\" />\n      </TouchableOpacity>\n      <TouchableOpacity\n        activeOpacity={0.7}\n        disabled={!isCameraReady}\n        onPress={onSnap}\n        style={styles.capture}\n      />\n    </View>\n  )}\n</View>\n```\n\nAdd the styles for the above code snippet:\n\n```js\nconst styles = StyleSheet.create({\n  // ...\n  capture: {\n    backgroundColor: '#5A45FF',\n    borderRadius: 5,\n    height: CAPTURE_SIZE,\n    width: CAPTURE_SIZE,\n    borderRadius: Math.floor(CAPTURE_SIZE / 2),\n    marginBottom: 28,\n    marginHorizontal: 30\n  }\n});\n```\n\nHere is how the capture button is shown. It can now take pictures.\n\n![ss4](https://i.imgur.com/RYAKlLf.png)\n\nAdd JSX code to trigger the `cancelPreview` method as an action on a `TouchableOpacity` component. It wraps an icon component from `AntDesign`. This is shown when the application is in image preview mode.\n\n```js\n<View style={styles.container}>\n  {isPreview && (\n    <TouchableOpacity\n      onPress={cancelPreview}\n      style={styles.closeButton}\n      activeOpacity={0.7}\n    >\n      <AntDesign name='close' size={32} color='#fff' />\n    </TouchableOpacity>\n  )}\n  {!isPreview && (\n    // ...\n  )}\n</View>\n```\n\nAdd the styles for the above code snippet:\n\n```js\nconst styles = StyleSheet.create({\n  // ...\n  closeButton: {\n    position: 'absolute',\n    top: 35,\n    right: 20,\n    height: 50,\n    width: 50,\n    borderRadius: 25,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#5A45FF',\n    opacity: 0.7\n  }\n});\n```\n\nAfter taking a picture, here is how the image preview mode is displayed:\n\n![ss5](https://i.imgur.com/dIyq9ce.png)\n\n## Setup the Cloudinary service\n\nBefore starting with this section, make sure you have a Cloudinary account set up. If you already have an account, [log in here](https://cloudinary.com/users/login).\n\nAfter logging in, you will be welcomed by a dashboard screen similar to below:\n\n![ss6](https://i.imgur.com/jIX6Yio.png)\n\nTo upload an image to their service, two things are required.\n\nFirst, an apiUrl which is constructed of the following base URL:\n\n```shell\n'https://api.cloudinary.com/v1_1/<your-cloud-name>/image/upload'\n```\n\nThe value for the placeholder `<your-cloud-name>` is the cloud name you entered when creating a new account or as shown in the dashboard screen.\n\nThe second parameter required is called `upload_preset`. It is created by following the steps below:\n\n- From the Dashboard, click Settings in the menu bar and select the Upload tab.\n- Look for the section \"Upload presets\" and click \"Add upload preset\".\n- Enter the name of the upload preset. In the \"Signing mode,\" select the value \"Unsigned\" from the drop-down menu.\n- Then click Save.\n\n![ss7](https://i.imgur.com/sfEYaDR.gif)\n\n## Upload an image to Cloudinary\n\nTo upload an image to the service, we need a few required presets. We will use JavaScript's `fetch` API to send a POST request to the Cloudinary API URL. A service that allows uploading base64 images requires the image data to be appended by the `data:image/jpg;base64,` prefix.\n\nThe request also requires a `data` object which has the image data as the `file` and the value of the `upload_preset`.\n\nModify the `onSnap` method inside as shown below.\n\n```js\nconst onSnap = async () => {\n  if (cameraRef.current) {\n    const options = { quality: 0.7, base64: true };\n    const data = await cameraRef.current.takePictureAsync(options);\n    const source = data.base64;\n\n    if (source) {\n      await cameraRef.current.pausePreview();\n      setIsPreview(true);\n\n      let base64Img = `data:image/jpg;base64,${source}`;\n      let apiUrl =\n        'https://api.cloudinary.com/v1_1/<your-cloud-name>/image/upload';\n      let data = {\n        file: base64Img,\n        upload_preset: '<your-upload-preset>'\n      };\n\n      fetch(apiUrl, {\n        body: JSON.stringify(data),\n        headers: {\n          'content-type': 'application/json'\n        },\n        method: 'POST'\n      })\n        .then(async response => {\n          let data = await response.json();\n          if (data.secure_url) {\n            alert('Upload successful');\n          }\n        })\n        .catch(err => {\n          alert('Cannot upload');\n        });\n    }\n  }\n};\n```\n\nTake a picture and when it is successfully uploaded to the Cloudinary service, an alert message like below is displayed:\n\n![ss8](https://i.imgur.com/gEQe5wP.png)\n\n## Using Camera2 api for Android\n\nAndroid devices have a new package called [android.hardware.camera2](https://developer.android.com/reference/android/hardware/camera2/package-summary) that provides an interface to an individual camera. It replaces the deprecated [Camera](https://developer.android.com/reference/android/hardware/Camera) class.\n\nTo use the latest package using `expo-camera`, add the following prop with a value of boolean `true` on the `Camera` component.\n\n```js\n<Camera\n  // ...\n  useCamera2Api={true}\n/>\n```\n\n## Conclusion\n\nIn this post, we have successfully used Expo Camera to take a picture and then upload it to a real-time service like Cloudinary. To add image saving functionality check out the [expo-media-library](https://docs.expo.io/versions/latest/sdk/media-library/).\n\nThe source code is available at this [Github repository](https://github.com/amandeepmittal/react-native-examples/tree/master/camera-upload-to-cloudinary).\n\n_Originally Published at **[Jscrambler's Blog](https://blog.jscrambler.com/how-to-upload-an-image-using-expo-camera-to-cloudinary/)**._\n",
            "url": "https://amanhimself.dev//blog/upload-image-to-cloudinary-using-expo-camera",
            "title": "How to upload an image using Expo Camera to Cloudinary",
            "summary": "How to upload an image using Expo Camera to Cloudinary",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/setup-macbook-m1",
            "content_html": "---\ntitle: 'Setup Macbook M1 for Web and React Native development'\nslug: 'setup-macbook-m1'\ndate: '2021-03-14'\nthumbnail: '/thumbnails/vscode.png'\ntag: 'tools'\ncanonicalUrl: 'https://amanhimself.dev/blog/setup-macbook-m1/'\n---\n\n> 🕑 Updated on: March 14, 2022\n\n![cover_image](https://i.imgur.com/tAJjTOU.png)\n\n_Note:_ Most of this article was updated in August 2021. The Macbook Pro M1 I was using crashed and stopped working without any reason on [August 25, 2021](https://twitter.com/amanhimself/status/1430788513226702849). In just seven months of use.\n\nIt took time to get it repaired. That forced me to buy another laptop. While setting up the new laptop, I thought it is an excellent time to update this post.\n\nI recently upgraded from [Macbook Air 2017](https://www.instagram.com/p/B6lInd3AhsN/) to Macbook Pro with an M1 chip. My four-year-old Macbook Air was giving up. The performance to run heavy tasks like using the iOS simulator when developing and working on React Native apps was declining. I had long given up using the Android emulator and used an actual Android device for testing. December 2020 was the time I decided its time to upgrade.\n\nI had a long internal discussion with myself for almost a month about whether I should upgrade to M1 or stick with Intel-based chips and spend them bucks. Don't get me wrong here, M1 is not cheap either as I did go for a RAM upgrade to max limits, which is currently 16GB in the base model.\n\nAfter going through some online reviews and research, the kind of performance I was expecting has been worth it so far (it is fast, no doubt). I received it two weeks back when writing this post, and since then, I have installed all the necessary tools and utilities that help me work on [Web development](https://learnersbucket.com/) and React Native apps.\n\n**My local environment currently includes:**\n\n- Homebrew ([supports Apple Silicon machines](https://brew.sh/2020/12/01/homebrew-2.6.0/) since `2.6.0`)\n- Git\n- Node.js\n- npm\n- Zsh\n- Oh My Zsh\n- iTerm\n- Xcode\n- yarn\n- VSCode\n- Rosetta 2\n\n**OS apps**:\n\n- Brave\n- Android Studio\n- [Insomnia](https://insomnia.rest/) as REST API client\n- Xcode\n- Slack or Discord (for work and community)\n- There (to track team mate's timezone)\n- LICEcap (for gifs)\n- Zoom (for work)\n- GitHub Desktop App\n- [Cleanshot](https://cleanshot.com/) (for screenshots)\n- Google Chrome\n  - set to default\n    - First things to do:\n      - **Log in to:** Gmail, Twitter, GitHub, Outlook\n      - **Developer mode on**\n    - Extensions:\n      - [Detailed SEO extension](https://chrome.google.com/webstore/detail/detailed-seo-extension/pfjdepjjfjjahkjfpkcgfmfhmnakjfba?hl=en)\n      - [Redefined GitHub](https://chrome.google.com/webstore/detail/refined-github/hlepfoohegkhhmjieoechaddaejaokhf)\n      - [Octolinker](https://chrome.google.com/webstore/detail/octolinker/jlmafbaeoofdegohdhinkhilhclaklkp/related?hl=en)\n      - [Twemex: Sidebar for Twitter](https://chrome.google.com/webstore/detail/twemex-sidebar-for-twitte/amoldiondpmjdnllknhklocndiibkcoe?hl=en)\n      - [Minimal Twitter](https://chrome.google.com/webstore/detail/minimal-twitter/pobhoodpcipjmedfenaigbeloiidbflp?hl=en)\n      - [Medium Enhanced Stats](https://chrome.google.com/webstore/detail/medium-enhanced-stats/jnomnfoenpdinfkpaaigokicgcfkomjo?hl=en)\n      - [JSON Viewer](https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh)\n      - Grammarly\n      - [Toby](https://www.gettoby.com/) to organize tabs\n\n**System Settings**:\n\n- Disable Ask Siri\n- Disable Spotlight search except Applications, Calculator, Conversion, Definition, and System Preferences.\n- Trackpad:\n  - Fix direction: Scroll & Zoom > Natural off\n  - Right click: Point & Click > Secondary Click\n  - Disable dictionary lookup: Point & Click > Look up & data detectors off\n  - More gestures > Swipe between pages off & App Exposé off\n- Finder settings:\n  - Preferences > Advanced > Show filename extensions\n  - Enable show path bar: View > Show Path Bar\n- Dock:\n  - Turn auto hiding on\n\n> Copy [dotfiles](https://github.com/amandeepmittal/dotfiles).\n\n## System Preferences\n\nOverride default system preferences with from a terminal window:\n\n```shell\n# show hidden files\ndefaults write com.apple.finder AppleShowAllFiles YES\n\n# show status bar\ndefaults write com.apple.finder ShowStatusBar -bool true\n\nkillall Finder;\n```\n\n## iTerm\n\nMy favorite terminal app that I have been using for years is [iTerm](https://iterm2.com/downloads.html). I am currently using two versions of iTerm on my setup. One with Rosetta 2 enabled and the default one. This way, I can only use the Rosetta 2 emulator when required. There are no performance issues I have found with using iTerm with Rosetta 2 for ARM-based applications.\n\n![ss0](https://i.imgur.com/yOAV1or.png)\n\nIf you'd like a similar setup, go to the `Applications` folder in your Macbook and duplicate the `iTerm` application.\n\n![ss1](https://i.imgur.com/2C5jrsb.png)\n\nYou can rename the duplicated iTerm app. I have renamed it to `iTerm_rosetta` to differentiate between the two. Right-click the duplicated app and click **Get Info**. In the **General**, check the box where it says **Open using Rosetta**.\n\n![ss2](https://i.imgur.com/7ipJmzM.png)\n\nNow, if you open the second terminal, it will be using Rosetta 2 emulator by default.\n\n**Other iTerm profile settings that I use:**\n\nRecently I started using [Jetbrains Mono font](https://www.jetbrains.com/lp/mono/).\n\n![ss6](https://i.imgur.com/8Gwhdq4.png)\n\nFor the overall looks and appearance, I use [Dracula Pro Color Presets created by Zen Rocha](https://draculatheme.com/pro).\n\n![ss7](https://i.imgur.com/5VSskf7.gif)\n\nAnd my last favorite thing is to split the working directory into two more different tabs using `Command + D` for horizontal panes.\n\nMake sure to have the following setting configured from\n\n**General > Working Directory > select Advanced Configuration > click button Edit... > select Reuse previous session's directory under Working Directory for New Split Panes.**\n\n![ss8](https://i.imgur.com/NDdHDch.png)\n\nFor terminal prompt, I use [Spaceship ZSH](https://github.com/denysdovhan/spaceship-prompt).\n\n## Homebrew\n\nOn December 1, 2020, the Homebrew team announced on their [website](https://brew.sh/2020/12/01/homebrew-2.6.0/) about the version release `2.6.0`. The most significant changes among others they listed were the support for macOS Big Sur, using `brew` commands instead of `brew cask` and beginning to support macOS M1 and Apple Silicon or ARM-based chips.\n\nUsing the terminal, you can install the Homebrew by executing the default command:\n\n```shell\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n**brew installs**:\n\n- Node.js and npm via Node Version Manager (NVM). [Read the complete blog post on how to install Node.js using NVM](https://amanhimself.dev/blog/install-nodejs-using-nvm-on-macos-m1/).\n- [scrcpy](https://github.com/Genymobile/scrcpy) (control Android devices connect via USB on mac)\n- JDK (required for React Native)\n- Karabiner-Elements (remapping function keys for Macbook Air or with Macbooks without touchbar)\n- watchman (required for React Native)\n\n### After installing Node.js\n\nNode.js comes with default package manager `npm`. Set defaults for it:\n\n```shell\nnpm set init.author.name \"your name\"\nnpm set init.author.email \"you@example.com\"\nnpm set init.author.url \"example.com\"\n```\n\n## Xcode\n\nAfter installing Git, for me, the next step is to install [Xcode app](https://apps.apple.com/us/app/xcode/id497799835?mt=12) from Apple's App Store.\n\nThen, install \"command line tools\". It is required by many of the formulae in Homebrew.\n\n```shell\nxcode-select --install\n```\n\nAfter installing it, make sure to open it for the first time, from the menu bar, open **Xcode > Preferences > Locations** and make sure that **Command Line Tools** point towards the current Xcode app.\n\n![ss3](https://i.imgur.com/ZXS88QM.png)\n\n### What is Karabiner-Elements?\n\nWhen I bought Macbook Air M1, it had function keys (that got me excited), but I don't understand why Apple decided to replace function keys that would allow me to control Keyboard Brightness?! And moreover, replace it with \"Do Not Disturb\".\n\nWhy? That got me confused 🤷\n\nI found this tool called [karabiner Elements](https://karabiner-elements.pqrs.org/) that can be installed as a brew formula:\n\n```shell\nbrew install karabiner-elements\n```\n\n![screenshot-of-function-keys-on-macbbok-air-m1-2020](https://i.imgur.com/n1jGglG.jpg)\n\nHere are the key mappings I am using now:\n\n![key-mappings-with karabiner-elements](https://i.imgur.com/uoqR0Ht.png)\n\n## Git\n\nI did install Git using brew command:\n\n```shell\nbrew install git\n```\n\nTo authenticate GitHub to be used from the terminal environment, I'd recommend you to check out the [official document](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token) on creating and accessing personal tokens.\n\n> _🔥 Tip:_ As of Git version `2.28` there is a new config option to set the default branch to `main`. Set it globally and forget about it.\n\n```shell\ngit config --global init.defaultBranch main\n```\n\n## ZSH and Oh My Zsh\n\n[ZSH](https://github.com/zsh-users/zsh) is the default shell in macOS Big Sur. However, I like to use [Oh My Zsh](https://ohmyz.sh/) to manage the ZSH configuration, plugins, and a theme to prettify the terminal.\n\nTo install, run the command below:\n\n```shell\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n\nAfter installation, make sure that the file `.zshrc` is exporting the below path at the top:\n\n```shell\n# Path to your oh-my-zsh installation\nexport ZSH=\"/Users/<USERNAME>/.oh-my-zsh\"\n```\n\nThe first I like to do after setting up the bare minimum ZSH configuration is to install a plugin called [\nzsh-syntax-highlighting](https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md). It provides syntax highlighting for the ZSH shell. Execute the series below commands in the terminal window:\n\n```shell\n# depending on the /plugins folder in your local setup\ncd $HOME/.oh-my-zsh/plugins\n\n# then clone the git repository\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git\n\necho \"source ${(q-)PWD}/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\" >> ${ZDOTDIR:-$HOME}/.zshrc\n```\n\nThis is [my final ZSH configuration](https://github.com/amandeepmittal/dotfiles/blob/master/.zshrc) in the file `~/.zshrc` file:\n\n```shell\n# Path to your oh-my-zsh installation\nexport ZSH=\"/Users/amanhimself/.oh-my-zsh\"\n\nexport PATH=/opt/homebrew/bin:$PATH\n\nexport ANDROID_HOME=$HOME/Library/Android/sdk\nexport PATH=$PATH:$ANDROID_HOME/emulator\nexport PATH=$PATH:$ANDROID_HOME/tools\nexport PATH=$PATH:$ANDROID_HOME/tools/bin\nexport PATH=$PATH:$ANDROID_HOME/platform-tools\n\nZSH_THEME=\"spaceship\"\n\n# Uncomment the following line to disable bi-weekly auto-update checks.\nDISABLE_AUTO_UPDATE=\"true\"\n\nplugins=(\n  git\n  node\n  vscode\n  zsh-syntax-highlighting\n)\n\nsource $ZSH/oh-my-zsh.sh\nsource /Users/amanhimself/.oh-my-zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\n```\n\nAfter installing the syntax highlight plugin, it starts to recognize the commands:\n\n![ss4](https://i.imgur.com/UxRzm98.png)\n\n## VSCode\n\nVSCode and VS Code Insiders are currently supported on ARM chips (as of March 13, 2021). Download the installer for Insiders edition from [here](https://code.visualstudio.com/insiders/) and for VSCode [here](https://code.visualstudio.com/download).\n\n![ss5](https://i.imgur.com/Yd4wQ10.png)\n\nI am still using the same VSCode configuration from my previous setup:\n\n```json\n{\n  // VSCODE EDITOR\n  \"workbench.colorTheme\": \"fairyfloss\",\n  \"workbench.startupEditor\": \"welcomePage\",\n  \"workbench.iconTheme\": \"material-icon-theme\",\n  \"workbench.editor.tabSizing\": \"shrink\",\n  \"security.workspace.trust.untrustedFiles\": \"open\",\n  \"explorer.confirmDelete\": false,\n  \"explorer.confirmDragAndDrop\": false,\n  \"workbench.editor.enablePreview\": false,\n  \"window.restoreFullscreen\": true,\n  \"editor.tabSize\": 2,\n  \"editor.fontSize\": 14,\n  \"editor.minimap.enabled\": false,\n  \"editor.cursorBlinking\": \"phase\",\n  \"editor.fontLigatures\": false,\n  \"editor.wordWrap\": \"on\",\n  \"editor.cursorSmoothCaretAnimation\": true,\n  \"editor.tabCompletion\": \"on\",\n  \"editor.formatOnPaste\": true,\n  \"editor.formatOnSave\": true,\n  \"editor.semanticHighlighting.enabled\": true,\n  \"editor.guides.bracketPairs\": true,\n  \"breadcrumbs.enabled\": false,\n  \"explorer.openEditors.visible\": 0,\n  \"search.exclude\": {\n    \"**/node_modules\": true,\n    \"**/*.code-search\": true,\n    \"ios/\": true,\n    \"android/\": true,\n    \"dist/\": true,\n    \"yarn.lock\": true,\n    \"package-lock.json\": true,\n    \".gitignore\": true,\n    \".expo\": true,\n    \".vscode\": true\n  },\n  \"extensions.autoUpdate\": false,\n  // --------------------------------------\n  // EXPO TOOLS\n  \"json.schemas\": [\n    {\n      \"name\": \"vscode-expo-manifest\",\n      \"url\": \"file:///Users/amanhimself/Library/Application%20Support/Code/User/globalStorage/bycedric.vscode-expo/manifest-42.0.0.json\",\n      \"fileMatch\": [\"app.json\", \"app.config.json\"]\n    }\n  ],\n  // --------------------------------------\n  // CODE::STATS EXTENSION\n  \"codestats.apikey\": \"api-key\",\n  // --------------------------------------\n  // READ TIME EXTENSION\n  \"readTime.enabled\": true,\n  // --------------------------------------\n  // HIGHLIGHT MATCHING TAG EXTENSION\n  \"highlight-matching-tag.styles\": {\n    \"opening\": {\n      \"name\": {\n        // surround is border\n        \"surround\": \"yellow\"\n      }\n    }\n  },\n  // --------------------------------------\n  // INTEGRATED TERMINAL\n  // \"terminal.integrated.defaultProfile.osx\": \"zsh\",\n  \"terminal.external.osxExec\": \"iTerm.app\",\n  \"terminal.integrated.fontSize\": 12,\n  // --------------------------------------\n  // NPM\n  \"npm-intellisense.importES6\": true,\n  // --------------------------------------\n  // TS IMPORT SUGGESTION\n  \"typescript.suggest.paths\": false,\n  // --------------------------------------\n  // NATIVE BRACKER PAIR COLOR SETTINGS\n  \"editor.bracketPairColorization.enabled\": true,\n  \"workbench.colorCustomizations\": {\n    \"editorBracketHighlight.foreground1\": \"#ffb86c\",\n    \"editorBracketHighlight.foreground2\": \"#8be9fd\",\n    \"editorBracketHighlight.foreground3\": \"#bd93f9\",\n    \"editorBracketHighlight.foreground4\": \"#50fa7b\",\n    \"editorBracketHighlight.foreground5\": \"#f1fa8c\",\n    \"editorBracketHighlight.foreground6\": \"#abb2c0\",\n    \"editorBracketHighlight.unexpectedBracket.foreground\": \"#ff5555\"\n  },\n  // --------------------------------------\n  // PRETTIER ----------------------------------\n  \"prettier.singleQuote\": true,\n  \"prettier.jsxSingleQuote\": true,\n  \"prettier.trailingComma\": \"none\",\n  \"prettier.arrowParens\": \"avoid\",\n  \"prettier.proseWrap\": \"preserve\",\n  \"prettier.quoteProps\": \"as-needed\",\n  \"prettier.jsxBracketSameLine\": false,\n  \"prettier.bracketSpacing\": true,\n  \"prettier.tabWidth\": 2,\n  \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n  // Markdown\n  \"[markdown]\": {\n    \"editor.quickSuggestions\": true\n  },\n  // JSON\n  \"[json]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  // JavaScript\n  \"[javascript]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  // JavaScript + React\n  \"[javascriptreact]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  // TypeScript\n  \"[typescript]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  // TypeScript + React\n  \"[typescriptreact]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  // JSON with Comments\n  \"[jsonc]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  // HTML\n  \"[html]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  // ----------------------------------\n  // ESLINT\n  \"eslint.validate\": [\n    \"javascript\",\n    \"javascriptreact\",\n    \"typescript\",\n    \"typescriptreact\"\n  ],\n  // --------------------------------------\n  // LANGUAGES SPECIFIC\n  \"javascript.updateImportsOnFileMove.enabled\": \"always\",\n  \"security.workspace.trust.banner\": \"never\",\n  \"emmet.includeLanguages\": {\n    \"typescript\": \"typescriptreact\",\n    \"javascript\": \"javascriptreact\"\n  }\n}\n```\n\n### Themes\n\nI usually like to switch between a dark and a light theme.\n\n- For the dark theme where I spent most of my time, I am was previously using [morgan.codes-theme](https://marketplace.visualstudio.com/items?itemName=morgan-codes.morgan-codes-vscode-theme), but now I am using [fairyFloss](https://marketplace.visualstudio.com/items?itemName=nopjmp.fairyfloss).\n  - Other themes I switch between:\n    - Quiet Light\n    - [Cyberpunk](https://marketplace.visualstudio.com/items?itemName=max-SS.cyberpunk)\n- For file icons, I love [Material-Icon-Theme](https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme).\n- For terminal prompt, I use [Spaceship ZSH](https://github.com/denysdovhan/spaceship-prompt).\n- Font: [Jetbrains Mono font](https://www.jetbrains.com/lp/mono/).\n\n### Extensions\n\nI use VSCode editor for both writing code and writing blog posts. Thus, the list of extensions below is the combination of extensions that fulfills both of my purposes.\n\n- [Auto Close tag](https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag)\n- [Auto Complete Tag](https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-complete-tag)\n- [Auto Rename Tag](https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag)\n- [Babel JavaScript](https://marketplace.visualstudio.com/items?itemName=mgmcdermott.vscode-language-babel)\n- ~~Bracket Pair Colorizer 2~~ - VSCode now supports this natively. Check out my post 👉 [How to configure VSCode Bracket Pair Colors Natively](https://amanhimself.dev/blog/how-to-configure-vscode-bracket-colors-natively/)\n- [Code Spell Checker](https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker)\n- [Code::Stats](https://codestats.net/)\n- [Color Highlight](https://marketplace.visualstudio.com/items?itemName=naumovs.color-highlight)\n- [DotENV](https://marketplace.visualstudio.com/items?itemName=mikestead.dotenv)\n- [ESLint](https://eslint.org/)\n- [Expo Tools](https://marketplace.visualstudio.com/items?itemName=byCedric.vscode-expo)\n- [Flow Language Support](https://marketplace.visualstudio.com/items?itemName=flowtype.flow-for-vscode)\n- [Git Lens](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens)\n- [Highlight Matching Tag](https://marketplace.visualstudio.com/items?itemName=vincaslt.highlight-matching-tag)\n- [Indent rainbow](https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow)\n- [iOS common files](https://marketplace.visualstudio.com/items?itemName=Orta.vscode-ios-common-files)\n- [Material Icon Theme](https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme)\n- [MDX](https://marketplace.visualstudio.com/items?itemName=silvenon.mdx) - For syntax highlighting of `.mdx` files\n- [npm](https://marketplace.visualstudio.com/items?itemName=eg2.vscode-npm-script)\n- [npm intellisense](https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense)\n- [Path intellisense](https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense)\n- [Prettier](https://prettier.io/)\n- [React Native Tools](https://marketplace.visualstudio.com/items?itemName=msjsdiag.vscode-react-native)\n- [Read Time](https://marketplace.visualstudio.com/items?itemName=johnpapa.read-time)\n- [SVG Viewer](https://marketplace.visualstudio.com/items?itemName=cssho.vscode-svgviewer)\n- [TODO Highlight](https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight)\n- [Version Lens](https://marketplace.visualstudio.com/items?itemName=pflannery.vscode-versionlens)\n- [vscode-styled-components](https://marketplace.visualstudio.com/items?itemName=jpoissonnier.vscode-styled-components)\n- [Word Count](https://marketplace.visualstudio.com/items?itemName=ms-vscode.wordcount)\n- [GitHub Copilot](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot)\n\n## Global NPM Packages I use\n\n- ~~[gatsby-cli](https://www.npmjs.com/package/gatsby-cli) To build and test out [my personal blog built with Gatsby](https://amanhimself.dev/).~~\n- [expo-cli](https://docs.expo.io/workflow/expo-cli/)\n- [npm-check](https://www.npmjs.com/package/npm-check) to check for outdated, incorrect, and unused dependencies.\n- [git-watch-log](https://github.com/sukima/git-watch-log) to watch a git repo and recent changes.\n\n## For React Native Development\n\n- [install Node.js](http://localhost:3000/blog/install-nodejs-using-nvm-on-macos-m1/)\n- install [Watchman](https://facebook.github.io/watchman/) to watch changes in the filesystem using the command: `brew install watchman`\n- install following [cocoapods](https://formulae.brew.sh/formula/cocoapods): `brew install cocoapods`\n- According to [a post by React Native guru Jamon Holmgren](https://shift.infinite.red/dont-use-the-wrong-jdk-for-react-native-if-you-re-using-an-m1-mac-252533dd47a2) that all this time I've been using installing JDK wrong on my m1 machine 😱. To learn more how to install \"the m1 way\", go to his post and give it a read (and leave an appreciation clap 😄)\n- Versions later than Arctic Fox Canary now supports [Apple's Silicon based machines](https://androidstudio.googleblog.com/2021/04/android-studio-arctic-fox-canary-15.html) for Android Studio. You can also check out the [archive](https://developer.android.com/studio/archive) to see what beta/canary version supports Silicon machines\n- Then install Android SDK (I do not prefer AVD and use an actual device for testing)\n- [scrcpy](https://github.com/Genymobile/scrcpy) to display and control Android devices connect via USB on Mac\n\n<br />\n\n> ⚛️ For more instructions on how to set up a development environment for React Native, please follow the [official documentation here](https://reactnative.dev/docs/environment-setup).\n\n## Rosetta 2\n\n> Update: I am not using the Rosetta environment to install anything on the secondary machine since August 2021. That is the reason I've mentioned it at the end of the post.\n\n[Rosetta 2](https://developer.apple.com/documentation/apple_silicon/about_the_rosetta_translation_environment) is the lifeline that allows you to run apps designed for Intel-based chips that use `x86` architecture on ARM-based chips (in this case M1). This solution is provided by Apple in the form of an emulator and doesn't come pre-installed. You have to install it manually. Fire up the Terminal application that comes pre-installed on the Big Sur and let your first command to execute be:\n\n```shell\n/usr/sbin/softwareupdate --install-rosetta --agree-to-license\n```\n\nIf you decide not to put the flag ` --agree-to-license`, you will be prompted by Apple's interactive install, and you will have to agree to their terms and license conditions to use it.\n\n## Conclusion\n\nThat’s the setup I now use for my JavaScript, Node.js, React and React Native. I think it's a good machine. Hopefully, M1 is just the beginning of a new era of powerful computers for daily work use 🤞\n\n🤔 The only thing left for me is to find a way to transfer all laptop swag/stickers from my Macbook Air 2017 to Pro. I miss having them on this one.\n\n[**isapplesiliconready.com**](https://isapplesiliconready.com/for/developer) is another helpful link I found to check what is compatible to work on Apple Silicon chips natively or using Rosetta or not optimized at all.\n",
            "url": "https://amanhimself.dev//blog/setup-macbook-m1",
            "title": "Setup Macbook M1 for Web and React Native development",
            "summary": "Setup Macbook M1 for Web and React Native development",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/react-native-geolocation-to-get-postal-address",
            "content_html": "---\ntitle: 'How to use React Native Geolocation to get Postal Address'\ndate: '2021-02-25'\nslug: 'react-native-geolocation-to-get-postal-address'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://blog.jscrambler.com/how-to-use-react-native-geolocation-to-get-postal-address/'\n---\n\n![cover_image](https://blog.jscrambler.com/content/images/2021/02/jscrambler-blog-how-to-create-a-react-native-geolocation-app.jpg)\n\nGeolocation in React Native applications is the ability to fetch the geographic position of the device when it is connected to the internet. It takes advantage of an API that provides the current location of the device in the form of Longitude and Latitude coordinates. It can be used to add features such as fetching simple location coordinates of a device or getting the current location of the device. Ultimately, Geolocation provides support to the development functionalities seen in delivery or ride-hailing applications.\n\nIn this tutorial, let's learn how you can implement a feature to get the current location of a device in a React Native app. To do this we’ll be using an API provided by Expo in the form of a package called `expo-location`. We will then convert the location coordinates into human-readable postal address format.\n\nThe source code is available at this [GitHub repo](https://github.com/amandeepmittal/react-native-examples/tree/master/expo-geolocation-example).\n\n## Prerequisites\n\nTo follow this tutorial, please make sure you are familiarized with JavaScript/ES6 and meet the following requirements in your local dev environment:\n\n- Have [Node.js](https://nodejs.org/) version >= `12.x.x` installed.\n- Have access to one package manager such as npm or yarn or npx.\n- Have [expo-cli](https://github.com/expo/expo-cli) installed, or use npx\n\n## Create a React Native app with expo-cli\n\nCreate a new React Native project using `expo-cli` and then install the dependencies required to build this demo app. Let's breakdown what we are going to implement:\n\n- The demo app is going to mimic a food delivery app feature where when an end-user opens the app, the first thing they are prompted for is to fetch their current location. Let's call this screen a Welcome screen.\n- Only once the location is fetched, will the end-user be taken to the Home screen of the app. This is a condition we are going to put in our demo.\n- We will be using a stack navigator from [React Navigation](https://reactnavigation.org/docs/getting-started) library. This is just an example to understand the concepts of using Geolocation data in a React Native app. You can use the same concepts in the way you want to implement the feature of fetching the current location.\n\nOpen a terminal window and execute the following commands:\n\n```shell\nnpx expo init expo-geolocation-example\n\n# navigate into that directory\ncd expo-geolocation-example\nyarn add @react-navigation/native @react-navigation/stack\n\n# install dependencies with Expo specific package version\nexpo install expo-location react-native-gesture-handler react-native-reanimated\nreact-native-screens react-native-safe-area-context\n@react-native-community/masked-view\n```\n\nAfter installing these dependencies, let's create two mock screens that are going to be the two core screens for the demo app. Create a new `screens/` directory and inside it, create the first screen file `Welcome.js`. This screen is going to display an image, a title, and a dummy mock location address for now. Later in this post, this dummy mock location address is going to display a real address based on the current location.\n\nAdd the following code snippet to this file:\n\n```js\nimport React, { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View, Image } from 'react-native';\n\nconst Welcome = ({ navigation }) => {\n  return (\n    <View style={styles.container}>\n      <View style={styles.contentContainer}>\n        <Image source={require('../assets/geo.png')} style={styles.image} />\n        <Text style={styles.title}>What's your address?</Text>\n      </View>\n      <Text style={styles.text}>Mock Address</Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#070707',\n    alignItems: 'center',\n    paddingTop: 130\n  },\n  contentContainer: {\n    alignItems: 'center',\n    marginBottom: 20\n  },\n  image: {\n    width: 150,\n    height: 150,\n    resizeMode: 'contain',\n    marginBottom: 20\n  },\n  title: {\n    fontSize: 22,\n    fontWeight: '700',\n    color: '#FD0139'\n  },\n  text: {\n    fontSize: 20,\n    fontWeight: '400',\n    color: '#fff'\n  }\n});\n\nexport default Welcome;\n```\n\nCreate the second screen file `Home.js` with the following code snippet:\n\n```js\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nconst Home = ({ navigation }) => {\n  return (\n    <View style={styles.container}>\n      <Text>Home</Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#070707',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n\nexport default Home;\n```\n\nLet's hook up the stack navigation container in the `App.js` file since we do not have multiple files and different ways to navigate in this demo app. I am not going through how to set up and use the React Navigation library. If you'd like to learn more on that subject please go through the post [How to Set Up and Use Navigators in React Native](https://blog.jscrambler.com/how-to-set-up-and-use-navigators-in-react-native/).\n\nOpen up the `App.js` file and add the following:\n\n```js\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\n// Custom screens\nimport Welcome from './screens/Welcome';\nimport Home from './screens/Home';\n\nconst Stack = createStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"Welcome\" headerMode=\"none\">\n        <Stack.Screen name=\"Welcome\" component={Welcome} />\n        <Stack.Screen name=\"Home\" component={Home} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\nOnce the navigator is set, you can open up a terminal window and run the command `expo start`. You can either choose an iOS simulator or an Android emulator or the Expo Go client app to view the results so far. Here is current the state of the demo app in an iOS simulator:\n\n<img src=\"https://i.imgur.com/l0cuYI1.png\" width=\"300\" />\n\n## Check if the device's location service enabled\n\nThe first thing in the demo app we are going to implement is to check whether a device's location services are enabled or not. For this, let's create a state variable called `locationServiceEnabled`.\n\nTo check the status of the service let's create a new handler method called `CheckIfLocationEnabled`. The `expo-location` has an asynchronous method called `Location.hasServicesEnabledAsync()`. It returns a boolean value of true if the location service on the device is enabled and if otherwise, it returns false. In case of the value false, let's display an alert box indicating the same. If the location service is enabled, then update the value of the state variable using the `setLocationServiceEnabled` method.\n\nThe handler method is then called inside a `useEffect` React hook with no dependency such that it triggers only after the first render.\n\nModify the `Welcome.js` screen as shown below. Do note the placeholder message displayed in the place of the mock location address using a state variable called `displayCurrentAddress`. It will get an update once the current location of the device is found.\n\n```js\nimport React, { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View, Image, Alert } from 'react-native';\nimport * as Location from 'expo-location';\n\nconst Welcome = ({ navigation }) => {\n  const [locationServiceEnabled, setLocationServiceEnabled] = useState(false);\n  const [displayCurrentAddress, setDisplayCurrentAddress] = useState(\n    'Wait, we are fetching you location...'\n  );\n\n  useEffect(() => {\n    CheckIfLocationEnabled();\n  }, []);\n\n  const CheckIfLocationEnabled = async () => {\n    let enabled = await Location.hasServicesEnabledAsync();\n\n    if (!enabled) {\n      Alert.alert(\n        'Location Service not enabled',\n        'Please enable your location services to continue',\n        [{ text: 'OK' }],\n        { cancelable: false }\n      );\n    } else {\n      setLocationServiceEnabled(enabled);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.contentContainer}>\n        <Image source={require('../assets/geo.png')} style={styles.image} />\n        <Text style={styles.title}>What's your address?</Text>\n      </View>\n      <Text style={styles.text}>{displayCurrentAddress}</Text>\n    </View>\n  );\n};\n\n// styles remain same\n\nexport default Welcome;\n```\n\nTo test it out in the iOS simulator, go to **Settings > Privacy > Location Services**.\n\n<img src=\"https://i.imgur.com/Q0yZjbv.png\" width=\"300\" />\n\nIf it says on, as shown in the above image, tap it and make sure to switch off the **Location Services**.\n\n<img src=\"https://i.imgur.com/yic9jlo.gif\" width=\"250\" />\n\nNow open the app and you will notice that the alert box appears.\n\n<img src=\"https://i.imgur.com/xzE8giE.gif\" width=\"250\" />\n\nSimilarly, on Android device, the location can be disabled from the following menu:\n\n<img src=\"https://i.imgur.com/TKFYDhq.png\" width=\"300\" />\n\nAnd the alert message will appear on the opening of the app:\n\n<img src=\"https://i.imgur.com/Mk9egWP.png\" width=\"300\" />\n\nMake sure to enable the location service again on the device before proceeding to the next section.\n\n## Get current location and postal address\n\nIt is necessary to request access to a device's information whether it is location or any other sensitive information. Fortunately, `expo-location` has methods that can be directly used when fetching the current location of the device.\n\nLet's break down the steps on how we are going to fetch the current location of the device and obtain the information of the current address (which includes name, street name, city, and postal code) to display on the app screen.\n\n- First, create a new asynchronous handler method called `GetCurrentLocation`. Make sure to call it inside the `useEffect` hook after the previous code.\n- Inside it, using the Location API method `requestPermissionsAsync`, ask the device's user to grant permission for the location. If, in any case, the user denies it, display them an alert box stating the same.\n- If the permission is granted, get the current coordinates of the device's location using the Location API method `getCurrentPositionAsync`. The coordinates here are an object representing the location.\n- Then, when the coordinates object is present, destructure the value of Latitude and Longitude. The Location API has a method called `reverseGeocodeAsync` which reverses the geocode of a location to a postal address. Using the result from this, we can update the value of `setDisplayCurrentAddress` to display the device's current address.\n\nUpdate the code snippet in `Welcome.js` as shown below:\n\n```js\n// first update the useEffect hook\nuseEffect(() => {\n  CheckIfLocationEnabled();\n  GetCurrentLocation();\n}, []);\n\n// create the handler method\n\nconst GetCurrentLocation = async () => {\n  let { status } = await Location.requestPermissionsAsync();\n\n  if (status !== 'granted') {\n    Alert.alert(\n      'Permission not granted',\n      'Allow the app to use location service.',\n      [{ text: 'OK' }],\n      { cancelable: false }\n    );\n  }\n\n  let { coords } = await Location.getCurrentPositionAsync();\n\n  if (coords) {\n    const { latitude, longitude } = coords;\n    let response = await Location.reverseGeocodeAsync({\n      latitude,\n      longitude\n    });\n\n    for (let item of response) {\n      let address = `${item.name}, ${item.street}, ${item.postalCode}, ${item.city}`;\n\n      setDisplayCurrentAddress(address);\n    }\n  }\n};\n```\n\nHere is the output after this step:\n\n<img src=\"https://i.imgur.com/JW51WSR.gif\" width=\"250\" />\n\nThe complete postal address is an object in JSON format and has the following fields (some of them might be useful for various cases):\n\n```json\nObject {\n    \"city\": \"Stockholm\",\n    \"country\": \"Sweden\",\n    \"district\": \"Stockholm City\",\n    \"isoCountryCode\": \"SE\",\n    \"name\": \"Gustav Adolfs torg\",\n    \"postalCode\": \"111 52\",\n    \"region\": \"Stockholm\",\n    \"street\": \"Gustav Adolfs torg\",\n    \"subregion\": \"Stockholm\",\n    \"timezone\": \"Europe/Stockholm\",\n}\n```\n\nOnce the location is fetched, we can send the current postal address as an object and navigate to the Home screen after a delay of two seconds using a `setTimeout` function.\n\nAdd the following code snippet after the statement `setDisplayCurrentAddress(address)`:\n\n```js\nif (address.length > 0) {\n  setTimeout(() => {\n    navigation.navigate('Home', { item: address });\n  }, 2000);\n}\n```\n\nThen, update the `Home.js` file to get the `item` object from `route.params` as well as its styles:\n\n```js\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nconst Home = ({ route }) => {\n  const { item } = route.params;\n  return (\n    <View style={styles.container}>\n      <View style={styles.contentContainer}>\n        <Text style={styles.title}>Home Delivery address: </Text>\n        <Text style={styles.text}>{item}</Text>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#070707',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  contentContainer: {\n    paddingHorizontal: 20,\n    alignItems: 'center'\n  },\n  title: {\n    fontSize: 22,\n    fontWeight: '700',\n    color: '#FD0139',\n    paddingBottom: 10\n  },\n  text: {\n    fontSize: 20,\n    fontWeight: '400',\n    color: '#fff'\n  }\n});\n\nexport default Home;\n```\n\nHere is the final output:\n\n<img src=\"https://i.imgur.com/48csotO.gif\" width=\"250\" />\n\n## Further Reading\n\nThat's it! We hope you have found this tutorial helpful. We are adding some references for you to learn more about using Location API in Expo and React Native apps, plus which different packages can be used for your particular use case.\n\n- [Reverse Geocode from expo-location](https://docs.expo.io/versions/latest/sdk/location/#locationreversegeocodeasynclocation)\n- [@react-native-community/geolocation](https://github.com/react-native-geolocation/react-native-geolocation#README.md)\n- [react-native-geolocation-service](https://github.com/Agontuk/react-native-geolocation-service)\n- [Hiring a React Native Developer: What Should You Look For? by Jess Marranco](https://www.g2i.co/blog/hiring-a-react-native-developer)\n\n**The source code is available at this [GitHub repo](https://github.com/amandeepmittal/react-native-examples/tree/master/expo-geolocation-example).**\n\n_Originally Published at [Jscrambler's Blog](https://blog.jscrambler.com/how-to-use-react-native-geolocation-to-get-postal-address/)_\n",
            "url": "https://amanhimself.dev//blog/react-native-geolocation-to-get-postal-address",
            "title": "How to use React Native Geolocation to get Postal Address",
            "summary": "How to use React Native Geolocation to get Postal Address",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/react-native-performance-do-and-dont",
            "content_html": "---\ntitle: 'React Native Performance Do and Dont'\nslug: 'react-native-performance-do-and-dont'\ndate: '2021-02-13'\n\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://medium.com/crowdbotics/react-native-performance-do-and-dont-88424e873bbd'\n---\n\nPerformance is one of the few topics that change the overall perspective of using a framework like React Native in real-world mobile applications. React Native is fast by default. While working on a React Native app you can experience performance issues and do not assume it can be fixed by testing components. In this post, there is a list of suggestions that can be applied while building a React Native app.\n\n## DO: Use an Image Caching Solution\n\nReact Native offers an [Image](https://reactnative.dev/docs/image) component as the part of [a core set of components](https://reactnative.dev/docs/components-and-apis). This component is used to display an image but out of the box does not have the solution for issues like:\n\n- rendering a lot of images on one screen\n- low performance in general\n- low-performance loading from cache\n- flickering\n\nThe Image component in React Native handles caching images like web browsers and sometimes the above issues are a result of that. These issues are easily resolved by using a third-party library called [react-native-fast-image](https://github.com/DylanVann/react-native-fast-image). It is available for both iOS and Android and is efficient in caching images.\n\n## DO: Use appropriate image size\n\nOptimizing an image is important for a React Native app's performance if the app relies on using a huge amount of images. Rendering a large number of images could lead to high memory usage on a device if the images are not appropriately optimized in terms of size. This may lead the app to crash.\n\nSomethings that can be done to optimized images in a React Native app are:\n\n- Use PNG format instead of JPG\n- Use smaller sized images\n- Use WEBP format for images. It can help [reduce the binary size](https://medium.com/@tgpski/react-native-webp-reducing-bundle-binary-sizes-increase-speed-with-webp-image-format-aa9b1aa11405) on iOS and Android by 29%.\n\n## DO: Avoid unnecessary renders\n\nReact Native is based on the React library and similarly handles rendering components as React.js does. Here to the optimization techniques that are valid with React do apply to React Native applications. One of the few optimization techniques is to avoid unnecessary renders and in functional components, this can be done by using `React.memo()`.\n\n`React.memo()` is used to handle memoization. The concept of memoization is described as that if a component receives the same set of props more than once, it will use previously cached props and render the JSX returned by the functional component only once.\n\nFor example, consider the following of a parent and a child component. The `Parent` component has a state variable called count that is updated when the button press.\n\nWhenever the button is pressed, the `Child` component also gets re-rendered even though its prop `text` does not change on each render. It is not doing anything special to its parent component and is just displaying some text. This can be optimized by wrapping the contents of the `Child` component with `React.memo()`.\n\n```js\n// Parent.js\n\nconst Parent = () => {\n  const [count, setCount] = useState(0);\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Button title=\"Press me\" onPress={() => setCount(count + 1)} />\n      <Child text=\"Placeholder text\" />\n    </View>\n  );\n};\n\n// Child.js\nconst Child = React.Memo(({ text }) => {\n  return <Text>{text}</Text>;\n});\n```\n\n## DO: Use nativeDriver with Animated library\n\nThere are many ways to create Animations in a React Native app. One of the most popular ways to do this is to use [Animated](https://reactnative.dev/docs/animated.html) library.\n\nAnimated library uses `nativeDriver` to send animations over the native bridge before animation starts. This helps the animations to execute independently of a blocked JavaScript thread. Thus, resulting in a smoother experience and without dropping many frames.\n\nTo use `nativeDriver` with an Animated library, you can set its value to `true`. In the example below, the `useNativeDriver` is used on an `onScroll` Animated event in a `ScrollView` component.\n\n```js\n<ScrollView\n  showsVerticalScrollIndicator={false}\n  scrollEventThrottle={1}\n  onScroll={Animated.event(\n    [{ nativeEvent: { contentOffset: { y: animatedValue } } }],\n    { useNativeDriver: false }\n  )}\n>\n  // Component's content\n</ScrollView>\n```\n\n## DO: Use a tool to debug issues\n\nReact Native version `0.62.0` introduced a new tool called [Flipper](https://fbflipper.com/docs/features/react-native/). It is a debugging platform for iOS, Android, and React Native apps. It integrates directly with the native code and its integrations with a React Native app is enabled out of the box.\n\nUsing Flipper to debug apps, does not require remote debugging. It requires a locally connected instance of Metro to interact with the React Native app. It has React DevTools to inspect the component tree and check out the state and props of a React component.\n\nIt uses a native plugin ecosystem for debugging both iOS and Android applications. These plugins are used for device logs, crash reports, inspecting network requests, inspecting the local database of an app, inspecting cached images, etc.\n\n## DO: Use Hermes\n\n[Hermes](https://reactnative.dev/docs/hermes) is an open-source JavaScript engine optimized for mobile applications. Since React Native version `0.60.4` Hermes has been available for the Android platform. It helps with reducing the download size of an app (APK for Android), reduces memory consumption, and reduces the time it takes for an app to become usable (TTI - Time to interact).\n\nTo enable Hermes engine in an Android app, open `build.gradle` file and modify the following:\n\n```java\ndef enableHermes = project.ext.react.get(\"enableHermes\", true);\n```\n\nSince React Native version `0.64-rc.0` Hermes is also available to be used on iOS platform. To enable it for iOS app, open Podfile and modify the following code:\n\n```c\n+  use_react_native!(:path => config[:reactNativePath], :hermes_enabled => true)\n```\n\n## DON'T: Leave console statements in the source code\n\nUsing `console.log` statements is one of the favorites and common method to debug in JavaScript applications in general, as well as in React Native apps. However, leaving the console statements in the source code when building a React Native app for a platform could cause some big bottleneck in the JavaScript thread.\n\nOne way to keep track of console statements and remove them is to use a third-party package called `babel-plugin-transform-remove-console`. To use it, install the package by using the following command in a terminal window:\n\n```shell\nyarn add babel-plugin-transform-remove-console\n```\n\nThen, modify the `.babelrc` file to remove all console statements:\n\n```json\n{\n  \"env\": {\n    \"production\": {\n      \"plugins\": [\"transform-remove-console\"]\n    }\n  }\n}\n```\n\n## DON'T: Use ScrollView to render a huge list of data items\n\nThere are few ways to create scrollable lists in React Native. Two of the common ways available in React Native core are `ScrollView` and `FlatList` components.\n\nA `ScrollView` component is simple to implement. It is often used to traverse over a list of finite number of items using a JavaScript's `map()` function. For example:\n\n```js\n<ScrollView>\n  {items.map(item => {\n    return <Item key={item.id.toString()} />;\n  })}\n</ScrollView>\n```\n\nThe `ScrollView` component renders all children at once. This is good for use cases where the number of items in a list to render is quite low. Dealing with a large amount of data can directly affect the performance of the app.\n\nTo deal with large lists of items, React Native provides a component called `FlatList`. This component ensures that the items are lay loaded such that the app does not consume an inconsistent amount of memory.\n\nFor example:\n\n```js\n<FlatList\n  data={elements}\n  keyExtractor={item => `${items.id}`}\n  renderItem={({ item }) => <Item key={item.id.toString()} />}\n/>\n```\n\n## Conclusion\n\nReact Native is an open-source framework used to create cross-platform mobile applications. It uses JavaScript at its core and has a primitive API of components to build mobile interfaces and functionalities. It’s a high-performance framework as long as you build with performance in mind from the start.\n\n_[Originally Published at Crowdbotics](https://medium.com/crowdbotics/react-native-performance-do-and-dont-88424e873bbd)_\n",
            "url": "https://amanhimself.dev//blog/react-native-performance-do-and-dont",
            "title": "React Native Performance Do and Dont",
            "summary": "React Native Performance Do and Dont",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/shared-element-transitions",
            "content_html": "---\ntitle: 'How to use shared element transitions in React Native'\nslug: 'shared-element-transitions'\ndate: '2021-01-19'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://blog.logrocket.com/how-to-use-shared-element-transition-with-react-navigation-v5/'\n---\n\n![cover_image](https://blog.logrocket.com/wp-content/uploads/2021/01/reactnavigationv5.png)\n\n> Originally Published at [Logrocket](https://blog.logrocket.com/how-to-use-shared-element-transition-with-react-navigation-v5/)\n\nTransitions in mobile applications provide design continuity. This continuity is provided by connecting common elements from one view to the next while navigating in the app. This tutorial is going to provide a guide for you who is a React Native developer and is able to create such interfaces and make sure they are tangible.\n\nSource code is available at this [GitHub repo.](https://github.com/amandeepmittal/react-native-examples/tree/master/shared-element-transitions)\n\n## What are shared elements transition?\n\nTransitions between different views or activities involve enter and exit transitions that animate the entire view hierarchies independent of each other. There are times when two different views in continuity have common elements. Providing a way to transit these common elements from one view to the second view and back, emphasizes the continuity between transitions. The nature of these transitions maintain focus for the end-users on the content and provides a seamless experience. A shared element transition determines how two different views share one or elements to maintain the focus and experience.\n\n## Pre-requisites\n\nBefore you begin, please make sure to have the following installed on a local environment:\n\n- [Node.js](https://nodejs.org/en/) version >= 12.x.x installed\n- Access to one package manager such as npm or yarn or npx\n- [expo-cli](https://github.com/expo/expo-cli) installed, or use npx\n\nDo note that to demonstrate I’ll be using an iOS simulator. If you prefer to use an Android device or an emulator, the code snippets shared in this post will run the same.\n\n## Install shared element transition libraries\n\nTo get started, let's create a new React Native project using `expo-cli`. From a terminal window, execute the command below and then navigate inside the newly created project directory. After navigating, install the libraries that are required in order to create shared element transitions. Let's use `react-navigation` from one screen to another using a stack navigation pattern.\n\nTo install the React Navigation library, please take a look at the [following instructions](https://reactnavigation.org/docs/getting-started) from the official documentation. These dependencies change with time.\n\n```shell\nnpx expo init shared-element-transitions\n\ncd shared-element-transitions\n\nyarn add @react-navigation/native react-native-animatable\n\nexpo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/masked-view\n\nyarn add react-native-shared-element react-navigation-shared-element@next\n```\n\nAfter installing these libraries, let's checkout how to run the Expo app. From the terminal, run the `yarn start` command to trigger a build for the Expo app. Then depending on the simulator or the device, please select the correct option from the terminal prompt. For example, to run this app in its initial state on an iOS simulator, press `i`.\n\nHere is how the output on an iOS simulator is shown:\n\n![lg1](https://i.imgur.com/oQ8BvbK.png)\n\nThis output verifies that the Expo app is up and running.\n\n## Create a home screen\n\nThe transition in this example app is going to be between a home screen and a details screen. The home screen is going to be a scrollable list of images and some data. I am going to use a set of the mock data array. You are free to use whatever data you might want to try out. Without bothering about the data set, you can use the mock data. Create a new directory called `config/` and inside it create a new file called `data.js` with the following array and objects:\n\n```js\nexport const data = [\n  {\n    id: '1',\n    title: 'Manarola, Italy',\n    description: 'The Cliffs of Cinque Terre',\n    image_url:\n      'https://images.unsplash.com/photo-1516483638261-f4dbaf036963?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=633&q=80',\n    iconName: 'location-pin'\n  },\n\n  {\n    id: '2',\n    title: 'Venezia, Italy',\n    description: 'Rialto Bridge, Venezia, Italy',\n    image_url:\n      'https://images.unsplash.com/photo-1523906834658-6e24ef2386f9?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=630&q=80',\n    iconName: 'location-pin'\n  },\n  {\n    id: '3',\n    title: 'Prague, Czechia',\n    description: 'Tram in Prague',\n    image_url:\n      'https://images.unsplash.com/photo-1513805959324-96eb66ca8713?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=634&q=80',\n    iconName: 'location-pin'\n  }\n];\n```\n\nAfter that create a new directory called `screens/` where the two app screens are going to live. Create a file inside it called `HomeScreen.js` and import the following statements.\n\n```js\nimport React from 'react';\nimport {\n  ScrollView,\n  Text,\n  View,\n  TouchableOpacity,\n  Image,\n  Dimensions\n} from 'react-native';\nimport { StatusBar } from 'expo-status-bar';\nimport { SimpleLineIcons } from '@expo/vector-icons';\nimport { data } from '../config/data';\n```\n\nUsing the `Dimensions` API from React Native, let's define the initial width and height of the image component. In the code snippet below, I am calculating both the width and the height using the `width` of the screen.\n\n```js\nconst { width } = Dimensions.get('screen');\n\nconst ITEM_WIDTH = width * 0.9;\nconst ITEM_HEIGHT = ITEM_WIDTH * 0.9;\n```\n\nThe `HomeScreen` component is going to be a functional React component that accepts one prop called `navigation`. It will allow the navigation from the Home screen to the `DetailScreen`. In any React Native app, the React Navigation library provides a context that further gives access to the `navigation` object as a prop automatically. The prop contains various functions that dispatch navigation actions.\n\n```js\nexport default function HomeScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, backgroundColor: '#0f0f0f' }}>\n      <StatusBar hidden />\n      {/* Header */}\n      <View style={{ marginTop: 50, marginBottom: 20, paddingHorizontal: 20 }}>\n        <Text style={{ color: '#888', textTransform: 'uppercase' }}>\n          Saturday 9 January\n        </Text>\n        <Text style={{ color: '#fff', fontSize: 32, fontWeight: '600' }}>\n          Today\n        </Text>\n      </View>\n  )\n}\n```\n\nThis functional component is going to render the header stating some dummy information to display and beneath it, a `ScrollView` to scroll through a list of images. Each image displays an icon and some information regarding what the image is about. This image and the text on it will play a huge role later when a transition is going to happen between the home and detail screen.\n\nInside the `ScrollView` component, let's render the mock data using JavaScript's `map()` method. If you are injecting data from a REST API that is hosted somewhere and you are not sure about the number of items in that particular data set, please use a `FlatList` component from React Native instead of `ScrollView`.\n\n```js\nreturn (\n  {/* Scrollable content */}\n<View style={{ flex: 1, paddingBottom: 20 }}>\n  <ScrollView\n    indicatorStyle='white'\n    contentContainerStyle={{ alignItems: 'center' }}\n  >\n    {data.map(item => (\n      <View key={item.id}>\n        <TouchableOpacity\n          activeOpacity={0.8}\n          style={{ marginBottom: 14 }}\n          onPress={() => navigation.navigate('DetailScreen', { item })}\n        >\n          <Image\n            style={{\n              borderRadius: 14,\n              width: ITEM_WIDTH,\n              height: ITEM_HEIGHT\n            }}\n            source={{ uri: item.image_url }}\n            resizeMode='cover'\n          />\n          <View\n            style={{\n              position: 'absolute',\n              bottom: 20,\n              left: 10\n            }}\n          >\n            <View style={{ flexDirection: 'row' }}>\n              <SimpleLineIcons size={40} color='white' name={item.iconName} />\n              <View style={{ flexDirection: 'column', paddingLeft: 6 }}>\n                <Text\n                  style={{\n                    color: 'white',\n                    fontSize: 24,\n                    fontWeight: 'bold',\n                    lineHeight: 28\n                  }}\n                >\n                  {item.title}\n                </Text>\n                <Text\n                  style={{\n                    color: 'white',\n                    fontSize: 16,\n                    fontWeight: 'bold',\n                    lineHeight: 18\n                  }}\n                >\n                  {item.description}\n                </Text>\n              </View>\n            </View>\n          </View>\n        </TouchableOpacity>\n      </View>\n    ))}\n  </ScrollView>\n</View>);\n```\n\n## Create a detail screen\n\nThe `DetailScreen` component is going to render the details for each image that is part of the scroll list on the home screen. On this screen, an image is shown with a back navigation button that is positioned on the top of the screen. It receives the data in form of an `item` object that is destructured using `route.params` from React Navigation library. Beneath the image, it is going to show the title that will be shared with the home screen and some dummy text.\n\nCreate a new file called `DetailScreen.js` inside the `screens/` directory and add the following code snippet:\n\n```js\nimport React, { useRef } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  ScrollView,\n  Image,\n  Dimensions\n} from 'react-native';\n\nimport { SimpleLineIcons, MaterialCommunityIcons } from '@expo/vector-icons';\n\nconst { height } = Dimensions.get('window');\nconst ITEM_HEIGHT = height * 0.5;\n\nconst DetailScreen = ({ navigation, route }) => {\n  const { item } = route.params;\n\n  return (\n    <View style={{ flex: 1, backgroundColor: '#0f0f0f' }}>\n      <Image\n        source={{ uri: item.image_url }}\n        style={{\n          width: '100%',\n          height: ITEM_HEIGHT,\n          borderBottomLeftRadius: 20,\n          borderBottomRightRadius: 20\n        }}\n        resizeMode=\"cover\"\n      />\n      <MaterialCommunityIcons\n        name=\"close\"\n        size={28}\n        color=\"#fff\"\n        style={{\n          position: 'absolute',\n          top: 40,\n          right: 20,\n          zIndex: 2\n        }}\n        onPress={() => {\n          navigation.goBack();\n        }}\n      />\n      <View\n        style={{ flexDirection: 'row', marginTop: 10, paddingHorizontal: 20 }}\n      >\n        <SimpleLineIcons size={40} color=\"white\" name={item.iconName} />\n        <View style={{ flexDirection: 'column', paddingLeft: 6 }}>\n          <Text\n            style={{\n              color: 'white',\n              fontSize: 24,\n              fontWeight: 'bold',\n              lineHeight: 28\n            }}\n          >\n            {item.title}\n          </Text>\n          <Text\n            style={{\n              color: 'white',\n              fontSize: 16,\n              fontWeight: 'bold',\n              lineHeight: 18\n            }}\n          >\n            {item.description}\n          </Text>\n        </View>\n      </View>\n      <ScrollView\n        indicatorStyle=\"white\"\n        style={{\n          paddingHorizontal: 20,\n          backgroundColor: '#0f0f0f'\n        }}\n        contentContainerStyle={{ paddingVertical: 20 }}\n      >\n        <Text\n          style={{\n            fontSize: 18,\n            color: '#fff',\n            lineHeight: 24,\n            marginBottom: 4\n          }}\n        >\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n          culpa qui officia deserunt mollit anim id est laborum.\n        </Text>\n        <Text\n          style={{\n            fontSize: 18,\n            color: '#fff',\n            lineHeight: 24,\n            marginBottom: 4\n          }}\n        >\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n          culpa qui officia deserunt mollit anim id est laborum.\n        </Text>\n      </ScrollView>\n    </View>\n  );\n};\n\nexport default DetailScreen;\n```\n\n## Add navigation to the app\n\nTo navigate from the home screen to the detail screen and back, the app needs to have a navigation flow. This is going to be provided by `createSharedElementStackNavigator` method from `react-navigation-shared-element` module. It contains the React Navigation library for `react-native-shared-element`. This method allows us to create a stack-navigator which is the initial process of sharing elements between two separate screens. It wraps each route with the shared element and it detects route changes to trigger the transitions. The process of defining the navigation flow using this method is similar to React Navigation's stack-navigator module.\n\nCreate a new directory called `navigation/` and inside it create a new file called `RootNavigator.js`. Import the following statements and create an instance called `Stack` of the `createSharedElementStackNavigator` method. Then define the Root Navigator.\n\n```js\nimport * as React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createSharedElementStackNavigator } from 'react-navigation-shared-element';\n\nimport HomeScreen from '../screens/HomeScreen';\nimport DetailScreen from '../screens/DetailScreen';\n\nconst Stack = createSharedElementStackNavigator();\n\nexport default function RootNavigator() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator headerMode=\"none\" initialRouteName=\"HomeScreen\">\n        <Stack.Screen name=\"HomeScreen\" component={HomeScreen} />\n        <Stack.Screen name=\"DetailScreen\" component={DetailScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\nTo see it in action, modify the `App.js` file as shown below:\n\n```js\nimport React from 'react';\nimport RootNavigator from './navigation/RootNavigator';\n\nexport default function App() {\n  return <RootNavigator />;\n}\n```\n\nHere is the result after this step in the iOS simulator:\n\n![lg2](https://i.imgur.com/4QGKdLn.png)\n\n## Shared element mapping\n\nThe image component is going to be responsible to support a seamless back and forth transition between home and detail screen. This transition should happen from the scroll grid to the detail screen and back to the relevant image. To make this happen, wrap the `Image` component with `<SharedElement>` and provide a unique `id` to it in the `HomeScreen`.\n\nAlso, make sure to import the `<SharedElement>` component from the `react-navigation-shared-element` module.\n\n```js\nimport { SharedElement } from 'react-navigation-shared-element';\n\n// Wrap the image component as\nreturn (\n  // ...\n\n  <SharedElement id={`item.${item.id}.image_url`}>\n    <Image\n      style={{\n        borderRadius: 14,\n        width: ITEM_WIDTH,\n        height: ITEM_HEIGHT\n      }}\n      source={{ uri: item.image_url }}\n      resizeMode=\"cover\"\n    />\n  </SharedElement>\n);\n```\n\nThe `<SharedElement>` component accepts a prop called `id` that is the shared id between the two screens. The child it is wrapped around is the actual component where the transition happens.\n\nTo enable the shared element transitions, the above process has to be followed in `DetailScreen`.\n\n```js\nimport { SharedElement } from 'react-navigation-shared-element';\n\n// Wrap the image component as\nreturn (\n  // ...\n  <SharedElement id={`item.${item.id}.image_url`}>\n    <Image\n      source={{ uri: item.image_url }}\n      style={{\n        width: '100%',\n        height: ITEM_HEIGHT,\n        borderBottomLeftRadius: 20,\n        borderBottomRightRadius: 20\n      }}\n      resizeMode=\"cover\"\n    />\n  </SharedElement>\n);\n```\n\nTo animate the transition between the home and the detail screens, define a `sharedElements` configuration in the `DetailScreen` component. This will map the transition of the `Image` component between the two screens.\n\nBefore the `export` statement in `DetailScreen.js` add the code snippet:\n\n```js\nDetailScreen.sharedElements = route => {\n  const { item } = route.params;\n  return [\n    {\n      id: `item.${item.id}.image_url`,\n      animation: 'move',\n      resize: 'clip'\n    }\n  ];\n};\n```\n\nThe config object above triggers the transition effects on shared elements between screens based on the unique ID shared between those two screens. This is done by defining a property called `id`.\n\nThe property `animation` determines how the animation is going to happen when navigating between two screens. For example, in the above code snippet, the `animation` has a value called `move`. It is also the default value of this property. There are other values available such as `fade`, `fade-in`, and `fade-out`. The property `resize` is the behavior that determines the shape and size of the element should be modified or not. For example, in the above snippet, the value `clip` adds a transition effect which is similar to a text reveal effect.\n\nHere is the output after this step:\n\n![lg3](https://i.imgur.com/qzCGF2F.gif)\n\nIn the above example, please note that when the transition happens, the screen slides from left to right in between. To modify this behavior to apply transition effects of the shared elements, let's add an `options` configuration object to the `DetailScreen`. In Root Navigator file, add the following configuration:\n\n```js\nconst options = {\n  headerBackTitleVisible: false,\n  cardStyleInterpolator: ({ current: { progress } }) => {\n    return {\n      cardStyle: {\n        opacity: progress\n      }\n    };\n  }\n};\n\n// Then add it to the DetailScreen\n\nreturn (\n  <Stack.Screen\n    name=\"DetailScreen\"\n    component={DetailScreen}\n    options={() => options}\n  />\n);\n```\n\nThe `cardStyleInterpolator` function specifies the interpolated styles for different parts of a card. It allows us to customize the transitions when navigating between two screens. It receives a property value called `current.progress` that represents the animated node progress value of the current screen. Applying this value to the property `opacity` changes the animated node to the value of animation defined in the shared element config object. Its `cardStyle` property applies the style on the view that is representing the card.\n\n## Update Shared elements mapping\n\nIn the previous demonstration, you can see that the transition on the image component is seamless but other components shared such as the location pin icon, the title and the description of the item between two screens is not.\n\nTo resolve this, let's map them using `<SharedElement>` component. First, in home screen, modify the following components:\n\n```js\nreturn (\n  // Icon\n  <SharedElement id={`item.${item.id}.iconName`}>\n    <SimpleLineIcons size={40} color='white' name={item.iconName} />\n  </SharedElement>\n\n  //Title\n  <SharedElement id={`item.${item.id}.title`}>\n  <Text\n    style={{\n      color: 'white',\n      fontSize: 24,\n      fontWeight: 'bold',\n      lineHeight: 28\n    }}\n  >\n    {item.title}\n  </Text>\n</SharedElement>\n\n  // Description\n  <SharedElement id={`item.${item.id}.description`}>\n  <Text\n    style={{\n      color: 'white',\n      fontSize: 16,\n      fontWeight: 'bold',\n      lineHeight: 18\n    }}\n  >\n    {item.description}\n  </Text>\n</SharedElement>\n);\n```\n\nSimilarly, modify the following elements in `DetailScreen.js` file:\n\n```js\n// Icon\n<SharedElement id={`item.${item.id}.iconName`}>\n  <SimpleLineIcons size={40} color='white' name={item.iconName} />\n</SharedElement>\n\n// Title\n<SharedElement id={`item.${item.id}.title`}>\n  <Text\n    style={{\n      color: 'white',\n      fontSize: 24,\n      fontWeight: 'bold',\n      lineHeight: 28\n    }}\n  >\n    {item.title}\n  </Text>\n</SharedElement>\n\n// Description\n<SharedElement id={`item.${item.id}.description`}>\n  <Text\n    style={{\n      color: 'white',\n      fontSize: 16,\n      fontWeight: 'bold',\n      lineHeight: 18\n    }}\n  >\n    {item.description}\n  </Text>\n</SharedElement>\n```\n\nThen add the configuration:\n\n```js\nDetailScreen.sharedElements = route => {\n  const { item } = route.params;\n  return [\n    {\n      id: `item.${item.id}.image_url`,\n      animation: 'move',\n      resize: 'clip'\n    },\n    {\n      id: `item.${item.id}.title`,\n      animation: 'fade',\n      resize: 'clip'\n    },\n    {\n      id: `item.${item.id}.description`,\n      animation: 'fade',\n      resize: 'clip'\n    },\n    {\n      id: `item.${item.id}.iconName`,\n      animation: 'move',\n      resize: 'clip'\n    }\n  ];\n};\n```\n\nHere is the output after this step:\n\n![lg4](https://i.imgur.com/umfe3gL.gif)\n\n## Delayed loading\n\nShared element transitions are a great way to support a smooth end-user experience but it can become tricky when dealing with elements that need to be loaded before or after the transition happens. For example, in the previous demonstration, the back button renders before the transition happens. To control its behavior, let's animate it using the React Native Animatable library.\n\nImport it inside the `DetailScreen.js` file:\n\n```js\nimport * as Animatable from 'react-native-animatable';\n```\n\nThe close button icon is going to be wrapped inside the `<Animatable.View>`. This component has a prop called `delay` that delays the animation. Using a prop called `duration` you can control the amount of time the animation will run. Values to both of these props are provided in milliseconds. Using a `ref` value, the `fadeOut` animation is applied on the icon. This animation method is asynchronous and thus, you can use the promise to navigate back to the home screen after the animation has successfully run. The argument passed to this animation method is in milliseconds.\n\n```js\nconst DetailScreen = ({ navigation, route }) => {\n  const buttonRef = React.useRef();\n\n  return (\n    <Animatable.View\n      ref={buttonRef}\n      animation=\"fadeIn\"\n      duration={600}\n      delay={300}\n      style={[StyleSheet.absoluteFillObject]}\n    >\n      <MaterialCommunityIcons\n        name=\"close\"\n        size={28}\n        color=\"#fff\"\n        style={{\n          position: 'absolute',\n          top: 40,\n          right: 20,\n          zIndex: 2\n        }}\n        onPress={() => {\n          buttonRef.current.fadeOut(100).then(() => {\n            navigation.goBack();\n          });\n        }}\n      />\n    </Animatable.View>\n  );\n};\n```\n\nHere is the final output:\n\n![lg5](https://i.imgur.com/FxWw67j.gif)\n\n## Conclusion\n\nI hope you had fun reading this tutorial. Sharing elements in between screens in React Native using the React Navigation Shared Element module makes both the process of development and end-user experience smooth. I would recommend you to check out the [official documentation here](https://github.com/IjzerenHein/react-navigation-shared-element) for more information.\n\nSource code is available at this [GitHub repo.](https://github.com/amandeepmittal/react-native-examples/tree/master/shared-element-transitions)\n",
            "url": "https://amanhimself.dev//blog/shared-element-transitions",
            "title": "How to use shared element transitions in React Native",
            "summary": "How to use shared element transitions in React Native",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/react-navigation-remove-tab-bar-border",
            "content_html": "---\ntitle: 'How to remove bottom tab bar border in React Navigation'\nslug: 'react-navigation-remove-tab-bar-border'\ndate: '2021-01-17'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://amanhimself.dev/blog/react-navigation-remove-tab-bar-border/'\n---\n\n![cover_image](https://i.imgur.com/Tu5dv1l.png)\n\nNavigation plays an important role in mobile applications and the React Navigation library does an awesome job in providing a completely customizable interface for utilizing different navigation patterns to React Native apps.\n\nHaving the liberty to customize tab bars with React Navigation, one customizable option available (depending on the UI design of an app) is to remove the border from the Tab bar.\n\nHere is an example of the border that is the default when the React Navigation Bottom Tabs library is utilized to create a tab bar.\n\n![ss1](https://i.imgur.com/ttIMI5V.png)\n\nFor the demonstration purpose, I am using an Expo project created using the `expo-cli` command-line tool. To create a similar new Expo project, you can execute the command and choose the `tabs` option.\n\n```shell\nexpo init yourProjectName\n\n# when prompted, choose the tabs option\n# in managed workflow\n```\n\nThis expo project comes with a default bottom tab navigator whose configuration can be found in the file `navigation/BottomTabNavigator.tsx`.\n\n## Customize the TabBar\n\nThe Bottom Tab Bar React Navigation library gives an object called `tabBarOptions` to customize a tab bar. This object contains props that can be used to apply custom styles and one of the generic property it has is called `style`. This property is commonly used to change the styles of the tab bar, for example, by applying the `backgroundColor` styles' property.\n\nTo remove the border, add the `tabBarOptions` prop and inside it, add a style property called `borderTopWidth` with a value `0`.\n\n```js\n<BottomTab.Navigator\n  initialRouteName='TabOne'\n  tabBarOptions={{\n    // ...\n    style: { borderTopWidth: 0 }\n  }}\n>\n```\n\nHere is the output:\n\n![ss2](https://i.imgur.com/WqR3X9I.png)\n\nDo note that this property can also be used to increase the width of the top border.\n\n## Removing shadow on Android Device\n\nAfter applying this `style` property, the width of the top border is removed from an Android device. However, there is a shadow at the top border of the tab bar that remains.\n\n![ss3](https://i.imgur.com/ofnBBis.jpg)\n\nTo remove this shadow, set the `elevation` to `0`:\n\n```js\nstyle: {\n  borderTopWidth: 0,\n  elevation: 0\n}\n```\n\n![ss4](https://i.imgur.com/3TEx5ib.jpg)\n",
            "url": "https://amanhimself.dev//blog/react-navigation-remove-tab-bar-border",
            "title": "How to remove bottom tab bar border in React Navigation",
            "summary": "How to remove bottom tab bar border in React Navigation",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/redux-persist-in-react-native-with-async-storage",
            "content_html": "---\ntitle: 'How to use redux-persist in React Native with Asyncstorage'\nslug: 'redux-persist-in-react-native-with-async-storage'\ndate: '2021-01-08'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://blog.jscrambler.com/how-to-use-redux-persist-in-react-native-with-asyncstorage/'\n---\n\n![cover_image](https://blog.jscrambler.com/content/images/2021/01/jscrambler-blog-redux-persist-in-react-native.jpg)\n\n[Redux persist](https://github.com/rt2zz/redux-persist) is a library that allows saving a Redux store in the local storage of an application. In React Native terms, [Asyncstorage](https://blog.jscrambler.com/how-to-use-react-native-asyncstorage/) is a key value-based, unencrypted, asynchronous storage system that is global and can be used as the local storage for the app.\n\nUsing a state management library like [Redux](https://blog.jscrambler.com/asynchronous-operations-in-react-redux/) in a React Native app is beneficial to manage the state of an application from one place. As your application advances in terms of features, you may want to persist some of the information for each user that is local to them.\n\nFor example, you are building a shopping cart application and it requires persisting the data related to products a user is adding into the cart before making a purchase order. What if the user closes the application for an arbitrary reason before making that purchase but comes back later and finds that number of items to vanish completely from their cart. This is not a good user experience.\n\nTo improve this user experience, you could save the items in their device's local storage. This where redux-persist along with Asyncstorage comes in handy for a React Native app. In this tutorial, we are going to set up the `redux-persist` library in a React Native app that uses Redux as its state management library and preserve the data in Asyncstorage for scenarios where the app is closed.\n\n[The source code is available at this GitHub repo](https://github.com/amandeepmittal/react-native-examples/tree/master/redux-persist-asyncstorage).\n\n## Prerequisites\n\nTo follow this tutorial, please make sure you are familiarized with JavaScript/ES6 and meet the following requirements in your local dev environment:\n\n- [Node.js](https://nodejs.org/) version >= `12.x.x` installed.\n- Have access to one package manager such as npm or yarn or npx.\n- Have a basic understanding of Redux store, actions, and reducers.\n- [expo-cli](https://github.com/expo/expo-cli) installed, or use npx\n\n## Create a React Native app with expo-cli\n\nCreate a new React Native project using `expo-cli` and then install the dependencies required to build this demo app. Open a terminal window and execute the following commands:\n\n```shell\nnpx expo init redux-persist-asyncstorage-example\n\n# navigate into that directory\ncd redux-persist-asyncstorage-example\n\nyarn add @react-navigation/native @react-navigation/bottom-tabs axios@0.21.0\nredux@4.0.5 redux-persist@6.0.0 redux-thunk@2.3.0 react-redux@7.2.2\n\n# install dependencies with Expo specific package version\nexpo install react-native-gesture-handler react-native-reanimated\nreact-native-screens react-native-safe-area-context @react-native-community/\nmasked-view @react-native-async-storage/async-storage\n```\n\nAfter installing these dependencies, let's create two mock screens that are going to be the core screens for the demo app. Create a new `screens/` directory and inside it, create the first screen file `BooksList.js` with the following code snippet:\n\n```js\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function BooksListApp() {\n  return (\n    <View style={styles.container}>\n      <Text>BooksList</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n```\n\nThen create the second screen file `BookmarksList.js` with the following code snippet:\n\n```js\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function BookmarksList() {\n  return (\n    <View style={styles.container}>\n      <Text>BookmarksList</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n```\n\nThe `BooksList` screen is going to show a list of books. I am going to fetch the data to display the books and will be using [Draftbit's Example API](https://example-data.draftbit.com/) route as the base URL.\n\nEach book item shown on this screen is going to have a functionality for the end-user to bookmark or save it in real-time to view later. All the book items saved by the user are going to be shown in the `BookmarksList` tab.\n\nSince a Base URL is required to fetch the data, let's add it. Create a new directory called `config/` and inside it create a file called `index.js` and export the following Base URL:\n\n```js\nexport const BASE_URL = 'https://example-data.draftbit.com/books?_limit=10';\n```\n\nNow, this Base URL is ready to use to send HTTP requests.\n\n## Add tab navigation to switch between the screens\n\nIn this section, let's create a custom tab navigator at the bottom for the app to display the two mock screens created in the previous section. Start by creating a `navigation/` directory and inside a new file called `RootNavigator.js`. Add the following import statements in this file:\n\n```js\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\n// Import mock screens\nimport BooksList from '../screens/BooksList';\nimport BookmarksList from '../screens/BookmarksList';\n\nconst Tab = createBottomTabNavigator();\n```\n\nTo customize the tab bar appearance, let's add some styling and custom icons from the `@expo/vector-icons` library which comes pre-installed with the `expo` package.\n\n```js\nconst tabBarOptions = {\n  showLabel: false,\n  inactiveTintColor: '#2D3038',\n  activeTintColor: '#FFFFFF',\n  style: {\n    height: '10%',\n    backgroundColor: '#1E1B26'\n  }\n};\n\nconst screenOptions = (route, color) => {\n  let iconName;\n\n  switch (route.name) {\n    case 'BooksList':\n      iconName = 'view-dashboard';\n      break;\n    case 'BookmarksList':\n      iconName = 'bookmark-multiple-outline';\n      break;\n    default:\n      break;\n  }\n\n  return <MaterialCommunityIcons name={iconName} color={color} size={24} />;\n};\n```\n\nThe `tabBarOptions` config object is going to customize the appearance of the bottom tab shared between different app screens. The `screenOptions` are used to add a custom icon for each tab.\n\nLastly, let's define and export the `RootNavigator` component that is going to render these two tab screens.\n\n```js\nconst RootNavigator = () => {\n  return (\n    <NavigationContainer>\n      <Tab.Navigator\n        initialRouteName=\"BooksList\"\n        tabBarOptions={tabBarOptions}\n        screenOptions={({ route }) => ({\n          tabBarIcon: ({ color }) => screenOptions(route, color)\n        })}\n      >\n        <Tab.Screen name=\"BooksList\" component={BooksList} />\n        <Tab.Screen name=\"BookmarksList\" component={BookmarksList} />\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n};\n\nexport default RootNavigator;\n```\n\nTo see the `RootNavigator` in action, import it inside the `App.js` file and return it. Add the following code snippet to the `App.js` file:\n\n```js\nimport React from 'react';\n\nimport RootNavigator from './navigation/RootNavigator';\n\nexport default function App() {\n  return <RootNavigator />;\n}\n```\n\nTo run the application, execute the command `yarn start` from the terminal window.\n\nHere is the output after this step:\n\n![ss1](https://i.imgur.com/BPjPOgp.png)\n\n## Add action types and creators\n\nUsing Redux to manage the state of the whole application, the state itself is represented by one JavaScript object. This object is read-only which means that manipulation of the state is not done directly. Changes are done by triggering actions.\n\nLet us begin by defining action types. Create a new directory called `redux/` and inside it create a new file called `actions.js`. Add the following action types to it:\n\n```js\n// Define action types\nexport const GET_BOOKS = 'GET_BOOKS';\nexport const ADD_TO_BOOKMARK_LIST = 'ADD_TO_BOOKMARK_LIST';\nexport const REMOVE_FROM_BOOKMARK_LIST = 'REMOVE_FROM_BOOKMARK_LIST';\n```\n\nAction types defined in the above file are self-explanatory. The first one, `GET_BOOKS`, is going to be used to make the HTTP request to fetch the data from the Base URL. The second, `ADD_TO_BOOKMARK_LIST`, is going to add each book item to the list of bookmarks. Similarly, the third action type `REMOVE_FROM_BOOKMARK_LIST` is going to remove the book from the list of bookmarks.\n\nAn action type is used to trigger the event to update the state stored using Redux. Each action type has action creators for this purpose. The first action creator required in the demo app is to fetch the data from the [Draftbit's Example API](https://example-data.draftbit.com/).\n\nTo fetch data, we will use a library called `axios`. It has an API of methods such as `.get`, `.put`, etc. to make the appropriate HTTP requests.\n\nTo make the HTTP request to retrieve the data, a `BASE URL` of the API is required. Inside the `actions.js` file, import the `axios` library and the Base URL:\n\n```js\nimport axios from 'axios';\n\nimport { BASE_URL } from '../config';\n```\n\nAfter defining the action types, define a new action creator called `getBooks` that has the action type of `GET_BOOKS` with the following code snippet:\n\n```js\nexport const getBooks = () => {\n  try {\n    return async dispatch => {\n      const response = await axios.get(`${BASE_URL}`);\n      if (response.data) {\n        dispatch({\n          type: GET_BOOKS,\n          payload: response.data\n        });\n      } else {\n        console.log('Unable to fetch data from the API BASE URL!');\n      }\n    };\n  } catch (error) {\n    // Add custom logic to handle errors\n    console.log(error);\n  }\n};\n```\n\n## Add a reducer\n\nWhenever an action has triggered, the state of the application changes. The handling of the application’s state is done by a reducer.\n\nA reducer is a pure function that calculates the next state based on the initial or previous state. It always produces the same output if the state is unchanged. It takes two inputs—the state and action—and must return the default state.\n\nCreate a new file in the `redux/` directory called `reducers.js`. Import the action type `GET_BOOKS` and then define the initial state with two empty arrays. Then define a `booksReducer` function that takes `initialState` as the default value for the first argument, and `action` as the second argument.\n\n```js\nimport { GET_BOOKS } from './actions';\n\nconst initialState = {\n  books: [],\n  bookmarks: []\n};\n\nfunction booksReducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_BOOKS:\n      return { ...state, books: action.payload };\n    default:\n      return state;\n  }\n}\n\nexport default booksReducer;\n```\n\n## Configure a store\n\nA store is an object that brings actions and reducers together. It provides and holds state at the application level instead of individual components.\n\nCreate a new file called `store.js` inside the `redux/` directory. A store in redux is created using a function called `createStore` that takes the `rootReducer` as the first argument and middleware or a collection of middleware functions as the second argument.\n\nThe `rootReducer` is a combination of different reducers across the app. In the demo app, there is only one reducer called `booksReducer`.\n\nThe middleware function `thunk` allows a redux store to make asynchronous AJAX requests such as fetching data from an API URL like in this demo app.\n\nAdd the following code snippet to it:\n\n```js\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport booksReducer from './reducers';\n\nconst rootReducer = combineReducers({ booksReducer });\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n```\n\nTo bind this Redux store in the React Native app, open the entry point file `App.js`. Inside it, import the `store` and the High Order Component `Provider` from the `react-redux` package. This HOC helps to pass the `store` down to the rest of the app such as all components, which are now able to access the state. It is also going to wrap the `RootNavigator` since all screens are children of this custom navigator.\n\nModify the `App.js` file as shown below:\n\n```js\nimport React from 'react';\nimport { Provider } from 'react-redux';\n\nimport { store } from './redux/store';\nimport RootNavigator from './navigation/RootNavigator';\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <RootNavigator />\n    </Provider>\n  );\n}\n```\n\n## Fetching data from the API\n\nThe `BooksList.js` file is the tab where the data is going to fetch from the Base URL. Import the following statements.\n\n```js\nimport React, { useEffect } from 'react';\nimport {\n  Text,\n  View,\n  FlatList,\n  TouchableOpacity,\n  Image,\n  SafeAreaView\n} from 'react-native';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\nimport { getBooks } from '../redux/actions';\n```\n\nTo access state from a Redux store, the `useSelector` hook is used. Inside the `BooksList` component, access the `books` from the state.\n\n```js\nexport default function BooksList() {\n  const { books } = useSelector(state => state.booksReducer);\n\n  //...\n}\n```\n\nTo dispatch an action from the Redux store, the `useDispatch` hook is used. To fetch the books from the API, you need to dispatch the action `getBooks`. Add the following code snippet after accessing the state.\n\n```js\nconst dispatch = useDispatch();\n\nconst fetchBooks = () => dispatch(getBooks());\n\nuseEffect(() => {\n  fetchBooks();\n}, []);\n```\n\nNext, add return JSX with a `FlatList` component to render the list of books.\n\nThe `books` fetched from the API is an array and is passed as the value for the `data`.\n\n```js\nreturn (\n  <SafeAreaView style={{ flex: 1, backgroundColor: '#1E1B26' }}>\n    <View style={{ flex: 1, paddingHorizontal: 16 }}>\n      <Text style={{ color: 'white', fontSize: 22 }}>Bestsellers</Text>\n      <View style={{ flex: 1, marginTop: 8 }}>\n        <FlatList\n          data={books}\n          keyExtractor={item => item.id.toString()}\n          renderItem={renderItem}\n          showsVerticalScrollIndicator={false}\n        />\n      </View>\n    </View>\n  </SafeAreaView>\n);\n```\n\nThe JSX returned from the `renderItem` contains all the information to display for each book item in the list.\n\nEach book item is going to have:\n\n- a book cover displayed using the `Image` component.\n- a book title displayed using the `Text` component.\n- some meta information such as the number of pages and the average rating of the book item.\n- the touchable button to add the book to the `BookmarksList` screen.\n\nAdd the following `renderItem` just before the main `return` function.\n\n```js\nconst renderItem = ({ item }) => {\n  return (\n    <View style={{ marginVertical: 12 }}>\n      <View style={{ flexDirection: 'row', flex: 1 }}>\n        {/* Book Cover */}\n        <Image\n          source={{ uri: item.image_url }}\n          resizeMode=\"cover\"\n          style={{ width: 100, height: 150, borderRadius: 10 }}\n        />\n        {/* Book Metadata */}\n        <View style={{ flex: 1, marginLeft: 12 }}>\n          {/* Book Title */}\n          <View>\n            <Text style={{ fontSize: 22, paddingRight: 16, color: 'white' }}>\n              {item.title}\n            </Text>\n          </View>\n          {/* Meta info */}\n          <View\n            style={{\n              flexDirection: 'row',\n              marginTop: 10,\n              alignItems: 'center'\n            }}\n          >\n            <MaterialCommunityIcons\n              color=\"#64676D\"\n              name=\"book-open-page-variant\"\n              size={20}\n            />\n            <Text style={{ fontSize: 14, paddingLeft: 10, color: '#64676D' }}>\n              {item.num_pages}\n            </Text>\n            <MaterialCommunityIcons\n              color=\"#64676D\"\n              name=\"star\"\n              size={20}\n              style={{ paddingLeft: 16 }}\n            />\n            <Text style={{ fontSize: 14, paddingLeft: 10, color: '#64676D' }}>\n              {item.rating}\n            </Text>\n          </View>\n          {/* Buttons */}\n          <View style={{ marginTop: 14 }}>\n            <TouchableOpacity\n              onPress={() => console.log('Bookmarked!')}\n              activeOpacity={0.7}\n              style={{\n                flexDirection: 'row',\n                padding: 2,\n                backgroundColor: '#2D3038',\n                borderRadius: 20,\n                alignItems: 'center',\n                justifyContent: 'center',\n                height: 40,\n                width: 40\n              }}\n            >\n              <MaterialCommunityIcons\n                color=\"#64676D\"\n                size={24}\n                name=\"bookmark-outline\"\n              />\n            </TouchableOpacity>\n          </View>\n        </View>\n      </View>\n    </View>\n  );\n};\n```\n\nHere is the output you are going to get after this step:\n\n![ss2](https://i.imgur.com/x0meApG.png)\n\n## Add action creators and update the reducer\n\nIn the `redux/action.js` file, let's add two more action creators that are going to update the state when the bookmarks are added or removed by the user. Each action creator is going to be based on the action type we defined earlier. Also, each action creator is going to accept the book item that is added to the bookmark list.\n\n```js\nexport const addBookmark = book => dispatch => {\n  dispatch({\n    type: ADD_TO_BOOKMARK_LIST,\n    payload: book\n  });\n};\n\nexport const removeBookmark = book => dispatch => {\n  dispatch({\n    type: REMOVE_FROM_BOOKMARK_LIST,\n    payload: book\n  });\n};\n```\n\nThe next step is to update the state of the redux store. Open `redux/reducers.js` and modify the following code snippet to perform the actions we just added.\n\n```js\nimport {\n  GET_BOOKS,\n  ADD_TO_BOOKMARK_LIST,\n  REMOVE_FROM_BOOKMARK_LIST\n} from './actions';\n\nconst initialState = {\n  books: [],\n  bookmarks: []\n};\n\nfunction booksReducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_BOOKS:\n      return { ...state, books: action.payload };\n    case ADD_TO_BOOKMARK_LIST:\n      return { ...state, bookmarks: [...state.bookmarks, action.payload] };\n    case REMOVE_FROM_BOOKMARK_LIST:\n      return {\n        ...state,\n        bookmarks: state.bookmarks.filter(book => book.id !== action.payload.id)\n      };\n    default:\n      return state;\n  }\n}\n\nexport default booksReducer;\n```\n\n## Configure and integrate redux persist\n\nImport the following statements inside `redux/store.js` file to create a persisted reducer.\n\n```js\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { persistStore, persistReducer } from 'redux-persist';\n```\n\nThen, add a `persistConfig` object with the following properties:\n\n```js\nconst persistConfig = {\n  key: 'root',\n  storage: AsyncStorage,\n  whitelist: ['bookmarks']\n};\n```\n\nIn the above snippet, the `key` and `storage` are required to create the config for a persisted reducer. The `storage` has the value of the storage engine which is used to save and persist the data. In React Native, it is essential to pass the value of the `storage` explicitly. In the current demo app, let's use `AsyncStorage`.\n\nThe `whitelist` takes an array of strings. It is used to define which object key to use from the initial state to save the data. If no `whitelist` is provided, then redux persists both `books` and `bookmarks`. Providing `bookmarks` as the value of the `whitelist` is going to only save the data that is in the `bookmarks` array (_which is empty at the moment but will be populated later when a bookmark is added or removed_).\n\nThen, update `rootReducer` with the persisted reducer with two arguments: `persistConfig` and `booksReducer`.\n\nAlso, export the `persistor`. It is an object that is returned by `persistStore` which wraps the original `store`.\n\n```js\nconst rootReducer = combineReducers({\n  booksReducer: persistReducer(persistConfig, booksReducer)\n});\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\nexport const persistor = persistStore(store);\n```\n\nIn React Native apps, you have to wrap the root component with `PersistGate`. This component delays the rendering of the app's UI until the persisted state is retrieved and saved to redux.\n\nImport the `PersistGate` from the `redux-persist` library and import `persistor` from the `redux/store` file in the `App.js` file:\n\n```js\n// Add\nimport { PersistGate } from 'redux-persist/integration/react';\n\n// Modify to add persistor\nimport { store, persistor } from './redux/store';\n\n// Then, modify the JSX returned from App component\n// Wrap the root component with PersistGate\nreturn (\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <RootNavigator />\n    </PersistGate>\n  </Provider>\n);\n```\n\nThat's it to configure and integrate the `redux-persist` library to the React Native and Redux application.\n\n## Create functionality to add or remove a bookmark\n\nAll book items are shown in the `BooksList.js` file that is fetched from the API. It is from the tab screen that a user can add or remove a bookmark to a book item.\n\nLet's start by importing other action creators as well:\n\n```js\n// Modify\nimport { getBooks, addBookmark, removeBookmark } from '../redux/actions';\n```\n\nThe `booksReducer` is used to access the state. Modify it to access the `bookmarks` array:\n\n```js\nconst { books, bookmarks } = useSelector(state => state.booksReducer);\n```\n\nNow, dispatch two actions using the `useDispatch` hook and create their handler functions. These handler functions are going to be triggered when the touchable component is pressed by the user. Each handler function is going to accept one argument and that is the current book item from `FlatList`.\n\n```js\nconst addToBookmarkList = book => dispatch(addBookmark(book));\nconst removeFromBookmarkList = book => dispatch(removeBookmark(book));\n\nconst handleAddBookmark = book => {\n  addToBookmarkList(book);\n};\n\nconst handleRemoveBookmark = book => {\n  removeFromBookmarkList(book);\n};\n```\n\nLet's add another handler function called `ifExists` that is going to dynamically change the UI of the app based on the action triggered. This function is going to use `filter` on the `bookmarks` array to make the changes on the UI based on whether a book item already exists in the array (that is stored on the AsyncStorage) or not.\n\n```js\nconst ifExists = book => {\n  if (bookmarks.filter(item => item.id === book.id).length > 0) {\n    return true;\n  }\n\n  return false;\n};\n```\n\nModify the `TouchableOpacity` component to dynamically change the UI of the app when an action is triggered to add or remove an item from the bookmarks list.\n\n```js\n<TouchableOpacity\n  onPress={() =>\n    ifExists(item) ? handleRemoveBookmark(item) : handleAddBookmark(item)\n  }\n  activeOpacity={0.7}\n  style={{\n    // rest remains same\n    backgroundColor: ifExists(item) ? '#F96D41' : '#2D3038'\n    //\n  }}\n>\n  <MaterialCommunityIcons\n    color={ifExists(item) ? 'white' : '#64676D'}\n    size={24}\n    name={ifExists(item) ? 'bookmark-outline' : 'bookmark'}\n  />\n</TouchableOpacity>\n```\n\n## Display bookmarks\n\nAny book item that is bookmarked is going to be shown in the `BookmarksList.js` tab. Apart from displaying the list of bookmarked items, it is also going to have the functionality of removing book item from the list.\n\nStart by importing the following statements. This time, only import `removeBookmark` action creator.\n\n```js\nimport React from 'react';\nimport {\n  SafeAreaView,\n  Text,\n  View,\n  FlatList,\n  TouchableOpacity,\n  Image\n} from 'react-native';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\nimport { removeBookmark } from '../redux/actions';\n```\n\nUsing the `useSelector` hook allows us to access the `bookmarks` state. Then, using the `useDispatch` hook defines the action creator and handler function to remove a book from the bookmarks list.\n\n```js\nexport default function BookmarksList() {\n  const { bookmarks } = useSelector(state => state.booksReducer);\n  const dispatch = useDispatch();\n\n  const removeFromBookmarkList = book => dispatch(removeBookmark(book));\n\n  const handleRemoveBookmark = book => {\n    removeFromBookmarkList(book);\n  };\n\n  //...\n}\n```\n\nLastly, the UI of this tab screen is going to be similar to that of the `BooksList.js` tab. Using the `FlatList` component, let's show the list of all the items that are bookmarked.\n\nIf there are no items that are bookmarked, let's display a simple message to convey that. This is done by checking the length of the `bookmarks` array from the state.\n\nHere is the complete JSX snippet returned by the `BookmarksList` tab component:\n\n```js\nexport default function BookmarksList() {\n  // ...\n  const renderItem = ({ item }) => {\n    return (\n      <View style={{ marginVertical: 12 }}>\n        <View style={{ flexDirection: 'row', flex: 1 }}>\n          {/* Book Cover */}\n          <Image\n            source={{ uri: item.image_url }}\n            resizeMode=\"cover\"\n            style={{ width: 100, height: 150, borderRadius: 10 }}\n          />\n          {/* Book Metadata */}\n          <View style={{ flex: 1, marginLeft: 12 }}>\n            {/* Book Title */}\n            <View>\n              <Text style={{ fontSize: 22, paddingRight: 16, color: 'white' }}>\n                {item.title}\n              </Text>\n            </View>\n            {/* Meta info */}\n            <View\n              style={{\n                flexDirection: 'row',\n                marginTop: 10,\n                alignItems: 'center'\n              }}\n            >\n              <MaterialCommunityIcons\n                color=\"#64676D\"\n                name=\"book-open-page-variant\"\n                size={20}\n              />\n              <Text style={{ fontSize: 14, paddingLeft: 10, color: '#64676D' }}>\n                {item.num_pages}\n              </Text>\n              <MaterialCommunityIcons\n                color=\"#64676D\"\n                name=\"star\"\n                size={20}\n                style={{ paddingLeft: 16 }}\n              />\n              <Text style={{ fontSize: 14, paddingLeft: 10, color: '#64676D' }}>\n                {item.rating}\n              </Text>\n            </View>\n            {/* Buttons */}\n            <View style={{ marginTop: 14 }}>\n              <TouchableOpacity\n                onPress={() => handleRemoveBookmark(item)}\n                activeOpacity={0.7}\n                style={{\n                  flexDirection: 'row',\n                  padding: 2,\n                  backgroundColor: '#2D3038',\n                  borderRadius: 20,\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  height: 40,\n                  width: 40\n                }}\n              >\n                <MaterialCommunityIcons\n                  color=\"#64676D\"\n                  size={24}\n                  name=\"bookmark-remove\"\n                />\n              </TouchableOpacity>\n            </View>\n          </View>\n        </View>\n      </View>\n    );\n  };\n\n  return (\n    <SafeAreaView style={{ flex: 1, backgroundColor: '#1E1B26' }}>\n      <View style={{ flex: 1, paddingHorizontal: 16 }}>\n        <Text style={{ color: 'white', fontSize: 22 }}>Bookmarks</Text>\n        <View style={{ flex: 1, marginTop: 8 }}>\n          {bookmarks.length === 0 ? (\n            <Text style={{ color: '#64676D', fontSize: 18 }}>\n              Add a book to bookmark list.\n            </Text>\n          ) : (\n            <FlatList\n              data={bookmarks}\n              keyExtractor={item => item.id.toString()}\n              renderItem={renderItem}\n              showsVerticalScrollIndicator={false}\n            />\n          )}\n        </View>\n      </View>\n    </SafeAreaView>\n  );\n}\n```\n\n## Running the app\n\nGo to the simulator or the real device where you are running the Expo client, and you can test the functionality by adding or removing the bookmark to an item. Also, notice the dynamic UI changes of the bookmark button in the first tab.\n\n![ss3](https://i.imgur.com/ckD9Pcc.gif)\n\nMake sure to close the Expo client and then start it to see if the state from the Redux store persists or not.\n\n![ss4](https://i.imgur.com/tP4SSP5.gif)\n\nAnd that's it! I hope you have found this tutorial helpful.\n\n## Further Reading\n\n- [Deep Dive Into React - Separation of Concerns by Andrei Calazans](https://www.g2i.co/blog/react-separation-of-concerns)\n\n_Originally published at [Jscrambler.com](https://blog.jscrambler.com/how-to-use-redux-persist-in-react-native-with-asyncstorage/)_\n",
            "url": "https://amanhimself.dev//blog/redux-persist-in-react-native-with-async-storage",
            "title": "How to use redux-persist in React Native with Asyncstorage",
            "summary": "How to use redux-persist in React Native with Asyncstorage",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/app-icon-react-native-android",
            "content_html": "---\ntitle: 'How to add an app icon in a React Native Android app'\nslug: 'app-icon-react-native-android'\ndate: '2021-01-06'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://amanhimself.dev/blog/app-icon-react-native-android'\n---\n\n![cover_image](https://i.imgur.com/tZtGF2K.png)\n\nIn this post, let's generate an app icon and learn how to add it to an Android app build with React Native.\n\n## Generating an app icon\n\n### Quickly build an app icon\n\nTo create an app icon we are going to make use of a free tool called [Expo Icon Builder](https://buildicon.netlify.app/). Thanks to [Evan Bacon](https://twitter.com/baconbrix?lang=en) for making it free and available for us to use. You are free to use any other design tool of your own choice such as Figma.\n\nThis tool allows building an app icon quickly using an Emoji icon with a customized background color scheme. For example, in the below image you will find that we have selected the coffee icon emoji since it is going to represent the main app. The Emoji icon is selected from the right-hand panel. The selected item is shown on the left-hand side. You can also add a customized background color.\n\n![04-1](https://i.imgur.com/ulbO2nm.png)\n\nAfter selecting the icon you have to download it by clicking the download button at the top left corner.\n\n![04-2](https://i.imgur.com/dnvBU00.png)\n\n### Generate different assets for Android\n\nAndroid requires five separate sizes for different screen pixel densities. Icons for lower resolution are created automatically from the baseline (_mdpi_). Refer to the table below for more information on pixel densities:\n\n|   Resolution    | Density | Pixel units |\n| :-------------: | :-----: | :---------: |\n| mdpi (Baseline) | 160 dpi |     1×      |\n|      hdpi       | 240 dpi |    1.5×     |\n|      xhdpi      | 320 dpi |     2×      |\n|     xxhdpi      | 480 dpi |     3×      |\n|     xxxhdpi     | 640 dpi |     4×      |\n\nAnother free service I like to use to generate different assets for the app icon is called [makeappicon.com](https://makeappicon.com/). This service generate different assets for various pixel densities based on the above table.\n\nAll you have to do is upload the app icon we created in the previous step and provide an email where the icons will be available to download.\n\n![04-3](https://i.imgur.com/JHjruoR.png)\n\nIt creates icons for both platforms iOS and Android. For this demo app, we are only interested in the `android/` directory it generates. A different set of directories are created that are prefixed with `mipmap` and suffixed with different sizes like `hdpi` and `mdpi`.\n\n![04-4](https://i.imgur.com/lKLlS1a.png)\n\n## Where to place the icon?\n\nWithin an Android app, the icons live at the following path: `android/app/src/main/res`. Now copy the contents of the `android/` directory generated in the previous step and paste them to that location. Note that there going to be the same directory names. You will have to replace those old directories with the new ones to be pasted.\n\n![04-5](https://i.imgur.com/myCrBZc.png)\n\n## Should the icons be rounded or squared?\n\nDepending on the Android device the system will decide whether to use a square icon or a rounded icon. You may need both types of the icon. For this demo app, we are going to use the icon we generated and exclude the rounded icon from the configuration of the Android app.\n\nTo not use the rounded icon, open `android/app/src/main/AndroidManifest.xml` file and remove the modify following line:\n\n```xml\nandroid:roundIcon=\"@mipmap/ic_launcher_round\"\n```\n\nTo the same icon generated in the previous step:\n\n```xml\nandroid:roundIcon=\"@mipmap/ic_launcher\"\n```\n\nIn the same file, you will find the code snippet: `android:icon=\"@mipmap/ic_launcher\"` points towards the original icon filename.\n\nYou will have to run the build command `npx react-native run-android` to apply these changes to show the app icon.\n\n![04-6](https://i.imgur.com/KYxddTW.jpg)\n\n## Resources\n\nThat's it to generate and a new icon for your Android app. Please find the [link here](https://developer.android.com/google-play/resources/icon-design-specifications) to learn more about Google Play's icon design specifications.\n",
            "url": "https://amanhimself.dev//blog/app-icon-react-native-android",
            "title": "How to add an app icon in a React Native Android app",
            "summary": "How to add an app icon in a React Native Android app",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/year-rewind-2020",
            "content_html": "---\ntitle: 'Year Rewind: 2020'\ndate: '2020-12-23'\nslug: 'year-rewind-2020'\nthumbnail: '/thumbnails/writing.png'\ntag: 'year-review'\ncanonicalUrl: 'https://amanhimself.dev/blog/year-rewind-2020/'\n---\n\n![cover](https://i.imgur.com/Qfd1K4M.png)\n\nThe year 2020 is coming to an end. The Earth is completing one more revolution around the Sun.\n\nI am not a big fan of new year's resolutions since I never end up completing or even following one for a long time. However, I do like to introspect on the year passing by 😬.\n\n## How the year was? 🎢\n\nThe thing is, just like the Earth’s revolution, this year, I feel like I have also gone around a circle and completed one or two revolutions myself. When the year started I had plans. I wanted to write code (as usual), learn some new things, and travel. The way it turned out to be is quite different from where it started.\n\nI am glad and feel lucky that I did not lose my source of income from my day job and was fortunate enough to get a few opportunities. I am glad I did not lose touch with my network and made new connections.\n\nThings I am not glad about this year include anxiety attacks and getting burned out. I have never felt how or what burning out looks like but only after going through it, I did realize what is happening with me. For me, in life in general, curiosity is one of the most important things in life. Without being curious, I won’t be writing this post, and you won’t be reading it. However, when I lost the ability to be curious about things around me both in the personal and professional world, onwards started a downward spiral.\n\nI did not pursue anything else other than spending my time on a laptop that could help me take my mind off things or be a fruitful distraction. I wanted to do too many things but without planning on how to accomplish them and divide them into doable modular tasks. I lost interest in reading books for a while (an activity that I value most in my life and have been practicing for the last decade) and am still trying to cope or find a way to get back to my usual routine.\n\nAfter this kind of experience, something did not feel right. And no, it did not get better after that. Not until I started to accept the fact that what I have gone through is the actual burn out. No, the lockdown or the pandemic wasn’t the major cause of it. They sure did contribute but I think if they were not part of the equation, I might still have gone through a similar phase. One thing lockdown or the pandemic brought out for me is to spend time together with my parents.\n\nThe safe way I have found is to make small changes and stick to them and then decide whether the things are working out for good or not. The lesson I would like to learn from this is to be organized with one's routine, being consistent while one can is better than anything out there, don’t try to change everything all at once, rather, make small changes and stick to them. Take breaks, mental health is an important aspect of being human, and right now is the perfect time to start talking about it and embrace it and experience the things that are not in my control even though they try to entwine with the stuff that is in my control.\n\n## I wrote 75 articles 📝\n\nI believe to get better at something is to do it regularly and especially, if one enjoys it. I do enjoy writing blog posts and being able to do it consistently helps me learn new things, update my existing spectrum of knowledge, and share what I know. It also keeps my life engaging.\n\nThere is also the other side that says “quality over quantity”. For me, it does not work that way. Writing, just like any other thing, is something one has to practice to write a “quality” post. How about practicing it in public?\n\nMost of the posts I wrote are in the long form of tutorials to accomplish one thing by using a multitude of things. I am always surprised by the things that happened after I publish a post. Usually, the post I am expecting a lot from is never read by more than 100 people. The feedback sometimes I get on a post I wrote months ago is absolutely wonderful.\n\nHere are some of the posts that I wrote this year:\n\n- [Styling the React Native Way](https://amanhimself.dev/blog/styling-the-react-native-way/). I revamped this post, which I originally published in 2019. React Native has changed quite a bit since this year started and I thought it was the right time to update one of my most-read posts.\n- [React Native and Firebase Chat app series](https://amanhimself.dev/blog/chat-app-with-react-native-part-2/). With an introduction to React Hooks last year, and the react-navigation library being updated to `v5`, I wanted to cover both of them in some detail. Thus, I ended up writing a series of six blog posts.\n- Writing and taking steps in the Animation side of React Native is fun. There is a lot to do and a lot is happening when it comes to animations but I did a fair job on the usage of React Native's Animated API from a beginner's point of view in these two posts:\n  - [How to create a custom scrollbar with React Native Animated API](https://amanhimself.dev/blog/custom-scroll-bar-indicator-with-react-native-animated-api/)\n  - [How to Animate a Header View on Scroll With React Native Animated](https://amanhimself.dev/blog/animate-header-view-on-scroll-with-react-native-animated-api/)\n- Serverless databases or tech stacks excite me. Don't get me wrong here. I am not against the idea of writing an API from scratch. In fact, I started my career on the backend side of JavaScript. But seeing the line of serverless architectures getting advance and trying to fulfill most of our needs is exciting. Thus, I was introduced to HarperDB this year. A database service that supports both SQL and NoSQL queries for CRUD operations. I ended up writing two posts, covering [the API part with Node.js](https://amanhimself.dev/blog/build-rest-api-with-nodejs-harperdb/) and using it with a frontend [library like React](https://amanhimself.dev/blog/harperdb-with-react-hooks/).\n- I am not using React Hooks that much at work, but I did try to explore hooks from my own perspective. I wrote two posts, one on explaining how [`useState` hook works](https://amanhimself.dev/blog/react-app-with-localstorage-api-and-hooks/) and another on [managing state in React apps with `useReducer` and `useContext` hooks](https://amanhimself.dev/blog/manage-state-with-usecontext-usereducer-in-react-apps/).\n- Expo came out with ease of [using fonts as hook](https://github.com/byCedric/use-expo/blob/main/packages/font/docs/use-fonts.md). I shared using it in [Creating \"Quarantine Pro\" — A Fun Learning Experiment in React Native](https://amanhimself.dev/blog/quarantine-pro-app/).\n\n## I moved my blog from Gatsby to Next.js and back to Gatsby again 🤪\n\nMy personal blog has been the most consistent thing over course of these 12 months in my life. It deserves more credit than I give it. Also, I never planned to have a self-hosted blog until a friend of mine, [Valentin](https://twitter.com/RadValentin), casually suggested its importance. I started writing on [Medium](https://medium.com/@amanhimself) when I was getting into web development back in late 2016 and early 2017. At that time, I did not think much about pursuing writing posts or the importance of sharing via creating content. It was all new to me. I was just exploring horizons and wanted to document the good things about it.\n\n![ss4](https://i.imgur.com/Yf8jr0o.png)\n\nThree years forward, in 2020, I did not give much emphasis on Medium this year as my primary blog publishing platform. Even though I did reach an exploding [2 million views](https://twitter.com/amanhimself/status/1285554115464982528), I do not like how some publications (that I think have an impact in terms of audience) are forcing down to have a payment wall associated with a post published under their publication. I am not against getting the original author paid for their work but as a popular publication with a significant audience, it should not force a contributing writer and be open about it. That said, some publications are not forcing down and are still enjoyable to write for.\n\nThis gave me an opportunity to continue to build and maintain my own blog which was initially created using [Gatsby](https://www.gatsbyjs.com/). However, in the desire to explore things, I migrated my blog to [Next.js](https://nextjs.org/) in the middle of the year. I wanted to continue using it. As a framework built over React, I think Next.js is more flexible than Gatsby but in the month of November, I decided to migrate back to Gatsby since I feel more comfortable using it since I have been closely following its development for quite some years, and I was able to cut down the 10 minutes of build time that was happening with Next.js by 70% with Gatsby. I am sure that it was my fault that the build time was around 10 minutes with Next.js and I was too lazy and uninterested to actually debug it. Nonetheless, I am glad for the opportunity to try out Next.js for the first time and will try to use it in some other projects next year.\n\nI also realized that Markdown is definitely one of the best things to happen in the dev world. I cannot imagine any other way to write. I did try MDX with Next.js but the maintenance and time spent on converting an MDX post to a normal markdown to cross-post on popular blogging platforms is too much for me.\n\nNot focusing on Medium enough, also gave me the opportunity to explore two awesome blogging platforms that are meant for developers:\n\n- [Dev.to](https://dev.to/amanhimself)\n- [Hashnode](https://hashnode.com/@amanhimself)\n\nI started cross-posting on Dev.to [last year](https://dev.to/amanhimself/getting-started-with-react-native-in-2019-build-your-first-app-542d) and in this year I have managed to get around 100k+ views.\n\n![ss1](https://i.imgur.com/3PmkutV.png)\n\nI am excited to publish more on Hashnode. Only in the month of December, I started publishing there. I think it is different from a usual blogging platform and one thing that excites me is how community-driven it is. Developers and the whole at Hashnode are always closely listening to the wants and needs of their users and this is something I have not seen much of. It's like building in public. The ability to have a hosted newsletter and use your own domain is somewhat unusual for a platform. I like where they are going with it and would be love to see how it happens. It's a high time we need a consistent platform that could be the \"YouTube\" for technical writers and publications (it might sound ambitious but it is not!).\n\n## A Big Thank You to all the editors 🙏\n\nWriting a blog post and publishing is just one aspect. Since the year 2018, I have worked with quite a few awesome editors and content managers at different publications.\n\nThus, I'd like to thank from the bottom of my heart, these awesome human beings for always listening to my ideas and not taking my mistakes too seriously, and sharing their insight and unique perspective which has helped me not only write but grow as a person.\n\n- [Filipe Lima](https://twitter.com/filipeslima) at Jscrambler\n- [Kate Trahan](https://twitter.com/Katerade4) at Logrocket\n- [Austin Kodra](https://twitter.com/austin_kodra) at Fritz AI & Heartbeat\n- [Nick Selman](https://twitter.com/nickselman) at Draftbit\n- [Margo McCabe](https://twitter.com/margo_hdb) at HarperDB\n\nWithout their feedback and honest review, their perspective on what works and what doesn't, I would have never been able to improve in the skill of writing. Most blog posts that you get to read on this blog or on their publications would never have been in the readable format and would have never seen the light of getting published.\n\n## I did one presentation 💬\n\nThis happened by just a Twitter DM. I never expected that I would be able to speak in front of an audience, even in an online, remote event. This year, I got the opportunity to speak about [How to write consistently](https://www.youtube.com/watch?v=YIRxTUCY0NQ) at [Hashnode's Technical Writing Bootcamp](https://hashnode.com/bootcamp/batch-2), a free virtual Bootcamp to help developers who are getting started in technical writing.\n\n## I made 1541 commits 👨‍💻\n\nPersonally, this statistic does not matter but the GitHub's commit graph is fun. It is also great to see that I have less green or empty blocks on weekends which is a good sign.\n\n![ss2](https://i.imgur.com/CYOY8G8.png)\n\nIn 2019, I made 939 commits. What changed this year? I started using GitHub at my day job for some projects.\n\n![ss3](https://i.imgur.com/nGRynbX.png)\n\n### Highlights from my GitHub 🙀\n\nI have also started maintaining [one single GitHub repo](https://github.com/amandeepmittal/react-native-examples) for all the demos and examples I write using React Native and Expo blog posts.\n\nContinued to maintain the [expo-community project on integrating Firebase SDK in an Expo app](https://github.com/expo-community/expo-firebase-starter), thanks to my friend [Cedric](https://github.com/byCedric) and awesome people at Expo. I have seen it was helpful to some folks as they were getting started with Expo and Firebase. Will try continue maintaining it over the next and year include more Expo related stuff.\n\n## Newsletter saga continues 💌\n\nI run [a weekly newsletter](https://www.getrevue.co/profile/amanhimself) that is of late, has become a bi-weekly newsletter due to my inconsistency of publishing blog posts. I don't send out newsletters when I don't have anything to share in terms of blog articles or tutorials. I don't like getting spam and I don't want to spam anyone. I started taking sending out newsletters seriously in 2019 and at the end of that year, I had [845 subscribers](https://twitter.com/amanhimself/status/1201933182070874112). This year, it did manage to grow to 1201 subscribers. I did not count how many newsletters in total I send out and now it's too late.\n\nI did move from [Tinyletter](http://tinyletter.com/) to [Substack](https://substack.com/). After using Tinyletter for 22 months, I was missing out on somethings, but importantly, I was not able to provide a good reading experience to my readers who open the email they receive and spend time reading it. Both are free, but I find Substack has a more modern UI and a pleasing to the eye approach. Thanks to my friend [Alex Kallaway](https://twitter.com/ka11away) for making me realize this and convincing me to make the move.\n\nI also took a free seven day email course called [**Blogging for Devs**](https://bloggingfordevs.com/) created [Monica Lent](https://twitter.com/monicalent). Without giving too much away, I learned a great deal from it. She is an inspiration to me because, in 2019, her income from blogging enabled her to quit her day job and pursue her own journey of bootstrapping a SaaS company. Reading her emails made me realize what I was doing wrong and how can I improve on some of the things I do.\n\n## Coffee ☕️\n\nI have received a lifetime of **26** coffee donations on [**Ko-Fi**](https://ko-fi.com/amanhimself). Thank you so much 🙏 .\n\n## Reading 📚\n\nI think that if a book is able to offer at least one new idea from what I already know, is a good book.\n\nI did manage to scrape through some good books this year. Here some of my picks that I enjoyed reading:\n\n### The Unicorn Project by Gene Kim\n\nI like to read about the world of technology whether it is written from a perspective of fiction narrative or non-fiction. The Unicorn Project is one of the first books I read this year and it definitely goes in-depth about the process of what goes into a tech company and the importance of communication. The narrative might not be too true but overall it resonates.\n\n- [Goodreads](https://www.goodreads.com/book/show/45293317-the-unicorn-project)\n\n### The Developer's Guide to Content Creation by Stephanie Morillo\n\nThis book resonated with me a lot. It offers good insights and guidance for a developer who is interested in creating content.\n\n- [Goodreads](https://www.goodreads.com/book/show/50996057-the-developer-s-guide-to-content-creation)\n\n### The Company of One by Paul Jarvis\n\nThis book is about the mindset of working for oneself and I would add that it's a semi-autobiography of Paul's own journey of what he did when he left the traditional corporate world and how scaling and growth from an individual's perspective or for small-scaled bootstrapped business are not what it seems or the perception I had.\n\n- [Goodreads](https://www.goodreads.com/book/show/38922272-company-of-one)\n\n### Writing for Software Developers by Philip Kiely\n\nThis book goes in-depth about being a technical writer from a software developer's point of view. It offers great guidance on how to get started, managing one's workflow and where can one find publications to publish their own piece of posts and articles. It also discusses the business aspect of being a technical writer.\n\n- [Goodreads](https://www.goodreads.com/book/show/53466825-writing-for-software-developers)\n\n### The Practice by Seth Godin\n\nThis book by Seth Godin is all about why practice is important and how quantity helps one sustain that quality of work in their own domain.\n\n- [Goodreads](https://www.goodreads.com/book/show/53479927-the-practice)\n\n### The Midnight Library by Matt Haig\n\nMy favorite fiction read of the year and why experiencing life matters.\n\n- [Goodreads](https://www.goodreads.com/book/show/53568397-the-midnight-library)\n\n## What I want to learn in 2021 🤔\n\nLearning is one of the few constants in our lives. There are a few things that I've learned this year but I am going to share a list of new things that I want to learn next year:\n\n- GraphQL and Amplify AppSync\n- More of TypeScript\n- Different UI and animation patterns in React Native apps\n- More on React Hooks\n- Delve more in [Expo](https://docs.expo.io/guides/) that is always improving and it's always helpful API.\n\n## Conclusion\n\nI am planning to write blog posts that are in short format next year or may be add another way to share content 👀. There is a lot of stuff that I miss out on sharing since I am always thinking of connecting things.\n\nThank you all for reading this post and reading any other post, opening and reading email newsletters, reading my tweets on Twitter, and listening to me 🙏 .\n\nHave a great 2021!\n",
            "url": "https://amanhimself.dev//blog/year-rewind-2020",
            "title": "Year Rewind: 2020",
            "summary": "Year Rewind: 2020",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/custom-scroll-bar-indicator-with-react-native-animated-api",
            "content_html": "---\ntitle: 'How to create a custom scrollbar with React Native Animated API'\ndate: '2020-12-10'\nslug: 'custom-scroll-bar-indicator-with-react-native-animated-api'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://amanhimself.dev/blog/custom-scroll-bar-indicator-with-react-native-animated-api/'\n---\n\n> Updated on: August 4, 2021\n\n![cover](https://i.imgur.com/ateUlTf.png)\n\nA `ScrollView` is a component that enables to view the content on a device's screen that is not able to be displayed in one screen. Using a scroll view component, the content can either be scrolled vertically or horizontally. This depends a lot on the design of the mobile application.\n\nIn React Native, to implement a scroll view, there are two types of components available: `ScrollView` and `FlatList`. The `ScrollView` component renders all children at once. This is useful if the data to display is static or there aren't too many data items in the list. The `FlatList` component is performant and optimal for displaying a huge scrollable list of data items.\n\nFor example, this how a `ScrollView` component is implemented in a React Native app:\n\n```js\n<ScrollView style={{ backgroundColor: 'white', marginHorizontal: 20 }}>\n  <Text>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n    tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\n    quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n    consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse\n    cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat\n    non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n  </Text>\n</ScrollView>\n```\n\nBoth of these scrollable components have at least one thing in common: a scroll bar indicator. By default, the scroll bar indicator is visible whether the content is displayed horizontally or vertically. To disable this vertical scroll bar indicator you would add the prop `showsVerticalScrollIndicator` with a boolean value of false:\n\n```js\n<ScrollView style={{ backgroundColor: 'white', marginHorizontal:\n20 }} showsVerticalScrollIndicator={false}>\n```\n\nHowever, the implementation of this scroll bar indicator is not directly customizable on cross-platforms in React Native. If you are building an app whose screen design depends on displaying a customized scroll bar indicator, then let's build one in this tutorial. To implement this, we are going to use React Native [Animated](https://reactnative.dev/docs/animated.html) API.\n\n[The source code is available at GitHub.](https://github.com/amandeepmittal/react-native-examples/tree/master/custom-scroll-indicator)\n\n## Prerequisites\n\nTo follow this tutorial, please make sure you are familiarized with JavaScript/ES6 and meet the following requirements in your local dev environment:\n\n- [Node.js](https://nodejs.org/) version >= `12.x.x` installed.\n- Have access to one package manager such as npm or yarn or npx.\n- Have a basic understanding of Redux store, actions, and reducers.\n- [expo-cli](https://github.com/expo/expo-cli) installed, or use npx.\n\nNote: All of the code mentioned in this tutorial works with the React Native CLI project as well.\n\n## Create a new React Native project with expo-cli\n\nTo create a new React Native project using `expo-cli`, execute the following command from a terminal window:\n\n```shell\nnpx expo init custom-scroll-indicator\n\n# navigate into that directory\ncd custom-scroll-indicator\n```\n\nAnd that's it. We are not using any third party library but the approach discussed in this post is easily integrated with any other libraries that your React Native app depends on.\n\nBefore we move onto the next section, let's start creating a mock screen. Open `App.js` file and add the following code snippet:\n\n```js\nimport React, { useState, useRef } from 'react';\nimport { ScrollView, Text, View, Animated } from 'react-native';\nimport { StatusBar } from 'expo-status-bar';\n\nexport default function App() {\n  return (\n    <>\n      <StatusBar style=\"light\" />\n      <View style={{ flex: 1, backgroundColor: '#892cdc', paddingTop: 50 }}>\n        <View style={{ alignItems: 'center' }}>\n          <Text style={{ color: 'white', fontSize: 24, fontWeight: '700' }}>\n            Custom Scroll Bar\n          </Text>\n        </View>\n      </View>\n    </>\n  );\n}\n```\n\nTo see the output of this step, please go back to the terminal window execute one of the following commands depending on the OS (_whether iOS or Android_) of the simulator or the real device the Expo Client app is running:\n\n```shell\n# trigger expo development server\nyarn start\n\n# for iOS\nyarn run ios\n\n# for android\nyarn run android\n```\n\nWhen the app is up and running, here is the output you are going to get:\n\n![js1](https://i.imgur.com/PO7yY2C.png)\n\n## Add mock data\n\nInside the scroll view component, we are going to display some mock data. Let's add it to the React Native project. Create a new directory called `constants/` and inside it a new file called `data.js`.\n\nThis file is going to contain an object called `booksData` that has two properties:\n\n- `title` of the book item.\n- `description` is the long form of the text where the custom scroll bar is going to be used to scroll the text inside the `ScrollView` component.\n\nAdd the following code snippet to this file:\n\n```js\nexport const booksData = {\n  title: 'The Hunger Games',\n  description:\n    'Winning will make you famous. Losing means certain death.\n    The nation of Panem, formed from a post-apocalyptic North\n    America, is a country that consists of a wealthy Capitol\n    region surrounded by 12 poorer districts. Early in its\n    history, a rebellion led by a 13th district against the\n    Capitol resulted in its destruction and the creation of an\n    annual televised event known as the Hunger Games. In\n    punishment, and as a reminder of the power and grace of the\n    Capitol, each district must yield one boy and one girl\n    between the ages of 12 and 18 through a lottery system to\n    participate in the games. The tributes are chosen during the\n    annual Reaping and are forced to fight to the death, leaving\n    only one survivor to claim victory. When 16-year-old Katniss\n    young sister, Prim, is selected as District 12 female\n    representative, Katniss volunteers to take her place.'\n};\n```\n\nMake sure to import object inside the `App.js` file after other import statements.\n\n```js\n// ...\nimport { booksData } from './constants/data';\n```\n\n## Display mock data using a ScrollView\n\nThe mock data we created in the previous section is going to be displayed inside a `ScrollView` component. The content inside this scroll view is displayed with two `Text` components. One to display the title of the book item and another to display the description.\n\nThis `ScrollView` component is not going to take the whole screen to display the content. Thus, the default scroll bar indicator is shown when the description is scrolled. We are going to add an empty `View` after the `ScrollView` component with a value of `flex: 4` such that this empty view takes slightly more than half of the screen.\n\nThere is also a `View` component that wraps the `ScrollView`. For now, it adds horizontal padding but later will be crucial to display the custom scroll bar indicator next to the `ScrollView` component. Thus, let's add the `flexDirection: 'row'` property to this wrapper `View` component.\n\nModify the `App.js` file and add the following JSX:\n\n```js\nexport default function App() {\n  return (\n    <>\n      <StatusBar style=\"light\" />\n      <View style={{ flex: 1, backgroundColor: '#892cdc', paddingTop: 50 }}>\n        <View style={{ alignItems: 'center' }}>\n          <Text style={{ color: 'white', fontSize: 28, fontWeight: '700' }}>\n            Custom Scroll Bar\n          </Text>\n        </View>\n        <View style={{ flex: 3, marginVertical: 20 }}>\n          <View\n            style={{ flex: 1, flexDirection: 'row', paddingHorizontal: 20 }}\n          >\n            <ScrollView>\n              <Text\n                style={{\n                  fontSize: 22,\n                  color: 'white',\n                  fontWeight: '600',\n                  marginBottom: 12\n                }}\n              >\n                {booksData.title}\n              </Text>\n              <Text\n                style={{\n                  fontSize: 18,\n                  color: 'white'\n                }}\n              >\n                {booksData.description}\n              </Text>\n            </ScrollView>\n          </View>\n        </View>\n        <View style={{ flex: 4 }} />\n      </View>\n    </>\n  );\n}\n```\n\nOutput after this step:\n\n![js2](https://i.imgur.com/5Cckr8y.gif)\n\nHide the default scroll indicator by adding the `showsVerticalScrollIndicator` prop to the `ScrollView` component. Also, add the `contentContainerStyle` prop with a to apply `paddingRight` to its children (_which are the content being displayed and custom scroll bar we have to create_).\n\n```js\n<ScrollView\n  contentContainerStyle={{ paddingRight: 14 }}\n  showsVerticalScrollIndicator={false}\n>\n```\n\n![js3](https://i.imgur.com/odQD8D4.png)\n\n## Create the custom scroll bar\n\nNext, to the content displayed, let's add a scroll bar. Add a `View` component whose `height` is set to `100%`. This will display the scroll bar with as much height as the height of its parent container.\n\n```js\n<View style={{ flex: 1, flexDirection: 'row', paddingHorizontal: 20 }}>\n  {/* ScrollView component here */}\n  <View\n    style={{\n      height: '100%',\n      width: 6,\n      backgroundColor: '#52057b',\n      borderRadius: 8\n    }}\n  ></View>\n</View>\n```\n\nThe `width` in the above code snippet can be customized with the value you can provide.\n\nThe output of this step:\n\n![js4](https://i.imgur.com/8zzq2Jw.png)\n\n## Create the custom scroll bar indicator\n\nTo display a custom scroll bar indicator, we need to calculate the size of the scroll bar indicator first. This can be done by comparing the complete height of the scroll bar and the visible height of the scroll bar that is the indicator.\n\nIn the `App` component, define two state variables using the `useState` hook and a new variable where we store the size of the bar indicator.\n\n```js\nconst [completeScrollBarHeight, setCompleteScrollBarHeight] = useState(1);\nconst [visibleScrollBarHeight, setVisibleScrollBarHeight] = useState(0);\n\nconst scrollIndicatorSize =\n  completeScrollBarHeight > visibleScrollBarHeight\n    ? (visibleScrollBarHeight * visibleScrollBarHeight) /\n      completeScrollBarHeight\n    : visibleScrollBarHeight;\n```\n\nNext, create the scroll bar indicator inside the scroll bar. The indicator is going to have its height equivalent to the `scrollIndicatorSize`.\n\n```js\n<View style={{ flex: 1, flexDirection: 'row', paddingHorizontal: 20 }}>\n  {/* ScrollView component here */}\n  <View\n    style={{\n      height: '100%',\n      width: 6,\n      backgroundColor: '#52057b',\n      borderRadius: 8\n    }}\n  >\n    <View\n      style={{\n        width: 6,\n        borderRadius: 8,\n        backgroundColor: '#bc6ff1',\n        height: scrollIndicatorSize\n      }}\n    />\n  </View>\n</View>\n```\n\nThe scroll bar indicator is now displayed:\n\n![js5](https://i.imgur.com/k5ak2Yi.gif)\n\nTo change the position of this indicator, we have to animate its value.\n\n## Animate the scroll bar indicator\n\nWe are going to animate the position of the scroll bar indicator as the content inside the `ScrollView` is scrolled. To create an animation, `Animated.Value` is required. Define the `scrollIndicator` variable with an `Animated.Value` of `0`.\n\nAdd the following code snippet after state variables are declared in `App` component:\n\n```js\nconst scrollIndicator = useRef(new Animated.Value(0)).current;\n```\n\nThen define a variable called `difference` that is used to calculate the height of the scroll bar indicator if it is greater than the size of the scroll indicator. This value is used to calculate the range of interpolation to change the position of the scroll bar indicator to move along the y-axis.\n\nTo change the position of the scroll bar indicator, we use the `Animated.multiply` method. This method creates a new Animated value that is composed from two values multiplied together. This new value is what the change in the position of the scroll bar indicator is going to be when the content is scrolled in the `ScrollView`. To change the position, we need to multiply the current value of the `scrollIndicator` and the visible height of the scroll bar indicator divided by the complete height of the scroll bar.\n\nAfter getting the new Animate value, interpolation is applied. This is done by using the `interpolate()` function on the new Animated value and it allows an input range to map to an output range.\n\nThe interpolation must specify an `extrapolate` value. There are three different values for `extrapolate` available, but we are going to use `clamp`. It prevents the output value from exceeding the `outputRange`.\n\nAdd the following code snippet in the `App` component:\n\n```js\nconst difference =\n  visibleScrollBarHeight > scrollIndicatorSize\n    ? visibleScrollBarHeight - scrollIndicatorSize\n    : 1;\n\nconst scrollIndicatorPosition = Animated.multiply(\n  scrollIndicator,\n  visibleScrollBarHeight / completeScrollBarHeight\n).interpolate({\n  inputRange: [0, difference],\n  outputRange: [0, difference],\n  extrapolate: 'clamp'\n});\n```\n\nThen, convert the `View` component that displays the scroll bar indicator into an `Animated.View`. We are going to add a prop called `transform`. It is going to change the position of the scroll bar indicator.\n\nThe value of this prop is going to be an array and inside it, a transformation object is defined. This object specifies the property that is transformed, as the key and its value is going to be the `scrollIndicatorPosition`.\n\n```js\n<Animated.View\n  style={{\n    width: 6,\n    borderRadius: 8,\n    backgroundColor: '#bc6ff1',\n    height: scrollIndicatorSize,\n    transform: [{ translateY: scrollIndicatorHeight }]\n  }}\n/>\n```\n\nNext, we need to set the height of the scroll bar and scroll bar indicator that is visible when the content inside the `ScrollView` changes. For this, there are two props used in combination:\n\n- `onContentSizeChange` whose value is a handler function with the width and the height of the content. For our demo, we are going to use the height of the content to update the height of the complete scroll bar.\n- `onLayout` is used to update the height of the visible scroll bar.\n\nTo animate the scroll bar indicator's position when the height of the content changes another prop called `onScroll` is used. It accepts an `Animated.event()` as the value which is used to handle gestures like panning and in our case, scrolling. The frequency of the scrolling event is controlled using a prop called `scrollEventThrottle`. It controls how often the scroll event will be fired while scrolling.\n\nModify the props of `ScrollView` component as shown below:\n\n```js\n<ScrollView\n  contentContainerStyle={{ paddingRight: 14 }}\n  showsVerticalScrollIndicator={false}\n  onContentSizeChange={height => {\n    setCompleteScrollBarHeight(height);\n  }}\n  onLayout={({\n    nativeEvent: {\n      layout: { height }\n    }\n  }) => {\n    setVisibleScrollBarHeight(height);\n  }}\n  onScroll={Animated.event(\n    [{ nativeEvent: { contentOffset: { y: scrollIndicator } } }],\n    { useNativeDriver: false }\n  )}\n  scrollEventThrottle={16}\n>\n  {/* Rest remains same */}\n</ScrollView>\n```\n\nHere is the output after this step on an iOS simulator:\n\n![js6](https://i.imgur.com/06Ozy44.gif)\n\nHere is the output after this step on an Android device:\n\n![js7](https://i.imgur.com/D9LnLRs.gif)\n\n## Conclusion\n\nI hope you had fun reading this tutorial. If you are trying the Animated library from React Native for the first time, wrapping your head around it might take a bit of time and practice and that's part of the process.\n\n**Further Reading on React Native Animated**\n\n- [Learn how to Animate a Header View on Scroll With React Native Animated](https://amanhimself.dev/blog/animate-header-view-on-scroll-with-react-native-animated-api/)\n",
            "url": "https://amanhimself.dev//blog/custom-scroll-bar-indicator-with-react-native-animated-api",
            "title": "How to create a custom scrollbar with React Native Animated API",
            "summary": "How to create a custom scrollbar with React Native Animated API",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/manage-state-with-usecontext-usereducer-in-react-apps",
            "content_html": "---\ntitle: 'How to manage state in React apps with useReducer and useContext hooks'\ndate: '2020-11-06'\nslug: 'manage-state-with-usecontext-usereducer-in-react-apps'\nthumbnail: '/thumbnails/react.png'\ntag: 'react'\ncanonicalUrl: 'https://amanhimself.dev/blog/manage-state-with-usecontext-usereducer-in-react-apps/'\n---\n\n![cover](https://i.imgur.com/Q0W4kzf.jpg)\n\nChoosing a state management library to manage and handle a global state in a React app can be tricky and time-consuming. A lot depends on the scope of the React app and there are many options available.\n\nWith the adaption of React Hooks API, one such option is to use a combination of `useReducer` hook and the Context API. In this post, let's take a look at how to manage global state in a React app using both of them.\n\n## Prerequisites\n\nTo take full advantage of this tutorial, or run along with the example, please make sure you following installed/access to in your local development environment.\n\n- Node.js version >= `12.x.x `installed\n- have access to one package manager such as `npm` or `yarn`\n- `create-react-app` cli installed or use `npx`\n- basics of React Hooks\n\nIf you are not familiar with React Hooks, I recommend you to go through the [in-depth post on React hooks here](https://amanhimself.dev/blog/react-app-with-localstorage-api-and-hooks).\n\n## State management in React apps with useReducer\n\nThere are two types of states to deal with in React apps. The first type is the local state that is used only within a React component. The second type is the global state that can be shared among multiple components within a React application.\n\nWith the release of Context API as well as Hooks API, implementing a global state is possible without installing any additional state management library. The `useReducer` hook is a great way to manage complex state objects and state transitions. You may have seen or used `useState` to manage [simple or local state](https://amanhimself.dev/blog/react-app-with-localstorage-api-and-hooks) in React apps.\n\nThe `useReducer` hook is different from `useState`. The main advantage it has over `useState` is that covers the use case when there is a need of handling complex data structures or a state object that contains multiple values. It updates the state by accepting a reducer function and an initial state. Then, it returns the actual state and a dispatch function. This dispatch function is used to make changes to the state.\n\n## Create a new React app & installing dependencies\n\nTo get started, create a new React project by executing the following command in a terminal window:\n\n```shell\nnpx create-react-app react-expense-tracker\n\ncd react-expense-tracker\n```\n\nTo focus on the main topic of this tutorial as well as to give the demo app a nice look and feel, let's use pre-defined components from [Reactstrap](https://reactstrap.github.io/). It provides Bootstrap 4 components that are based on Flexbox and useful to handle the layout of a web app. To get started using Bootstrap in a React app, install the following dependencies:\n\n```shell\nyarn add bootstrap@4.5.0 reactstrap@8.5.1 uuid@8.2.0\n```\n\nAfter installing these dependencies, open the React project you created and open the file `index.js`. Add an import statement to include the Bootstrap CSS file.\n\n```js\n// after other imports\nimport 'bootstrap/dist/css/bootstrap.min.css';\n```\n\nThat's it to set up Bootstrap in the current React app.\n\n## Defining a global state\n\nStart by creating a new file called `GlobalState.js` inside the `src/` directory.\n\nLet's use React's context API to create a Context provider that can is going to share the state across multiple components. You can think of this example as mimicking Redux' philosophy. Import the required statements.\n\n```js\nimport React, { useReducer, createContext } from 'react';\nimport { v4 as uuid } from 'uuid';\n```\n\nNext, create an empty context for Expense and define an initial state object. This initial state is going to have one expense item present. This also helps to define a schema or data model for all other expense items (_but do note that this for demonstration purpose in context to this post_).\n\n```js\nexport const ExpenseContext = createContext();\n\nconst initialState = {\n  expenses: [\n    {\n      id: uuid(),\n      name: 'Buy Milk',\n      amount: 10\n    }\n  ]\n};\n```\n\nThen define a function called `reducer`. It is going to take two arguments, the current state and action. This reducer's job is to modify or update the state object whenever there is an action taken within the app by the user. One example of an action is a user adding an expense.\n\nFor the following example, this `reducer` function is going to have one action type, which is to add the expense. If there are no changes or modifications, this `reducer` function is going to return the current state (_which is the default case_).\n\n```js\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_EXPENSE':\n      return {\n        expenses: [...state.expenses, action.payload]\n      };\n    default:\n      return {\n        state\n      };\n  }\n};\n```\n\nNext, define an `ExpenseContextProvider` that is going to behave like a store (_as a store in [Redux](https://amanhimself.dev/blog/redux-with-react-native-hooks)_).\n\n```js\nexport const ExpenseContextProvider = props => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <ExpenseContext.Provider value={[state, dispatch]}>\n      {props.children}\n    </ExpenseContext.Provider>\n  );\n};\n```\n\nThe `useReducer` hook allows us to create a reducer using the `reducer` function defined previously. The `initialState` is passed as the second argument.\n\n## Wrap the App with the provider\n\nWhen the `ExpenseContextProvider` is wrapped around any component in the React app, that component and its children will be able to access the current state as well as modify the state object.\n\nIn this section, that's what we are going to do. Open, `App.js` file, and modify it as below.\n\n```js\nimport React from 'react';\nimport { Container } from 'reactstrap';\n\nimport { ExpenseContextProvider } from './GlobalState';\n\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport List from './components/List';\n\nexport default function App() {\n  return (\n    <ExpenseContextProvider>\n      <Container className=\"text-center\">\n        <Header />\n        <Form />\n        <List />\n      </Container>\n    </ExpenseContextProvider>\n  );\n}\n```\n\nIn the next sections, let us create other components that are children to this `App` component. Create a `components/` directory and then create three new component files:\n\n- `Header.js`\n- `Form.js`\n- `List.js`\n\n## Add the header of the app\n\nIn this section, let us define a presentational component called `Header`. It's going to be a simple jumbotron component from Bootstrap displaying the title of the app and the logo.\n\nOpen `Header.js` and add the following snippet:\n\n```js\nimport React from 'react';\nimport { Jumbotron } from 'reactstrap';\nimport Logo from '../logo.svg';\n\nexport default function Headers() {\n  return (\n    <Jumbotron fluid>\n      <h3 className=\"display-6\">\n        Expense Tracker React App\n        <img src={Logo} style={{ width: 50, height: 50 }} alt=\"react-logo\" />\n      </h3>\n    </Jumbotron>\n  );\n}\n```\n\n## Add a form component\n\nOpen `Form.js` file and import the following statements.\n\n```js\nimport React, { useState, useContext } from 'react';\nimport {\n  Form as BTForm,\n  FormGroup,\n  Input,\n  Label,\n  Col,\n  Button\n} from 'reactstrap';\nimport { v4 as uuid } from 'uuid';\n\nimport { ExpenseContext } from '../GlobalState';\n```\n\nThe `uuid` module is going to generate a unique id for each expense item in the global state.\n\nDefine a `Form` component that is going to access values from `ExpenseContext` using `useContext` hook.\n\n```js\nexport default function Form() {\n  const [state, dispatch] = useContext(ExpenseContext);\n\n  //...\n}\n```\n\nUsing the `useState` reducer, define two state variables that are going to be local to this component. These state variables are going to help us define controlled input fields. A controlled input field accepts its current value as a prop as well as a callback to change that value.\n\nAdd the following initial state for `name` and `amount` using `useState`. Both of them are going to have an empty string as their initial value.\n\n```js\nconst [name, setName] = useState('');\nconst [amount, setAmount] = useState('');\n```\n\nTo update their values when a user starts typing, add the following handler methods. Both of these functions are going to retrieve the value from the corresponding field. The console statements are for testing purposes.\n\n```js\nconst handleName = event => {\n  console.log('Name ', event.target.value);\n  setName(event.target.value);\n};\n\nconst handleAmount = event => {\n  console.log('Amount ', event.target.value);\n  setAmount(event.target.value);\n};\n```\n\nLastly, to submit the form, there is going to be another handler method called `handleSubmitForm`. This method when triggered is going to dispatch the action to add the expense (`ADD_EXPENSE`). This is how the `reducer` function in the global state updates the state.\n\n```js\nconst handleSubmitForm = event => {\n  event.preventDefault();\n  if (name !== '' && amount > 0) {\n    dispatch({\n      type: 'ADD_EXPENSE',\n      payload: { id: uuid(), name, amount }\n    });\n\n    // clean input fields\n    setName('');\n    setAmount('');\n  } else {\n    console.log('Invalid expense name or the amount');\n  }\n};\n```\n\nLastly, add the following JSX to display the component.\n\n```js\nreturn (\n  <BTForm style={{ margin: 10 }} onSubmit={handleSubmitForm}>\n    <FormGroup className=\"row\">\n      <Label for=\"exampleEmail\" sm={2}>\n        Name of Expense\n      </Label>\n      <Col sm={4}>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          id=\"expenseName\"\n          placeholder=\"Name of expense?\"\n          value={name}\n          onChange={handleName}\n        />\n      </Col>\n    </FormGroup>\n    <FormGroup className=\"row\">\n      <Label for=\"exampleEmail\" sm={2}>\n        Amount\n      </Label>\n      <Col sm={4}>\n        <Input\n          type=\"number\"\n          name=\"amount\"\n          id=\"expenseAmount\"\n          placeholder=\"$ 0\"\n          value={amount}\n          onChange={handleAmount}\n        />\n      </Col>\n    </FormGroup>\n    <Button type=\"submit\" color=\"primary\">\n      Add\n    </Button>\n  </BTForm>\n);\n```\n\n## Display a list of items\n\nIn this section, let's add the `List.js` component to display a list of items from the current state object provided by the `ExpenseContext`. Open the file and add the following import statements:\n\n```js\nimport React, { useContext } from 'react';\nimport { ListGroup, ListGroupItem } from 'reactstrap';\n\nimport { ExpenseContext } from '../GlobalState';\n```\n\nNext, map the `state` value to display the name of the expense and the amount of the expense as a list item.\n\n```js\nexport default function List() {\n  const [state] = useContext(ExpenseContext);\n  return (\n    <ListGroup>\n      {state.expenses.map(item => {\n        return (\n          <ListGroupItem key={item.id}>\n            {item.name} - $ {item.amount}\n          </ListGroupItem>\n        );\n      })}\n    </ListGroup>\n  );\n}\n```\n\n## Running the app\n\nAll the components of the simple Expense Tracker app are complete. Now, let's run the app and see it as an action. On the initial render, the Rect app is going to look like below.\n\n![ss1](https://i.imgur.com/KrlTYS6.png)\n\nIt is going to display one expense item that is defined as the object in the initial state. Try adding a new item in the list and see if the list updates and form gets cleared or not.\n\n![ss2](https://i.imgur.com/92qztPT.gif)\n\n## Conclusion\n\nUsing `useReducer` in conjunction with React's Context API is a great way to quickly get started with managing your state. However, some caveats come with React's Context API. Re-rendering of multiple components unnecessarily can become a huge problem and its something you should take care.\n",
            "url": "https://amanhimself.dev//blog/manage-state-with-usecontext-usereducer-in-react-apps",
            "title": "How to manage state in React apps with useReducer and useContext hooks",
            "summary": "How to manage state in React apps with useReducer and useContext hooks",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/creating-and-validating-react-native-form-with-formik",
            "content_html": "---\ntitle: 'Creating and Validating React Native Forms with Formik'\ndate: '2020-10-16'\nslug: 'creating-and-validating-react-native-form-with-formik'\nthumbnail: '/thumbnails/expo.png'\ntag: 'react-native'\ncanonicalUrl: 'https://amanhimself.dev/blog/creating-and-validating-react-native-form-with-formik'\n---\n\n![cover](https://i.imgur.com/Qg4x9He.jpg)\n\nForms are an essential part of a mobile app — specifically, to handle user interactions that are available behind an authorization.\n\nTo ensure a seamless user experience, a form component consists of more than the input fields that allow users to enter their credentials. This can vary from handling form state, input field validation, handling errors, form submission, and so on.\n\n[Formik](https://formik.org/) is an open-source React and React Native library that allows us to handle forms by:\n\n- keeping track of a form’s state;\n- handling form submission via reusable methods and handlers (such as `handleChange`, `handleBlur`, and `handleSubmit`);\n- handling validation and error messages out of the box.\n\nIn this post, let's take a look at how to integrate it along with [Yup](https://github.com/jquense/yup) in a React Native app to create forms and validate them. We are also going to cover how to change the focus of one input field to another using a device's keyboard by forwarding the `ref` created using a [useRef hook](https://reactjs.org/docs/hooks-reference.html#useref).\n\nThe source code is available at [this GitHub repository](https://github.com/amandeepmittal/react-native-examples/tree/master/forms-with-formik).\n\n## Prerequisites\n\nTo follow this tutorial, please make sure you are familiarized with JavaScript/ES6 and meet the following requirements on your local dev environment:\n\n- [Node.js](https://nodejs.org/) version >= 12.x.x installed\n- Have access to one package manager such as npm or yarn or npx\n- [expo-cli](https://github.com/expo/expo-cli) version installed, or use npx\n\nTo learn more about how to set up and run the simulator or the emulator on your local development environment, visit React Native’s official documentation [here](https://reactnative.dev/docs/getting-started).\n\n## Getting Started\n\nLet's start by creating a simple React Native app with a new screen: `Login.js`.\n\nCreate a new React Native project using `expo-cli` and then install the dependencies required to build this demo app. Open a terminal window and execute the following commands:\n\n```shell\nnpx expo-cli init formik-example\n\ncd formik-example\n\nyarn add formik yup\n```\n\n## Create reusable components\n\nCreate a new directory called `components/`. In this directory, we are going to keep two form components that are reusable for various types of forms such as `Login` or `SignUp`.\n\nLet's start by creating a simple form button component which is a touchable element that allows the user to interact with the device’s screen and perform the next action. It is going to accept two props:\n\n- `label`: the text label on the button component;\n- `onPress` that is going to be handled by the parent component.\n\nCreate a new file called `Button.js` and add the following snippet:\n\n```js\nimport React from 'react';\nimport { TouchableOpacity, Text } from 'react-native';\n\nexport default function Button({ label, onPress }) {\n  return (\n    <TouchableOpacity\n      style={{\n        borderRadius: 8,\n        height: 50,\n        width: 245,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#e94832'\n      }}\n      activeOpacity={0.7}\n      onPress={onPress}\n    >\n      <Text\n        style={{ fontSize: 18, color: 'white', textTransform: 'uppercase' }}\n      >\n        {label}\n      </Text>\n    </TouchableOpacity>\n  );\n}\n```\n\nNow, let's create the second reusable component to let users enter their credentials. Create a new file called `TextInput.js`. This component is going to be reused for every input field in a form. It is going to have an icon on the left of the input field to indicate the nature of the input field itself. It is also going to have a placeholder text that tells the user what type of form value is expected.\n\nIt is going to accept one prop and that is the name of the `icon`. Each input field may have a different icon and other props that are generally used with a `TextInput` component in a React Native app. You will see what different props are used on a `TextInput` in the next section. For now, use a [rest parameter syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters) to pass down the `...otherProps`.\n\n```js\nimport React from 'react';\nimport { TextInput as RNTextInput, View, StyleSheet } from 'react-native';\nimport { Entypo as Icon } from '@expo/vector-icons';\n\nexport default function TextInput({ icon, ...otherProps }) {\n  const validationColor = '#223e4b';\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n        alignItems: 'center',\n        height: 48,\n        borderRadius: 8,\n        borderColor: validationColor,\n        borderWidth: StyleSheet.hairlineWidth,\n        padding: 8\n      }}\n    >\n      <View style={{ padding: 8 }}>\n        <Icon name={icon} color={validationColor} size={16} />\n      </View>\n      <View style={{ flex: 1 }}>\n        <RNTextInput\n          underlineColorAndroid=\"transparent\"\n          placeholderTextColor=\"rgba(34, 62, 75, 0.7)\"\n          {...otherProps}\n        />\n      </View>\n    </View>\n  );\n}\n```\n\n## Create a login screen\n\nAfter setting up the reusable components, let's use them in a login screen. Start by creating a new directory called `screens/` and then, inside it, create a new file called `Login.js`. This component file is going to consist of all the necessary elements and business logic behind a login form.\n\nThe first input field is going to be for an email. It is going to have properties such as:\n\n- the name of the icon as `icon`.\n- `autoCapitalize` is going to be unique to this field since we do not want any characters to auto-capitalize by default.\n- `autoCompleteType` provides autocomplete hints from the device, so it can provide an autofill for the particular field. It has [different types](https://reactnative.dev/docs/textinput#autocompletetype), but the one we are going to use here is for `email`.\n- `keyboardType` is set to `email-address`. It too has [different types](https://reactnative.dev/docs/textinput#keyboardtype).\n- `keyboardAppearance` allows you to set the keyboard color either to the system's default or light or dark in the background\n- `returnKeyType` and `returnKeyLabel` determines how the return key should look like and the label on it. There are [different values](https://reactnative.dev/docs/textinput#returnkeytype) that you can set for it. Some of them are cross-platform and some are OS-specific. For the email input field, let's set it to “next” since we want the user to enter their email credential and then move on to the next input field by pressing the `next` button. To programmatically move on to the next input field, we are going to handle that later in a different section.\n\nThe second input field is going to be for `password`. It is going to use similar properties to the ones we used in the input field for `email` but with different values. It has a unique property such as `secureTextEntry` set to `true` which is often used to enter text values that are sensitive, like a password.\n\nHere is the code snippet for the `Login` component after creating these two input fields:\n\n```js\nimport React from 'react';\nimport { Text, View } from 'react-native';\n\nimport TextInput from '../components/TextInput';\nimport Button from '../components/Button';\n\nexport default function Login() {\n  return (\n    <View\n      style={{\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'center'\n      }}\n    >\n      <Text style={{ color: '#223e4b', fontSize: 20, marginBottom: 16 }}>\n        Login\n      </Text>\n      <View style={{ paddingHorizontal: 32, marginBottom: 16, width: '100%' }}>\n        <TextInput\n          icon=\"mail\"\n          placeholder=\"Enter your email\"\n          autoCapitalize=\"none\"\n          autoCompleteType=\"email\"\n          keyboardType=\"email-address\"\n          keyboardAppearance=\"dark\"\n          returnKeyType=\"next\"\n          returnKeyLabel=\"next\"\n        />\n      </View>\n      <View style={{ paddingHorizontal: 32, marginBottom: 16, width: '100%' }}>\n        <TextInput\n          icon=\"key\"\n          placeholder=\"Enter your password\"\n          secureTextEntry\n          autoCompleteType=\"password\"\n          autoCapitalize=\"none\"\n          keyboardAppearance=\"dark\"\n          returnKeyType=\"go\"\n          returnKeyLabel=\"go\"\n        />\n      </View>\n      <Button label=\"Login\" onPress={() => true} />\n    </View>\n  );\n}\n```\n\nTo see the login form in action, run `expo start` or `yarn start`.\n\n![js1](https://i.imgur.com/isPvj2w.png)\n\n## Add Formik to a login form using the useFormik hook\n\n`useFormik` is a custom React hook that returns the Formik state and the handler methods to be used in a form component.\n\nTo use it, we have to import it from the `formik` library in the `Login.js` file.\n\n```js\nimport { useFormik } from 'formik';\n```\n\nYou might have noticed by now that we are not using `useState` to handle the value of each input field in the Login form. The reason behind that is that `formik` comes with a property called `initialValues` whose value is the object containing form fields.\n\nIn the case of the current form, these values are going to be `email` and `password`. The `onSubmit` method accepts a function that has these values as the first argument to handle the form submission. We are going to use these values to verify if the user credentials provided in the demo app are correct. You can also add other handler methods such as navigating to another screen on successful form submission.\n\nIn the `Login` component, you can add the following.\n\n```js\nconst { handleChange, handleSubmit, values } = useFormik({\n  initialValues: { email: '', password: '' },\n  onSubmit: values =>\n    alert(`Email: ${values.email}, Password: ${values.password}`)\n});\n```\n\nNow, add `onChangeText` on both input fields as well as `handleSubmit` as the value of `onPress` on the `Button` component.\n\n```js\n// on email input field\nonChangeText={handleChange('email')}\n\n// on password input field\nonChangeText={handleChange('password')}\n\n// change the value of onPress prop on <Button />\n<Button label='Login' onPress={handleSubmit} />\n```\n\nFill the input fields and press the login button to see an alert box returning these values.\n\n![js2](https://i.imgur.com/4XARSpP.gif)\n\nThis means the Login form with a custom component is working and Formik has been integrated successfully.\n\n## Add validation schema with Yup\n\nThe `yup` library is useful for managing complex validations when using Formik in either React or React Native apps. Formik supports both synchronous and asynchronous form validation. It has support for schema-based, form-level validation from Yup.\n\nStart by importing it.\n\n```js\nimport * as Yup from 'yup';\n```\n\nSince `initialValues` is an object, you have to specify `yup.object()` and define the shape of the object. Make sure that, when you’re defining input fields inside the shape, their names correspond to those described in `initialValues`.\n\nEach field in this object is supported by a chain of validation methods provided by the Yup API. The type of both `email` and `password` is going to be “string” since the `onChangeText` method returns the values as strings.\n\nAdd the following code snippet before the `Login` functional component.\n\n```js\nconst LoginSchema = Yup.object().shape({\n  email: Yup.string().email('Invalid email').required('Required'),\n  password: Yup.string()\n    .min(2, 'Too Short!')\n    .max(10, 'Too Long!')\n    .required('Required')\n});\n```\n\nUsing a library like Yup for validation saves a lot of time, especially when you don’t have to define custom validation methods to check for an input field. For example, in the above snippet, using `.email()` automatically matches against a regex instead of defining one, to check the validity of an email input field.\n\nTo validate input fields based on the schema just defined, let's add another property to `useFormik` called `validationSchema`.\n\n```js\nconst { handleChange, handleSubmit, values } = useFormik({\n  validationSchema: LoginSchema,\n  initialValues: { email: '', password: '' },\n  onSubmit: values =>\n    alert(`Email: ${values.email}, Password: ${values.password}`)\n});\n```\n\nIf you press the login button with blank input fields, the app won’t display an error but it won't submit the form.\n\n## Validating input fields\n\nIf the user provides wrong credential values (_since we are not covering the backend API in this post, it is a good practice to check the validity of credentials on the server-side as well_), it's a good UX practice to indicate the error. In this section, let's turn the input field border and the left icon color to red if the defined validation schema object doesn't match.\n\nWe will be using `errors`, `touched`, and `handleBlur` to know whether the input field has been touched by the user and, if yes, will pass the prop `errors` to the custom `TextInput` to display UI changes based on that.\n\nIn the `Login` component, modify the following:\n\n```js\nconst { handleChange, handleSubmit, handleBlur, values, errors, touched } =\n  useFormik({\n    validationSchema: LoginSchema,\n    initialValues: { email: '', password: '' },\n    onSubmit: values =>\n      alert(`Email: ${values.email}, Password: ${values.password}`)\n  });\n```\n\nThen, for the email input field, add the following properties:\n\n```js\n<TextInput\n  // ... rest remains same\n  onBlur={handleBlur('email')}\n  error={errors.email}\n  touched={touched.email}\n/>\n```\n\nSimilarly, modify the password field:\n\n```js\n<TextInput\n  // ... rest remains same\n  onBlur={handleBlur('password')}\n  error={errors.password}\n  touched={touched.password}\n/>\n```\n\nNow, go the `TextInput` component, and pass new props: `error` and `touched`.\n\n```js\nexport default function TextInput({ icon, error, ...otherProps }) {...}\n```\n\nNext, let's change the value of `validationColor` which we have defined in a previous section, based on whether the input field is touched or not and if there is an error or not by using a nested ternary operator.\n\n```js\nconst validationColor = !touched ? '#223e4b' : error ? '#FF5A5F' : '#223e4b';\n```\n\nNow, go back to the simulator and, without entering the value for any input field, press the Login button. You will find that the border color and the icon color for both input fields turns red.\n\n![js3](https://i.imgur.com/MtoCKJq.png)\n\nTry entering new values that satisfy the `loginSchema`. Also, see what happens if you touch one input field and move on to the next without entering any value — it will be considered as touched and an error will be shown.\n\n![js4](https://i.imgur.com/Xb1RZub.gif)\n\nTry to enter a password with more than 10 characters and verify that and error is also shown.\n\n![js5](https://i.imgur.com/S7kvcxd.png)\n\n## Select the next text input after pressing the \"next\" button\n\nThe last thing we need to do is to add another property on each input field to select the next `TextInput` field when pressing the `next` button.\n\nSince there are only two input fields, the `next` button is shown only in the email input field. This can be done by adding a property `onSubmitEditing` on the input field which accepts a callback as value. By creating a new `ref` for the password field, we can determine whether the input field in focus at any given time is the password or not. If not, that means it is the email field and we can press the next button to change the focus from the email to the password field.\n\nIn the `Login.js` file, start by importing the `useRef` hook from the React library and, inside the Login component, define the `ref` with the initial value of `null`.\n\n```js\nimport React, { useRef } from 'react';\n\n//...\n\nexport default function Login() {\n  const password = useRef(null);\n  // ...\n}\n```\n\nNext, add the `ref` property to the password input field.\n\n```js\n<TextInput\n  ref={password}\n  // ...\n/>\n```\n\nThen, add `onSubmitEditing` to the email input field.\n\n```js\nonSubmitEditing={() => password.current?.focus()}\n```\n\nBack to the simulator, you will encounter the following warning.\n\n![js6](https://i.imgur.com/gElVVOR.png)\n\nThis can be solved by using a `forwardRef` on the custom `TextInput` component. Ref forwarding is a technique for automatically passing a `ref` through a component to one of its children. In our case, we need to pass the `ref` from `Login` to the `TextInput` component.\n\nOpen `TextInput.js` and import `forwardRef` from the React library.\n\n```js\nimport React, { forwardRef } from 'react';\n```\n\nThen, wrap all contents of the `TextInput` functional component with `forwardRef` as shown below:\n\n```js\nconst TextInput = forwardRef(({ icon, error, touched, ...otherProps }, ref) => {\n  const validationColor = !touched ? '#223e4b' : error ? '#FF5A5F' : '#223e4b';\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n        alignItems: 'center',\n        height: 48,\n        borderRadius: 8,\n        borderColor: validationColor,\n        borderWidth: StyleSheet.hairlineWidth,\n        padding: 8\n      }}\n    >\n      <View style={{ padding: 8 }}>\n        <Icon name={icon} color={validationColor} size={16} />\n      </View>\n      <View style={{ flex: 1 }}>\n        <RNTextInput\n          underlineColorAndroid=\"transparent\"\n          placeholderTextColor=\"rgba(34, 62, 75, 0.7)\"\n          ref={ref}\n          {...otherProps}\n        />\n      </View>\n    </View>\n  );\n});\n\nexport default TextInput;\n```\n\nNow, by pressing the “next” button on the email input field, you can change the focus of the current field to “password”.\n\n![js7](https://i.imgur.com/U505VsB.gif)\n\nThe password input field shows a `go` button which indicates that, when users have finished entering their credentials, they are ready to submit the form. By adding `onSubmitEditing` with the value of `handleSubmit`, you submit the form.\n\nAdd the following to the password input field in `Login.js`:\n\n```js\nonSubmitEditing={() => handleSubmit()}\n```\n\nAnd that’s it! Here is the output you are going to get after completing this step:\n\n![js8](https://i.imgur.com/01WXCni.gif)\n\n## Conclusion\n\nUsing a form library like Formik gives us many advantages when building and handling forms to provide a pragmatic user experience.\n\nThere are many different methods available in the [Yup API](https://github.com/jquense/yup#yup) to add validation schema to a form component. This post covers the basics of Formik and Yup as well as one way of handling errors and touched fields.\n\nThe last section where we used `ref` to change the focus from one input field to the next using a device's keyboard is not a must-have but it may be worth considering if you want to provide seamless user experience.\n",
            "url": "https://amanhimself.dev//blog/creating-and-validating-react-native-form-with-formik",
            "title": "Creating and Validating React Native Forms with Formik",
            "summary": "Creating and Validating React Native Forms with Formik",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/harperdb-with-react-hooks",
            "content_html": "---\ntitle: 'How to use HarperDB instance with React Hooks'\ndate: '2020-10-07'\nslug: 'harperdb-with-react-hooks'\nthumbnail: '/thumbnails/harperdb.png'\ntag: 'harperdb'\ncanonicalUrl: 'https://amanhimself.dev/blog/harperdb-with-react-hooks'\n---\n\n![cover](https://i.imgur.com/jN0o3ij.png)\n\n[HarperDB Cloud](https://harperdb.io/developers/get-started/?utm_source=amanmittal) is a database service that supports both SQL and NoSQL queries for CRUD operations. It needs minimal configuration to get started and its realm is not only limited to build REST APIs with a server-side technology such as Node.js.\n\nHarperDB offers a way to access the database cloud instance directly in your client-side application. It has a built-in HTTP API that allows us to query data directly.\n\nIn this post, let's take a look at how we configure a HarperDB Cloud database instance and fetch the data by querying the database within a Reactjs app. HarperDB provides a React Hook, known as [useHarperDB](https://github.com/HarperDB/harperdb-sdk-react) to make our jobs easier.\n\n## HarperDB instance glossary\n\nThis post is going to use a similar instance of the HarperDB database that we built using the REST API approach with Node.js in our [previous post](https://amanhimself.dev/blog/build-rest-api-with-nodejs-harperdb). Please take a look at the post on how to set up the cloud instance [here](https://amanhimself.dev/blog/build-rest-api-with-nodejs-harperdb#setting-up-an-instance-of-harperdb-cloud). This way you will have a populated table of data fields.\n\nThe schema in the above database instance is called `dev`. A schema in HarperDB is necessary. It is equivalent to a collection of tables. Without an existing schema you cannot create a new table and without a table, you cannot add or update data in the HarperDB instance.\n\nBelow the schema, there is an option to add one or more tables. In the above instance, there is a table already created and is called `outlets`. This table has a unique identifier `id` for each row of data.\n\nOn the right-hand side, you will find the data inside the table. Do notice the two timestamp fields. They are auto inserted by HarperDB whenever a new row adds to the table and is auto-maintained.\n\n- **createdtime**: to record the timestamp when data is inserted.\n- **updatedtime**: to record the timestamp when any data field is updated for the last time.\n\n![ss0](https://i.imgur.com/iqb3tFI.png)\n\nOnce you have set up the cloud instance, make sure to use a React project with the library's version `16.8.0+`.\n\n## Getting started\n\nStart by creating a new React app. We are going to use this React app for building the example app in this post. Open up a terminal window and execute the following command:\n\n```shell\nnpx create-react-app harperdb-integration-react\n\n# after the project directory has been created\ncd harperdb-integration-react\n\n# install the following dependency\nyarn add use-harperdb@0.1.2\n```\n\nNow you can start the development server to see the React app in action. Go to the terminal window and execute the command `yarn start`. You are going to get the following output in a browser window at URL: `http://localhost:3000/`.\n\n![ss1](https://i.imgur.com/VTDySVc.png)\n\n## Creating a user with custom roles\n\nBy default, the user created in the HarperDB Cloud instance is a superuser. It has admin rights to query and add data and rights to create and drop the table from the existing schema as well as create and drop new schemas. In a client-side application, we do not want to have a superuser. Since most client apps are public, this is never a good approach to use the default user.\n\nThe approach to resolve this is to create a new user that has the rights to only perform CRUD operations inside a data table. HarperDB provides a way to define custom user roles as well as create a new user using that role.\n\nStart by opening your cloud instance and go to the tab `roles` [from the menu bar](https://harperdbhelp.zendesk.com/hc/en-us/articles/360051486534-Managing-Role-Permissions).\n\n![ss2](https://i.imgur.com/tnoRgYP.png)\n\nHere you can define a new **standard role** to create a custom one. Let's this new role, `client_user`.\n\n![ss3](https://i.imgur.com/VFtacjy.png)\n\nOnce the new role is created, the instance prompts with the permissions we can assign to any user with this role. You are now allowed to configure the access to tables and schemas for this specific role. There is only one schema right now and inside it, there is only one data table. For this example, let's keep the default configuration and proceed by pressing the button **Update Role Permissions**.\n\n![ss4](https://i.imgur.com/L5XyeIP.png)\n\nOnce the permissions are updated, go to the tab `users` next to the `roles` in the menu bar. This is used to add a new user with the custom role just created. From the drop-down menu, select the role `client_user`.\n\n![ss5](https://i.imgur.com/D3sXeLD.png)\n\nClick the **Add user** button to add the new user.\n\n![ss6](https://i.imgur.com/nvVVhq6.png)\n\nNow, we can use this custom user in the client React app to query the data from the table `outlets`.\n\n## Integrating HarperDB in a React\n\nThe `use-harperdb` hook comes with a `HarperDBProvider` that is used to wrap the instance of the React app or the `App` component in general inside the `index.js` file. This is mandatory to execute a CRUD operation on the database instance.\n\nAdd the following import statement inside `src/index.js` file:\n\n```js\n// ... other import statements\nimport { HarperDBProvider } from 'use-harperdb';\n```\n\nTo execute any CRUD operation on the database instance, the provider requires the db instance URL, the username, and the password associated with that user. We are going to make use of environmental variables to add these values.\n\nCreate a new file called `.env` at the root of the React project with the following variables. The values of these variables are mentioned as a description in `[]` but you must replace the square brackets and your own values.\n\n```shell\nREACT_APP_DB_URL=[Your Cloud Instance Provider URL]\nREACT_APP_USER=[The name of the custom user with client_user role]\nREACT_APP_PASSWORD=[The password associated with the custom user]\n```\n\nCreate React App reads any environmental variables that are prefixed with `REACT_APP`. Instead of using a third-party library, we can directly use these environmental variables to provide necessary attributes to `HarperDBProvider`.\n\n```js\nReactDOM.render(\n  <React.StrictMode>\n    <HarperDBProvider\n      url={process.env.REACT_APP_DB_URL}\n      user={process.env.REACT_APP_USER}\n      password={process.env.REACT_APP_PASSWORD}\n    >\n      <App />\n    </HarperDBProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n```\n\nThat's it. We have successfully configured the React app to use the HarperDB database instance.\n\n## Querying the data from HarperDB\n\nTo query the data from the database instance in the React app, the `useHarperDB` hook provides elements to do so.\n\nOpen the `App.js` file and import the hook from `use-harperdb`. Let's also set up a basic UI to display data when fetched.\n\n```js\nimport React from 'react';\nimport './App.css';\nimport { useHarperDB } from 'use-harperdb';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Starbucks Outlets</h2>\n        <table>\n          <thead style={{ marginBottom: '20px' }}>\n            <tr>\n              <td style={{ textTransform: 'uppercase' }}>City</td>\n              <td style={{ textTransform: 'uppercase' }}>Name</td>\n              <td style={{ textTransform: 'uppercase' }}>Latitude</td>\n              <td style={{ textTransform: 'uppercase' }}>Longitude</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>{/* TODO: display data from query */}</tr>\n          </tbody>\n        </table>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n```\n\nThe rule for using any hook is that they can only be consumed inside a functional component. The `useHarperDB` hook gives an array with elements to query the `data` which is returned as an array. It also provides:\n\n- `loading` where you can let the user know if the query is running the data is not yet loaded\n- `error` determines if there is an error when querying the data\n- `refresh` it is a function that allows fetching the data\n\nTo query the data from the database instance, pass the object inside the hook.\n\nAdd the following snippet query in the `App.js` file to fetch all the data from the database.\n\n```js\nfunction App() {\n  const [data, loading, error, refresh] = useHarperDB({\n    query: { operation: 'sql', sql: 'select * from dev.outlets' }\n    // interval: 5000\n  });\n\n  //...\n}\n```\n\nIn the above snippet, the second property of `interval` passed is optional to use when you don't want to explicitly use the `refresh` function. It accepts a value in milliseconds.\n\nLet's add some JSX for `loading` and `error` by using `if/else` syntax inside the `App` component.\n\n```js\nfunction App() {\n  // ...\n\n  if (loading) {\n    return <div>Loading ...</div>;\n  }\n\n  if (error && data.length === 0) {\n    return <div>Error, no data found</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Starbucks Outlets</h2>\n        <table>\n          <thead style={{ marginBottom: '20px' }}>\n            <tr>\n              <td style={{ textTransform: 'uppercase' }}>City</td>\n              <td style={{ textTransform: 'uppercase' }}>Name</td>\n              <td style={{ textTransform: 'uppercase' }}>Latitude</td>\n              <td style={{ textTransform: 'uppercase' }}>Longitude</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>{/* TODO: display data from query */}</tr>\n          </tbody>\n        </table>\n      </header>\n    </div>\n  );\n}\n```\n\nFor a very brief moment, you may see the loading message being displayed.\n\n![ss7](https://i.imgur.com/D5YDC1J.gif)\n\nAlso, if you are passing `interval` as the second property, you may notice that after every 5 seconds, the React app automatically refreshes the web page. To stop this behavior, you can remove the `interval` property.\n\nNow using the JavaScript's `map` function, let's map over the array of `data` and display the contents. If data is fetched that means it exists and we can easily map over the array. Add the following code snippet in place of the comment.\n\n```js\n<tbody>\n  {data &&\n    data.map((item, index) => (\n      <tr key={index}>\n        <td>{item.title}</td>\n        <td>{item.author}</td>\n      </tr>\n    ))}\n</tbody>\n```\n\nGo back to the browser window and you will get the following result:\n\n![ss8](https://i.imgur.com/jJFQ9k3.png)\n\nThe query can also be made using the `useHarperdb` hook with only the `data` array. Add the following query to fetch the total number of outlets or records from the database.\n\n```js\nconst [data2] = useHarperDB({\n  query: {\n    operation: 'sql',\n    sql: 'select count(*) as totalOutlets from dev.outlets'\n  }\n});\n```\n\nTo display the total count, add the modify the JSX rendered from `App` component:\n\n```js\n// ...\n<h2>Starbucks Outlets</h2>\n<p>Total Outlets: {data2 && data2[0].totalOutlets}</p>\n// ...\n```\n\nHere is the output after this step:\n\n![ss9](https://i.imgur.com/jUY8J3T.png)\n\n## Conclusion\n\nHooks are a great addition in the React world and they certainly help us write less code. The objective of this post was to introduce you to the `useHarperDB` hook and how to integrate it into a React app to fetch the data from a database hosted in the cloud.\n\n**Resources & Further Reading:**\n\n- [HarperDB documentation](https://harperdb.io/developers/documentation/overview/?utm_source=amanmittal)\n- [HarperDB Developer examples](https://harperdb.io/developers/developer-examples/?utm_source=amanmittal) includes tutorials on React, Websocket, Python, etc.\n",
            "url": "https://amanhimself.dev//blog/harperdb-with-react-hooks",
            "title": "How to use HarperDB instance with React Hooks",
            "summary": "How to use HarperDB instance with React Hooks",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/animate-header-view-on-scroll-with-react-native-animated-api",
            "content_html": "---\ntitle: 'How to Animate a Header View on Scroll With React Native Animated'\nslug: 'animate-header-view-on-scroll-with-react-native-animated-api'\ndate: '2020-10-01'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://blog.jscrambler.com/how-to-animate-a-header-view-on-scroll-with-react-native-animated/'\n---\n\n![cover_image](https://i.imgur.com/qDKlX8L.jpg)\n\nThe [Animated](https://reactnative.dev/docs/animated.html) library from React Native provides a great way to add animations and give app users a smooth and friendlier experience.\n\nIn this tutorial, let's explore a way to create a header view component that animates on the scroll position of the `ScrollView` component from React Native. We will go through the basics of creating a new Animated value as well as explaining the significance of functions and properties like `interpolation`, `extrapolate`, `contentOffset`, and so on.\n\n[The source code is available at GitHub](https://github.com/amandeepmittal/react-native-examples/tree/master/animate-header-on-scroll).\n\n## Prerequisites\n\nTo follow this tutorial, please make sure you are familiarized with JavaScript/ES6 and meet the following requirements on your local dev environment.\n\n- [Node.js](https://nodejs.org/) version >= 12.x.x installed\n- Have access to one package manager such as npm or yarn\n- [expo-cli](https://github.com/expo/expo-cli) version installed or use npx\n\nThe example in the following tutorial is based on Expo SDK 38.\n\n## Installing dependencies\n\nStart by creating a new React Native app generated with `expo-cli`. Do note that all the code mentioned in this tutorial works with plain React Native apps as well. Open up a terminal window and execute the following command:\n\n```shell\nnpx expo-cli init animate-header-example\n\n# after the project is created, navigate into the directory\ncd animate-header-example\n```\n\nTo handle devices with notch both on iOS and Android operating systems, let's install some libraries first. These libraries are going to add automatic padding on notch devices such that the main view of the app does not intersect with a safe area on notch-enabled devices. Run:\n\n```shell\nexpo install react-native-safe-area-view react-native-safe-area-context\n```\n\nTo use safe area views, wrap the root of the React Native app with `SafeAreaProvider` from the [react-native-safe-area-context](https://github.com/th3rdwave/react-native-safe-area-context) library. Open `App.js` and modify the it as shown below:\n\n```js\nimport React from 'react';\nimport { Text, View } from 'react-native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nexport default function App() {\n  return (\n    <SafeAreaProvider>\n      <View style={{ flex: 1, alignItems: 'center' }}>\n        <Text>Open up App.js to start working on your app!</Text>\n      </View>\n    </SafeAreaProvider>\n  );\n}\n```\n\nNext, wrap the contents of the `App` component with `SafeAreaView` from the [react-native-safe-area-view](https://github.com/react-navigation/react-native-safe-area-view) library. It is going to have a `style` prop with a `flex` of value `1` and another prop called `forceInset`. It’s important we add this, especially for some Android devices which might not behave as expected. This prop is going to force the application to add an inset padding on the content view. Setting the value of `top: always` will always imply that padding is forced at the top of the view.\n\n```js\n// ... other import statements\nimport SafeAreaView from 'react-native-safe-area-view';\n\nexport default function App() {\n  return (\n    <SafeAreaProvider>\n      <SafeAreaView style={{ flex: 1 }} forceInset={{ top: 'always' }}>\n        <View style={{ flex: 1, alignItems: 'center' }}>\n          <Text>Open up App.js to start working on your app!</Text>\n        </View>\n      </SafeAreaView>\n    </SafeAreaProvider>\n  );\n}\n```\n\nHere is what happens on an Android device when `forceInset` is not used on `SafeAreaView`:\n\n![ss1](https://i.imgur.com/uBdAKZ4.jpg)\n\nAnd with the `forceInset` prop applied:\n\n![ss2](https://i.imgur.com/xNZx2rq.jpg)\n\nOn iOS, the behavior is as expected:\n\n![ss3](https://i.imgur.com/HXHJRv9.png)\n\nThe last step in this section is to create a new component file called `AnimatedHeader.js` inside the `components/` directory. For now, it is going to return nothing.\n\n```js\nimport React from 'react';\nimport { Animated, View } from 'react-native';\n\nconst AnimatedHeader = () => {\n  return null;\n};\n\nexport default AnimatedHeader;\n```\n\nMake sure to import it in the `App.js` file:\n\n```js\n// ... after other import statements\nimport AnimatedHeader from './components/AnimatedHeader';\n```\n\n## Creating an animated header component\n\nThe animation on the position of the scroll on a `ScrollView` component is going to have an `Animated.Value` of `0`. To create an animation, `Animated.Value` is required. In the `App.js` file, import `useRef` from the React library. Then, define a variable called `offset` with a new `Animated.Value`. To use the Animated library from React Native, import it as well.\n\n```js\nimport React, { useRef } from 'react';\nimport { Text, View, Animated } from 'react-native';\n// ...other import statements\n\nexport default function App() {\n  const offset = useRef(new Animated.Value(0)).current;\n\n  // ...\n}\n```\n\nFor this example, it is not required to use the `useRef` hook; however, if you are looking forward to modifying the animated value, it is recommended to use `useRef`. It provides a `current` property that is persisted throughout a component's lifecycle.\n\nThe value of the `offset` can now be passed as a prop to the `AnimatedHeader` component.\n\n```js\nexport default function App() {\n  const offset = useRef(new Animated.Value(0)).current;\n\n  return (\n    <SafeAreaProvider>\n      <SafeAreaView style={{ flex: 1 }} forceInset={{ top: 'always' }}>\n        {/* Add the following AnimatedHeader */}\n        <AnimatedHeader animatedValue={offset} />\n        <View style={{ flex: 1, alignItems: 'center' }}>\n          <Text>Open up App.js to start working on your app!</Text>\n        </View>\n      </SafeAreaView>\n    </SafeAreaProvider>\n  );\n}\n```\n\nTo access the safe area inset value inside the `AnimatedHeader` component, the library `react-native-safe-area-context` provides a hook called `useSafeAreaInsets()`. This hook returns a safe area insets object with the following values:\n\n```js\n{\n  top: number,\n  right: number,\n  bottom: number,\n  left: number\n}\n```\n\nThe inset value of `top` is going to be manipulated when defining the animated header.\n\nFirst, let's import this hook in the `AnimatedHeader.js` file and then define a fixed `HEADER_HEIGHT` constant that is going to be the initial height of the `Animated.View`.\n\n```js\n// ... other import statements\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nconst HEADER_HEIGHT = 200;\n\nconst AnimatedHeader = ({ animatedValue }) => {\n  const insets = useSafeAreaInsets();\n\n  return null;\n};\n```\n\nTo animate the height of the header view on the scroll, we are going to use interpolation. The `interpolate()` function on `Animated.Value` allows an input range to map to a different output range.\n\nIn the current scenario, when the user scrolls, the interpolation on `Animated.Value` is going to change the scale of the header to slide to the top on scroll along the y-axis. This effect is going to minimize the initial value of the height of `Animated.View`.\n\nThe interpolation must specify an `extrapolate` value. This determines the scaling of the header’s height to be visible at the last value in `outputRange`. There are three different values for `extrapolate` available, but we are going to use `clamp`.\n\nBegin by declaring a variable called `headerHeight` that is going to have the value of interpolation. The `Animated.Value` is the prop `animatedValue` coming from the parent component.\n\nThe `inputRange` is going to be `0` to the `HEADER_HEIGHT` plus the top inset. The `outputRange` is to be the `HEADER_HEIGHT` plus the top inset to the top inset plus `44`.\n\n```js\nconst AnimatedHeader = ({ animatedValue }) => {\n  const insets = useSafeAreaInsets();\n\n  const headerHeight = animValue.interpolate({\n    inputRange: [0, HEADER_HEIGHT + insets.top],\n    outputRange: [HEADER_HEIGHT + insets.top, insets.top + 44],\n    extrapolate: 'clamp'\n  });\n\n  // ...\n};\n```\n\nNow, let's add an `Animated.View` to render from this component. It is going to use `position: absolute` to help cover the background behind the status bar as well as the same color as the whole header.\n\n```js\nconst AnimatedHeader = ({ animatedValue }) => {\n  // ...\n  return (\n    <Animated.View\n      style={{\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        zIndex: 10,\n        height: headerHeight,\n        backgroundColor: 'lightblue'\n      }}\n    />\n  );\n};\n```\n\nThis section ends with the following output:\n\n![ss4](https://i.imgur.com/kOdpwwL.png)\n\n## Manipulating the ScrollView\n\nIn the `App.js` file, a `ScrollView` component is going to be displayed beneath the header component and, in return, it is going to display a list of mocked data.\n\nFor this example, I've prepared a bare minimum list of book titles in a separate file called `data.js`.\n\n```js\nconst DATA = [\n  {\n    id: 1,\n    title: 'The Hunger Games'\n  },\n  {\n    id: 2,\n    title: 'Harry Potter and the Order of the Phoenix'\n  },\n  {\n    id: 3,\n    title: 'To Kill a Mockingbird'\n  },\n  {\n    id: 4,\n    title: 'Pride and Prejudice'\n  },\n  {\n    id: 5,\n    title: 'Twilight'\n  },\n  {\n    id: 6,\n    title: 'The Book Thief'\n  },\n  {\n    id: 7,\n    title: 'The Chronicles of Narnia'\n  },\n  {\n    id: 8,\n    title: 'Animal Farm'\n  },\n  {\n    id: 9,\n    title: 'Gone with the Wind'\n  },\n  {\n    id: 10,\n    title: 'The Shadow of the Wind'\n  },\n  {\n    id: 11,\n    title: 'The Fault in Our Stars'\n  },\n  {\n    id: 12,\n    title: \"The Hitchhiker's Guide to the Galaxy\"\n  },\n  {\n    id: 13,\n    title: 'The Giving Tree'\n  },\n  {\n    id: 14,\n    title: 'Wuthering Heights'\n  },\n  {\n    id: 15,\n    title: 'The Da Vinci Code'\n  }\n];\n\nexport default DATA;\n```\n\nThe next step is to import this file in `App.js`. Also, import the `ScrollView` component from React Native.\n\n```js\n//...\nimport { ScrollView, Text, View, Animated } from 'react-native';\n\nimport DATA from './data';\n```\n\nNext, modify the contents of the `App` component. The important prop to note below in the `ScrollView` component is the `onScroll` prop. Mapping gestures like scrolling directly to an animated value can be done by using `Animated.Event`. This type of event function is passed as the value to the `onScroll` prop.\n\n`Animated.Event` accepts an array of objects as the first argument which is going to be the `contentOffset`, which tells the current position of the scrolling view. It changes every time the user scrolls up or down. The value of `contentOffset` along the y-axis is going to be the same `Animated.Value` that is used to interpolate the height of the `AnimatedHeader` component.\n\nIt is recommended that you pass the second argument of `useNativeDriver` in `Animated.Event` .\n\n```js\nexport default function App() {\n  const offset = useRef(new Animated.Value(0)).current;\n\n  return (\n    <SafeAreaProvider>\n      <SafeAreaView style={{ flex: 1 }} forceInset={{ top: 'always' }}>\n        <AnimatedHeader animatedValue={offset} />\n        <ScrollView\n          style={{ flex: 1, backgroundColor: 'white' }}\n          contentContainerStyle={{\n            alignItems: 'center',\n            paddingTop: 220,\n            paddingHorizontal: 20\n          }}\n          showsVerticalScrollIndicator={false}\n          scrollEventThrottle={16}\n          onScroll={Animated.event(\n            [{ nativeEvent: { contentOffset: { y: offset } } }],\n            { useNativeDriver: false }\n          )}\n        >\n          {DATA.map(item => (\n            <View\n              key={item.id}\n              style={{\n                marginBottom: 20\n              }}\n            >\n              <Text style={{ color: '#101010', fontSize: 32 }}>\n                {item.title}\n              </Text>\n            </View>\n          ))}\n        </ScrollView>\n      </SafeAreaView>\n    </SafeAreaProvider>\n  );\n}\n```\n\nHere is the output after this step on an iOS device:\n\n![ss5](https://i.imgur.com/QFWrJCN.gif)\n\nOn Android:\n\n![ss6](https://i.imgur.com/4HlPFNQ.gif)\n\n## Conclusion\n\nI hope you had fun reading this tutorial. If you are trying the Animated library from React Native for the first time, wrapping your head around it might take a bit of time and that's the part of the process.\n\nSome of the important topics covered in this post are listed as links for further reading below:\n\n- [The onScroll prop](https://reactnative.dev/docs/scrollview#onscroll)\n- [Interpolation](https://reactnative.dev/docs/animations#interpolation)\n- [Tracking gestures with Animated.Event](https://reactnative.dev/docs/animations#tracking-gestures)\n\nOriginally published at [Jscrambler](https://blog.jscrambler.com/how-to-animate-a-header-view-on-scroll-with-react-native-animated/).\n",
            "url": "https://amanhimself.dev//blog/animate-header-view-on-scroll-with-react-native-animated-api",
            "title": "How to Animate a Header View on Scroll With React Native Animated",
            "summary": "How to Animate a Header View on Scroll With React Native Animated",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/add-environment-variables-in-netlify-deployment",
            "content_html": "---\ntitle: 'Add Environment Variables in a Netlify Deployment'\ndate: '2020-09-01'\nslug: 'add-environment-variables-in-netlify-deployment'\nthumbnail: '/thumbnails/netlify.png'\ntag: 'nodejs'\ncanonicalUrl: 'https://amanhimsefl.dev/blog/add-environment-variables-in-netlify-deployment/'\n---\n\n![cover_image](https://i.imgur.com/SX2uERE.png)\n\nRecently I migrated my blog (the one you reading right now) from [Gatsby](https://www.gatsbyjs.com/) to [Next.js](https://nextjs.org/) for some specific reasons. The first reason, me being curious about how Next.js works and how is the developer experience. The second one, I want to have minimal effort and spend less time in managing a blog's UI and spend more time on writing posts. Lately, the vice versa has been the reality.\n\nTo not write every CSS element from scratch for responsive design, I am using [Chakra UI](https://blog.logrocket.com/how-to-create-forms-with-chakra-ui-in-react-apps/) for this blog which is a UI component library for React apps. It serves the purpose.\n\n## The idea for the post\n\nThe idea of the post came from a problem of my own. Since I am a fan of minimal effort, this blog has been running from a [GitHub repository](https://github.com/amandeepmittal/amanhimself.dev) deployed with [Netlify](https://www.netlify.com/).\n\nThere are many advantages to this bare infrastructure such as free HTTPS certificate, using a custom domain, and so on. This way, Netlify manages continuous deployment runs the build command from a Gatsby or a Next.js rendered site. It also triggers a deployment whenever there is a new commit pushed in the GitHub repository.\n\n## The problem that leads me to use an environment variable\n\nThat said, let's get back to the main topic. After deploying the blog with 90+ posts, I ran into an issue that is known as \"Allocation failed - JavaScript heap out of memory\" in Node.js world.\n\nThe issue occurs when the deployment build runs out of memory. Node.js does not handle this by rolling back and moves forward with the build which eventually concludes in the build to fail.\n\nRegardless of what stack or framework you use to deploy your site, if the deployment instance is using a node server, one day you might run into an issue as shown below.\n\n![ss1](https://i.imgur.com/heymZ2D.png)\n\n## The good \"Old space\" problem in V8\n\nDiving further I got to learn a new thing even though I've been using Node.js since the starting of my own developer career. This issue occurs when the memory consumption of garbage collection in V8 reaches its max limit. If the limit is exceeded, V8 kills the process.\n\n> More information on this issue can be found on [Stackoverflow here](https://stackoverflow.com/questions/48387040/nodejs-recommended-max-old-space-size/48392705). It also explains, when to increase the memory and when to avoid.\n\n## Increasing the memory limit with Environment Variable\n\nAccording to Chris McCraw's answer [here](https://community.netlify.com/t/fatal-error-call-and-retry-last-allocation-failed-javascript-heap-out-of-memory/1840/4), a Netlify build (if not using an Enterprise plan) should not exceed the limit of 3GB for reliability. In the same thread, there is a proper solution and that leads to the use of environment variables.\n\nIf you face this problem using the same approach with Netlify as I did, or for some other reason you want to use environment variables, here is how to get started. Step one is to go to your deployment on Netlify and click the option **Deploy Settings**.\n\n![ss2](https://i.imgur.com/qjEP2pR.png)\n\nThis is where all the deployment-related settings are stored. On the next screen, observe a sidebar and under the tab **Build & deploy** there is a sub-tab called **Environment**. Click on that and then click on the button **Edit variables**. Now, you can add the key and value for each environment variable as shown below.\n\n![ss3](https://i.imgur.com/5NKWri1.png)\n\n## Further reading\n\nHere is a list of all the links I came across when resolving this issue. Might be helpful:\n\n- [The JavaScript heap out of memory thread](https://community.netlify.com/t/fatal-error-call-and-retry-last-allocation-failed-javascript-heap-out-of-memory/1840/4)\n- [The Stackoverflow thread that explains shortcomings of V8 in managing memory](https://stackoverflow.com/questions/48387040/nodejs-recommended-max-old-space-size/48392705)\n- [Features of Netlify + GitHub app](https://github.com/apps/netlify)\n",
            "url": "https://amanhimself.dev//blog/add-environment-variables-in-netlify-deployment",
            "title": "Add Environment Variables in a Netlify Deployment",
            "summary": "Add Environment Variables in a Netlify Deployment",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/react-router-real-time-user-monitoring-react-apps",
            "content_html": "---\ntitle: 'How to use React Router and real time user monitoring in React apps'\ndate: '2020-08-14'\nslug: 'react-router-real-time-user-monitoring-react-apps'\nthumbnail: '/thumbnails/react.png'\ntag: 'react'\ncanonicalUrl: 'https://amanhimself.dev/blog/blog/react-router-real-time-user-monitoring-react-apps/'\n---\n\nReact is often used for building single-page applications (SPAs). SPAs tend to have multiple page views so when navigating from one-page view to another, reloading the entire page view is tedious and inefficient. To work as it should, a SPA must render different parts of a view when required instead of reloading the entire page.\n\nRouting comes into the picture when navigating from one page to another in a SPA app. Routing can be categorized in two ways: static and dynamic. SPAs follow a dynamic approach. In this tutorial, we will discuss a popular routing library used with React applications known as [React Router](https://reacttraining.com/react-router/web/guides/quick-start). After setting up our routes, we are also going to discuss how to set up performance monitoring with [Sematext](https://sematext.com/) in React apps with React Router library.\n\n## Prerequisites\n\nBefore you begin this tutorial, you’re going to need the following:\n\n- [Node.js](https://nodejs.org/) version above 12.x.x installed on your local machine\n- Access to a package manager such as npm or yarn or npx\n- Basic JavaScript and ES6 knowledge\n- Basic knowledge of Reactjs\n- Access [Sematext](https://sematext.com/) account (_trial version also acceptable_)\n\n## Getting started\n\nStart by creating a new React project. Run the following command using [npx](https://www.npmjs.com/package/npx). Once the project is generated, navigate inside the newly created directory and install the `react-router-dom` library.\n\n```shell\nnpx create-react-app react-router-demo\n\n# navigate inside the directory\ncd react-router-demo\n\n# install react-router-dom\nyarn add react-router-dom\n```\n\nReact Router library (as per version 5) contains three different npm packages.\n\n- react-router\n- react-router-dom\n- react-router-native\n\nEach of the packages has a different use case. The first one, `react-router` is the core package and is used with the next two packages listed above. The `react-router-dom` is used when building a web application. This is what we are going to use in this tutorial. The last one `react-router-native` is used in apps using [React Native](https://amanhimself.dev/getting-started-with-react-native-in-2019-build-your-first-app/).\n\nTo see the React app generated, currently in action, make sure you are inside the root directory of the React project before you run the following command.\n\n```shell\nyarn run start\n```\n\nThis is going to open the boilerplate React app screen at the URL `http://localhost:3000/` in a browser window.\n\n![ss1](https://i.imgur.com/HtBY0g4.png)\n\n### Create the first route with React Router\n\nTo create the first route in the React app, import the `Router` and `Route` from the `react-router-dom` library. Open `src/App.js` file and add the following import statement.\n\n```js\nimport React from 'react';\nimport { Router, Route } from 'react-router-dom';\n```\n\nLet's also add a `history` object to use with navigation. Unlike `BrowserRouter`, the `Router` component is a low-level interface for all router components. This means that you have to manually pass the `history` object to make it work. Later, this `history` object is going to be used for the monitoring tool. Import `createBrowserHistory` as following:\n\n```js\nimport { createBrowserHistory as createHistory } from 'history';\n\nconst history = createHistory();\n```\n\nA `Route` is required to create an actual route. It is where the logic of routing is placed. It renders the UI of a component. It has a prop called `path` that is always matched with the current location of the app. Based on this prop, the desired component gets rendered. When the component is not getting rendered, `Route` returns null. The `component` name is also passed as a prop. All `Routes` are wrapped inside the `Router` component.\n\n```js\nfunction App() {\n  return (\n    <Router>\n      <Route path=\"/\" component={Home} />\n    </Router>\n  );\n}\n```\n\nThe path is currently pointing towards the Home component which has the following UI logic. Create a `Home` component inside `src/components/Home.js` file.\n\n```js\nimport React from 'react';\n\nexport default function Home() {\n  return (\n    <div>\n      <h1> Home Page</h1>\n    </div>\n  );\n}\n```\n\nNow, import this component inside the `App.js` file.\n\n```js\nimport Home from './components/Home';\n```\n\nVisit the web browser and see the Home component being rendered right now.\n\n![ss2](https://i.imgur.com/Q2IwXJ7.png)\n\nThis is a bare minimum example. Now let us add another route with the same props as the Home. Call this route About with a similar rendering logic as Home.\n\n## Adding the second route\n\nStart by adding another component file inside `src/components` and name it `About.js`. Add the following code snippet to it.\n\n```js\nimport React from 'react';\n\nexport default function About() {\n  return (\n    <div>\n      <h1>About</h1>\n    </div>\n  );\n}\n```\n\nNow add this function component as the second route, below the `Home` route in `App.js` file. Make sure to import it.\n\n```js\n// After other import statements\nimport About from './components/About';\n\n// Add another route\nfunction App() {\n  return (\n    <Router history={history}>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/about\" component={About} />\n    </Router>\n  );\n}\n```\n\nVisit the URL `http://localhost:3000/about`. You will notice that both the components are being rendered right now on the path /about.\n\n![ss3](https://i.imgur.com/krpy60b.png)\n\nThe reason for this is that the regular expression engine that React Router uses internally considers both the routes that are being started with a forward slash `/` equal. To solve this issue, we can use another essential prop on the Home route called `exact`.\n\n```js\n<Route path=\"/\" exact component={Home} />\n```\n\nThis `exact` prop is also known as a qualifier which states that the path must match exactly the `/` and nothing after it, such as `/about`. Now, if you visit the browser window at the URL `http://localhost:3000/about` you will notice that only the about component is getting rendered this time.\n\n![ss4](https://i.imgur.com/rTVSwFM.png)\n\n## Wrapping routes with Switch\n\nThe `Switch` component is a unique one since it renders the component at the `path` of the `Route` exclusively. It renders a default component once the app initially renders by matching the first child `Route`. It allows switching between different routes when a path is matched. It is helpful if you are using the `Redirect` component with the `Route` component. Even though in this current demo, we are not going to have any redirects, let's wrap all our routes inside a `Switch`. Modify the `App.js` file as follows:\n\n```js\n// import the Switch component\nimport { Router, Route, Switch } from 'react-router-dom';\n\n// App component\nfunction App() {\n  return (\n    <Router history={history}>\n      <Switch>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/about\" component={About} />\n      </Switch>\n    </Router>\n  );\n}\n```\n\n### Adding a navbar\n\nTo navigate between to web pages in HTML, there is an `<a href=\"\"></a>` anchor tag available. However, using this traditional approach will lead to a browser refresh. To overcome this, React Router API offers a `NavLink` component that can be used to navigate to a particular URL or a component.\n\nLet us try to create a navigation menu with this new knowledge. Import `NavLink` from `react-router-dom` in App.js file. Here is the modified snippet of App component.\n\n```js\nimport { Router, Route, Switch, NavLink } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router history={history}>\n      <nav style={{ margin: 10 }}>\n        <NavLink exact to=\"/\" style={{ padding: 10 }}>\n          Home\n        </NavLink>\n        <NavLink to=\"/about\" style={{ padding: 10 }}>\n          About\n        </NavLink>\n      </nav>\n      <Switch>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/about\" component={About} />\n      </Switch>\n    </Router>\n  );\n}\n```\n\nIn the above snippet, notice that all the links are being added before all the `Route` components. The styling attributes inside `style` are optional for now. Go to the browser window, you are going to notice a navigation menu pops up at the top. Try clicking links to navigate between different components.\n\n![ss5](https://i.imgur.com/P0xZkiI.gif)\n\n## Adding Parameters to the Routes\n\nIn this section, you will learn how to create and manage dynamic routes based on a query parameter such as `:id`. We start by creating a static array that will serve as the mock data.\n\nThe idea is to demonstrate a route as `/posts` which displays all the posts that are coming from the array. However, each post in the array will be having an `id` or a unique identifier. Using that unique identifier, you will be approaching the concept of dynamic content rendering by writing the logic for URLs such as `/posts/:id` where `:id` will be represented by the specific id of a post.\n\nTo start, let us add a bunch of mock posts in the state inside a new component file called `components/Posts.js`. Import the following statements.\n\n```js\nimport React, { useState } from 'react';\nimport { Link, Route } from 'react-router-dom';\n```\n\nA `Link` component is similar to `NavLink` with the difference being that it can be used for other purposes rather than a navigation menu where an `anchor` tag is required.\n\nNext, declare a static array of different posts.\n\n```js\nconst POSTS = [\n  {\n    id: 1,\n    title: 'Hello Blog World!'\n  },\n  {\n    id: 2,\n    title: 'My second post'\n  },\n  {\n    id: 3,\n    title: 'What is React Router?'\n  }\n];\n```\n\nNext, define a function component called `Child`. It reads anything coming from the URL parameters, such as, in this case, the `id` of each post. This component is going to accept one prop called `match` object. This object contains information about how a `<Route path>` matched the URL. It has four different props, but the prop you are going to use is an object called `params` to read the `id` of the post. A `params` object contains key/value pairs that are parsed from the URL corresponding to the dynamic segments of the `path`.\n\n```js\nfunction Child({ match }) {\n  return (\n    <div>\n      <h3>ID: {match.params.id}</h3>\n    </div>\n  );\n}\n```\n\nThen, define the `Posts` function component. It is going to have a state variable called `posts` that are going to have a default value of the mock array `POSTS`. Using the JavaScript's `map` function is going to render the list of Posts and display them as a list whenever the current location in the web browser matches `/posts`. The `Child` component is going to be the value of displaying the content (`id` in this case) of each post.\n\n```js\nexport default function Posts() {\n  const [posts, setPosts] = useState(POSTS);\n\n  return (\n    <div className=\"posts\">\n      <h1>Posts List</h1>\n      <ul>\n        {posts.map(post => (\n          <li key={post.id}>\n            <Link to={`/posts/${post.id}`}>{post.title}</Link>\n          </li>\n        ))}\n      </ul>\n      <Route path=\"/posts/:id\" component={Child} />\n    </div>\n  );\n}\n```\n\nNow, import the newly created component inside `App.js` where other routes already exist.\n\n```js\nimport Posts from './components/Posts';\n\nfunction App() {\n  return (\n    <Router history={history}>\n      <nav style={{ margin: 10 }}>\n        <NavLink exact to=\"/\" style={{ padding: 10 }}>\n          Home\n        </NavLink>\n        <NavLink to=\"/about\" style={{ padding: 10 }}>\n          About\n        </NavLink>\n        <NavLink to=\"/posts\" style={{ padding: 10 }}>\n          Posts\n        </NavLink>\n      </nav>\n      <Switch>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/posts\" component={Posts} />\n      </Switch>\n    </Router>\n  );\n}\n```\n\nNow, visit the URL `http://localhost:3000/posts` and you are going to see the list of posts.\n\n![ss6](https://i.imgur.com/79STiT7.png)\n\nClicking one of the posts is going to show the contents of that post.\n\n![ss7](https://i.imgur.com/LmscMwA.png)\n\n![ss8](https://i.imgur.com/a6np7at.png)\n\n## Real user monitoring tool with Sematext\n\nConfiguring a monitoring tool can be a good asset for your React application. It is helpful to determine a user's experience in terms of performance. If you're web app is not loading as expected, when in production, you can lose a lot of users and potential customers.\n\nA monitoring tool like Sematext Real user monitoring tool provides a way to test out performance-related issues regarding the user experience in your web app. It allows you to track page loading time, HTTP requests, UI interactions, application crashes, and so on.\n\nThis tool can be a critical part of understanding how a user behaves when using your web app. The features provided by their tool are hard to implement otherwise.\n\nThis tool can be a critical part of understanding how a user behaves when using your web app. The features provided by their tool are hard to implement otherwise.\n\n## Configure a Sematext monitoring app\n\nTo follow further, you do require a [Sematext account](https://sematext.com/experience/) and do note that they have a 30 day trial period that you can leverage. If you are planning to use this in production, you can also leverage their pricing plan that is defined per app.\n\n![ss9](https://i.imgur.com/y8Nekfj.png)\n\nOnce you are logged in to your account, you are going to be welcomed by a dashboard screen that might look similar to below.\n\n![ss10](https://i.imgur.com/tuLIO58.png)\n\nTo start configuring Sematext Experience in the current demo React app, click on the `New App` button in the top right corner and then select `Experience`.\n\n![ss11](https://i.imgur.com/A40CG1G.png)\n\nThen, enter the name of the app in the modal screen as well as make sure to check the `About Website` option since the current React app is trying to simulate a SPA behavior. Click the button `Continue`.\n\n![ss12](https://i.imgur.com/sRIIczJ.png)\n\n## Installing monitoring scripts in React app\n\nIn the Sematext dashboard, you will be redirected to a page where there are steps to install the Experience tool. It contains some installation scripts that are necessary to add. These scripts are the integration point between the monitoring tool and your React app.\n\nGo back to the React app and open the `public/index.html` file. Paste the first installation script as similar to one below, inside the `head` tag of the HTML file. The installation script contains the unique token provided by SemaText.\n\n```html\n<script type=\"text/javascript\">\n  (function (e, r, n, t, s) {\n    var a = [];\n    e[s] = function () {\n      a.push(arguments);\n    };\n    e[s].queue = a;\n    var o = [];\n    var i = [];\n    var c = true;\n    var p = void 0;\n    if (\n      window.PerformanceObserver &&\n      window.PerformanceObserver.supportedEntryTypes &&\n      (PerformanceObserver.supportedEntryTypes.indexOf('longtask') >= 0 ||\n        PerformanceObserver.supportedEntryTypes.indexOf('element') >= 0)\n    ) {\n      p = new PerformanceObserver(function (e) {\n        e.getEntries().forEach(function (e) {\n          switch (e.entryType) {\n            case 'element':\n              i.push(e);\n              break;\n            case 'longtask':\n              o.push(e);\n              break;\n            default:\n              break;\n          }\n        });\n      });\n      p.observe({ entryTypes: ['longtask', 'element'] });\n    }\n    e[s + 'lt'] = {\n      longTasks: o,\n      timingElements: i,\n      inPageLoad: c,\n      observer: p\n    };\n    if (t) {\n      var u = r.createElement(n);\n      u.async = 1;\n      u.src = t;\n      var f = r.getElementsByTagName(n)[0];\n      f.parentNode.insertBefore(u, f);\n    }\n  })(window, document, 'script', '//cdn.sematext.com/rum.js', 'strum');\n</script>\n<script type=\"text/javascript\">\n  strum('config', {\n    token: 'e3451b53-a95f-45c6-ba8e-1368cb4f2407',\n    receiverUrl: 'https://rum-receiver.sematext.com'\n  });\n</script>\n```\n\nFollow this by the second step where you have to add an event listener called `routeChange` at the top component in your React app or where the navigation configuration is written.\n\nOpen the file `src/App.js` and paste the following after you have defined the `history` object.\n\n```js\nhistory.listen((location, action) => {\n  if (action !== 'REPLACE') {\n    window.strum('routeChange', window.location.href);\n  }\n});\n```\n\nThis event listener is responsible for tracking whenever a route changes. It is essential, as discussed previously, the nature of a Single Page Application is to change the routes dynamically.\n\nThat's it. These are the only two steps required to configure and add the Sematext Real-time User Monitoring tool in your React app.\n\n### Testing out the Real-time User Monitoring tool\n\nAfter integrating the installation scripts, the next step is to build the React app by running the command from a terminal window:\n\n```shell\nyarn run build\n```\n\nOnce this command runs successfully, you can serve it by using the command below:\n\n```shell\nnpx serve -s build\n```\n\nThis command serves all the files in the `build` folder as a single page application to simulate the hosted version experience. It is going to give you an URL that you can paste in a browser window.\n\nOnce the React app is built and served, you can test it out by playing around with the different routes. It might take a moment, but the Sematext monitoring tool is fast at detecting the user interactions in the React app.\n\nThe overview of the dashboard screen as shown below tells as the initial page loading time is excellent.\n\n![ss13](https://i.imgur.com/n7rIiE2.png)\n\nIt also goes in detail by determining the exact page load time.\n\n![ss14](https://i.imgur.com/cugGBau.png)\n\nTo check out the number of resources that are downloading for a particular URL, navigate to the `Resources` tab from the sidebar.\n\n![ss15](https://i.imgur.com/tnetw9K.png)\n\nFrom the `Users` tab in the sidebar menu, you can monitor the user data such as the number of active users on the web app at a given time, the top browser being used, the maximum number of users located in which country and so on.\n\n![ss16](https://i.imgur.com/BPimzAR.png)\n\n## Conclusion\n\nMonitoring user experience in Real-time brings an advantage to single-page applications. It not only allows you to figure out how the user experience is going on for the majority of customers but you can use this information to improve the areas of your web app to provide a much better experience. Using the [Sematext Real-time User Monitoring tool](https://sematext.com/) with a React app is helpful in the scenario.\n",
            "url": "https://amanhimself.dev//blog/react-router-real-time-user-monitoring-react-apps",
            "title": "How to use React Router and real time user monitoring in React apps",
            "summary": "How to use React Router and real time user monitoring in React apps",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/build-rest-api-with-nodejs-harperdb",
            "content_html": "---\ntitle: 'Build a REST API with Node.js and HarperDB'\nslug: 'build-rest-api-with-nodejs-harperdb'\ndate: '2020-07-23'\nthumbnail: '/thumbnails/harperdb.png'\ntag: 'harperdb'\ncanonicalUrl: 'https://amanhimself.dev/blog/build-rest-api-with-nodejs-harperdb/'\n---\n\n![cover_image](https://i.imgur.com/9hGD05n.png)\n\nIf you are building an application using Node.js, it can get a little overwhelming since there are a variety of databases to choose from and different ways to build APIs. One way to reduce development time and focus on the problem you are trying to solve is to use Database as a service to store the data. The advantage of this approach is to use a cloud database system without purchasing hardware which can be cost and time effective.\n\nOne such database service is [HarperDB Cloud](https://harperdb.io/developers/get-started/?utm_source=amanmittal). To build REST APIs rapidly this service allows us to perform all database operations using a single endpoint. It supports a variety of programming languages such as JavaScript, Java, Python, and so on. Some of the features of HarperDB are the following:\n\n- single endpoint API\n- allow JSON, CSVs file insertions\n- support SQL queries for full CRUD operations\n- Supports Math.js and GeoJSON\n- limited database configuration required\n\nIn this post, let's build a simple REST API using Node.js and HarperDB Cloud to store some data. We are also going to use [Express](https://expressjs.com/) as the framework to build the Node.js server. It is a minimal and quite unopinionated framework.\n\n## Prerequisites\n\nBefore you begin this tutorial, you’re going to need the following:\n\n- [Node.js](https://nodejs.org/) version above `12.x.x` installed on your local machine\n- Access to a package manager such as npm or yarn\n- Basic JavaScript and ES6 knowledge\n- Access to a REST API client such as [Postman](https://www.postman.com/) or [Insomnia](https://insomnia.rest/)\n- Access to a [HarperDB Cloud](https://harperdb.io/developers/get-started/?utm_source=amanmittal) instance (_free tier_)\n\nTo continue with the rest of the tutorial, please make sure you have an account with HarperDB Cloud and are logged in.\n\n## Getting started\n\nStart by creating the project directory on a local development environment. Give this directory a name and navigate into it. Then, initialize this project to manage npm dependencies by creating a `package.json` file.\n\n```bash\nmkdir harperdb-cloud-demo\n\n# navigate inside the project directory\ncd harperdb-cloud-demo\n\n# create a package.json file\nnpm init --yes\n```\n\nThe `--yes` flag uses the default settings when initializing a `package.json` from npm config you might have set up.\n\nAfter the initializing step, let us add an express package. From the terminal window, run the command:\n\n```bash\nyarn add express@4.17.1 body-parser@1.19.0\n```\n\nNext, create a new file called `index.js` at the root of the project with the following code to trigger a minimal server:\n\n```js\nconst express = require('express');\n\nconst app = express();\nconst PORT = 8000;\n\napp.get('/', (req, res) => res.json('Express Server'));\n\napp.listen(PORT, () => {\n  console.log(`⚡️[server]: Server is running at https://localhost:${PORT}`);\n});\n```\n\nIn the above code snippet, the `app` is an object provided by Express API for the developer to communicate with the application and bootstrap a server.\n\nGo back to the terminal and trigger the common `node index.js` to start the server. This `node` command is the simplest way to trigger a development server when building APIs with Node.js. Now, open up your favorite REST client to test APIs. For the demonstration purpose, I am going to use [Insomnia](https://insomnia.rest/).\n\nYou can test API endpoint by invoking a call to `http://localhost:8000` and it is going to return the result as shown below.\n\n![hdb1](https://i.imgur.com/WKqKyDW.png)\n\n## Watching file changes with nodemon\n\nAn essential development-related utility library that saves time when working on Node.js projects is [nodemon](https://www.npmjs.com/package/nodemon). It's a tool that helps the development of Node.js based applications by automatically restarting the Node application when file changes in the directory are detected.\n\nTo start using it in the current Express server, install it by using `yarn add -D nodemon` where `-D` flag is used to indicate that the dependency to install is a `devDependency`. After installing this dev dependency, open `package.json` file and add a start script as shown below.\n\n```json\n\"scripts\": {\n    \"start\": \"nodemon index.js\",\n},\n```\n\nNow, you can use either `npm run start` or `yarn run start` command to trigger the server. That's it to set up a basic Node.js server using the Express framework.\n\n## Setting up an instance of HarperDB Cloud\n\nIn the introductory section of this post, you get the idea of what HarperDB Cloud is and features it supports. In this section, let us create the first database instance to store the data for the REST API using this cloud database service.\n\nAssuming by now you have access main dashboard screen as shown below. To create a new instance, click on the plus button.\n\n![hdb2](https://i.imgur.com/2RXthtd.png)\n\nThen select the HarperDB Cloud instance option.\n\n![hdb3](https://i.imgur.com/TouMF9P.png)\n\nFill in the details regarding the instance. Make sure to create a strong password and give a better username under Instance Credentials (I am keeping them simple for brevity).\n\n![hdb4](https://i.imgur.com/598zmb4.png)\n\nIf you are on the free tier, leave everything in the screen below to default selections and click the button `Confirm Instance Details`.\n\n![hdb5](https://i.imgur.com/xqXQNSL.png)\n\nAfter entering the details, it is going to ask you to re-confirm all the instance details you have entered and if everything is okay, press the button `Add Instance`.\n\n![hdb6](https://i.imgur.com/UvhsKoq.png)\n\nMake sure to remember the username and the password you have entered here. They will be required to authenticate the Node.js server with the HarperDB Client. Once the instance of the cloud database is created, it is going to appear as shown below.\n\n![hdb7](https://i.imgur.com/Yzyj4Ct.png)\n\nYou can click on the instance card from the UI and will be welcomed by the first screen to add a schema.\n\n![hdb8](https://i.imgur.com/UCfOUQT.png)\n\nA schema in HarperDB is necessary. It is equivalent to a collection of tables. Without an existing schema, you cannot create a new table and without a table, you cannot add or update data from HarperDB instance. To proceed, the schema and the table has to be created. Let's do it with the UI interface.\n\nOn the left-hand side, under the header where it says `schemas`, write in the name of your first schema.\n\n![hdb9](https://i.imgur.com/ANIPBcC.png)\n\nOnce a schema is created, the option to add one or more tables appears. Let's create the first table called `books` as shown below. Besides the name of the table, HarperDB also asks to enter or assign the field for a `hash_attribute`. This attribute is equivalent to the unique identifier for each record that exists in the table `books`. Traditionally, most data tables have `id` as the unique identifier so it is passed as the value.\n\n![hdb10](https://i.imgur.com/ohBkB9H.png)\n\nThe schema as well as the table are now successfully created.\n\n![hdb11](https://i.imgur.com/5S1al13.png)\n\nLet's save all the credentials required for the Node.js server to connect to the database. Create a `.env` file at the root of the project with for keys as shown below.\n\n```bash\nINSTANCE_URL=https://cloud-1-buildapps.harperdbcloud.com\nINSTANCE_USERNAME=admin\nINSTANCE_PASSWORD=password\nINSTANCE_SCHEMA=dev\n```\n\nYou are going to add your own HarperDB instance values here. Do not use the same values for each key as shown above, since it won't work. This just to demonstrate that these values are not wrapped inside quotes.\n\n## Connecting HarperDB Cloud with a Nodejs server\n\nTo connect the HarperDB Cloud instance created in the previous section, let's install a dependency called [Harperive](https://github.com/chandan-24/Harperive#readme) that is going to let us interact with the database by performing CRUD (_Create, Read, Update, Delete_) operations. Go back to the terminal window and run the command:\n\n```bash\nyarn add harperive@1.0.1 dotenv@8.2.0\n```\n\nOnce the dependency is installed, create a new directory called config and inside it, create a new file called `dbconfig.js`.\n\nTo connect to the database instance, you require three things:\n\n- Database instance URL\n- Database instance username\n- Database instance password\n\nAt the end of the previous section, all these values are saved inside a `.env` file as environment variables. Using the `dotenv` package, these environment variables are now accessible throughout the Node.js server app. Inside the `dbconfig.js` file, import `dotenv` package as the first line and then import `harperive`. Create a `DB_CONFIG` object that is going to be passed as the argument to `harperive.client`. The `schema` field in the `DB_CONFIG` object is optional. Since this demo app has only one schema, thus, to avoid mentioning the schema field again and again when sending a query to the database, its name can be passed here.\n\nAdd the following code snippet to the `dbconfig.js` file.\n\n```js\nrequire('dotenv').config();\nconst harperive = require('harperive');\n\nconst DB_CONFIG = {\n  harperHost: process.env.INSTANCE_URL,\n  username: process.env.INSTANCE_USERNAME,\n  password: process.env.INSTANCE_PASSWORD,\n  schema: process.env.INSTANCE_SCHEMA // optional\n};\n\nconst Client = harperive.Client;\nconst db = new Client(DB_CONFIG);\n\nmodule.exports = db;\n```\n\nExporting the `db` instance of the actual HarperDB client is going to allow us to query the database.\n\n## Setting up body-parser\n\nTo set up routes or endpoints of the server application, you need to include `body-parser` in the `index.js`.\n\nBodyParser parses incoming HTTP requests as middleware under `req.body` before routes or API have access to them and perform any further actions on them. A very useful and essential step when using forms in a web application.\n\n```js\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\nconst PORT = 8000;\n\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\n\n// routes to be defined here\n\napp.listen(PORT, () => {\n  console.log(`⚡️[server]: Server is running at https://localhost:${PORT}`);\n});\n```\n\nThe `urlencoded` method in the above snippet allows the body-parser middleware to extract data from form fields. In the REST client such as Postman or Insomnia, it is possible to send the data as form fields. The `json` method allows the JSON data to be extracted.\n\n## Query to add a new record\n\nSince the database doesn't have any records, let's start by writing the first query to insert new data in the database. Create a new directory called `api/` and inside it create a new file called `index.js`. Open index.js file and import the `db` from `config/dbconfig.js` file.\n\n```js\nconst db = require('../config/dbconfig');\n```\n\nOne of the main advantages of HarperDB is in querying the data from a database instance. It allows us to query the data either in the form of SQL queries or NoSQL queries. The advantage here is that the power of complex SQL queries can easily be used here to perform an operation. I am going to define all the queries in NoSQL form, however, do not forget to check official docs for more information on performing SQL queries [here](https://docs.harperdb.io/?version=latest#0b5f3698-60fc-4783-b736-b510d6063996).\n\nThe first query is going to be called `addBook`. This query is going to insert the data incoming from an HTTP request.\n\n```js\nexports.addBook = (request, response) => {\n  db.insert(\n    {\n      table: 'books',\n      records: [\n        {\n          title: request.body.title,\n          author: request.body.author\n        }\n      ]\n    },\n    (err, res) => {\n      if (err) response.status(500).json(err);\n\n      response.status(res.statusCode).json(res.data);\n    }\n  );\n};\n```\n\nEach of the query functions as in the above code snippet is going to have at least two parameters: `request` and `response`.\n\n- `request`: useful when creating or updating a new task and read data from the body (this where BodyParser works like a charm).\n- `response`: useful to fulfill that incoming request with a response from the server. Generally, it contains the correct status code of the HTTP status code. This HTTP status code determines whether the incoming request was fulfilled or if there is an error. This the part of the REST paradigm and is considered a best practice.\n\nWhen inserting data using a NoSQL query, it is mandatory to specify the name of the table in the database. In the current case its `books`. Since you have already specified the Schema when creating a connection using the HarperDB client, there is no need to explicitly define it here. `records` in HarperDB are similar to rows of data with having each field as a column.\n\nYou may have noticed in the above query that I am not explicitly adding an `id` attribute to uniquely identify each data record. HarperDB automatically creates a unique `id` for each data record.\n\nThe data being inserted here has two fields. The `title` and the `author` for each book. They represent the name of the columns or attributes in each data record. The value of each of these fields is going to be the incoming value from an HTTP request, parsed by the `body-parser` middleware function.\n\n## Running the first query to insert data\n\nTo insert the first data record in the database lets create a route. Open `index.js` file in the root directory and import the `api` as `routesController`. A controller is a naming convention in an Express framework app. It is the business logic that binds the endpoints/routes that are going to define below to what action or operation they will perform on an incoming request on that particular route.\n\n```js\n// after other import statements\nconst routesController = require('./api/index');\n\n//after defining middleware functions\n\napp.route('/books').post(routesController.addBook);\n```\n\nGo back to the REST client and make sure the Node.js server is running from the terminal window.\n\nAdd the endpoint which is `http://localhost:8000/books`, select the type of the request which is `POST`. Select option `Form URL encoded` and the two key-value pairs as shown below:\n\n![hdb12](https://i.imgur.com/BceIJrT.png)\n\nPress the `Send` button it an HTTP request to insert the data to the HarperDB is made. If it's successful, a success message shown below is returned.\n\n![hdb13](https://i.imgur.com/BbTRyru.png)\n\nGo back to the HarperDB studio and you are going to see the same data record being shown.\n\n![hdb14](https://i.imgur.com/Rz6ZRPS.png)\n\nDo notice the two timestamp fields. They are auto inserted by the HarperDB and are auto-maintained.\n\n- `__createdtime__`: to record the timestamp when data is inserted.\n- `__updatedtime__`: to record the timestamp when any data field is updated for the last time.\n\nTry to add more values to the database.\n\n## Query to search by value\n\nHarperDB allows to search database records in a table by using a column field name which is also known as an `attribute`. Let's add another query to get a data record when an HTTP request is sent just by searching the name of the author. Open `api/index.js` file and the following:\n\n```js\nexports.getByAuthor = (request, response) => {\n  db.searchByValue(\n    {\n      table: 'books',\n      searchAttribute: 'author',\n      searchValue: request.body.author,\n      attributes: ['*']\n    },\n    (err, res) => {\n      if (err) response.status(500).json(err);\n\n      console.log(res);\n\n      response.status(res.statusCode).json(res.data);\n    }\n  );\n};\n```\n\nThe data returned from the database is going to be in JSON format. Go back to the main `index.js` file and add another route.\n\n```js\napp.route('/author').post(routesController.getByAuthor);\n```\n\nOpen the REST Client and make a request as shown below. The response of this HTTP request is going to be every data record that contains the value of the attribute `author`.\n\n![hdb15](https://i.imgur.com/vd1PtH7.png)\n\n## Query to search by hash\n\nAnother important way to search for data in a table is by the unique identifier. HarperDB has a special method to do the same. This method is called `searchByHash` and only allows us to search the database table using the identifier specified as has an attribute. In the `api/index.js` file, add another query called `getById`.\n\n```js\nexports.getById = (request, response) => {\n  db.searchByHash(\n    {\n      table: 'books',\n      hashValues: [request.body.id],\n      attributes: ['title']\n    },\n    (err, res) => {\n      if (err) response.status(500).json(err);\n\n      response.status(res.statusCode).json(res.data);\n    }\n  );\n};\n```\n\nWhen this query successfully runs, the result from the database is only going to show the `title` attribute of the data record. This is done by passing the name of an attribute as the value of the `attributes` property in the above snippet.\n\nAdd the endpoint in the main `index.js` file.\n\n```js\napp.route('/search').post(routesController.getById);\n```\n\nGo to the REST client and run the query.\n\n![hdb16](https://i.imgur.com/jOT7zuw.png)\n\n## Query to delete the data record\n\nTo delete a record from the table in HarperDB is simple. All you have to do is pass the `id` or the unique identifier for the record stored in the table. The unique identifier, as you know, is stored as a hash value.\n\nAdd the following query to the `api/index.js` file.\n\n```js\nexports.deleteBook = (request, response) => {\n  db.delete(\n    {\n      table: 'books',\n      hashValues: [request.body.id]\n    },\n    (err, res) => {\n      if (err) response.status(500).json(err);\n\n      response.status(res.statusCode).json(res);\n    }\n  );\n};\n```\n\nNext, go to the main `index.js` file and add the endpoint.\n\n```js\napp.route('/delete').post(routesController.deleteBook);\n```\n\nLastly, go back to the REST client, pass on the id of the data record to delete. On successful deletion, it gives a response back in the form of a `message` that is directly sent from the HarperDB instance. This is very helpful since this message response can be directly used with any REST client or sent to a frontend framework.\n\n![hdb17](https://i.imgur.com/qYEmPkv.png)\n\n## Conclusion\n\n_Congratulations!_ You have reached the end of the tutorial.\n\nI hope this post does convey you to try the capabilities of HarperDB. I personally like how it support both SQL and NoSQL queries as well as some advanced features like adding timestamps automatically and hashing unique ids in a consistent way across all data tables and schemas.\n\n**Resources & Further Reading:**\n\n- [Are hash attributes case sensitive in HarperDB?](https://harperdbhelp.zendesk.com/hc/en-us/articles/115003081994-Are-Hash-Attributes-Case-Sensitive-)\n- [HarperDB SQL Guide](https://harperdbhelp.zendesk.com/hc/en-us/articles/115002146754-HarperDB-SQL-Guide)\n- [Harperive](https://github.com/chandan-24/Harperive)\n- If you are looking to learn more about creating [REST APIs with Node.js and MySQL, checkout post the here](https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/).\n- [HarperDB documentation](https://harperdb.io/developers/documentation/overview/?utm_source=amanmittal)\n- [HarperDB Developer examples](https://harperdb.io/developers/developer-examples/?utm_source=amanmittal) includes tutorials on React, Websocket, Python, etc.\n",
            "url": "https://amanhimself.dev//blog/build-rest-api-with-nodejs-harperdb",
            "title": "Build a REST API with Node.js and HarperDB",
            "summary": "Build a REST API with Node.js and HarperDB",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/firebase-config-in-a-react-app",
            "content_html": "---\ntitle: 'How to setup a React App with a Firebase project'\nslug: 'firebase-config-in-a-react-app'\ndate: '2020-06-05'\nthumbnail: '/thumbnails/firebase.png'\ntag: 'firebase'\ncanonicalUrl: 'https://amanhimself.dev/blog/firebase-config-in-a-react-app/'\n---\n\n![cover](https://i.imgur.com/u3tfk7P.png)\n\nTo create or setup a new React app, I try to use `npx` from a terminal window. By executing the following command, it generates a new React app using the `create-react-app` utility.\n\n```shell\nnpx create-react-app reactapp\n\n# after the project has generated\n\ncd reactapp\n```\n\nThe name of the project `reactapp` mentioned in the command is the project name. To start this newly created React app, run the below command from the terminal window:\n\n```shell\nyarn start\n```\n\nIt will trigger the default React app that is generated by `create-react-app` command-line utility and open the app in a browser window at URL `http://localhost:3000`.\n\n![ss1](https://i.imgur.com/KMW1O19.png)\n\nNow, setup the project as per the need. The following directory basic setup is how I like to setup a new React app (_when using Firebase as the backend service_).\n\n![ss2](https://i.imgur.com/4EXRxj8.png)\n\nAdd an initial modification of `src/App.js` file to the file code snippet.\n\n```js\nimport React from 'react';\n\nfunction App() {\n  return (\n    <div>\n      <h1>React App</h1>\n    </div>\n  );\n}\n\nexport default App;\n```\n\nThis modification is going to lead to the following change in a web browser window.\n\n![ss3](https://i.imgur.com/fk5pNaU.png)\n\n## Create Firebase project-based components\n\nThe basic directory structure is all setup, now let's create the Firebase project-related component folders. Each component folder inside `src/components/` is going to have an `index.js` file that is going to contain the code snippet related to that particular component.\n\nFor example, in a Firebase + React app, the sign in, sign out and sign up component is going to be three different components to handle user authentication. Thus, all are going to have separate folders. To create a component folder you can use the command-line interface or the editor or the IDE file explorer.\n\n```shell\ncd components/\n\nmkdir SignIn SignOut SignUp\n```\n\n![ss4](https://i.imgur.com/Fh4Ha83.png)\n\nThe `./src/Pages` directory is optional. I like to separate presentation page components such as `Home` or `Landing` in a different folder but that depends on the project itself.\n\n![ss5](https://i.imgur.com/NOdfdO3.png)\n\nThe initial components directory is done. In the next section, let us get the API keys from the Firebase project.\n\n## Generate Firebase API keys\n\n<blockquote display=\"info\">\n  Before you generate API keys for Firebase configuration in a React app, please\n  make sure you have either set up a new Firebase app or have access to a\n  Firebase app using its console.\n</blockquote>\n\nIf you are new to Firebase apps, please refer to the post here that explains 👉 [how to create a new Firebase project?](https://amanhimself.dev/new-firebase-project/)\n\nOnce you have created or opened a Firebase project, from the dashboard screen, click on the _settings_ icon ⚙️ from the side menu.\n\n![ss12](https://i.imgur.com/zkv9SNA.png)\n\nThe _Settings_ page opens as shown below.\n\n![ss13](https://i.imgur.com/ZTgOnQk.png)\n\nTo create a new app, go to the section that says `Your apps` and click on the third icon or the Web icon. The first two icons shown are for creating keys for native platforms such as iOS and Android.\n\n![ss16](https://i.imgur.com/FGaubt7.png)\n\nNext, there is going to be a prompt about adding the name of the web app. Enter a name.\n\n![ss14](https://i.imgur.com/m2mhbm6.png)\n\nThen the API keys required by the web app are generated as shown below. The blacked-out part is the actual key values and I recommend not sharing with anyone.\n\n![ss15](https://i.imgur.com/NGYOauf.png)\n\nMake sure you save the `firebaseConfig` object. It is the object the contains all the API keys required to use various Firebase services such as authentication, database and so on.\n\nOnce you copied the `firebaseConfig` object, you press the button that says `Continue to console`. You are going to be taken back to the `Settings` page.\n\n## Environment variables in a React app\n\nCreate a new file inside the React project called `.env`. Make sure to add this file to `.gitignore` and do not commit it to the [GitHub](https://github.com) repo or any other public repository on a version control platform.\n\nThis file is going to save all the Firebase API keys as shown below. All the `xxxx`'s represent the keys generated in the Firebase console. Replace them with your own keys.\n\n```shell\nDEV_API_KEY=xxxx\n\nDEV_AUTH_DOMAIN=xxxx\n\nDEV_DATABASE_URL=xxxx\n\nDEV_PROJECT_ID=xxxx\n\nDEV_STORAGE_BUCKET=xxxx\n\nDEV_MESSAGING_SENDER_ID=xxxx\n\nDEV_APP_ID=xxxx\n\nDEV_MEASUREMENT_ID=xxxx\n```\n\n<blockquote display=\"info\">\n  You do not have to name each key with the prefix `DEV_`. You can either use\n  their default name such as `API_KEY` or follow your own convention. I like to\n  follow `DEV_` and `PROD_` prefixes to separate dev mode and production mode\n  Firebase projects.\n</blockquote>\n\n## Connect Firebase with a React app\n\nReact app needs Firebase SDK installed as an npm dependency. Open terminal window, execute the following command to install the dependency.\n\n```shell\nyarn add firebase\n```\n\nFor Firebase SDK to initialize with the React app and use the Firebase services further in the app, it needs to consume the API keys generated in the previous section as a configuration object. This object is a plain JavaScript object with key and value\npairs.\n\nCreate a new file `src/Firebase/firebase.js` import the `firebase` library and create a `firebaseConfig` object with appropriate keys and their values saved in `.env` file.\n\n```js\n// firebase.js\n\nimport * as firebase from 'firebase/app';\n\nconst firebaseConfig = {\n  apiKey: process.env.DEV_API_KEY,\n  authDomain: process.env.DEV_AUTH_DOMAIN,\n  databaseURL: process.env.DEV_DATABASE_URL,\n  projectId: process.env.DEV_PROJECT_ID,\n  storageBucket: process.env.DEV_STORAGE_BUCKET,\n  messagingSenderId: process.env.DEV_MESSAGING_SENDER_ID,\n  appId: process.env.DEV_APP_ID,\n  measurementId: process.env.DEV_MEASUREMENT_ID\n};\n```\n\nThe `firebase/app` import statement is always required when you add the Firebase SDK to a new Web app or React project. It should also be the import statement line in this file.\n\nThe current format of `firebaseConfig` object shows that all the Firebase services from its console are enabled.\n\n<blockquote display=\"default\">\n  Side-note: To use a different set of API keys or Firebase projects such as for\n  development and production, you can create two `config` objects here. For dev\n  mode, create `devConfig` and for production, create `prodConfig`.\n</blockquote>\n\n```js\nconst prodConfig = {\n  apiKey: process.env.PROD_API_KEY,\n  authDomain: process.env.PROD_AUTH_DOMAIN,\n  databaseURL: process.env.PROD_DATABASE_URL,\n  projectId: process.env.PROD_PROJECT_ID,\n  storageBucket: process.env.PROD_STORAGE_BUCKET,\n  messagingSenderId: process.env.PROD_MESSAGING_SENDER_ID,\n  appId: process.env.PROD_APP_ID,\n  measurementId: process.env.PROD_MEASUREMENT_ID\n};\n\nconst devConfig = {\n  apiKey: process.env.DEV_API_KEY,\n  authDomain: process.env.DEV_AUTH_DOMAIN,\n  databaseURL: process.env.DEV_DATABASE_URL,\n  projectId: process.env.DEV_PROJECT_ID,\n  storageBucket: process.env.DEV_STORAGE_BUCKET,\n  messagingSenderId: process.env.DEV_MESSAGING_SENDER_ID,\n  appId: process.env.DEV_APP_ID,\n  measurementId: process.env.DEV_MEASUREMENT_ID\n};\n```\n\nThen using JavaScript conditional operator, you can condition between the two.\n\n```js\nconst config = process.env.NODE_ENV === 'production' ? prodConfig : devConfig;\n```\n\nThis way, you will prevent the mixing of data and other information between development mode app and production or deployed app.\n\n## Initializing the Firebase SDK\n\nInitializing the Firebase SDK with the current React app is the first step. To do this, you have to use a method called `initializeApp()` and pass the `firebaseConfig` as the only argument to this method after defining the config object.\n\n```js\n// firebase.js\n\nfirebase.initializeApp(firebaseConfig);\n```\n\nLastly, to test that the Firebase SDK is working with the React app, let us export the `firebase` instance from `Firebase/firebase.js` file.\n\n```js\nexport default firebase;\n```\n\nOpen `App.js` file, import the `firebase` instance, and using `useEffect` hook let us try to see if it's initialized or not.\n\n```js\nimport React, { useEffect } from 'react';\n\n// TODO: REMOVE THIS IMPORT STATEMENT BELOW BEFORE PROCEEDING\n\nimport firebase from './Firebase/firebase';\n\nfunction App() {\n  // TODO: REMOVE THIS BEFORE PROCEEDING\n\n  useEffect(() => {\n    console.log(firebase);\n  }, []);\n\n  return (\n    <div>\n      <h1>React App</h1>\n    </div>\n  );\n}\n\nexport default App;\n```\n\nTo see the output of the console statement from the above code snippet, open Developer Tools -> Console tab in the web browser. On the initial render of `App` component or the React app, the `useEffect` hook is going to trigger.\n\n![ss17](https://i.imgur.com/Nl4Mov8.png)\n\nThe object returned from Firebase clearly states that there are no errors with the current Firebase config in a React app.\n\nIt is important to notice that Firebase should only be initialized once in the React app. This pattern is called [singleton](https://en.wikipedia.org/wiki/Singleton_pattern). This initialization should be the top level component in the React components tree.\n\n## Conclusion\n\nHere is a summary of what has been done in this tutorial so far.\n\n- Create a React app using `create-react-app`\n- Create an opinionated directory structure inside React app to manage different components\n- Generate Firebase API keys for configuration\n- Used environment variables inside a React app to manage keys\n- Install `firebase` SDK npm package\n- Connect Firebase SDK to React app\n- Initialize the Firebase SDK\n- Why initialize a Firebase instance only once per React app?\n\n👉 **Further reading:**\n\n- [What is `firebase.app()` and why it is read-only?](https://firebase.google.com/docs/reference/js/firebase.app.App)\n- `firebase` SDK [npm package](https://www.npmjs.com/package/firebase)\n- [How to create a new Firebase project?](https://amanhimself.dev/blog/new-firebase-project/)\n- [Singleton Pattern](https://en.wikipedia.org/wiki/Singleton_pattern)\n- [How to add custom environment variables with `create-react-app`](https://create-react-app.dev/docs/adding-custom-environment-variables)?\n",
            "url": "https://amanhimself.dev//blog/firebase-config-in-a-react-app",
            "title": "How to setup a React App with a Firebase project",
            "summary": "How to setup a React App with a Firebase project",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/styling-the-react-native-way",
            "content_html": "---\ntitle: 'Styling The React Native Way'\nslug: 'styling-the-react-native-way'\ndate: '2020-06-04'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://amanhimself.dev/blog/styling-the-react-native-way/'\n---\n\n> [Originally published at Level up coding on January 14, 2019.](https://levelup.gitconnected.com/styling-the-react-native-way-3cc6d3ef52d0)\n\nReact Native comes with many in-built components that you can use to style cross-platform applications. Styling a mobile application is essential. I cannot put enough emphasis on how important it is for a mobile app to have a pleasing design and good use of colors can be provide a better user experience. Without a polished user interface, a potential user will be repelled by the lack of design in the mobile app.\n\nReact Native uses plain JavaScript to style. In this tutorial, you are going to explore different ways to style a React Native app by getting some hands-on experience and learning tips along the way.\n\n## Introduction\n\nReact Native uses JavaScript to style, if you have some experience with the CSS of the web, you know that styling a component is nothing more than writing code by using proper styling syntax. If you do not have any idea what CSS is, stop right here as there would be no advantage for you reading this tutorial. You need to understand a bit of CSS to continue reading the tutorial below. If you understand what `backgroundColor: 'blue’` means, then you are good to go.\n\nReact Native comes in with many built-in components. Each having its own specific set of styles. These specific styles may or may not be applicable to other components.\n\nFor example, `Text` component supports `fontWeight` whereas a `View` component does not. However, some of the styles are similar but not exactly the same. `View` supports `shadowColor` while `Text` supports `textShadowColor`. Lastly, you have to make note that there are a few platform-specific styles such as `shadowPropTypesIOS`.\n\n## Different Ways to Style a React Native App\n\nThere are different ways you can add styles to your React Native component. First one is **inline styling**. See the example below.\n\n```js\n// inline example\nimport React from 'react';\nimport { View, Text } from 'react-native';\n\nexport default function App() {\n  return (\n    <View\n      style={{\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: 'blue'\n      }}\n    >\n      <Text style={{ color: 'white', fontSize: 32 }}>Some Text</Text>\n    </View>\n  );\n}\n```\n\nThe result of the above code of snippet is following.\n\n![ss1](https://i.imgur.com/GHvCHh4.png)\n\nIn the post [**Getting Started with React Native in 2019**](https://amanhimself.dev/getting-started-with-react-native-in-2019-build-your-first-app/), I've described about `StyleSheet` object. It is the second way.\n\nAvailable from React Native API, by importing and using `StyleSheet`, you create an object and refer to each style individually. This brings the separation of styles from the render method and helps you organize the code. Also, it promotes re-using styles across components.\n\n```js\n// StyleSheet Example\nimport React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.bigText}>Some Text</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'blue'\n  },\n  bigText: {\n    color: 'white',\n    fontSize: 32\n  }\n});\n```\n\nThis snippet of code will have the same effect on rendering on a mobile device. The only thing changed here is being separation of styles inside the component `App` with `StyleSheet` object. It takes a JavaScript object as it does above, and returns a new `Stylesheet` object from it. There are no classes or ids in React Native like in web development.\n\n**To create a new style object you use** `StyleSheet.create()` **method. Another advantage this way of styling React Native components** hold is that when creating a new style object every time, `StyleSheet` helps to create style objects with an ID which is further used to reference instead of rendering the whole component again.\n\nAnother difference comes with **inline** styling is that an inline style property name, if misspelled, does not work and there is no error thrown for the misspelling.\n\n![ss2](https://i.imgur.com/065jq9Y.png)\n\nHowever there is a valid style property check when styles are defined using `StyleSheet.create()`.\n\n![ss3](https://i.imgur.com/pM0LktI.png)\n\n![ss4](https://i.imgur.com/0iAFAvZ.png)\n\n## Encapsulation of Styles\n\nIn React Native, styles are scoped to the component rather than the whole application. You have seen one preferred way of defining styles used commonly by the React Native community.\n\nAnother way to define styles is to organize your application code in such a way that it becomes easier to keep track of them when refactoring, or when the application starts to expand. In this second way, you declare all the styles related to a component in a separate file. Then import that styles file inside the component file. Here is an example for you. Create a new file next to the `App.js` called `AppStyles.js`.\n\n```js\n// AppStyles.js\nimport { StyleSheet } from 'react-native';\n\nexport default StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'blue'\n  },\n  bigText: {\n    color: 'white',\n    fontSize: 32\n  }\n});\n```\n\nNext step is to import this file inside `App.js`.\n\n```js\n//App.js\nimport React from 'react';\nimport { View, Text } from 'react-native';\n\nimport styles from './AppStyles';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.bigText}>Some Text</Text>\n    </View>\n  );\n}\n```\n\nThe demo runs and produces the same result as before. This separation of styles in a file other than the component file has its own advantages. It increases the reusability of other style objects.\n\n## Using arrays to pass styles\n\nIn inline styling, you must have observed that it is nothing but an object that starts with a `style` prop and an object is passed with key-value pairs. Similarly, you can use an array that can contain multiple key-value pairs as the value of the `style` prop.\n\n```js\nimport React, { Component } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={[styles.bigText, styles.textYellow]}>Some Text</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'blue'\n  },\n  bigText: {\n    color: 'white',\n    fontSize: 32\n  },\n  textYellow: {\n    color: 'yellow'\n  }\n});\n```\n\nThe following is the result for the above snippet.\n\n![ss5](https://i.imgur.com/GHvCHh4.png)\n\nDo notice that, the last style passed in overrides the previous style when there is a duplicate `color` property.\n\n## Building an App: Dark/Light Themes\n\nIn this section, you are going to build a simple app called **light/dark mode** toggle. It contains a button with some text with a dark background of its own and a light colored background. When the user clicks the button, the background of the app changes to dark mode and the text on the button changes to light mode.\n\nFirst, let us define styles for it. Open `AppStyles.js` the external styling file.\n\n```js\nimport { StyleSheet } from 'react-native';\n\nconst Colors = {\n  light: 'white',\n  dark: 'black'\n};\n\nconst baseContainer = {\n  flex: 1,\n  justifyContent: 'center',\n  alignItems: 'center'\n};\n\nconst buttonBorderContainer = {\n  justifyContent: 'center',\n  alignItems: 'center',\n  borderWidth: 3,\n  height: 50,\n  width: 150\n};\n\nconst lightStyles = StyleSheet.create({\n  container: {\n    ...baseContainer,\n    backgroundColor: Colors.light\n  },\n  button: {\n    ...buttonBorderContainer,\n    backgroundColor: Colors.dark\n  }\n});\n\nconst darkStyles = StyleSheet.create({\n  container: {\n    ...baseContainer,\n    backgroundColor: Colors.dark\n  },\n  button: {\n    ...buttonBorderContainer,\n    backgroundColor: Colors.light\n  }\n});\n\nexport default function useTheme(darkTheme) {\n  return darkTheme ? darkStyles : lightStyles;\n}\n```\n\nA lot is going on here. First, the two different color variables are defined inside a single `Colors` object. Then, there are two different container objects, one for the background and one for the button.\n\nBoth of these container objects then re-used inside the StyleSheet objects, `lightStyles` and `darkStyles`. Similarly, to define the background color, we make re-use of the color object such that we do not have to write the value of each color twice.\n\nLastly, there is a function that gets exported that returns theme based upon a boolean value. Dark Theme’s value `darkStyles` is returned if its true otherwise light theme is returned.\n\nThe file `AppStyles.js` is a clear representation of structuring styles in a React Native app. This file is then imported inside the `App.js` that has the following content.\n\n```js\nimport React, { useState } from 'react';\nimport { View, Button } from 'react-native';\n\nimport useTheme from './AppStyles';\n\nexport default function App() {\n  const [darkTheme, setDarkTheme] = useState(false);\n  const styles = useTheme(darkTheme);\n\n  const toggleTheme = () => {\n    setDarkTheme(!darkTheme);\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.button}>\n        <Button title={'Click Me'} onPress={toggleTheme} />\n      </View>\n    </View>\n  );\n}\n```\n\nBy defining the state, you can declare the default value of the dark theme to be false such as it allows the light theme to be the default. `toggleTheme` is the method that reverses the boolean value for the dark theme accordingly. Next, inside the `render()` you are passing the current value of dark theme from the state. This function is then used to apply the correct theme or set of styles based on the boolean value.\n\nYou can see this in action below.\n\n![ss6](https://i.imgur.com/uEQLG9f.gif)\n\n- You can find the complete code for the example at [this Expo Snack](https://snack.expo.io/@amanhimself/38e20d).\n- A big thank you to [Catalin Miron](https://twitter.com/mironcatalin) for proof reading it 🤗\n\n**Resources & Further Reading:**\n\n- If you are looking for some insight on how to hire a React Native dev, Toptal.com has an [awesome guide here](https://www.toptal.com/react-native#hiring-guide).\n",
            "url": "https://amanhimself.dev//blog/styling-the-react-native-way",
            "title": "Styling The React Native Way",
            "summary": "Styling The React Native Way",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/create-custom-headers-with-react-native-svg",
            "content_html": "---\ntitle: 'How to create custom wavy headers with react-native-svg'\nslug: 'create-custom-headers-with-react-native-svg'\ndate: '2020-05-26'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://heartbeat.fritz.ai/creating-custom-wavy-headers-using-react-native-svg-639ce0861327'\n---\n\n> [Originally Published at Heartbeat.Fritz.ai](https://heartbeat.fritz.ai/creating-custom-wavy-headers-using-react-native-svg-639ce0861327)\n\nIn React Native apps, the support for SVG graphics is provided by an open-source module called [`react-native-svg`](https://github.com/react-native-community/react-native-svg) that is maintained by React Native community.\n\nUsing SVG can enhance an app’s design when it comes to displaying different patterns. It can make a difference in how the look and feel of the app might appear to the end-user, as well how it is easy to edit the pattern built using SVG. SVG is mainly found on the web, and while they have similar uses to JPEG, PNG, and WebP image types, SVG is not resolution-dependent. Hence, the definition according to [Wikipedia](https://en.wikipedia.org/wiki/Scalable_Vector_Graphics):\n\n<blockquote>\n  Scalable Vector Graphics (SVG) is an Extensible Markup Language (XML)-based\n  vector image format for two-dimensional graphics with support for\n  interactivity and animation.\n</blockquote>\n\nThis format consists of shapes rather than pixels which can further be concluded that an SVG graphic can be scaled indefinitely in terms of resolution.\n\nIn this post, let us learn how to use `react-native-svg` in React Native and Expo apps and create some custom examples such as wavy header shown below.\n\n<img src='https://miro.medium.com/max/598/1*aivsFUf_OF6mYBSfOCGrTQ.gif' />\n\n## Requirements\n\nEnsure your dev environment includes the following required packages:\n\n- [Node.js](https://nodejs.org/) above `12.x.x` installed on your local machine\n- JavaScript/ES6 basics\n- [`expo-cli`](https://expo.io/tools)\n\n## Installing react-native-svg library\n\nStart by creating a new project using expo-cli. Navigate inside the project directory when the CLI has finished generating the new project. Then install all the required dependencies to integrate the `react-native-svg` library.\n\n```shell\nexpo init [PROJECT NAME]\n\ncd [PROJECT NAME]\n\nexpo install react-native-svg\n```\n\nThe reason to use `expo install` command when building a React Native app using Expo SDK instead of package managers like `npm` or `yarn` is that it is going to install the most compatible version of the package available to be used with Expo SDK. This avoids unnecessary errors.\n\nThat's it for installing this library. The `react-native-svg` library contains common shapes and elements such as `Svg`, `Rect`, `Circle`, `Line`, `Polygon`, `Path`, and so on as components to be used. You are going to see `Svg` and `Path` in action, in this post.\n\n## Create a header component\n\nIn the next few sections, let us try to create a custom header background that has a bottom border with the form of a wave as shown below.\n\n<img src='https://miro.medium.com/max/700/1*mf6AmpW-7j4nS1nixMDiVQ.png' />\n\nStart by creating a new screen component inside `src/screens/ScreenOne.js` file that displays a heading on the screen. (_Create the directory if it doesn't exist._)\n\nAdd the following code snippet to this file.\n\n```js\nimport React from 'react';\nimport { StyleSheet, View, Text, Dimensions } from 'react-native';\n\nexport default function ScreenOne() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.headerContainer}>\n        <Text style={styles.headerText}>Custom Header</Text>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  },\n  headerContainer: {\n    marginTop: 50,\n    marginHorizontal: 10\n  },\n  headerText: {\n    fontSize: 30,\n    fontWeight: 'bold',\n    color: '#333',\n    textAlign: 'center',\n    marginTop: 35\n  }\n});\n```\n\nNext, go to `App.js` file and modify it to render the `ScreenOne` functional component as below.\n\n```js\nimport React from 'react';\nimport ScreenOne from './src/screens/ScreenOne';\nimport { StatusBar } from 'react-native';\n\nexport default function App() {\n  return (\n    <>\n      <StatusBar hidden={true} />\n      <ScreenOne />\n    </>\n  );\n}\n```\n\nLastly, to see this simple header text on a device's screen, from the terminal window, execute the command `expo start`. You should results similar to the screenshot below:\n\n<img src='https://miro.medium.com/max/700/1*kwennRzVGQSDL0fASGCC5g.png' />\n\n## Create a custom header component with waves\n\nThe motive of this section is to add a custom header using the svg component in the background in the `ScreenOne.js` file.\n\nThe SVG component that we intend to create is going to wrap the path drawing primitive. This primitive is the outline of a shape that can be filled or stroked. It primitive is represented by the `Path` component from `react-native-svg` library and makes use of different commands such as `elliptical Arc`, `moveto`, `lineto`and so on. You can read more about [Paths here](https://www.w3.org/TR/SVG/paths.html).\n\nTo generate the SVG background as you have seen in the previous section, I am going to make use of [getwaves.io](https://getwaves.io/). This web tool allows you to generate custom wave patterns in SVG format. Check out their website, it is simple and fulfils the purpose. You can create different patterns using this tool.\n\n<img src='https://miro.medium.com/max/984/1*NzoVM40QM6VUNSGyCQLZ7g.gif' />\n\nMake sure to copy the values of properties such as `viewbox` and `d` as shown above.\n\nNext, create a file called `WavyHeader.js` inside `src/components/` directory. Import the following statements.\n\n```js\nimport React from 'react';\nimport { View } from 'react-native';\nimport Svg, { Path } from 'react-native-svg';\n```\n\nCreate a functional component called `WavyHeader` that is going to have a prop passed from the parent (_the screen component_) it is going to be used. Let us call this prop `customStyles`. The main reason to pass this prop here is to define the dimensions of the screen component in its own file and keep the style value dynamic for different screens.\n\nHere is the complete code snippet for this custom component. Notice the properties of the `Path` component are the same as copied from getwaves.io.\n\n```jsx\nexport default function WavyHeader({ customStyles }) {\n  return (\n    <View style={customStyles}>\n      <View style={{ backgroundColor: '#5000ca', height: 160 }}>\n        <Svg\n          height=\"60%\"\n          width=\"100%\"\n          viewBox=\"0 0 1440 320\"\n          style={{ position: 'absolute', top: 130 }}\n        >\n          <Path\n            fill=\"#5000ca\"\n            d=\"M0,96L48,112C96,128,192,160,288,186.7C384\n            ,213,480,235,576,213.3C672,192,768,128,864,\n            128C960,128,1056,192,1152,208C1248,224,1344,192,\n            1392,176L1440,160L1440,0L1392,0C1344,0,1248,0,\n            1152,0C1056,0,960,0,864,0C768,0,672,0,576,0C480,0,\n            384,0,288,0C192,0,96,0,48,0L0,0Z\"\n          />\n        </Svg>\n      </View>\n    </View>\n  );\n}\n```\n\nNow, go back to the `ScreenOne.js` file and import this custom component after the rest of the import statements.\n\n```js\n// rest of the import statements\nimport WavyHeader from '../components/WavyHeader';\n```\n\nAdd this component before the `<View>` that represents `headerContainer`.\n\n```js\nexport default function ScreenOne() {\n  return (\n    <View style={styles.container}>\n      <WavyHeader customStyles={styles.svgCurve} />\n      <View style={styles.headerContainer}>\n        <Text style={styles.headerText}>Custom Header</Text>\n      </View>\n    </View>\n  );\n}\n```\n\nLastly, define the style reference `svgCurve` in the `StyleSheet` object as shown in the snippet below.\n\n```js\nconst styles = StyleSheet.create({\n  // rest of the styles\n  svgCurve: {\n    position: 'absolute',\n    width: Dimensions.get('window').width\n  },\n  headerText: {\n    fontSize: 30,\n    fontWeight: 'bold',\n    // change the color property for better output\n    color: '#fff',\n    textAlign: 'center',\n    marginTop: 35\n  }\n});\n```\n\nFrom the snippet, you can notice that using the `Dimensions` API from `react-native` we are going to get the width of the current window. The `position` property is set to `absolute` such that the header component that contains the heading is displayed and does not hide behind this wavy background.\n\nThe final result is going to be as the following.\n\n<img src='https://miro.medium.com/max/700/1*mf6AmpW-7j4nS1nixMDiVQ.png' />\n\n## Make WavyHeader component reusable\n\nSo far, you have completed the task of displaying the wavy header background on a screen component. But what if the scenario changes and you have two screens both require wavy header backgrounds but with some customization such as each having a different height as well as different wave pattern?\n\nIn this section, let us customize the `WavyHeader` component to accept more props in order to make it a reusable component.\n\nFirst, let us customize the `WavyHeader.js` file to accept more props.\n\n```js\nexport default function WavyHeader({\n  customStyles,\n  customHeight,\n  customTop,\n  customBgColor,\n  customWavePattern\n}) {\n  return (\n    <View style={customStyles}>\n      <View style={{ backgroundColor: customBgColor, height: customHeight }}>\n        <Svg\n          height=\"60%\"\n          width=\"100%\"\n          viewBox=\"0 0 1440 320\"\n          style={{ position: 'absolute', top: customTop }}\n        >\n          <Path fill={customBgColor} d={customWavePattern} />\n        </Svg>\n      </View>\n    </View>\n  );\n}\n```\n\nNow the `<Path />` component is going to accept values (such as `backgroundColor`, `height`) in the form of props passed to the `WavyHeader` component.\n\nNext, go to the `ScreenOne.js` file and pass in the values for the props for the `WavyHeader` component.\n\n```jsx\nexport default function ScreenOne() {\n  return (\n    <View style={styles.container}>\n      <WavyHeader\n        customStyles={styles.svgCurve}\n        customHeight={160}\n        customTop={130}\n        customBgColor=\"#5000ca\"\n        customWavePattern=\"M0,96L48,112C96,128,192,160,288,\n        186.7C384,213,480,235,576,213.3C672,192,768,128,864,\n        128C960,128,1056,192,1152,208C1248,224,1344,192,1392,\n        176L1440,160L1440,0L1392,0C1344,0,1248,0,1152,0C1056,\n        0,960,0,864,0C768,0,672,0,576,0C480,0,384,0,288,0C192,\n        0,96,0,48,0L0,0Z\"\n      />\n      <View style={styles.headerContainer}>\n        <Text style={styles.headerText}>Custom Header</Text>\n      </View>\n    </View>\n  );\n}\n```\n\nYou won’t see a difference in the result on the device’s screen unless you change the values of these props.\n\n<img src='https://miro.medium.com/max/700/1*mf6AmpW-7j4nS1nixMDiVQ.png' />\n\n## Conclusion\n\nYou can try adding more custom screens to have different wave patterns and try to use the `WavyHeader` component as reusable for different screens. Here is an example below that displays two different screens with different wave patterns as well as background color and height.\n\n<img src='https://miro.medium.com/max/700/1*ZmqxTfYO5jfv24ktveRzxg.png' />\n\n<img src='https://miro.medium.com/max/598/1*aivsFUf_OF6mYBSfOCGrTQ.gif' />\n\n- [Source code](https://github.com/amandeepmittal/wavySVGExample).\n- Or try using an Expo client [here](https://expo.io/@amanhimself/rnwavysvg).\n- Or check out [Leandro Favre’s](https://twitter.com/FavreLeandro) [Whicecream](https://github.com/AtilaDev/whicecream) example based on this tutorial!\n\nHere is the list of resources used in order to create this post:\n\n- [react-native-svg](https://github.com/react-native-community/react-native-svg)\n- [getwaves.io](https://getwaves.io/)\n- [What are Paths?](https://www.w3.org/TR/SVG/paths.html)\n",
            "url": "https://amanhimself.dev//blog/create-custom-headers-with-react-native-svg",
            "title": "How to create custom wavy headers with react-native-svg",
            "summary": "How to create custom wavy headers with react-native-svg",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/material-ui-integration-with-react",
            "content_html": "---\ntitle: 'How to integrate Material UI library in React apps'\ndate: '2020-05-24'\nslug: 'material-ui-integration-with-react'\nthumbnail: '/thumbnails/react.png'\ntag: 'react'\ncanonicalUrl: 'https://amanhimself.dev/blog/material-ui-integration-with-react/'\n---\n\nMaterial design was introduced by Google around 2014 as a design language and it still shares some popularity among web and mobile applications. One of the common ways to integrate and use this design system in React apps is through [MaterialUI](https://material-ui.com/getting-started/installation/) library.\n\n![ss1](https://i.imgur.com/l4PZ8tB.png)\n\nIn this post, let us take a look at how to integrate a material library that is available as an npm module and consists of built React components that you can use to build apps. You are going to learn from scratch on how to install and configure this library as well as build a small demo app.\n\n![ss8](https://i.imgur.com/QxtWlBz.png)\n\n## Prerequisites\n\nBefore you begin this tutorial you are going to need the following:\n\n- a Web browser such as Chrome, Firefox and so on\n- Node.js version above `12.x.x` installed on your local machine\n- JavaScript/ES6 basics\n- React basics\n- npm/yarn install\n- either `create-react-app` globally installed or access via `npx`\n\n## Create a new React app\n\nTo start, you are going to need to setup a React project. Let's use `npx` to do so. Execute the following command in a terminal window.\n\n```shell\nnpx create-react-app reactmaterial\n```\n\nBy using the `npx` command (a part of the Node Package Manager (npm)) you execute `create-react-app` without the need to download and install the package globally.\n\nWhen the new project is done scaffolding with the default dependencies such as React library and React DOM library installed.\n\nChange in the new directory and you are going to be welcomed by the following structure of files and folders.\n\n![ss2](https://i.imgur.com/W9D0ToF.png)\n\nTo verify that the React app is working, (_you can totally skip the step at this time_), run `yarn start` from the terminal window and open the default React app running at `http://localhost:3000` in a browser window.\n\n![ss3](https://i.imgur.com/OkkceuE.png)\n\n## Install Material UI library\n\nThe next step is to install the Material-UI library and integrate it to work with the current React app. The first is to install the core dependency of this library.\n\n```shell\nyarn add @material-ui/core\n```\n\nMaterial-UI was designed with the Roboto font in mind. If you wish to use it, you can follow the instructions. Go back to the terminal window and install the typeface package of the font. Also note that, the following steps to install this font are optional.\n\n```shell\nyarn add typeface-roboto\n```\n\nThen go to the entry point of your React app (preferably, `./src/index.js` file) and import the font.\n\n```js\n// rest of the import statements\nimport 'typeface-roboto';\n```\n\nAlternatively, if you do not wish to install the above npm module for the font, you can also use the CDN version of the font and read about it [here](https://material-ui.com/components/typography/#roboto-font-cdn).\n\n## Using AppBar to create a custom navigation bar\n\nIn this section let us build a navigation bar. Create a new file called `./src/components/Navbar.js` and start by importing the components `AppBar`, `ToolBar`, and `Typography` from the MaterialUI library.\n\nThe `AppBar` component is used to display branding, screen titles, and navigation of the web app. That is what you are going to use it for. The `ToolBar` component is wrapper where you can place your components horizontally. The `Typography` component applies the Material UI theme that is available by default.\n\n```js\nimport React from 'react';\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\n```\n\nNext, export a function component called `Navbar` with the following JSX.\n\n```js\nexport default function Navbar() {\n  return (\n    <AppBar>\n      <Toolbar>\n        <Typography variant=\"h6\">React and Material-UI App</Typography>\n      </Toolbar>\n    </AppBar>\n  );\n}\n```\n\nIn the code snippet above, notice the `variant` prop on the `Typography` component. It uses the variant mapping to properly associate a UI element with an HTML semantic element (_such as h6 in the code snippet_).\n\nNow, to see it in action, import the `Navbar` component in the `App.js` file.\n\n```js\nimport React from 'react';\nimport Navbar from './components/Navbar';\n\nfunction App() {\n  return (\n    <div>\n      <Navbar />\n    </div>\n  );\n}\n\nexport default App;\n```\n\nYou are going to get the following result after this step.\n\n![ss4](https://i.imgur.com/HhDhiP3.png)\n\n## Implementing a Paper component\n\nTwo components that are going to be used in this section in order to layout a view for the items of the list are called `Grid` and `Paper`.\n\nMaterial Design’s responsive UI is based on a 12-column grid layout. The `Grid` component helps you implement this layout system and then provide the values or the number of grids you want to display. A basic grid might look like below:\n\n![ss5](https://i.imgur.com/UqiYt1i.png)\n\nMaterial UI uses CSS's Flexbox to manage layout alignments and sizing of the grid columns.\n\nThe other component `Paper` actually displays the physical properties of a paper on the screen. It resembles a flat, texture of a sheet of paper, and using a prop called `elevation` you can manipulate its default display behavior. Do note that, this component does need an initial width and height.\n\nCreate a new component file called `./src/components/List.js` which is going to be used as a reusable component later. This presentational component is going to display a `Paper` component inside `Grid` with custom styles.\n\n```js\nimport React from 'react';\nimport { Grid, Paper, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: 100,\n    flexGrow: 1\n  },\n  paper: {\n    height: 220,\n    width: 340,\n    backgroundColor: '#ebebeb'\n  },\n  avatarImage: {\n    width: 200,\n    height: 200,\n    borderRadius: 100\n  }\n}));\n\nexport default function List() {\n  const classes = useStyles();\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item className={classes.root} xs={12}>\n        <Grid container justify=\"center\" spacing={2}>\n          <Grid key={1} item>\n            <Paper className={classes.paper} elevation={2} />\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n```\n\nThe `makeStyles` comes from the Material UI API. It links a style sheet with a function component and returns a hook that you use inside the component.\n\nYou can modify the `App.js` file to include the `List` component.\n\n```js\n// rest of the import statements\nimport List from './components/List';\n\nfunction App() {\n  return (\n    <div>\n      <Navbar />\n      <List />\n    </div>\n  );\n}\n```\n\nHere is the result you are going to get after this step.\n\n![ss6](https://i.imgur.com/8PL5Xrs.png)\n\n## Fetching random user data\n\nTo display data inside `List` component, let us use [https://randomuser.me/](https://randomuser.me/) API. In the `App` component the data is going to be fetched on the initial render using `useEffect` hook. The `useState` hook is used to store the fetched data by defining a state variable whose initial value is an empty array.\n\nTo start, first, import the hooks from the `react` library.\n\n```js\nimport React, { useState, useEffect } from 'react';\n```\n\nAfter that create a state variable called `data` inside the `App` component. Along with the `data` variable, define two other state variables, `isLoading` to track the whether app is in loading mode (that is, the data is being fetched from the API) and `error` to track if there is an error while fetching the data. The loading state of the React app is going to be `true` by default.\n\n```js\nfunction App() {\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  //rest of the code\n}\n```\n\nThe `useEffect` hook is going to have a callback that is going to fetch the data using JavaScript's `fetch` API.\n\n```js\nuseEffect(() => {\n  fetch('https://randomuser.me/api/?results=5')\n    .then(res => res.json())\n    .then(\n      result => {\n        setIsLoading(false);\n        setData(result.results);\n      },\n      error => {\n        setIsLoading(false);\n        setError(error);\n      }\n    );\n}, []);\n```\n\nYou can conditionally render the JSX based on the state variables.\n\n```js\nif (isLoading) {\n  return <div>Loading ...</div>;\n} else if (error) {\n  return <div>There is an error fetching data.</div>;\n} else {\n  return (\n    <div>\n      <Navbar />\n      <List />\n    </div>\n  );\n}\n```\n\nNow, when you refresh the React app, you are going to see the JSX being rendered that is related to the loading state of the app, for split seconds.\n\n![ss7](https://i.imgur.com/hBWfaYc.gif)\n\n## Display a list of users\n\nYou can now pass the user information you want to display in the form of the prop at the `List` component. Use JavaScript's `map` function to traverse the array `data`.\n\n```js\n{\n  data.map(item => (\n    <List\n      key={item.id.value}\n      userAvatar={item.picture.large}\n      firstName={item.name.first}\n      lastName={item.name.last}\n    />\n  ));\n}\n```\n\nThese props are then passed as arguments to the `List` component.\n\n```js\nxport default function List({ userAvatar, firstName, lastName }) {\n  const classes = useStyles();\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item className={classes.root} xs={12}>\n        <Grid container justify=\"center\" spacing={2}>\n          <Grid key={1} item>\n            <Paper className={classes.paper} elevation={2}>\n              <Grid container justify=\"center\">\n                <Avatar\n                  alt=\"User\"\n                  className={classes.avatarImage}\n                  src={userAvatar}\n                />\n                <Typography variant=\"p\">\n                  Name: {firstName} {lastName}\n                </Typography>\n              </Grid>\n            </Paper>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n```\n\nThe above code snippet uses few more core components from Material UI (such as `Avatar`). You can find their reference in the official documentation of this library.\n\nHere is the final result you are going to get when you back to the browser screen.\n\n![ss8](https://i.imgur.com/QxtWlBz.png)\n\n## Conclusion\n\nI hope in this post, you get the idea of how you can leverage the core components of [Material UI library](https://material-ui.com/getting-started/installation/) in your React apps and save a ton of development time.\n\nReferences:\n\n- [Materia UI official docs](https://material-ui.com/getting-started/installation/)\n- [AJAX calls in React](https://reactjs.org/docs/faq-ajax.html)\n- [Random User API](https://randomuser.me/documentation#howto) to mock data in your React apps\n- To learn more about React Hooks, check out my post on that [here](https://dev.to/amanhimself/build-a-expense-tracker-app-with-react-hooks-and-localstorage-api-4lfj)\n",
            "url": "https://amanhimself.dev//blog/material-ui-integration-with-react",
            "title": "How to integrate Material UI library in React apps",
            "summary": "How to integrate Material UI library in React apps",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/chat-app-with-react-native-part-6",
            "content_html": "---\ntitle: 'Chat app with React Native (Part 6) - Create a custom hook to change status bar styles'\ndate: '2020-05-18'\nslug: 'chat-app-with-react-native-part-6'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://heartbeat.fritz.ai/chat-app-with-react-native-part-6-create-a-custom-hook-to-change-status-bar-styles-da7073c5fa8d'\n---\n\n![cover](https://i.imgur.com/ROYjoYo.jpg)\n\nIn [part 5](https://amanhimself.dev/blog/chat-app-with-react-native-part-5), we successfully connected real-time database service Firestore to store chat messages in a collection where each collection would represent a separate chat room. Further, we built sub-collections in each chat room collection to store and identify latest messages from all other messages in a chat room.\n\nThis part is going to be a bit different. Instead of writing code to communicate with any real-time service, we are going to fix a bug by creating a custom hook.\n\nHere is a screen shot of the type of bug I am talking about it. Notice how the status bar remains dark in color on both lighter and darker backgrounds.\n\n<img src='https://miro.medium.com/max/714/1*JwA7n-QlUjayTGgb2m1tfw.gif' />\n\nDo notice that the status bar looks fine when the background is light in colour. This happens when the modal screen to create a new chat room is displayed. But on rest of the screens, when chat rooms are displayed or inside a chat room, the status bar does not matches well with the coloured background of header on both of these screens.\n\nReact Native has a core component in its API called `StatusBar` that is used to control the app status bar behavior and its styles. However, manually adding `StatusBar` to each screen is not our goal in this tutorial.\n\nThe navigation library `react-navigation` is going to help us to solve this. We are going to create a custom hook that is going to track the status bar color and change it accordingly whenever a screen changes. That is, on the lighter background, a dark status bar is displayed and on a darker background of the screen, a light status bar is displayed.\n\nTo begin you need `react-navigation` library to be installed. Since we have already done that in [part 1](https://heartbeat.fritz.ai/chat-app-with-react-native-part-1-build-reusable-ui-form-elements-using-react-native-paper-75d82e2ca94f) of this chat app series. If you just came across this tutorial, please have a look at part 1 and instructions mentioned on how to install and configure `react-navigation` library.\n\nOtherwise, you can follow the instructions from `react-navigation` library official docs [here](https://reactnavigation.org/).\n\n## Create a custom Status bar hook\n\nThe `react-navigation` library provides a hook called `useFocusEffect` that helps to run side-effects when a specific screen is focused. A side effect can be described as fetching data, updating a title, running an event listener and so on. This hooks is similar to `useEffect` hook from React with the difference being between the two is that side-effects in `useFocusEffect` run only when a screen component is focused.\n\nLet us begin to develop this custom hook. Create a new file called `useStatusBar.js` inside `src/utils/` directory. Import the following statements.\n\n```js\nimport React, { useCallback } from 'react';\nimport { StatusBar } from 'react-native';\nimport { useFocusEffect } from '@react-navigation/native';\n```\n\nExport a custom function called `useStatusBar`. This function is going to be act as a custom hook that is going to provide a simple way to change the color of the status bar when applied. Pass the `style` as the only parameter for now. The value of the style is going to be determined on the screen component this hook is used.\n\n```js\nexport default function useStatusBar(style) {\n  useFocusEffect(\n    useCallback(() => {\n      StatusBar.setBarStyle(style);\n    }, [])\n  );\n}\n```\n\nIt is important to wrap the `StatusBar` with `React.useCallback` hook to avoid triggering the side-effect after every render when the screen is focused.\n\n## Application of the custom hook\n\nTo apply this hook for the first time, open `screen/HomeScreen.js` file, import the custom hook and apply it as shown below.\n\n```js\n// rest of the import statements\nimport useStatsBar from '../utils/useStatusBar';\n\nexport default function HomeScreen({ navigation }) {\n  useStatsBar('light-content');\n  // rest of the code remains same\n}\n```\n\nGo back to the simulator and you are going to notice the changes now.\n\n<img src='https://miro.medium.com/max/692/1*jaEgKwnoaiLeMCs2bkmsIg.png' />\n\nIt works. If you look closely at the header bar of the `Home` screen, you are going to see that the status bar has the value of light styles applied. However, this style is also applied to all of the other screens, even on those screens such as `AddRoomScreen` where a darker status bar would be preferred.\n\n<img src='https://miro.medium.com/max/714/1*JSa1Ndh9tYt4BzdBUJG4mA.gif' />\n\nTo fix this, you have to explicitly mention the styles of the status bar for each component using the custom hook we created in the previous section.\n\n```js\n/**\n * screens/AddRoomScreen.js\n */\n\n// rest of the import statements\nimport useStatsBar from '../utils/useStatusBar';\n\nexport default function AddRoomScreen({ navigation }) {\n  useStatsBar('dark-content');\n  // rest of the code remains same\n}\n\n/**\n * screens/RoomScreen.js\n */\n\n// rest of the import statements\nimport useStatsBar from '../utils/useStatusBar';\n\nexport default function RoomScreen({ route }) {\n  useStatsBar('light-content');\n  // rest of the code remains same\n}\n```\n\nNow, go back to the simulator and you are going to find everything is in order and works as expected.\n\n<img src='https://miro.medium.com/max/714/1*laUY_xJJwoI079wS0NKI3Q.gif' />\n\n## Animate the value for smoother transitions\n\nFor better transitions between different screens in a stack navigator, you can pass the second parameter to the `useStatusBar`. This second parameter is going to be called `animated`. Passing a default value of boolean true is going to help and avoid any explicit mentions. Otherwise you can explicitly pass the value of the parameter as well.\n\n```js\nexport default function useStatusBar(style, animated = true) {\n  useFocusEffect(\n    useCallback(() => {\n      StatusBar.setBarStyle(style, animated);\n    }, [])\n  );\n}\n```\n\nThe animation used by the hook itself is going to the default transition of native platform the app is currently being run since the hook `useFocusEffect` is imported from `@react-navigation/native`.\n\nNow you can go back to the simulator (_the below demo is using iOS simulator_) and notice the difference between the previous section and this one.\n\n<img src='https://miro.medium.com/max/714/1*_X5Ye5IJpkOYbUsED8ELYg.gif' />\n\n## A last challenge\n\nThe purpose of this series is to make yourself familiar with integration process of Firebase in a React Native app and implementing a navigation flow with `react-navigation` library and how to use components from `react-native-paper` UI library. This purpose is now complete with this part.\n\nThough I leave you with a small challenge. Implement the logout button in the header bar of the Home screen. Just like you have used the `IconButton` component from `react-native-paper` to open a modal screen. Hint, changes are to be done in the `HomeStack.js` file and we have already written the `logout` function in `AuthProvider.js` file.\n\nHere is a little demo showcasing what has to be implement:\n\n<img src='https://miro.medium.com/max/664/1*5XHPu7A9R9s9d_lYKcd1sw.gif' />\n\nTry to do it yourself and try to think other ways you can implement log out functionality in this app. If you feel stuck or want to jump ahead to the the GitHub commit [**here**](https://github.com/amandeepmittal/react-native-examples/commit/b1383ccc9fca20214b6c91bfe5a2a5d72a1f8d16).\n\nOtherwise, you can find the complete code at this [GitHub repo](https://github.com/amandeepmittal/react-native-examples/tree/master/ChatApp).\n\n---\n\n👉 Here is a list of resources used in this tutorial:\n\n- [The complete documentation useFocusEffect hook](https://reactnavigation.org/docs/use-focus-effect/)\n- [Do understand the difference between using `focus` event and useFocusEffect](https://reactnavigation.org/docs/use-focus-effect/#how-is-usefocuseffect-different-from-adding-a-listener-for-focus-event)\n\n[Originally Published at Heartbeat.Fritz.ai](https://heartbeat.fritz.ai/chat-app-with-react-native-part-6-create-a-custom-hook-to-change-status-bar-styles-da7073c5fa8d)\n",
            "url": "https://amanhimself.dev//blog/chat-app-with-react-native-part-6",
            "title": "Chat app with React Native (Part 6) - Create a custom hook to change status bar styles",
            "summary": "Chat app with React Native (Part 6) - Create a custom hook to change status bar styles",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/quarantine-pro-app",
            "content_html": "---\ntitle: 'Creating \"Quarantine Pro\" — A Fun Learning Experiment in React Native'\nslug: 'quarantine-pro-app'\ndate: '2020-05-14'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://blog.jscrambler.com/creating-quarantine-pro-a-fun-learning-experiment-in-react-native/'\n---\n\nCovid-19 changed our way of life since the start of 2020 - a year some of us want to fast forward like a button on that TV remote. That said, self-isolating is the best thing you can do right now, and thus, isolating ourselves at Jscrambler, we came up with a fun, simple React Native app idea.\n\nThe app is all about how long you have been quarantining. As a user, you input the date when you started isolating and the app is going to display a fun message to tell you how far you have come in the quarantine “game”.\n\nThat said, apart from being fun, this tutorial is going to show you how to use the Expo's SDK version `37.x.x.` of [Expo](https://expo.io) to build a demo app. You will learn:\n\n- How to use [Expo font hook](https://github.com/byCedric/use-expo/blob/master/packages/font/docs/use-fonts.md);\n- How to use a [date time picker modal](https://github.com/mmazzarolo/react-native-modal-datetime-picker) to select a date;\n- Use [Moment.js](https://momentjs.com/) to convert the data input provided by the user and calculate the difference between the current date.\n\nHere is a sneak peek of what we intend to build in this tutorial:\n\n![js16](https://i.imgur.com/R9zCaz7.png)\n\nYou can find the complete code for this tutorial at this [GitHub repo](https://github.com/amandeepmittal/CheckQuarantineLevel).\n\n## Create a New Expo App\n\nStart by creating a new Expo app at your favorite side-projects location in your local development environment. Run the following command from a new terminal window to generate a new React Native app using `expo-cli`.\n\n```shell\nnpx expo-cli init DaVinciOfIsolation\n```\n\nWhen asked to select a template, choose the template `blank` from `Managed workflow`.\n\n![js1](https://i.imgur.com/MXEazbt.png)\n\nAfter that, press enter and let expo-cli install the dependencies required to start this project.\n\nOnce the project has initialized generating, go to the project directory from the terminal window and start the Expo bundler service.\n\n```shell\nexpo start\n```\n\nThis will start the Expo app in a simulator or device of your choice where the Expo client is installed. For more information on how to install an Expo client, please visit the [official documentation](https://docs.expo.io/get-started/installation/#running-the-expo-client-on-your-computer).\n\nOnce the app is running in the Expo client, you are going to be welcomed by the following default screen:\n\n![js2](https://i.imgur.com/DqKf72F.png)\n\nLet us install the npm dependencies we are going to need to build this project by executing the following command:\n\n```shell\nexpo install expo-font @use-expo/font @react-native-community/datetimepicker\n```\n\nThe `expo install` adds dependencies using a specific version that is compatible with the Expo SDK.\n\nAlso, install the following npm packages either using `npm install` or using `yarn`:\n\n```shell\nyarn add react-native-modal-datetime-picker moment\n```\n\nWith that, we have installed the required set of npm dependencies. Let us move further and start building the app.\n\n## How To Use Custom Fonts In An Expo App\n\n### Install a New Font\n\nIn this app, we are going to use a specific custom font that is free to download from Google Fonts - `Press Start 2P`. It is available to download [here](https://fonts.google.com/specimen/Press+Start+2P?sidebar.open&selection.family=Press+Start+2P).\n\n![js3](https://i.imgur.com/Ftrt9os.png)\n\nTo use this font or any other custom font, create a new directory called `fonts` inside the `assets/` folder. Then place the font file(s) you have just downloaded. The path to the fonts directory `./assets/fonts` is a convention that Expo developers recommend using when placing custom fonts in your app.\n\nAfter placing the file inside the newly created directory, the file structure will look like below.\n\n![js4](https://i.imgur.com/uZLhovM.png)\n\nWhen you are downloading a font to use in an Expo React Native app, make sure you download either a font in either `.otf` or `.ttf` format. Those are the two formats that work across all Expo platforms such as web, iOS, and Android.\n\n### Use The useFonts Hook\n\nTo use any [hook](https://blog.jscrambler.com/introducing-react-hooks/) in a React or React Native app, you have to use functional components. To set up a new font, start by importing the following statements.\n\n```js\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { useFonts } from '@use-expo/font';\nimport { AppLoading } from 'expo';\n```\n\nThe `useFonts` hook takes one argument as a JavaScript object and returns a single item list containing a value telling you whether the font is loaded or not. This eliminates the need for a lot of boilerplate code to make this check.\n\nAfter you have imported the statements, create a new object called `customFont`. It will have a key - the name of the font itself - and the value of this key - the path to the font file in `assets/fonts/` directory.\n\n```js\nconst customFont = {\n  'Press-Start2p': require('./assets/fonts/PressStart2P-Regular.ttf')\n};\n```\n\nNext, inside the function component, define the `isLoaded` variable from the `useFonts` hook and pass the `customFont` object as its argument.\n\nAlso, when the font is in the loading state or has not loaded yet, it is a good practice to make use of the `AppLoading` component from Expo and render nothing on the screen. Once the font has loaded, the screen will display the content of the functional component.\n\nHere is the complete code of the `App` component. Right now, we are displaying the title of the app using the new font we have just installed.\n\n```js\nexport default function App() {\n  const [isLoaded] = useFonts(customFont);\n\n  if (!isLoaded) {\n    return <AppLoading />;\n  }\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        alignItems: 'center',\n        backgroundColor: '#ffbd12'\n      }}\n    >\n      <Text\n        style={{\n          fontFamily: 'Press-Start2p',\n          fontSize: 24,\n          marginTop: 80,\n          paddingHorizontal: 20\n        }}\n      >\n        {`Are You a Quarantine Pro?`}\n      </Text>\n    </View>\n  );\n}\n```\n\nFrom the above snippet, make sure you describe the `fontFamily` property on the `Text` component. This is the only way the font is going to be used for a specific text component.\n\nGo back to the Expo client and you are going to see the following result.\n\n![js5](https://i.imgur.com/TdsTeq1.png)\n\nThat's it! You have completed the first step of loading fonts and using them in a React Native app. Thanks to [Cedric van Putten](https://twitter.com/cedricvanputten) who has made the process of loading and mapping fonts easier for us. For more information check out Cedric's collection of hooks that you can use in an Expo app [here](https://github.com/byCedric/use-expo).\n\n## Create a Button To Use The Datetime Picker Modal\n\nSince we have already installed the required npm dependencies to show a date picker modal (that uses the native date picker module), let us add a button to the current `App.js` file in order to display this modal.\n\nStart by modifying the import statements as stated below and add the new ones.\n\n```js\nimport React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  Dimensions,\n  TouchableWithoutFeedback\n} from 'react-native';\nimport {\n  Fontisto,\n  MaterialCommunityIcons,\n  FontAwesome\n} from '@expo/vector-icons';\nimport DateTimePickerModal from 'react-native-modal-datetime-picker';\n```\n\nTo set the width and the height of the button, we are going to use the `Dimensions` API from the `react-native` core. The width and height of the button are going to be calculated based on the width of the current window.\n\nDefine a variable `W` that is going to represent the width of the window before the `App` functional component.\n\n```js\nconst W = Dimensions.get('window').width;\n```\n\nNext, after the app's title text, define another container `View` component for the button. We are going to wrap the contents of the `TouchableWithoutFeedback` button inside a separate `View` component since this touchable component from React Native is only allowed to have a child component. However, we are going to have two child components: the icon of the button and the text. Modify the return statement of the `App` component as per the code snippet below.\n\n```js\nreturn (\n  <View style={styles.container}>\n    <Text style={styles.title}>{`Are You a Quarantine Pro?`}</Text>\n    <TouchableWithoutFeedback>\n      <View style={styles.pickerContainer}>\n        <Fontisto style={styles.icon} name=\"calendar\" size={48} />\n        <Text style={styles.pickerText}>{`Tap here to\\nselect a date`}</Text>\n      </View>\n    </TouchableWithoutFeedback>\n  </View>\n);\n```\n\nAdd the following styles for the above code snippet. Let's make use of the `StyleSheet` object to manage styles in the current component file.\n\n```js\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    backgroundColor: '#ffbd12'\n  },\n  title: {\n    fontFamily: 'Press-Start2p',\n    fontSize: 24,\n    marginTop: 80,\n    paddingHorizontal: 20,\n    lineHeight: 30\n  },\n  pickerContainer: {\n    marginTop: 20,\n    backgroundColor: '#00c6ae',\n    width: W / 1.2,\n    height: W / 4,\n    borderRadius: 10,\n    borderWidth: 1,\n    borderColor: '#000',\n    borderBottomWidth: 5,\n    borderBottomColor: '#000',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'row'\n  },\n  pickerText: {\n    fontFamily: 'Press-Start2p',\n    fontSize: 14,\n    paddingHorizontal: 10,\n    lineHeight: 20\n  },\n  icon: {\n    color: '#000'\n  }\n});\n```\n\nRefresh the Expo client to get the following result.\n\n![js6](https://i.imgur.com/68IjJHf.png)\n\nNow, let us bind the date picker modal to this button. We already imported the npm package `react-native-modal-datetime-picker` we need for this step. Why are we using this library over the default [`@react-community/react-native-datetimepicker`](https://github.com/react-native-community/datetimepicker) because this special library exposes a cross-platform interface for showing the native date-picker and time-picker inside a modal.\n\nFor our app, we are also going to evaluate the number of days the user has already spent in quarantine based on the date they choose as the input. Let us define a few state variables using the `useState` hook from React for the following reasons:\n\n- `pickedDate` to store the date picked by the user;\n- `isDatePickerVisible` to show or hide the date picker modal.\n\nWe have to define three helper functions along with these state variables. The first two will handle the visibility of the date picker modal. The third one will handle the confirm button from the date picker modal - as to what action to take when the user has to choose a date. The action we have to take here is to hide the date picker modal as well as store the value of the date in the state variable `pickedDate`.\n\n```js\nexport default function App() {\n  // ... rest of the component remains same\n\n  const [pickedDate, setPickedDate] = useState(null);\n  const [isDatePickerVisible, setDatePickerVisibility] = useState(false);\n\n  function showDatePicker() {\n    setDatePickerVisibility(true);\n  }\n\n  function hideDatePicker() {\n    setDatePickerVisibility(false);\n  }\n\n  function handleConfirm(date) {\n    console.log('A date has been picked: ', date);\n    hideDatePicker();\n    setPickedDate(date);\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>{`Are You a Quarantine Pro?`}</Text>\n      <TouchableWithoutFeedback onPress={showDatePicker}>\n        <View style={styles.pickerContainer}>\n          <Fontisto style={styles.icon} name=\"calendar\" size={48} />\n          <Text style={styles.pickerText}>{`Tap here to\\nselect a date`}</Text>\n        </View>\n      </TouchableWithoutFeedback>\n      <DateTimePickerModal\n        isVisible={isDatePickerVisible}\n        mode=\"date\"\n        onConfirm={handleConfirm}\n        onCancel={hideDatePicker}\n        headerTextIOS=\"When did you start isolating?\"\n      />\n    </View>\n}\n```\n\nThe `showDatePicker` method is going to be triggered every time a user taps the button to display the picker modal. The component will only render on the device's screen when this method triggers.\n\n![js7](https://i.imgur.com/GP0TyL8.gif)\n\nWhen the user taps anywhere outside the modal or taps on the `Cancel` button, the modal is hidden again and nothing happens.\n\n![js8](https://i.imgur.com/4CmuZlb.gif)\n\n![js9](https://i.imgur.com/ZKeWQIi.gif)\n\nHowever, when a date is selected and the user taps `Confirm`, further actions can be taken. For now, let us show the date picked by the user in a console statement.\n\nThe output is shown in the Expo server that is running in the terminal window.\n\n![js11](https://i.imgur.com/QyAAfoM.png)\n\nThis means that the user input is now stored in the state variable `pickedDate`.\n\nAlso, you can apply other props available in [`@react-community/react-native-datetimepicker`](https://github.com/react-native-community/datetimepicker). In the date picker modal we are implementing, there is small customization using the prop `headerTextIOS`. This prop allows changing the title of the picker modal for iOS devices.\n\n## Evaluate The “Quarantine Score”\n\nThe second missing piece of the puzzle in our current app is to have a button to calculate the day(s) difference between the user's input and the current date (we will use this as our “quarantine score”).\n\nWe are going to follow the same strategy design-wise as in the previous section. Display a button that users can tap to see their score.\n\nStart by importing the `moment` library in the `App.js` file after the rest of the import statements. It is going to handle the calculation between the user's input and the current date.\n\n```js\n// rest of the import statements\nimport moment from 'moment';\n```\n\nThis library is also going to help us format the input from the date picker modal and display only the date (and not time) from the user's input in the format `YYYY-MM-DD`.\n\nModify the return statement by adding a new `View` container that consists of a text message and the button to calculate the difference between the days.\n\nAlso, before modifying the `return` statement of the functional component, add a helper method called `daysRemaining()` that is going to calculate the difference. We are going to store this difference in a state variable called `days`. This state variable is going to be used in the next section to display the correct result on the screen.\n\nThe difference is going to be calculated between the `pickedDate` (which is the user's input) and the `todaysDate` (which is the current date).\n\n```js\nexport default function App() {\nconst [days, setDays] = useState('');\n\nfunction daysRemaining() {\n  // user's input\n    let eventdate = moment(pickedDate);\n    // getting current date\n    let todaysdate = moment();\n    let remainingDays = todaysdate.diff(eventdate, 'days');\n    setDays(remainingDays);\n    return remainingDays;\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>{`Are You a Quarantine Pro?`}</Text>\n      <TouchableWithoutFeedback onPress={showDatePicker}>\n        <View style={styles.pickerContainer}>\n          <Fontisto style={styles.icon} name=\"calendar\" size={48} />\n          <Text style={styles.pickerText}>{`Tap here to\\nselect a date`}</Text>\n        </View>\n      </TouchableWithoutFeedback>\n      <DateTimePickerModal\n        isVisible={isDatePickerVisible}\n        mode=\"date\"\n        onConfirm={handleConfirm}\n        onCancel={hideDatePicker}\n        headerTextIOS=\"When did you start isolating?\"\n      />\n      {/* ADD BELOW */}\n      <View style={styles.showDateContainer}>\n        <Text style={styles.showDateText}>\n          You started isolating on{' '}\n          {pickedDate && (\n            <Text style={styles.showDateText}>\n              {moment(pickedDate).format('YYYY-MM-DD')}.\n            </Text>\n          )}\n        </Text>\n        <TouchableWithoutFeedback onPress={daysRemaining}>\n          <View style={styles.evaluateButtonContainer}>\n            <Text style={styles.evaluateButtonText}>Check your level</Text>\n          </View>\n        </TouchableWithoutFeedback>\n      </View>\n    </View>\n}\n```\n\nThe picked date is displayed in the desired format using `moment().format()` functions. The `pickedDate` will only show once the user has provided input by selecting the date from the date picker modal.\n\nHere are the corresponding styles for the above snippet.\n\n```js\nconst styles = StyleSheet.create({\n  // rest of the styles remain same\n  showDateContainer: {\n    marginTop: 20,\n    backgroundColor: '#F95A2C',\n    width: W / 1.2,\n    height: W / 2,\n    borderRadius: 10,\n    borderWidth: 1,\n    borderColor: '#000',\n\n    alignItems: 'center'\n  },\n  showDateText: {\n    fontFamily: 'Press-Start2p',\n    fontSize: 14,\n    padding: 10,\n    marginTop: 20,\n    lineHeight: 20\n  },\n  evaluateButtonContainer: {\n    marginTop: 20,\n    backgroundColor: '#1947E5',\n    width: W / 1.4,\n    height: W / 6,\n    borderRadius: 10,\n    borderWidth: 1,\n    borderColor: '#000',\n    borderBottomWidth: 5,\n    borderBottomColor: '#000',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'row'\n  },\n  evaluateButtonText: {\n    color: '#fff',\n    fontFamily: 'Press-Start2p',\n    fontSize: 14,\n    paddingHorizontal: 10,\n    lineHeight: 20\n  },\n}\n```\n\nHere is the initial result you are going to get in the Expo client.\n\n![js13](https://i.imgur.com/ePDFXIz.png)\n\nSelect the date from the picker modal. After the date has been picked, it will be shown as below.\n\n![js14](https://i.imgur.com/SXIJ4nR.gif)\n\n## Rendering The “Quarantine Level”\n\nThe last piece of this current app is to display the result when the user presses the button that says `Check your level`.\n\n![js15](https://i.imgur.com/49oXGbD.png)\n\nModify the return statement of the `App` component. When the result is available, we are going to show the user's quarantine level - but, when it’s not available, this UI box will display a default message. Just after the previous section's snippet, add another `View` container component.\n\nWhen the evaluation is done, `renderAchievements()` is going to return only the icon and the text message that is based on the score (difference between the current date and the user's input date). Since we are using a state variable called `days` to store this difference, it becomes easy to conditionally render the message.\n\n```js\nexport default function App() {\n// rest of the code remains the same\n\nfunction renderAchievements() {\n    if (days > 1 && days < 5) {\n      return (\n        <>\n          <MaterialCommunityIcons\n            name=\"guy-fawkes-mask\"\n            color=\"#000\"\n            size={54}\n          />\n          <Text style={styles.resultText}>\n            Quarantine Noob. Don't forget to wear a mask. Keep self-isolating.\n          </Text>\n        </>\n      );\n    } else if (days >= 5 && days <= 7) {\n      return (\n        <>\n          <MaterialCommunityIcons name=\"glass-wine\" color=\"#000\" size={54} />\n          <Text style={styles.resultText}>Quarantine Connoisseur. Welcome to the (literal) dark side!</Text>\n        </>\n      );\n    } else if (days >= 8 && days <= 15) {\n      return (\n        <>\n          <MaterialCommunityIcons\n            name=\"seat-legroom-reduced\"\n            color=\"#000\"\n            size={54}\n          />\n          <Text style={styles.resultText}>Quarantine Proficient. AKA “What is pants?”</Text>\n        </>\n      );\n    } else if (days >= 16 && days <= 22) {\n      return (\n        <>\n          <MaterialCommunityIcons\n            name=\"star-circle-outline\"\n            color=\"#000\"\n            size={54}\n          />\n          <Text style={styles.resultText}>Quarantine Veteran. #StayHome became your life motto.</Text>\n        </>\n      );\n    } else if (days >= 23) {\n      return (\n        <>\n          <FontAwesome name=\"paint-brush\" color=\"#000\" size={54} />\n          <Text style={styles.resultText}>THE ULTIMATE QUARANTINE PRO! You are part of the solution - thank you!</Text>\n        </>\n      );\n    } else\n      return (\n        <Text style={styles.resultText}>Your level will be shown here.</Text>\n      );\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>{`Are You a Quarantine Pro?`}</Text>\n      <TouchableWithoutFeedback onPress={showDatePicker}>\n        <View style={styles.pickerContainer}>\n          <Fontisto style={styles.icon} name=\"calendar\" size={48} />\n          <Text style={styles.pickerText}>{`Tap here to\\nselect a date`}</Text>\n        </View>\n      </TouchableWithoutFeedback>\n      <DateTimePickerModal\n        isVisible={isDatePickerVisible}\n        mode=\"date\"\n        onConfirm={handleConfirm}\n        onCancel={hideDatePicker}\n        headerTextIOS=\"When did you start isolating?\"\n      />\n      <View style={styles.showDateContainer}>\n        <Text style={styles.showDateText}>\n          You started isolating on{' '}\n          {pickedDate && (\n            <Text style={styles.showDateText}>\n              {moment(pickedDate).format('YYYY-MM-DD')}.\n            </Text>\n          )}\n        </Text>\n        <TouchableWithoutFeedback onPress={daysRemaining}>\n          <View style={styles.evaluateButtonContainer}>\n            <Text style={styles.evaluateButtonText}>Check your level</Text>\n          </View>\n        </TouchableWithoutFeedback>\n      </View>\n\n      {/* ADD BELOW */}\n\n      <View style={styles.resultContainer}>{renderAchievements()}</View>\n    </View>\n}\n```\n\nHere are styles for the `renderAchievements()`.\n\n```js\nconst styles = StyleSheet.create({\n  // rest of the styles remain same\n  resultContainer: {\n    marginTop: 20,\n    backgroundColor: '#FF89BB',\n    width: W / 1.2,\n    height: W / 2,\n    borderRadius: 10,\n    borderWidth: 1,\n    borderColor: '#000',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  resultText: {\n    color: '#fff',\n    fontFamily: 'Press-Start2p',\n    fontSize: 16,\n    padding: 15,\n    lineHeight: 20\n  }\n});\n```\n\nNow, go back to the Expo client and you will be welcomed by the following screen:\n\n![js16](https://i.imgur.com/R9zCaz7.png)\n\nTry to run the app and select different dates to see different results as shown below.\n\n![js17](https://i.imgur.com/3vcjgbH.gif)\n\n## Conclusion\n\nWe hope you had fun building this app and learning as well. The main objectives of this tutorial are complete now and summarized for better understanding as below.\n\n- How to use [Expo font hook](https://github.com/byCedric/use-expo/blob/master/packages/font/docs/use-fonts.md)\n- How to use the [datetime picker modal](https://github.com/mmazzarolo/react-native-modal-datetime-picker) to select a date\n- Use [Moment.js](https://momentjs.com/) to convert the date input provided by the user and calculate the difference between the current date (“quarantine score”).\n\nCheck out [@react-native-community/datetimepicker](https://github.com/react-native-community/datetimepicker) for more information on how to customize the date picker modal or try to use a time picker. The Moment.js library is full of functions to help you manage date and time in JavaScript apps (another tutorial [here](https://blog.jscrambler.com/a-momentjs-in-time/)).\n\nThe app is available at Expo [here](https://expo.io/@amanhimself/quarantinepro), you just need to scan the QR code with the Expo client ([iOS](https://apps.apple.com/app/apple-store/id982107779) | [Android](https://play.google.com/store/apps/details?id=host.exp.exponent&referrer=www)) app on your device.\n\nOriginally published at [Jscrambler's blog](https://blog.jscrambler.com/creating-quarantine-pro-a-fun-learning-experiment-in-react-native/).\n",
            "url": "https://amanhimself.dev//blog/quarantine-pro-app",
            "title": "Creating \"Quarantine Pro\" — A Fun Learning Experiment in React Native",
            "summary": "Creating \"Quarantine Pro\" — A Fun Learning Experiment in React Native",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/chat-app-with-react-native-part-5",
            "content_html": "---\ntitle: 'Chat app with React Native (Part 5) - Create and Fetch Real-Time Messages with Firestore'\ndate: '2020-05-11'\nslug: 'chat-app-with-react-native-part-5'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://heartbeat.fritz.ai/chat-app-with-react-native-part-5-create-and-fetch-real-time-messages-with-firestore-86fb012edaf5'\n---\n\n![cover](https://i.imgur.com/ROYjoYo.jpg)\n\nIn [part 4](https://amanhimself.dev/blog/chat-app-with-react-native-part-4), we built the foundation of creating a chat app by adding UI screens that are focused on sending, receiving and displaying chat messages. We used `react-native-gifted-chat` an amazing open source library and dived deep to use its \"out of the box\" props to add features to the chat app.\n\nIn part 5, we are going to connect every chat functionality that we built so far with a real-time database service from Firebase, called Firestore. You are going to learn\n\n- store chat messages of each thread/chat room in Firestore collection\n- how to create sub collections inside a Firestore collection\n- add a feature to display most recent message for each chat room on home screen\n- fetch data from a Firestore collection\n\nAnd few other things along the way. Let's get started.\n\n## How to get current user information in the app?\n\nRemember, in [part 2](https://amanhimself.dev/blog/chat-app-with-react-native-part-2), when configuring Email authentication between the chat app and the Firebase service, you set the following `AuthProvider` that gives access to the current user as well other methods that are already being used in components `LoginScreen` and `SignupScreen`. Here is the ode for `src/navigation/AuthProvider.js` for your reference.\n\n```js\nimport React, { createContext, useState } from 'react';\nimport auth from '@react-native-firebase/auth';\n\n/**\n * This provider is created\n * to access user in whole app\n */\n\nexport const AuthContext = createContext({});\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        setUser,\n        login: async (email, password) => {\n          try {\n            await auth().signInWithEmailAndPassword(email, password);\n          } catch (e) {\n            console.log(e);\n          }\n        },\n        register: async (email, password) => {\n          try {\n            await auth().createUserWithEmailAndPassword(email, password);\n          } catch (e) {\n            console.log(e);\n          }\n        },\n        logout: async () => {\n          try {\n            await auth().signOut();\n          } catch (e) {\n            console.error(e);\n          }\n        }\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n```\n\nTo fetch the logged in user information (aka the current user), start by importing `AuthContext` in the file `RoomScreen.js`.\n\n```js\n// ... rest of the import statements\nimport React, { useContext, useEffect } from 'react';\nimport { AuthContext } from '../navigation/AuthProvider';\n```\n\nNext, to verify that the you are getting the current user information, inside the `RoomScreen` component, add the following two lines.\n\n```js\nexport default function RoomScreen({ route }) {\n  const { user } = useContext(AuthContext);\n  const currentUser = user.toJSON();\n\n  // ...\n}\n```\n\nYou have to convert the user data being fetched in JSON object. To check that the user data is incoming, let us temporarily add a `useEffect` hook after the previous code snippet, as shown below.\n\n```js\nuseEffect(() => {\n  console.log({ user });\n}, []);\n```\n\n## How to use Chrome Dev tools with a React Native app?\n\nThere are two ways to check the output of console statements in a React Native app. First, a console statement triggers, in the terminal window, the will be a `LOG` entry like below with desired result.\n\n<img src='https://miro.medium.com/max/1400/1*vgS3rCFKAkxb6WHHbESkvA.png' />\n\nHowever, for better complete control over [debugging](https://reactnative.dev/docs/debugging), you can use Chrome dev tools. This can be done by opening the in-app developer menu, either by shaking the device or if you are using an iOS simulator press `command + d`. On Android, you have to press `command + m` on mac (for windows, press `control + m`).\n\nA developer menu like below will popup.\n\n<img src='https://miro.medium.com/max/700/1*eQVIYyJTWubyIp20NSTpiQ.png' />\n\nSelect the option `Debug`. In your default Chrome browser, it is going to open like below.\n\n<img src='https://miro.medium.com/max/1066/1*t-56v6dq-N4T955hoj28cw.png' />\n\nGo to **Console** tab. Enter a chat room from the app. If you do not have to created a chat room yet, create one. On the Console tab, you are going to get the following result.\n\n<img src='https://miro.medium.com/max/1400/1*rl94NSCpjYETiy0HAKYk4A.png' />\n\nThat's it. Now, from the above image, you can definitely verify that a user is logged in and their email credentials can be verified.\n\n## How to store messages in Firestore?\n\nIn this section, you are going to add the business logic as well as the ability to store the chat conversation between multiple users in a chat room. These messages are going to be stored in a sub collection.\n\nThe main reason to create a sub collection is that when a new chat room is created, storing every data associated to that chat room in its own collection is a good idea. That said, when a new chat room is created, inside the collection `THREADS` a new document with a unique identifier is generated.\n\nInside that, you are going to add another collection called `MESSAGES` that is only going to store chat conversation that happens in that chat room. This will get clear as you proceed in this section.\n\nStart by importing the some necessary React Hooks as shown below. Also, import `firestore` to make queries to create new sub-collection, and fetch data.\n\n```js\nimport React, { useState, useContext, useEffect } from 'react';\nimport firestore from '@react-native-firebase/firestore';\n```\n\nTo get the `id` of the current chat room (_this is important_) you have to pass the `route` as a parameter to the `RoomScreen` functional component. Since, from the previous screen, a `thread` object is passed which gives the chat room id (_or thread id_) store in the Firebase collection `THREADS`. Using `route.params` you can get the whole `thread` object. This is possible because of `react-navigation`.\n\n```js\nexport default function RoomScreen({ route }) {\n  // ... rest of the code\n  const { thread } = route.params;\n}\n```\n\nNext, modify the asynchronous helper method `handleSend`. This method is used to send a message as you might have already seen in part 4.\n\nInside this helper method, get the text of each message send by the user. Then, create the sub collection `MESSAGES` by referencing the correct id of the current thread the user is conversing in. Using `add()` you can add anew document with an auto-generated unique id for each message inside the sub collection.\n\nPass on an object with fields like `text` that represents the text of each message, the timestamp it is being send or created at, and the user information (such as user's `uid`, and `email`).\n\n```js\nasync function handleSend(messages) {\n  const text = messages[0].text;\n\n  firestore()\n    .collection('THREADS')\n    .doc(thread._id)\n    .collection('MESSAGES')\n    .add({\n      text,\n      createdAt: new Date().getTime(),\n      user: {\n        _id: currentUser.uid,\n        email: currentUser.email\n      }\n    });\n}\n```\n\nGo back to the simulator, create a new room, and send a message.\n\n<img src='https://miro.medium.com/max/684/1*Bw1kO21guUat419nn5Gd-A.gif' />\n\nIn Firebase console, you are going to notice that the inside the `THREADS` collection, a sub-collection called `MESSAGES` is created as shown below.\n\n<img src='https://miro.medium.com/max/1400/1*88BW7XRZjeFhSrUqvaxA0A.png' />\n\nIgnore the `latestMessage` field, we will cover that in the next section. The image below displays that the messages are being stored with correct information.\n\n<img src='https://miro.medium.com/max/1400/1*t-vcelQcGA_HI9cvutPZ_g.png' />\n\n## Display the latest message for each chat room on home screen\n\nIn this section, you are going to update the `THREADS` collection with a new field called `latestMessage` that you have already seen in the previous section, in Firebase console.\n\nThe advantage this field is going to give us (which we will complete later) is to show the last or the latest message send in a particular chat room, to be displayed on the home screen where a room's description field already exists. This will save the user time to glance at the last message without opening the room to see if there are any new messages or not.\n\nTo begin, all you have to do is refer the current thread using its id, then `set` an object that has field `latestMessage` with `text` and `createdAt` timestamp properties. Then pass on the second object that has a property of `merge`.\n\n```js\nasync function handleSend(messages) {\n  // ...\n\n  await firestore()\n    .collection('THREADS')\n    .doc(thread._id)\n    .set(\n      {\n        latestMessage: {\n          text,\n          createdAt: new Date().getTime()\n        }\n      },\n      { merge: true }\n    );\n}\n```\n\nIn Firestore, when `set` is used with `merge`, it update fields in a document or create that document if it does not exists. If you use `set` here without `merge`, it will overwrite the whole document.\n\n## How to fetch messages from Firestore to display in chat room?\n\nTo display messages in a chat room once they send by a user, these messages have to be fetched from the Firestore sub-collection created previous sections, `MESSAGES`.\n\nTo fetch the data, let us use `useEffect` hook. [The effect hook](https://reactjs.org/docs/hooks-effect.html) lets you add side-effects to functional components. In the previous versions of React and React Native, this could be done by using lifecycle methods such as `componentDidMount()` and other different methods in class components. The `useEffect` hook can perform multiple side-effects such as data fetching and more in different ways.\n\nTo fetch the messages, first you have to traverse inside the current thread using its id, then the sub-collection `MESSAGES`. When traversing the sub-collection, make sure to order the messages to display them in descending order according to the time they were sent.\n\nThen using a `querySnapshot` you can `map` the messages array from the sub collection. A Query Snapshot in Firestore contains zero objects or more objects inside an array representing the results of a query.\n\nCreate a data object that is going to contain the `id` of the document being fetched, the text of the message and its timestamp, and any other data associated with the message or in the document. The last step is required to identify that if the message is send by the user or is system generated.\n\nIn part 4 you have seen how a system generated message looks like. This means, if the message is generated when the chat room was created or not.\n\nIf the message is not system generated, that means it is send by the user. You will have to add the user's email (or any other details can be added such as user's display name)to the `data` object. Add the following snippet.\n\n```js\nasync function handleSend(messages) {\n  // ...\n\n  useEffect(() => {\n    const messagesListener = firestore()\n      .collection('THREADS')\n      .doc(thread._id)\n      .collection('MESSAGES')\n      .orderBy('createdAt', 'desc')\n      .onSnapshot(querySnapshot => {\n        const messages = querySnapshot.docs.map(doc => {\n          const firebaseData = doc.data();\n\n          const data = {\n            _id: doc.id,\n            text: '',\n            createdAt: new Date().getTime(),\n            ...firebaseData\n          };\n\n          if (!firebaseData.system) {\n            data.user = {\n              ...firebaseData.user,\n              name: firebaseData.user.email\n            };\n          }\n\n          return data;\n        });\n\n        setMessages(messages);\n      });\n\n    return () => messagesListener();\n  }, []);\n}\n```\n\nThe messages in chat room are going to be displayed as the following.\n\n<img src='https://miro.medium.com/max/700/1*WDL3DnVJPQPUNMIpD0NHTg.png' />\n\nIn order to make all this work, make sure to modify the following two props in return statement.\n\n```js\n<GiftedChat\n      messages={messages}\n      // Modify the following\n      onSend={handleSend}\n      user={{ _id: currentUser.uid }}\n      // ...rest remains same\n    />\n  );\n```\n\n## How to set a system message as latest message in a chat room?\n\nRight now the `THREADS` collection for each chat room can display the latest message sent by the user but when a thread is created, you might want to display a system, generated message to convey the same message to the user entering the chat room. To do this, open `AddRoomScreen.js` file and modify its its helper method `handleButtonPress` to add the following snippet.\n\nFirst you are going to add the `latestMessage` object with its text field saying that a room is created. Do not forget to add a timestamp field along with the text field.\n\nSecond step is to add a `docRef` or a document reference to the sub-collection `MESSAGES`. Note that, at this point, when the user creates a new room, this sub-collection will be created for each chat room.\n\nA document reference in Firestore is used to write, read or listen to a particular location or a sub-collection inside a Firestore collection.\n\nThe document or in the current case, the collection `MESSAGES` might not exist but adding this step will create the collection. This first message in a chat room is also going to be the system generated message.\n\n```js\nfunction handleButtonPress() {\n  if (roomName.length > 0) {\n    firestore()\n      .collection('THREADS')\n      .add({\n        name: roomName,\n        latestMessage: {\n          text: `You have joined the room ${roomName}.`,\n          createdAt: new Date().getTime()\n        }\n      })\n      .then(docRef => {\n        docRef.collection('MESSAGES').add({\n          text: `You have joined the room ${roomName}.`,\n          createdAt: new Date().getTime(),\n          system: true\n        });\n        navigation.navigate('Home');\n      });\n  }\n}\n```\n\nNow, when you create a new room through the app, here is the complete overview of how it gets reflected in Firestore.\n\n<img src='https://miro.medium.com/max/1400/1*-P8qzzB9hQZjHljwfBym6w.png' />\n\n<img src='https://miro.medium.com/max/1400/1*FqFGH5woXMLdH0MnlNLUtg.png' />\n\nAnd here is the system message displayed in the new chat room.\n\n<img src='https://miro.medium.com/max/700/1*eGiETDWsXMKgnczQ6nAUfA.png' />\n\n## Customizing the system message in react-native-gifted-chat\n\nRight now the system message generated is not as appealing and conveying inside a chat room. In this short section, let us learn how to customize that in `react-native-gifted-chat`.\n\nStart by importing `SystemMessage` component from `react-native-gifted-chat` inside `RoomScreen.js` file.\n\n```js\nimport {\n  GiftedChat,\n  Bubble,\n  Send,\n  // Add this\n  SystemMessage\n} from 'react-native-gifted-chat';\n```\n\nCreate a new helper method called `renderSystemMessage` inside the screen component with the following snippet. In the current scenario, you are going to change the background of the system message display as well as the text styles. For that you need to edit the props `wrapperStyle` and `textStyle` of `SystemMessage` component.\n\nDo modify the `StyleSheet` object to add styles as shown below.\n\n```js\nfunction renderSystemMessage(props) {\n  return (\n    <SystemMessage\n      {...props}\n      wrapperStyle={styles.systemMessageWrapper}\n      textStyle={styles.systemMessageText}\n    />\n  );\n}\n\n// appropriate styles\n\nconst styles = StyleSheet.create({\n  // ... rest of the styles remain unchanged\n  systemMessageText: {\n    fontSize: 14,\n    color: '#fff',\n    fontWeight: 'bold'\n  }\n});\n```\n\nLastly, add the prop `renderSystemMessage` to `GiftedChat` component.\n\n```js\nreturn (\n  <GiftedChat\n    // rest of the props remain same\n    renderSystemMessage={renderSystemMessage}\n  />\n);\n```\n\nHere is the output you are going to get after this step.\n\n<img src='https://miro.medium.com/max/700/1*k8b2ObpU4FoiMfRVmXwvQw.png' />\n\n## How to display latest message on home screen?\n\nFor every chat room on home screen there is description field that says a static message `Item description`. In this section let us change that to dynamically display the real-time latest message fetched from the Firestore collection.\n\nOpen `HomeScreen.js` and `orderBy()` when fetching name of chat rooms in the Effect hook. Then, when returning the documentSnapShot data, there is an object that contain fields like `_id` and `name`. Add another object as a field called `latestMessage` as shown below.\n\n```js\nuseEffect(() => {\n  const unsubscribe = firestore()\n    .collection('THREADS')\n    // add this\n    .orderBy('latestMessage.createdAt', 'desc')\n    .onSnapshot(querySnapshot => {\n      const threads = querySnapshot.docs.map(documentSnapshot => {\n        return {\n          _id: documentSnapshot.id,\n          name: '',\n          // add this\n          latestMessage: {\n            text: ''\n          },\n          // ---\n          ...documentSnapshot.data()\n        };\n      });\n\n      setThreads(threads);\n\n      if (loading) {\n        setLoading(false);\n      }\n    });\n\n  return () => unsubscribe();\n}, []);\n```\n\nNext, go to the `List.Item` inside the `FlatList` component and modify the description field as shown below.\n\n```js\ndescription={item.latestMessage.text}\n```\n\nGo back to the simulator and you are going to see the latest message displayed.\n\n<img src='https://miro.medium.com/max/940/1*wc1bhW2LavbuiM3dw0QCXA.png' />\n\nTry sending a new message and that is going to be the latest message displayed on the home screen for the chat room.\n\n<img src='https://miro.medium.com/max/684/1*JKTyv7WO-_TOtOcHPmlfBw.gif' />\n\nThere is a benefit of ordering the chat rooms according to the latest message for each room. Now the home screen is going to display that chat room on top which received it the most recent message according the timestamp (createdAt)that is associated with the message.\n\n<img src='https://miro.medium.com/max/684/1*nDaN1lXF75iWEWg6X-0sqQ.gif' />\n\n## What's Next?\n\nIn the [next part](https://amanhimself.dev/blog/chat-app-with-react-native-part-6) of the series we are going to fix a small bug related of status bar styles for every screen component in the current app. This is going to be done by creating a custom hook and using `react-navigation`.\n\n😺 **You can find the complete code here at this [GitHub repo](https://github.com/amandeepmittal/react-native-examples/tree/master/ChatApp).**\n\n## Further Reading\n\n- [React Native’s New Architecture — Glossary of terms by Gabe Greenberg](https://www.g2i.co/blog/react-natives-new-architecture-glossary-of-terms)\n- [The Effect hook in React](https://reactjs.org/docs/hooks-effect.html)\n- [Debugging React Native apps](https://reactnative.dev/docs/debugging)\n\n[Originally Published at Heartbeat.Fritz.ai](https://heartbeat.fritz.ai/chat-app-with-react-native-part-5-create-and-fetch-real-time-messages-with-firestore-86fb012edaf5)\n",
            "url": "https://amanhimself.dev//blog/chat-app-with-react-native-part-5",
            "title": "Chat app with React Native (Part 5) - Create and Fetch Real-Time Messages with Firestore",
            "summary": "Chat app with React Native (Part 5) - Create and Fetch Real-Time Messages with Firestore",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/integrate-apollo-client-in-react-native",
            "content_html": "---\ntitle: 'How to integrate GraphQL and Apollo Client in React Native app'\nslug: 'integrate-apollo-client-in-react-native'\ndate: '2020-05-11'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://blog.crowdbotics.com/integrate-graphql-and-apollo-client-in-react-native-app/'\n---\n\nApollo has an entire ecosystem of tools to build GraphQL applications regardless of the frontend framework or library you intend to use. You can use it to develop client-side and server-side apps separately. Apollo has more features and support than its open-source competitors in GraphQL for JavaScript world.\n\nIn this tutorial, let us build a small demo app. In this app, you are going to use a third party API endpoint to fetch a list of crypto currencies. This API endpoint is going to be based on REST so a thing you are going to learn is how to make use of Apollo Client to fetch results from a REST endpoint using GraphQL query language.\n\nI am going to use Expo CLI to quickly get started with a React Native project and focus on the purpose of learning, that is, integrating Apollo Client in a React Native app. If you are familiar with React Native CLI, you can go ahead and use it instead of Expo CLI.\n\n## Requirements\n\n- Nodejs version <= `10.x.x` installed\n- watchman installed\n- have access to one package manager such as npm or yarn\n- use react native version 0.60.x or above\n- `expo-cli` at least `3.11.9`\n\n## Installing dependencies\n\nTo get started with a new Expo project, run the below command from a terminal window to generate a React Native project based on Expo SDK `36.x.x` or above.\n\n```shell\nnpx expo init rnApolloCryptoListDemo\n\n# after the project directory is generated\ncd rnApolloCryptoListDemo\n```\n\nI chose Expo over plain React-Native because it includes most of the dependencies that we need so there is less work to do for us.\n\nLet's install all the required dependencies to integrate Apollo Client and request the REST endpoint using GraphQL queries.\n\n```shell\nyarn add apollo-client apollo-cache-inmemory\ngraphql-tag apollo-link-rest apollo-link\ngraphql graphql-anywhere qs @apollo/react-hooks\n```\n\nLastly, let us install the react-navigation dependencies that will allow us to add a stack navigator to our app. For this, make sure to use `expo install`.\n\n```shell\nexpo install react-native-gesture-handler react-native-reanimated\nreact-native-screens react-native-safe-area-context\n@react-native-community/masked-view react-navigation-stack\n```\n\nAfter you run these two commands you should be ready to go. Let's start implementing the app!\n\n## Set up a Stack Navigator\n\nIn this section, let us set up a basic navigation flow of our app. The idea you have to implement is that whenever the user touches a coin from the list screen (that is going to be the initial route or screen of the app), the stack navigator pushes another screen to display the details of that particular coin.\n\nTo start, create a `src/` directory at the root of the project and then inside it, create another directory called `screens`. In this directory, create two new screen files: `CoinsList.js` and `CoinDetail.js`. Each of these screen component files is going to display a title of the screen and a button to navigate from `CoinsList` to `CoinDetail`.\n\nHere is the code snippet for `screens/CoinsList.js`:\n\n```js\nimport React from 'react';\nimport { Text, View, StyleSheet, TouchableOpacity } from 'react-native';\n\nfunction CoinsList(props) {\n  const { navigation } = props;\n  return (\n    <View style={styles.container}>\n      <Text style={styles.boldText}>Coins List</Text>\n      <TouchableOpacity onPress={() => navigation.navigate('Detail')}>\n        <Text style={styles.boldText}>Go to Detail</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#333',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  boldText: {\n    color: '#fff',\n    fontSize: 24,\n    fontWeight: 'bold'\n  }\n});\n\nexport default CoinsList;\n```\n\nIn the above snippet, observe that props are coming from `react-navigation` which is yet to set up. Each screen component that becomes the part of the react-navigation flow, has access to these props.\n\nHere is the code snippet for `screens/CoinDetail.js`:\n\n```js\nimport React from 'react';\nimport { Text, View, StyleSheet } from 'react-native';\n\nfunction CoinDetail() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.boldText}>Coin Detail</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#333',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  boldText: {\n    color: '#fff',\n    fontSize: 24,\n    fontWeight: 'bold'\n  }\n});\n\nexport default CoinDetail;\n```\n\nNow, create another directory `src/navigation`. Inside it, create a file called `MainStackNavigator.js`\n\n```js\nimport React from 'react';\nimport { createStackNavigator } from 'react-navigation-stack';\n\nimport CoinsList from '../screens/CoinsList';\nimport CoinDetail from '../screens/CoinDetail';\n\nconst MainStack = createStackNavigator(\n  {\n    Coins: {\n      screen: CoinsList\n    },\n    Detail: {\n      screen: CoinDetail\n    }\n  },\n  {\n    initialRouteName: 'Coins'\n  }\n);\n\nexport default MainStack;\n```\n\nNext, create another file `AppNavigator.js` with the following code snippet:\n\n```js\nimport React from 'react';\nimport { createAppContainer } from 'react-navigation';\n\nimport MainStack from './MainStackNavigator';\n\nexport default createAppContainer(MainStack);\n```\n\nLastly, to see this navigational flow in action, open `App.js` file and make sure you import `AppNavigator` from `AppNavigator.js` file.\n\n```js\nimport React from 'react';\n\nimport AppNavigator from './src/navigation/AppNavigator';\n\nexport default function App() {\n  return <AppNavigator />;\n}\n```\n\nThat's it. Our basic navigational flow is ready to be tested. Open the terminal window and execute `expo start`. Open your choice of simulator or device and make sure it has an Expo client as an app installed.\n\nHere is the demo of the navigational flow we have set up so far.\n\n<img src='https://crowdbotics.ghost.io/content/images/2020/02/ss1.gif' />\n\n# How to configure Apollo Client in a React Native app\n\nIn this section, let us integrate Apollo Client such that we are able to fetch the data from the REST endpoint. Start by creating a new directory `src/graphql` inside which also create a new file `Client.js`.\n\nThe `apollo-client` package along with `apollo-cache-inmemory` and `apollo-link` is a fully-featured GraphQL client that can be integrated into React or React Native apps. Let us import all three of them inside this file.\n\n```js\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { RestLink } from 'apollo-link-rest';\n```\n\nThe apollo-link-rest package allows you to use third-party APIs that do not have GraphQL endpoints or have REST endpoints but what you want to transmit them into GraphQL.\n\nThe API endpoint we are going to use is a REST endpoint from [CryptoCompare.com](https://www.cryptocompare.com/). Make sure, at this point, you have access to the API Key (_that is free at the time of writing this tutorial_). Their API offers many endpoints for different use case but we are going to use fetch a number of top coins by their total volume across all markets in the last 24 hours.\n\n<img src='https://crowdbotics.ghost.io/content/images/2020/02/ss2.png' />\n\nAdd a RestLink for the Rest API endpoint and pass headers which is an object representing values to be sent as headers on the request. The value you need to sent while requesting data from the API endpoint is the API key.\n\n```js\nconst restLink = new RestLink({\n  uri: 'https://min-api.cryptocompare.com',\n  headers: {\n    Authorization:\n      'd251970548f7321b548d3fb61d58c1a456974ea02ba41437fc9bf711f4e89782'\n  }\n});\n```\n\nAdd the following configuration with the default cache and RestLink to complete the configuration of Apollo Client.\n\n```js\nexport const client = new ApolloClient({\n  link: restLink,\n  cache: new InMemoryCache()\n});\n```\n\nNow, open the `App.js` file to wrap the current root of the app (_`<AppNavigator/>`_) with `ApolloProvider`. This provider is similar to React's Context.Provider and places the Apollo Client on the context. This makes them accessible to Apollo Client easily and from anywhere inside the component tree.\n\nStart by importing `client` from `src/graphql/Client.js` and `ApolloProvider` from `@apollo/react-hooks` and use it to wrap `AppNavigator`.\n\n```js\nimport React from 'react';\n\nimport AppNavigator from './src/navigation/AppNavigator';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { client } from './src/graphql/Client';\n\nexport default function App() {\n  return (\n    <ApolloProvider client={client}>\n      <AppNavigator />\n    </ApolloProvider>\n  );\n}\n```\n\n## Writing your first GraphQL query\n\nIn this section, let us write a query to hook the Apollo Client to fetch results from the REST API endpoint. However, the query is going to be made in GraphQL query language with the help of `graphql-tag`.\n\nIn the `src/graphql` directory, create a new file called `Queries.js` and import `graphql-tag`.\n\n```js\nimport gql from 'graphql-tag';\n```\n\nExport `FETCH_COIN_LIST` using a template from the `gql` tag. Add a query that is going to fetch the top cryptocurrency list from the API endpoint. Using the `@rest` directive Apollo manages how to parse this query.\n\n```graphql\nexport const FETCH_COIN_LIST = gql`\n  query FetchCoinsList {\n    coinsList\n      @rest(type: \"ListPayload\", path: \"/data/top/totalvolfull?tsym=USD\") {\n      Data @type(name: \"DataPayload\") {\n        CoinInfo @type(name: \"CoinInfoPayload\") {\n          Id\n          Name\n          FullName\n        }\n        DISPLAY @type(name: \"DisplayPayload\") {\n          USD @type(name: \"USDPayLoad\") {\n            PRICE\n            OPENDAY\n            HIGHDAY\n            LOWDAY\n            OPEN24HOUR\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\nThe data structure fetched from this API endpoint in JSON format looks like below:\n\n<img src='https://crowdbotics.ghost.io/content/images/2020/02/ss3.png' />\n\n## Make a request to REST endpoint with Apollo Client\n\nOpen the file `screens/CoinsList.js` and import the `FETCH_COIN_LIST` query as well as the `useQuery` hook from `@apollo/react-hooks`.\n\n```js\nimport React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { FETCH_COIN_LIST } from '../graphql/Queries';\n```\n\nIn the above code snippet, let us import React hook `useEffect` just to test that the endpoint is fetching data as per our needs. The data fetched is going to be displayed in a console statement that you can view using Remote JS Debugger and Console tab in the Developer Tools of a web browser.\n\nThe hook `useQuery` can be used to make the request to the API endpoint by referencing the query `FETCH_COIN_LIST`.After being called, it returns a result object with a set of properties. We only need two properties for now: `loading` and `data`. Destructure this query hook inside the `CoinsList` functional component as shown below.\n\n```js\nfunction CoinsList(props) {\n  // ...\n  const { loading, data } = useQuery(FETCH_COIN_LIST);\n  // ...\n}\n```\n\nThen, using `useEffect` to, you can fetch the result from the Query.\n\n```js\nfunction CoinsList(props) {\n  // ...\n  useEffect(() => {\n    console.log(data);\n  }, []);\n  // ...\n}\n```\n\nMake sure the `expo start` command is running from the terminal window. Then, go the Expo client either on a real device or a simulator, open the developer menu on a Mac using:\n\n- if on iOS simulator, press `Ctrl-Cmd-Z`\n- if on Android emulator, press `Cmd+M`\n- if using a real device, just shake your device a bit\n\nThis is what the developer menu in an Expo client looks like:\n\n<img src='https://crowdbotics.ghost.io/content/images/2020/02/ss4.png' />\n\nChoose the option `Debug Remote JS`. A debugger like below should appear in your default web browser.\n\n<img src='https://crowdbotics.ghost.io/content/images/2020/02/ss5.png' />\n\nOpen the `Console` tab from the `Developer Tools` of the web browser. You are going to get the following result.\n\n<img src='https://crowdbotics.ghost.io/content/images/2020/02/ss6.png' />\n\nThat's it! The Apollo integration is working and you can start displaying the data in the app.\n\n## Add an ActivityIndicator while fetching results\n\nThe `useQuery` hook gives one property called `loading` that can be used to indicate on the device's screen when the query is in the process of fetching the result. Using the `ActivityIndicator`, a loading indicator can be displayed.\n\nImport the `ActivityIndicator` component from react-native in the file `CoinsList.js`.\n\n```js\nimport { Text, View, StyleSheet, ActivityIndicator } from 'react-native';\n```\n\nNext, modify the return statements as follows.\n\n```js\nif (loading && !data) {\n  return (\n    <View style={styles.loadingIndicatorContainer}>\n      <ActivityIndicator size=\"large\" color=\"#fff\" />\n    </View>\n  );\n}\nreturn (\n  <View style={styles.container}>\n    <Text style={styles.boldText}>Coins List</Text>\n  </View>\n);\n```\n\nLastly, do not forget to add the corresponding styles for the `View` that wraps the loading indicator.\n\n```js\nconst styles = StyleSheet.create({\n  // ... rest of the styles\n  loadingIndicatorContainer: {\n    flex: 1,\n    backgroundColor: '#333',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\n```\n\nNow go back to the Expo client and see the result yourself.\n\n<img src='https://crowdbotics.ghost.io/content/images/2020/02/ss7.gif' />\n\n## Display data in a list using FlatList\n\nTo display a list of items, let us create a separate component that can be reused for a different purpose if the scope of this app gets larger.\n\nCreate a new directory called `src/components` within a new file `ListItem.js`.\n\nThis component is going to display the name, full name and the price of the component, all inside a touchable button that is going to navigate to the `Detail` screen you created earlier.\n\nBegin by importing the core components from `react-native`.\n\n```js\nimport React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n```\n\nWith some destructuring from the incoming props `coin` (that is going to be passed from `CoinsList.js` soon), add a functional component called `ListItem`.\n\n```js\nfunction ListItem(props) {\n  const { coin, onPress } = props;\n  const { CoinInfo, DISPLAY } = coin;\n  const { FullName, Name } = CoinInfo;\n\n  return (\n    <TouchableOpacity\n      style={styles.container}\n      onPress={() => onPress && onPress(coin)}\n    >\n      <View style={styles.row}>\n        <Text style={styles.text} numberOfLines={1}>\n          {Name}\n        </Text>\n        <View style={styles.right}>\n          <Text style={styles.text} numberOfLines={1}>\n            {DISPLAY.USD.PRICE}\n          </Text>\n        </View>\n      </View>\n\n      <View style={styles.row}>\n        <Text style={[styles.text, styles.name]} numberOfLines={1}>\n          {FullName}\n        </Text>\n      </View>\n    </TouchableOpacity>\n  );\n}\n```\n\nAdd the corresponding styles to the above component and do not forget to export it.\n\n```js\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20\n  },\n  active: {\n    backgroundColor: 'rgba(255,255,255,0.05)'\n  },\n  row: {\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  },\n  right: {\n    flex: 1,\n    alignSelf: 'flex-end',\n    alignItems: 'flex-end'\n  },\n  text: {\n    color: '#FFFFFF',\n    fontSize: 24,\n    fontWeight: '500'\n  },\n  name: {\n    color: 'rgba(255,255,255,0.5)',\n    fontSize: 16,\n    fontWeight: '300'\n  }\n});\n\nexport default ListItem;\n```\n\nNow, import this component inside `CoinsList.js`.\n\n```js\nimport ListItem from '../components/ListItem';\n```\n\nAlso, import the `FlatList` component that is going to render the list of coins, from the `react-native` core.\n\n```js\nimport { View, StyleSheet, FlatList, ActivityIndicator } from 'react-native';\n```\n\nNow, add this `FlatList` component wrapped inside the root `View` component like below.\n\n```js\nreturn (\n  <View style={styles.container}>\n    <FlatList\n      contentContainerStyle={styles.contentContainerStyle}\n      data={data.coinsList.Data}\n      keyExtractor={item => item.CoinInfo.Id.toString()}\n      renderItem={({ item }) => {\n        return (\n          <ListItem\n            coin={item}\n            onPress={() => navigation.navigate('Detail', { coin: item })}\n          />\n        );\n      }}\n    />\n  </View>\n);\n```\n\nModify the `container` styles.\n\n```js\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#333'\n  }\n  // ... rest of the styles remain same\n});\n```\n\nNow, go back to the simulator device and you are going to get the following result.\n\n<img src='https://crowdbotics.ghost.io/content/images/2020/02/ss8.png' />\n\nOn touching one of the coins from the list, it is going to take the user to the `Detail` screen which for now, does not contain any details. This is navigation is done by using `navigation` props from the `react-navigation` library. Do note that, the params `coin` is also getting passed. This will be useful when displaying the data on the `Detail` screen from the same GraphQL query.\n\nFor now, you can see that the navigation works.\n\n<img src='https://crowdbotics.ghost.io/content/images/2020/02/ss9.gif' />\n\n## Completing the Detail Screen\n\nSince all the props are being passed from the CoinsList to the Detail screen as well as the navigation pattern working, let us set up the `Detail` screen now.\n\nOpen `screen/CoinDetail.js` file and start by importing the following core components.\n\n```js\nimport React from 'react';\nimport { Text, View, StyleSheet } from 'react-native';\n```\n\nThen, using some destructuring from the props, add them to the functional component `CoinDetail`.\n\n```js\nfunction CoinDetail(props) {\n  const { navigation } = props;\n  const { state } = navigation;\n  const { params } = state;\n  const { coin } = params;\n  const { CoinInfo, DISPLAY } = coin;\n  const { FullName, Name } = CoinInfo;\n  const { USD } = DISPLAY;\n  const { PRICE, OPENDAY, HIGHDAY, LOWDAY, OPEN24HOUR } = USD;\n\n  // ...\n}\n```\n\nAfter the destruction, add the JSX to be returned.\n\n```js\nreturn (\n  <View style={styles.container}>\n    <View style={styles.header}>\n      <Text numberOfLines={1} style={styles.text}>\n        {Name} - {FullName}\n      </Text>\n      <Text style={styles.priceText} numberOfLines={1}>\n        Price: {PRICE}\n      </Text>\n    </View>\n    <View style={styles.statsContainer}>\n      <View>\n        <View style={styles.statRow}>\n          <Text style={styles.stat} numberOfLines={1}>\n            Open Day\n          </Text>\n          <Text style={styles.stat} numberOfLines={1}>\n            {OPENDAY}\n          </Text>\n        </View>\n        <View style={styles.statRow}>\n          <Text style={styles.stat} numberOfLines={1}>\n            Highest in a day\n          </Text>\n          <Text style={styles.stat} numberOfLines={1}>\n            {HIGHDAY}\n          </Text>\n        </View>\n        <View style={styles.statRow}>\n          <Text style={styles.stat} numberOfLines={1}>\n            Lowest in a day\n          </Text>\n          <Text style={styles.stat} numberOfLines={1}>\n            {LOWDAY}\n          </Text>\n        </View>\n        <View style={styles.statRow}>\n          <Text style={styles.stat} numberOfLines={1}>\n            Open in 24 hours\n          </Text>\n          <Text style={styles.stat} numberOfLines={1}>\n            {OPEN24HOUR}\n          </Text>\n        </View>\n      </View>\n    </View>\n  </View>\n);\n```\n\nLastly, do not forget to add the corresponding styles to the above JSX using the `StyleSheet` object.\n\n```js\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  },\n  header: {\n    flex: 30,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  text: {\n    fontSize: 32,\n    color: '#161616'\n  },\n  priceText: {\n    fontSize: 24,\n    color: '#161616'\n  },\n  statsContainer: {\n    flex: 62,\n    backgroundColor: '#161616'\n  },\n  statRow: {\n    padding: 10,\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  },\n  stat: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: '500'\n  }\n});\n```\n\nOn visiting the detail of any Coin in the list, the following is going to be displayed.\n\n<img src='https://crowdbotics.ghost.io/content/images/2020/02/ss10.png' />\n\n## Display coin name in the header in the Detail screen\n\nThe last piece of functionality that you could add to make the current app look better is to display the name of the coin instead of `Detail`.\n\n<img src='https://crowdbotics.ghost.io/content/images/2020/02/ss11.png' />\n\nTo do this, all you have to do is add the following snippet:\n\n```js\nCoinDetail.navigationOptions = screenProps => ({\n  title: screenProps.navigation.getParam('coin').CoinInfo.Name\n});\n```\n\nEach screen component in your app is provided with the `navigation` prop automatically. This prop contains various convenience functions that dispatch navigation actions on the route's router. Using `screenProps`, this library allows you to access the props of the current screen.\n\nNow, go back to the app and open the details of any coin from the list rendered. You are going to notice that the short name of the coin is displayed in the header as shown below.\n\n<img src='https://crowdbotics.ghost.io/content/images/2020/02/ss12.png' />\n\n## Conclusion\n\nThat's it for this tutorial. I hope you learned how to use rest endpoint and integrate Apollo Client to any API endpoint to query desired results in a React Native and Expo app. Moreover, I hope you have seen a good use case of creating stack navigators too from the `react-navigation` library.\n\nOriginally published at [Crowdbotics' blog](https://crowdbotics.ghost.io/integrate-graphql-and-apollo-client-in-react-native-app/).\n",
            "url": "https://amanhimself.dev//blog/integrate-apollo-client-in-react-native",
            "title": "How to integrate GraphQL and Apollo Client in React Native app",
            "summary": "How to integrate GraphQL and Apollo Client in React Native app",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/chat-app-with-react-native-part-4",
            "content_html": "---\ntitle: 'Chat app with React Native (part 4) - A guide to create Chat UI Screens with react-native-gifted-chat'\ndate: '2020-04-28'\nslug: 'chat-app-with-react-native-part-4'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://heartbeat.fritz.ai/chat-app-with-react-native-part-4-create-chat-ui-screens-with-react-native-gifted-chat-7ef428a60d30'\n---\n\n![cover](https://i.imgur.com/ROYjoYo.jpg)\n\nIn [part 3](https://amanhimself.dev/blog/chat-app-with-react-native-part-3), we completed the task of integrating the Firestore to the current React Native app. The database now stores a chat room name. A new chat room can be created using a modal stack, only if the user is authenticated.\n\nIn part 4, let us proceed with further and a new screen that allows the user to send and receive messages as well as display those messages inside a chat room.\n\nTo fulfill this purpose, let us use an open-source library called [`react-native-gifted-chat`](https://github.com/FaridSafi/react-native-gifted-chat). You are going to learn how to integrate it within the current React Native app and learn how to use its \"out of the box\" features as props to save saves a ton of development time.\n\nTo begin, make sure to install this module by executing the following command from a terminal window.\n\n```shell\nyarn add react-native-gifted-chat\n```\n\n## Add a new screen to display messages\n\nStart by adding a new screen file called `RoomScreen.js` inside `src/screens/` directory. This file is going to be used to display messages inside each chat room.\n\nThen, let us add a mock chat UI screen elements to this screen. This can be done in the following steps:\n\n- import `GiftedChat` from `react-native-gifted-chat`. This component is going to be essential in adding UI and chat functionalitie\n\n  s\n\n- Create a functional component `RoomScreen`, inside it, define a state variable called `messages`. This variable is going to have an empty array as its default value.\n- Add some mock message data objects. Display two types of messages in each object. The first object is going to be a system message which showcases information like \"The following chat room was created at X time...\". The second object is going to hold a `text` message that is going to have a `user` object associated and contains user information, such as user name. Both of these messages are going to have a unique `_id`.\n- Create a helper method called `handleSend` that is going to be used when sending a message in a particular chat room.\n- Lastly, return the following code snippet. The `newMessage` is concatenated with previous or the initial messages using `GiftedChat.append()` method.\n\n```js\nimport React, { useState } from 'react';\nimport { GiftedChat } from 'react-native-gifted-chat';\n\nexport default function RoomScreen() {\n  const [messages, setMessages] = useState([\n    /**\n     * Mock message data\n     */\n    // example of system message\n    {\n      _id: 0,\n      text: 'New room created.',\n      createdAt: new Date().getTime(),\n      system: true\n    },\n    // example of chat message\n    {\n      _id: 1,\n      text: 'Henlo!',\n      createdAt: new Date().getTime(),\n      user: {\n        _id: 2,\n        name: 'Test User'\n      }\n    }\n  ]);\n\n  // helper method that is sends a message\n  function handleSend(newMessage = []) {\n    setMessages(GiftedChat.append(messages, newMessage));\n  }\n\n  return (\n    <GiftedChat\n      messages={messages}\n      onSend={newMessage => handleSend(newMessage)}\n      user={{ _id: 1 }}\n    />\n  );\n}\n```\n\n## Change RoomScreen to stack Navigator\n\nEach message thread is only going to be displayed when the user enters the chat room. Open `src/navigation/HomeStack.js` and add the `RoomScreen` component as the second screen to the `ChatApp` stack as shown below.\n\n```js\nimport React from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { IconButton } from 'react-native-paper';\nimport HomeScreen from '../screens/HomeScreen';\nimport AddRoomScreen from '../screens/AddRoomScreen';\n\n// Add this\nimport RoomScreen from '../screens/RoomScreen';\n\nconst ChatAppStack = createStackNavigator();\nconst ModalStack = createStackNavigator();\n\nfunction ChatApp() {\n  return (\n    <ChatAppStack.Navigator\n      screenOptions={{\n        headerStyle: {\n          backgroundColor: '#6646ee'\n        },\n        headerTintColor: '#ffffff',\n        headerTitleStyle: {\n          fontSize: 22\n        }\n      }}\n    >\n      <ChatAppStack.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={({ navigation }) => ({\n          headerRight: () => (\n            <IconButton\n              icon=\"message-plus\"\n              size={28}\n              color=\"#ffffff\"\n              onPress={() => navigation.navigate('AddRoom')}\n            />\n          )\n        })}\n      />\n      {/* Add this */}\n      <ChatAppStack.Screen name=\"Room\" component={RoomScreen} />\n    </ChatAppStack.Navigator>\n  );\n}\n\n// rest of the code remains same\n```\n\nThen, open `src/screebs/HomeScreen.js` file, and make sure to pass the `navigation` reference as prop to the function component: `export default function HomeScreen({ navigation }) {...}`.\n\nEach chat room is displayed as an item in the FlatList. You will have to make it pressable to allow the user to enter the chat room and display the `RoomScreen` component.\n\nEach list item can be wrapped in the `TouchableOpacity` component such that using `navigation` prop reference as the value of `onPress`, the user is allowed to navigate to the next screen.\n\nHere is the complete code snippet after the modifications.\n\n```js\nimport React, { useState, useEffect } from 'react';\nimport { View, StyleSheet, FlatList, TouchableOpacity } from 'react-native';\nimport { List, Divider } from 'react-native-paper';\nimport firestore from '@react-native-firebase/firestore';\nimport Loading from '../components/Loading';\n\nexport default function HomeScreen({ navigation }) {\n  const [threads, setThreads] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  /**\n   * Fetch threads from Firestore\n   */\n  useEffect(() => {\n    const unsubscribe = firestore()\n      .collection('THREADS')\n      // .orderBy('latestMessage.createdAt', 'desc')\n      .onSnapshot(querySnapshot => {\n        const threads = querySnapshot.docs.map(documentSnapshot => {\n          return {\n            _id: documentSnapshot.id,\n            // give defaults\n            name: '',\n            ...documentSnapshot.data()\n          };\n        });\n\n        setThreads(threads);\n\n        if (loading) {\n          setLoading(false);\n        }\n      });\n\n    /**\n     * unsubscribe listener\n     */\n    return () => unsubscribe();\n  }, []);\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={threads}\n        keyExtractor={item => item._id}\n        ItemSeparatorComponent={() => <Divider />}\n        renderItem={({ item }) => (\n          <TouchableOpacity\n            onPress={() => navigation.navigate('Room', { thread: item })}\n          >\n            <List.Item\n              title={item.name}\n              description=\"Item description\"\n              titleNumberOfLines={1}\n              titleStyle={styles.listTitle}\n              descriptionStyle={styles.listDescription}\n              descriptionNumberOfLines={1}\n            />\n          </TouchableOpacity>\n        )}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#f5f5f5',\n    flex: 1\n  },\n  listTitle: {\n    fontSize: 22\n  },\n  listDescription: {\n    fontSize: 16\n  }\n});\n```\n\nGo to the simulator window and you are going to get the following result.\n\n<img src='https://miro.medium.com/max/684/1*us9hK50YmGKMfhLHR62RjQ.gif' />\n\nGreat! The chat UI for each room is now accessible. Try to send a message, of course, it won't get saved since there is no database connected yet.\n\n<img src='https://miro.medium.com/max/684/1*Z90LuoopOAmDJ6XEDNMouA.gif' />\n\nOnce the user exits the room and comes back later, only the mock message is displayed. Do notice that the system message `New room created` is displayed as well.\n\n## Display title of each room\n\nWhen you enter the chat room, did you notice that the name of the room is not being displayed correctly? It just says `Room` whereas the complete name of the first room should be `Room 1`. Let us fix this in the current section.\n\nOpen `HomeStack.js` file and modify the route for the `RoomScreen` component by adding `options` to it. The value of the title for each chat room is going to be the name of that chat room.\n\nThis can be obtained using `route` props as shown below.\n\n```js\n<ChatAppStack.Screen\n  name=\"Room\"\n  component={RoomScreen}\n  options={({ route }) => ({\n    title: route.params.thread.name\n  })}\n/>\n```\n\nWhen using the `react-navigation` library for routing, each screen component is provided with the `route` prop automatically. This prop contains various information regarding the current route such as a place in navigation hierarchy the route component lives.\n\n`route.params` allows access to a set of params defined when navigating. These sets of params have the name of the same chat room as stored in Firestore because in the previous section you did pass the object `thread`.\n\n```js\n<TouchableOpacity onPress={() => navigation.navigate('Room', { thread: item })}>\n```\n\nHere is the output you are going to get on the device.\n\n<img src='https://miro.medium.com/max/684/1*EU5dtN80Hfm9DkVcrptWxw.gif' />\n\n## Modifying the Chat screen UI: Changing the chat bubble\n\nGifted chat module gives an advantage for creating a Chat UI in a React Native app over building the UI from scratch. This advantage comes in the form of [props available](https://github.com/FaridSafi/react-native-gifted-chat#props) in this package.\n\nRight now the chat bubble appears as shown below.\n\n<img src='https://miro.medium.com/max/222/1*HDpbiswqzzq-7gWbeaUG3Q.png' />\n\nLet us change the background color of this bubble to reflect the same color as in the header bar (which is used at many instances in the app). This is going to be done in the following steps:\n\n- Start by importing the `Bubble` from the gifted chat module.\n- Create a helper method `renderBubble` inside function component `RoomScreen`\n- Return the `<Bubble/>` component from the helper function with new styles. The style properties are defined in the Gifted chat module so make sure to use the same property names.\n- Lastly, on the `GiftedChat` component, enter the prop `renderBuble`.\n\n```js\n// Step 1: modify the import statement\nimport { GiftedChat, Bubble } from 'react-native-gifted-chat';\n\nexport default function RoomScreen() {\n  // ...\n\n  // Step 2: add a helper method\n\n  function renderBubble(props) {\n    return (\n      // Step 3: return the component\n      <Bubble\n        {...props}\n        wrapperStyle={{\n          right: {\n            // Here is the color change\n            backgroundColor: '#6646ee'\n          }\n        }}\n        textStyle={{\n          right: {\n            color: '#fff'\n          }\n        }}\n      />\n    );\n  }\n\n  return (\n    <GiftedChat\n      messages={messages}\n      onSend={newMessage => handleSend(newMessage)}\n      user={{ _id: 1, name: 'User Test' }}\n      renderBubble={renderBubble}\n    />\n  );\n}\n```\n\nWith that done, here is the output you are going to get.\n\n<img src='https://miro.medium.com/max/177/1*k-uFSzdbiXLtwEyg6CCYGw.png' />\n\n## Adding other modifications to Chat UI\n\nYou can modify the placeholder text using the prop `placeholder` as shown below.\n\n```js\n<GiftedChat\n  messages={messages}\n  onSend={newMessage => handleSend(newMessage)}\n  user={{ _id: 1, name: 'User Test' }}\n  renderBubble={renderBubble}\n  placeholder=\"Type your message here...\"\n/>\n```\n\nPreviously the placeholder text says:\n\n<img src='https://miro.medium.com/max/636/1*2lsV60N_T2aPPFeRTmEYcA.png' />\n\nAfter adding the `placeholder` prop, it looks like:\n\n<img src='https://miro.medium.com/max/654/1*JaJ8K1w8W2pbud6i9Tj7qw.png' />\n\nYou can add the prop `showUserAvatar` to always display the user avatar of the current user.\n\n```js\n<GiftedChat\n  messages={messages}\n  onSend={newMessage => handleSend(newMessage)}\n  user={{ _id: 1, name: 'User Test' }}\n  renderBubble={renderBubble}\n  placeholder=\"Type your message here...\"\n  showUserAvatar\n/>\n```\n\n<img src='https://miro.medium.com/max/744/1*ZmQvR95wG7tAGdPtbdtNtg.png' />\n\nRight now, the send button only appears when the user is typing a message. Add the prop `alwaysShowSend` to always show the send button to the current user.\n\n```js\n<GiftedChat\n  messages={messages}\n  onSend={newMessage => handleSend(newMessage)}\n  user={{ _id: 1, name: 'User Test' }}\n  renderBubble={renderBubble}\n  placeholder=\"Type your message here...\"\n  showUserAvatar\n  alwaysShowSend\n/>\n```\n\n<img src='https://miro.medium.com/max/748/1*390BD7LTZ5G2Ew_h8BYQrw.png' />\n\n## Add a custom send button\n\nYou can also modify this send button to show a custom text or icon. Let us do that to show a custom send icon. This is going to be done in the following steps.\n\n- Import the `Send` component form Gifted chat API.\n- Import `IconButton` from `react-native-paper`.\n- INside the functional component `RoomScreen`, add a helper method `renderSend` that is going to return the `IconButton` component.\n- Add the prop `renderSend` to `<GiftedChat/>`.\n- Add corresponding styles if any.\n\n```js\n// Step 1: import Send\nimport { GiftedChat, Bubble, Send } from 'react-native-gifted-chat';\n// Step 2: import IconButton\nimport { IconButton } from 'react-native-paper';\nimport { View, StyleSheet } from 'react-native';\n\nexport default function RoomScreen() {\n  // ...\n\n  // Step 3: add a helper method\n\n  function renderSend(props) {\n    return (\n      <Send {...props}>\n        <View style={styles.sendingContainer}>\n          <IconButton icon=\"send-circle\" size={32} color=\"#6646ee\" />\n        </View>\n      </Send>\n    );\n  }\n\n  return (\n    <GiftedChat\n      messages={messages}\n      onSend={newMessage => handleSend(newMessage)}\n      user={{ _id: 1, name: 'User Test' }}\n      renderBubble={renderBubble}\n      placeholder=\"Type your message here...\"\n      showUserAvatar\n      alwaysShowSend\n      // Step 4: add the prop\n      renderSend={renderSend}\n    />\n  );\n}\n\n// Step 5: add corresponding styles\nconst styles = StyleSheet.create({\n  sendingContainer: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\n```\n\nHere is the output you are going to get after this step.\n\n<img src='https://miro.medium.com/max/742/1*qol2YSd4FJH13CP_NWep1g.png' />\n\n## Add a scroll to the bottom button\n\nRight now, in the Chat UI, there is no way for the current user to scroll to the latest message. They have to manually scroll down to see the latest message in the thread. Here is a demo of the problem.\n\n<img src='https://miro.medium.com/max/684/1*XSF9AJNiqT08s1mBiJxvDQ.gif' />\n\nThis can be solved by adding prop `scrollToBottom`.\n\n```js\n<GiftedChat\n  messages={messages}\n  onSend={newMessage => handleSend(newMessage)}\n  user={{ _id: 1, name: 'User Test' }}\n  renderBubble={renderBubble}\n  placeholder=\"Type your message here...\"\n  showUserAvatar\n  alwaysShowSend\n  renderSend={renderSend}\n  scrollToBottom\n/>\n```\n\nTake a look at the down caret sign at the right side of the app shown below.\n\n<img src='https://miro.medium.com/max/700/1*5wo3Pu65wxWdATlsTxqs3A.png' />\n\nThis is not pleasing at all with the current background of the screen. Let us modify this button with a custom background. This can be done in three simple steps.\n\n- Add a helper method inside `RoomScreen` functional component and call this helper method `scrollToBottomComponent()`. Use `IconButton` component from `react-native-paper` to customize this button.\n- Add the prop `scrollToBottomComponent` to `<GiftedChat />`.\n- Add corresponding styles to the `styles` object.\n\n```js\nexport default function RoomScreen() {\n  // ...\n\n  // Step 1: add helper method\n\n  function scrollToBottomComponent() {\n    return (\n      <View style={styles.bottomComponentContainer}>\n        <IconButton icon=\"chevron-double-down\" size={36} color=\"#6646ee\" />\n      </View>\n    );\n  }\n\n  return (\n    <GiftedChat\n      messages={messages}\n      onSend={newMessage => handleSend(newMessage)}\n      user={{ _id: 1, name: 'User Test' }}\n      renderBubble={renderBubble}\n      placeholder=\"Type your message here...\"\n      showUserAvatar\n      alwaysShowSend\n      renderSend={renderSend}\n      // Step 2: add the prop\n      scrollToBottomComponent={scrollToBottomComponent}\n    />\n  );\n}\n\n// Step 3: add corresponding styles\nconst styles = StyleSheet.create({\n  // rest remains same\n  bottomComponentContainer: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\n```\n\nHere is the output.\n\n<img src='https://miro.medium.com/max/684/1*dDTq0Wpr_aFMyN_RWttPIg.gif' />\n\n## Add a loading spinner when the room screen initializes\n\nInitializing a new screen or in the current case, a chat room may take some time. It is good practice to add a loading indicator to convey the message to the user when they enter the chat room. This can be done by adding a prop called `renderLoading` which returns an `ActivityIndicator` from `react-native` core API.\n\n- Import the `ActivityIndicator` from `react-native` core API.\n- Add helper method `renderLoading()` to functional component `RoomScreen`.\n- Add the prop `renderLoading` to `<GiftedChat />`.\n- Add corresponding styles.\n\n```js\n// Step 1: import ActivityIndicator\nimport { ActivityIndicator, View, StyleSheet } from 'react-native';\n\nexport default function RoomScreen() {\n  // ...\n\n  // Step 2: add a helper method\n\n  function renderLoading() {\n    return (\n      <View style={styles.loadingContainer}>\n        <ActivityIndicator size=\"large\" color=\"#6646ee\" />\n      </View>\n    );\n  }\n\n  return (\n    <GiftedChat\n      messages={messages}\n      onSend={newMessage => handleSend(newMessage)}\n      user={{ _id: 1, name: 'User Test' }}\n      renderBubble={renderBubble}\n      placeholder=\"Type your message here...\"\n      showUserAvatar\n      alwaysShowSend\n      renderSend={renderSend}\n      scrollToBottomComponent={scrollToBottomComponent}\n      // Step 3: add the prop\n      renderLoading={renderLoading}\n    />\n  );\n}\n\n// Step 4: add corresponding styles\nconst styles = StyleSheet.create({\n  // rest remains same\n  loadingContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n```\n\nOn the current screen you might see a loading indicator when you refresh the app for the first time or when the screen initializes for the first time.\n\n<img src='https://miro.medium.com/max/684/1*Ztwt_qL30dreUv_JMvhhwg.gif' />\n\n## What's Next?\n\nIn [part 5 of this series](https://amanhimself.dev/blog/chat-app-with-react-native-part-5), we are going to create messages in real-time using the Firestore database. We will be covering how using react-navigation you can get the current room's id. Then, use it with the current user from the `AuthContext` we created earlier, to add real-time message information such as a text field and a timestamp associated with it.\n\nWe will then add another real-time feature to display the latest message on the home screen under each room name's description using Firestore queries.\n\nYou can find the complete source code for this project at [this Github repo](https://github.com/amandeepmittal/react-native-examples/tree/master/ChatApp).\n\n---\n\n👉 Here is a list of resources used in this tutorial:\n\n- [React Native Gifted Chat module](https://github.com/FaridSafi/react-native-gifted-chat)\n- [Props available for `react-native-gifted-chat`](https://github.com/FaridSafi/react-native-gifted-chat#props)\n\n## Further Reading\n\n- [React - Separation of Concerns by Andrei Calazans](https://www.g2i.co/blog/react-separation-of-concerns)\n\n[Originally Published at Heartbeat.Fritz.ai](https://heartbeat.fritz.ai/chat-app-with-react-native-part-4-create-chat-ui-screens-with-react-native-gifted-chat-7ef428a60d30)\n",
            "url": "https://amanhimself.dev//blog/chat-app-with-react-native-part-4",
            "title": "Chat app with React Native (part 4) - A guide to create Chat UI Screens with react-native-gifted-chat",
            "summary": "Chat app with React Native (part 4) - A guide to create Chat UI Screens with react-native-gifted-chat",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/how-to-use-react-native-image-picker",
            "content_html": "---\ntitle: 'An in-depth guide on how to use React Native Image Picker'\ndate: '2020-04-27'\nslug: 'how-to-use-react-native-image-picker'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://blog.crowdbotics.com/how-to-use-react-native-image-picker/'\n---\n\nReact Native as a framework to develop cross-platform mobile apps has few options to select an image from a user's mobile phone gallery or camera and perform further actions on it. One module that does that is called [`react-native-image-picker`](https://github.com/react-native-community/react-native-image-picker).\n\nThis module is maintained by React Native community and is also one of the reasons I highly recommend this module for you to use. It uses native UI to select a photo or a video from the mobile phone's library or the camera of that device.\n\nIn this tutorial, let us start from basics on how to integrate this module for both iOS and Android platforms in a React Native app. Then proceed further to use this module by having a look at some of the common ways to solve different problems when developing an app.\n\n## What you need to follow this tutorial?\n\nTo follow this tutorial, ensure your dev environment includes the following required packages:\n\n- [Node.js above `10.x.x`](https://nodejs.org/en/) installed on your local machine\n- [watchman](https://facebook.github.io/watchman/) the file watcher, installed\n- `react-native-cli` installed through npm or access via npm/yarn or [npx](https://github.com/react-native-community/cli#using-npx-recommended)\n- [cocoapods](https://cocoapods.org/) for iOS only\n- Do note that the following tutorial is going to use the [react-native version `0.62.x`](http://reactnative.dev/). Please make sure you’re using a version of React Native above `0.60.x`.\n\nFor a complete walk-through on setting up a development environment for React Native, you can go through the [official documentation here](https://reactnative.dev/docs/getting-started).\n\n## Create a new react native app\n\nStart by creating a new React Native app. Open a terminal window and execute the following command. I am going to use npx to access the latest React Native CLI version. After the project directory is created, please make sure that you navigate inside the directory.\n\n```shell\nnpx react-native init rnImagePickerExample\n\n# navigate to project directory\ncd rnImagePickerExample\n\n# after navigating inside the directory\n# install pods for iOS development\n\nnpx pod-install\n```\n\n> Thanks to awesome open-source developers at [Expo](http://expo.io/) [pod-install](https://github.com/expo/expo-cli/tree/master/packages/pod-install) is an awesome package that lets you install Cocapods essential to build and run react-native apps for iOS. You don't have to dwell inside the `ios/` directory and navigate back to the root project. It takes care of that extra step.\n\nBuild the app for the specific mobile OS you are building the app for by running either of the two commands as below:\n\n```shell\n# for iOS\nnpx react-native run-ios\n\n# for android\nnpx react-native run-android\n```\n\nGo to the simulator or the device you have connected to run this app and you are going to get default React Native app.\n\n<img src='https://crowdbotics.ghost.io/content/images/2020/04/cb1-1.png' />\n\nCheers! You have created a new React Native app. Let us now get started with this tutorial.\n\n## Install and configure react-native-image-picker\n\nStart by running the below command from a terminal window to install the image picker module.\n\n```shell\nyarn add react-native-image-picker\n```\n\nOnce you have done this step, you are going to get a success message in your terminal window as shown below. After installing pods, you have to make sure to **add permissions**. If you do not add this step, the app might crash or won't work when using `react-native-image-picker`.\n\n### iOS permissions\n\nFor iOS, open `/ios/rnImagePickerExample/Info.plist` file and the following:\n\n```c\n<plist version=\"1.0\">\n  <dict>\n    // ...\n    // add the following\n    <key>NSPhotoLibraryUsageDescription</key>\n    <string>$(PRODUCT_NAME) would like access to your photo gallery</string>\n    <key>NSCameraUsageDescription</key>\n    <string>$(PRODUCT_NAME) would like to use your camera</string>\n    <key>NSPhotoLibraryAddUsageDescription</key>\n    <string>$(PRODUCT_NAME) would like to save photos to your photo gallery</string>\n    <key>NSMicrophoneUsageDescription</key>\n    <string>$(PRODUCT_NAME) would like to use your microphone (for videos)</string>\n  </dict>\n</plist>\n```\n\nThere is an essential step to make sure you ask for the right permission with the right message, especially if you are looking forward to publishing your app on the store.\n\n### CocoaPods installation\n\nAnother necessary step to make this app run on iOS is to install Cocoapods for the image picker library we have just installed. After the release of React Native 0.60, the team behind the framework introduced auto-linking so we do not require to link the library. This is \"auto-linking\" is done by installing pods.\n\n```shell\nnpx pod-install\n```\n\n<img src='https://crowdbotics.ghost.io/content/images/2020/04/cb2-1.png' />\n\nMake sure to run the build command mentioned in the previous section to run the app again after this step.\n\n### Android permissions\n\nSimilarly, for Android, you have to add the required permissions in the file `/android/app/src/main/AndroidManifest.xml`. The first permission is to access the device's camera and the second permission is to read or write to storage. This second option for the current demo app means to allow us to choose the image from the device's image gallery.\n\n```xml\n<uses-permission android:name=\"android.permission.CAMERA\" />\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n```\n\nThat's it to install and configure an image picker library in a react native app. For more information check out official doc [here](https://github.com/react-native-community/react-native-image-picker/blob/master/docs/Install.md).\n\n## Create a simple image picker screen component\n\nThe advantage of the React Native Image Picker library is the number of options it provides in the options it provides for you set and use in your app. The simplest options like changing the title of the picker button, or the cancel button, setting the max height and width of the image picked, there are some advance options such as skipBack and so on that are useful when uploading or communicating with a backend service.\n\nStart by creating a simple image picker screen component. Make sure you are at the root location of your project to follow these steps.\n\n- Create a new directory called `src`.\n- Inside `src` create a new sub-directory to store all screen components called `screens`. This is a common convention to keep all screen components inside a React Native app.\n- Inside the sub-directory create the screen component file called `SimpleImagePicker.js` as well as a global a style file called `Styles.js`.\n\nInside the `Styles.js` let us define some basic styles using `StyleSheet` object from React Native core API. In the snippet below, you are also going to find some hex color codes that are going to be used throughout this tutorial. Feel free to change these values as per your preference.\n\n```js\n// Global shared styles for screens\n\nimport { StyleSheet } from 'react-native';\n\nexport const STYLES = StyleSheet.create({\n  flex: {\n    flex: 1\n  },\n  centerContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontSize: 22\n  }\n});\n\nexport const COLORS = {\n  primaryDark: '#22212c',\n  primaryLight: '#f8f8f2',\n  primaryRed: '#ff5555',\n  primaryPink: '#ff80bf',\n  primaryYellow: '#ffff80',\n  primaryOrange: '#ff9580'\n};\n```\n\nTypically you define these types of styles, as mentioned in the above code snippet, for a particular screen. But if you are planning to have more than one screen component, you can share styles by creating a global file.\n\nNext, inside `SimpleImagePicker.js` file, start by importing necessary statements as well as styles that you have just created.\n\nThen create a basic component that displays a `<Text>` inside the functional component `SimpleImagePicker()`.\n\n```js\nimport React, { useState } from 'react';\nimport { View, Text } from 'react-native';\nimport { STYLES, COLORS } from './Styles';\n\nexport default function SimpleImagePicker() {\n  const [imageSource, setImageSource] = useState(null);\n  return (\n    <View\n      style={[\n        STYLES.flex,\n        STYLES.centerContainer,\n        { backgroundColor: COLORS.primaryDark }\n      ]}\n    >\n      <Text style={[STYLES.title, { color: COLORS.primaryLight }]}>\n        Simple Image Picker\n      </Text>\n    </View>\n  );\n}\n```\n\nThe state variable `imageSource` in the above snippet is going to store the value of the URI or the source of the image on the device when a user chooses an image.\n\nTo see this screen component in action, one last step left is to modify the `App.js` file as shown below.\n\n```js\nimport React from 'react';\nimport { StatusBar } from 'react-native';\nimport SimpleImagePicker from './src/screens/SimpleImagePicker';\n\nexport default function () {\n  return (\n    <>\n      <StatusBar barStyle=\"light-content\" />\n      <SimpleImagePicker />\n    </>\n  );\n}\n```\n\nGo back to a simulator or the physical device you are using to run this app and you are going to be welcomed by the following screen.\n\n<img src='https://crowdbotics.ghost.io/content/images/2020/04/cb3-1.png' />\n\n## How to pick an image?\n\nIn this section let us get create a handler method that is going to allow the user to pick an image. To start make sure you update the import statements by importing core components from React Native such as `TouchableOpacity` and `Alert`. Also, import `ImagePicker` from `react-native-image-picker` library.\n\nThen inside, the screen component creates a new handler method called `selectImage()`. This method is going to trigger a button on the screen when the user wants to select an image from the device's library from `<TouchableOpacity>`.\n\nInside this method, you are going to an `options` object with some primary options like the title of the image picker, the maximum width, and height of an image, and setting storage options to not backup an image selected. This `options` object is used for customization and its not mandatory. This object is also passed as the first argument to the method that actually selects an image.\n\n`ImagePicker` library has a method called `showImagePicker` which accepts an object called `response` as the second argument. This method's only job is to display the image picker. It shows an alert box when the button is pressed to select an image.\n\nThe `response` object is the most important. It has properties to determine like when the user cancels the process of picking an image from the library or there is an error in the process of picking an image, the URI of the local file asset select by the user, and so on.\n\nWe are going to use some of the basic options like `did cancel`, `error`, `customButton`, and `uri`.\n\nModify the screen component file as shown below.\n\n```js\nimport React, { useState } from 'react';\nimport { View, Text, TouchableOpacity, Alert } from 'react-native';\nimport { STYLES, COLORS } from './Styles';\nimport ImagePicker from 'react-native-image-picker';\n\nexport default function SimpleImagePicker() {\n  const [imageSource, setImageSource] = useState(null);\n\n  function selectImage() {\n    let options = {\n      title: 'You can choose one image',\n      maxWidth: 256,\n      maxHeight: 256,\n      storageOptions: {\n        skipBackup: true\n      }\n    };\n\n    ImagePicker.showImagePicker(options, response => {\n      console.log({ response });\n\n      if (response.didCancel) {\n        console.log('User cancelled photo picker');\n        Alert.alert('You did not select any image');\n      } else if (response.error) {\n        console.log('ImagePicker Error: ', response.error);\n      } else if (response.customButton) {\n        console.log('User tapped custom button: ', response.customButton);\n      } else {\n        let source = { uri: response.uri };\n        console.log({ source });\n      }\n    });\n  }\n\n  return (\n    <View\n      style={[\n        STYLES.flex,\n        STYLES.centerContainer,\n        { backgroundColor: COLORS.primaryDark }\n      ]}\n    >\n      <Text style={[STYLES.title, { color: COLORS.primaryLight }]}>\n        Simple Image Picker\n      </Text>\n      <TouchableOpacity\n        onPress={selectImage}\n        style={[\n          STYLES.selectButtonContainer,\n          { backgroundColor: COLORS.primaryLight }\n        ]}\n      >\n        <Text style={STYLES.selectButtonTitle}>Pick an image</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n```\n\nAlso, modify the `Styles.js` file and add the styles for the new button you have just created.\n\n```js\nexport const STYLES = StyleSheet.create({\n  flex: {\n    flex: 1\n  },\n  centerContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontSize: 22\n  },\n  // add below\n  selectButtonContainer: {\n    margin: 20,\n    borderRadius: 5\n  },\n  selectButtonTitle: {\n    padding: 10,\n    fontSize: 18\n  }\n});\n```\n\nNow go back to the simulator and you are going to see the new button we have just added is being displayed.\n\n<img src='https://crowdbotics.ghost.io/content/images/2020/04/cb4-1.png' />\n\nClick the button and there is going to be an alert box pop up.\n\n<img src='https://crowdbotics.ghost.io/content/images/2020/04/cb5-1.png' />\n\nIt gives you the option to select an image from the library or take a photo from the device's camera (Since I am using a simulator, taking a photo is not possible).\n\nAt this moment, if you press `Cancel`, you are going to see another alert box (that we intentionally added to the screen component).\n\n<img src='https://crowdbotics.ghost.io/content/images/2020/04/cb6-1.png' />\n\nThe console statements are also being logged correctly by the metro bundler terminal window. You can verify that as shown in the image below.\n\n<img src='https://crowdbotics.ghost.io/content/images/2020/04/cb7.png' />\n\nTo make the alert box disappear, click the button `Ok`. Click the UI button to select an image again, and this time, choose an image from the library.\n\nThe first thing it is going to do is to ask for permission. This only happens for the first time when the user is using the app.\n\n<img src='https://crowdbotics.ghost.io/content/images/2020/04/cb8.png' />\n\nNext, select an image if you have in the library as shown below.\n\n<img src='https://crowdbotics.ghost.io/content/images/2020/04/cb9.png' />\n\n<img src='https://crowdbotics.ghost.io/content/images/2020/04/cb10.png' />\n\nAfter you have selected the image, nothing happens. This is because we still have to write the code to display the image. For now, go to the terminal window and you are going to the `response` object as well `source` object with data and information about the image.\n\n<img src='https://crowdbotics.ghost.io/content/images/2020/04/cb11-1.png' />\n\nIf it is not visible or understandable, take a look at the JSON snippet below.\n\n```json\n{\n  \"response\": {\n    \"data\": \"/9j/4AAQSkZJRgABAQAAAQABAAD/\n    4gIoSUNDX1BST0ZJTEUAAQEAAAIYAAAAAAIQAABtbnRyUkdC\n    IFhZWiAAAAAAAAAAAAAAAABhY3NwAAAAAAAAAAAAAAAAAAAA\n    AAAAAAAAAAAAAAAAAQAA9tYAAQAAAADTLQAAAAAAAAAAAAAA\n    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n    AAAAAAlkZXNjAAAA8AAAAHRyWFlaAAABZAAAABRnWFlaAAAB\n    eAAAABRiWFlaAAABjAAAABRyVFJDAAABoAAAAChnVFJDAAAB\n    oAAAAChiVFJDAAABoAAAACh3dHB0AAAByAAAABRjcHJ0AAAB\n    3AAAADxtbHVjAAAAAAAAAAEAAAAMZW5VUwAAAFgAAAAcAHMA\n    UgBHAEIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n    AAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvogAAOPUAAAOQWFla\n    IAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA\n    +EAAC2z3BhcmEAAAAAAAQAAAACZmYAAPKnAAANWQAAE9AAAA\n    pbAAAAAAAAAABYWVogAAAAAAAA9tYAAQAAAADTLW1sdWMAAA\n    AAAAAAAQAAAAxlblVTAAAAIAAAABwARwBvAG8AZwBsAGUAIA\n    BJAG4AYwAuACAAMgAwADEANv/\n    bAEMAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQE\n    BAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAf/\n    bAEMBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQE\n    BAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAf/\n    AABEIAQABAAMBIgACEQEDEQH/\n    xAAVAAEBAAAAAAAAAAAAAAAAAAAAC//\n    EABQQAQAAAAAAAAAAAAAAAAAAAAD/\n    xAAUAQEAAAAAAAAAAAAAAAAAAAAA/\n    8QAFBEBAAAAAAAAAAAAAAAAAAAAAP/\n    aAAwDAQACEQMRAD8An/\n    gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//2Q==\",\n    \"fileName\": \"image-4be54ecf-83c7-4819-bf37-b549cd3efa71.jpg\",\n    \"fileSize\": 1222,\n    \"height\": 256,\n    \"isVertical\": true,\n    \"originalRotation\": 0,\n    \"path\": \"/storage/emulated/0/Pictures/image-4be54ecf-83c7-4819-bf37-b549cd3efa71.jpg\",\n    \"type\": \"image/jpeg\",\n    \"uri\": \"file:///storage/emulated/0/Pictures/\n    image-4be54ecf-83c7-4819-bf37-b549cd3efa71.jpg\",\n    \"width\": 256\n  }\n}\n```\n\nThe `response` object returns details related to the image such as:\n\n- `data`: base64 encoded image data generated\n- `fileSize`: the size of the file\n- `fileName`: the name of the file name\n- `type`: media type such as `image/jpeg`\n- `uri`: which is also the value of the `source` object\n- the `width` and `height` but with dimensions that we passed as the properties of `options` object and not the actual image size (which is `500px x 500px`).\n\nYou can stop the base64 data generation of the image by adding another property called `noData: true` in `options` object and it will stop generating the base64 if there is no requirement.\n\n```js\nlet options = {\n  // rest of the properties remain same\n  noData: true\n};\n```\n\nAfter adding this property, the new `response` object won't have a `data` field.\n\n<img src='https://crowdbotics.ghost.io/content/images/2020/04/cb12-1.png' />\n\nThe type of the source is essential for the image picker to know such as if you only want the user to select an image instead of a video file, then you can set another property called `mediaType` at `options` object.\n\n```js\nlet options = {\n  // rest of the properties remain same\n  mediaType: 'photo' // other values 'video', 'mixed'\n};\n```\n\nBy setting the value to `mixed` for this property type will allow the user to select either an image or a video. There are other options on how you can control the user's input when selecting an image or a video that you can find in the official documentation [here](https://github.com/react-native-community/react-native-image-picker/blob/master/docs/Reference.md#options) of the image picker library.\n\n## Difference between launchImageLibrary() and showImagePicker()?\n\nThere are separate functions provided by `ImagePicker` to use for selected methods:\n\n- `launchCamera(options?, (response) => {})`\n- `launchImageLibrary(options?, (response) => {})`\n\nUsing these methods eliminates the need of showing the alert box to select an option when choosing an image.\n\n<img src='https://crowdbotics.ghost.io/content/images/2020/04/cb5-2.png' />\n\nThese methods are for a direct use case such as when you only want the user to select the image either from the device's library or take a photo from the device's camera. You want to give the user only one option from these two, then you should use one of these methods.\n\nThe working of either of these methods is similar to `showImagePicker`. Let us try one of them. Replace the method `showImagePicker()` with `launchImageLibrary()` in the screen component file.\n\n```js\nImagePicker.launchImageLibrary(options, response => {\n  console.log({ response });\n\n  if (response.didCancel) {\n    console.log('User cancelled photo picker');\n    Alert.alert('You did not select any image');\n  } else if (response.error) {\n    console.log('ImagePicker Error: ', response.error);\n  } else if (response.customButton) {\n    console.log('User tapped custom button: ', response.customButton);\n  } else {\n    let source = { uri: response.uri };\n    console.log({ source });\n  }\n});\n```\n\nNow go back to the device and you are going to notice only one difference. The image library opens as soon as the button from the app is clicked.\n\n<img src='https://crowdbotics.ghost.io/content/images/2020/04/cb13.gif' />\n\nThe rest of the process is going to be the same.\n\n## Display the image\n\nIn this section, let us complete the demo app by displaying the image when the user picks an image from the library. We are also going to display a placeholder image when no image is being selected by the user.\n\nTo start you are going to import the `Image` from react native core API. Then update the handler function by setting the source uri of the image to the state variable `image source` we defined in the earlier section.\n\nLastly, you update the JSX of the component.\n\nHere is the complete code snippet for the `SimpleImagePicker` screen component. We are going to conditionally render when to show the placeholder image from a local asset file and when to display the image that the user has picked.\n\n```js\nimport React, { useState } from 'react';\nimport { View, Text, TouchableOpacity, Alert, Image } from 'react-native';\nimport { STYLES, COLORS } from './Styles';\nimport ImagePicker from 'react-native-image-picker';\n\nexport default function SimpleImagePicker() {\n  const [imageSource, setImageSource] = useState(null);\n\n  function selectImage() {\n    let options = {\n      title: 'You can choose one image',\n      maxWidth: 256,\n      maxHeight: 256,\n      noData: true,\n      mediaType: 'photo',\n      storageOptions: {\n        skipBackup: true\n      }\n    };\n\n    ImagePicker.launchImageLibrary(options, response => {\n      if (response.didCancel) {\n        console.log('User cancelled photo picker');\n        Alert.alert('You did not select any image');\n      } else if (response.error) {\n        console.log('ImagePicker Error: ', response.error);\n      } else if (response.customButton) {\n        console.log('User tapped custom button: ', response.customButton);\n      } else {\n        let source = { uri: response.uri };\n\n        // ADD THIS\n        setImageSource(source.uri);\n      }\n    });\n  }\n\n  return (\n    <View\n      style={[\n        STYLES.flex,\n        STYLES.centerContainer,\n        { backgroundColor: COLORS.primaryDark }\n      ]}\n    >\n      <Text style={[STYLES.title, { color: COLORS.primaryLight }]}>\n        Simple Image Picker\n      </Text>\n      {/* ADD THIS */}\n      <View style={STYLES.imageContainer}>\n        {imageSource === null ? (\n          <Image\n            source={require('../assets/placeholderimage.jpg')}\n            style={STYLES.imageBox}\n            resizeMode=\"contain\"\n          />\n        ) : (\n          <Image\n            source={{ uri: imageSource }}\n            style={STYLES.imageBox}\n            resizeMode=\"contain\"\n          />\n        )}\n      </View>\n      <TouchableOpacity\n        onPress={selectImage}\n        style={[\n          STYLES.selectButtonContainer,\n          { backgroundColor: COLORS.primaryLight }\n        ]}\n      >\n        <Text style={STYLES.selectButtonTitle}>Pick an image</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n```\n\nAlso, update the `Styles.js` file:\n\n```js\nexport const STYLES = StyleSheet.create({\n  // rest of the styles remain same\n  // ADD BELOW\n  imageContainer: {\n    marginVertical: 20,\n    borderWidth: 5,\n    borderColor: '#ff5555'\n  },\n  imageBox: {\n    width: 256,\n    height: 256\n  }\n});\n```\n\nGo back to the app and when an image is not picked, you are going to see the following result.\n\n<img src='https://crowdbotics.ghost.io/content/images/2020/04/cb14.png' />\n\nWhen an image is selected, it is going to be displayed instead of the placeholder image.\n\n<img src='https://crowdbotics.ghost.io/content/images/2020/04/cb15-1.png' />\n\n## Conclusion\n\nIn this post, you have learned how to configure and implement `react-native-image-picker` library to allow a user to pick an image from their device library. When on a physical device, try testing the above code snippet using the device's Camera. The core functionalities discussed in this post are important to customize and advance further to add more functionalities.\n\nHere is the link to the complete [API](https://github.com/react-native-community/react-native-image-picker/blob/master/docs/Reference.md#the-response-object) for `react-native-image-picker` library.\n\nThe complete code for this tutorial is available at this GitHub repo [here](https://github.com/amandeepmittal/react-native-examples/tree/master/rnImagePickerExample).\n\n[Originally Published at Crowdbotics](https://crowdbotics.ghost.io//how-to-use-react-native-image-picker/).\n",
            "url": "https://amanhimself.dev//blog/how-to-use-react-native-image-picker",
            "title": "An in-depth guide on how to use React Native Image Picker",
            "summary": "An in-depth guide on how to use React Native Image Picker",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/chat-app-with-react-native-part-3",
            "content_html": "---\ntitle: 'Chat app with React Native (part 3) - Create Firestore collections to store chat rooms'\ndate: '2020-04-21'\nslug: 'chat-app-with-react-native-part-3'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://heartbeat.fritz.ai/chat-app-with-react-native-part-3-add-firestore-to-create-and-store-chat-rooms-94f0c7e09e9d'\n---\n\n![cover](https://i.imgur.com/ROYjoYo.jpg)\n\nIn [part 2](https://amanhimself.dev/blog/chat-app-with-react-native-part-2) of this series, we made progress with the chat app by adding email authentication using the real-time auth service from Firebase. This ensures that we have a system in place to authenticate users.\n\nIn part 3, let's extend our progress by creating and storing chat rooms in real-time using Firestore data storage, provided by the Firebase. We'll continue to explore different tips and best practices for using `react-navigation`. For example, we'll create a modal screen and expand the home stack created in the previous post.\n\n## How to share common header options styles using screenOptions\n\nLet us start with a simple yet a very common technique to modify header bar options across various screens in a stack navigator. This technique is a common practice that you will find using yourself with `react-navigation`.\n\nStart by modifying the header in the home stack such that any route that is wrapped by `HomeStack` navigator is going to have a similar background color, header tint color, and font size.\n\nThis is a common practice to configure the header bar and share style properties among different routes in the same stack navigator.\n\nOpen `src/navigation/HomeStack.js` file and add a `screenOptions` prop to `Stack.Navigator`.\n\n```js\nexport default function HomeStack() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerStyle: {\n          backgroundColor: '#6646ee'\n        },\n        headerTintColor: '#ffffff',\n        headerTitleStyle: {\n          fontSize: 22\n        }\n      }}\n    >\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n    </Stack.Navigator>\n  );\n}\n```\n\nGo back to the simulator and you are going to get the following result.\n\n<img src='https://miro.medium.com/max/940/1*Jxk6KkKBzhv_rc9kXD6iMA.png' />\n\n## Add a separate stack navigator for modal screen\n\nIn this section, you are going to create a modal screen that will allow the user in the app to create a new chat room. Later in this tutorial, the name of the chat room entered from this screen is going to be stored in the Firestore collection.\n\nA _modal screen_ displays the content that temporarily blocks interactions with the main view. It is like a popup and usually has a different transition in terms of opening and closing of the screen. This mode of the screen is generally used to display one specific piece of information.\n\nHere's a flowchart to help visualize the navigation flow we're trying to achieve by the end of this section.\n\n<img src='https://miro.medium.com/max/1400/1*kU6S7zzWSrtwgkNI0eygiQ.jpeg' />\n\nStart by creating a new screen file called `AddRoomScreen.js` inside `src/screens` directory with the following content.\n\n```js\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport FormButton from '../components/FormButton';\n\nexport default function AddRoomScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Create a new chat room</Text>\n      <FormButton\n        mode=\"contained\"\n        title=\"Close Modal\"\n        onPress={() => navigation.goBack()}\n      />\n    </View>\n  );\n}\n```\n\nRight now, focus adding this modal screen to the Home stack navigator rather than its contents.\n\nAlso, add a temporary button to open the modal screen in the `HomeScreen.js` file.\n\n```js\nimport React, { useContext } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Title } from 'react-native-paper';\nimport { AuthContext } from '../navigation/AuthProvider';\nimport FormButton from '../components/FormButton';\n\nexport default function HomeScreen({ navigation }) {\n  const { user, logout } = useContext(AuthContext);\n\n  return (\n    <View style={styles.container}>\n      <Title>Home Screen</Title>\n      <Title>All chat rooms will be listed here</Title>\n      <Title>{user.uid}</Title>\n      <FormButton\n        modeValue=\"contained\"\n        title=\"Logout\"\n        onPress={() => logout()}\n      />\n      <FormButton\n        modeValue=\"contained\"\n        title=\"Add Room\"\n        onPress={() => navigation.navigate('AddRoom')}\n      />\n    </View>\n  );\n}\n```\n\nNow open `src/navigation/HomeStack.js` file. In order to keep the modal as a separate route from other home stack routes (such as `HomeScreen`), let us create two new stack navigators in this file.\n\nStart by importing the modal screen with the rest of the routes and create two new stack navigator instances. You can give a custom name to each instance.\n\n```js\n// ... rest of the import statements\nimport AddRoomScreen from '../screens/AddRoomScreen';\n\n// create two new instances\nconst ChatAppStack = createStackNavigator();\nconst ModalStack = createStackNavigator();\n```\n\nFrom the snippet, the `ChatAppStack` is going to contain those screens routes that are do not require the use of a modal screen and focus only on the chat app features.\n\n```js\nfunction ChatApp() {\n  return (\n    <ChatAppStack.Navigator\n      screenOptions={{\n        headerStyle: {\n          backgroundColor: '#6646ee'\n        },\n        headerTintColor: '#ffffff',\n        headerTitleStyle: {\n          fontSize: 22\n        }\n      }}\n    >\n      <ChatAppStack.Screen name=\"Home\" component={HomeScreen} />\n    </ChatAppStack.Navigator>\n  );\n}\n```\n\nThe Modal stack is going to wrap both the `ChatAppStack` and the modal screen as routes. Modify the exported `HomeStack` as below. Make sure to set the mode of `ModalStack.Navigator` to `modal` and `headerMode` to `none`.\n\n```js\nexport default function HomeStack() {\n  return (\n    <ModalStack.Navigator mode=\"modal\" headerMode=\"none\">\n      <ModalStack.Screen name=\"ChatApp\" component={ChatApp} />\n      <ModalStack.Screen name=\"AddRoom\" component={AddRoomScreen} />\n    </ModalStack.Navigator>\n  );\n}\n```\n\nGo to the simulator. You are going to find the `Add room` button on the home screen as shown below.\n\n<img src='https://miro.medium.com/max/940/1*pLjnE31zjSqkUwGiRS3ldA.png' />\n\nClick on the button and notice the transition when the modal screen pops up.\n\n<img src='https://miro.medium.com/max/684/1*iwaMYjCAkCv1Gf0UcnEiag.gif' />\n\n## How to add an icon in the header bar\n\nThe modal stack is working as per the requirement. But the way the user would navigate from the home screen to modal is not by clicking a button in the center of the home screen. This action is going to be done by clicking an icon button from the header.\n\n<img src='https://miro.medium.com/max/636/1*nA9W978m4sziQwKeepKSow.png' />\n\nLuckily, the `react-navigation` library provides props for us to implement this action without any hassle. Import `IconButton` from `react-native-paper` UI library inside the file `src/navigation/HomeStack.js`.\n\n```js\n// rest of the imports\nimport { IconButton } from 'react-native-paper';\n```\n\nThen add an `options` prop with a function such that you are able to pass `navigation` prop reference. Add the following code to the `HomeScreen` route.\n\n```js\n<ChatAppStack.Screen\n  name=\"Home\"\n  component={HomeScreen}\n  options={({ navigation }) => ({\n    headerRight: () => (\n      <IconButton\n        icon=\"message-plus\"\n        size={28}\n        color=\"#ffffff\"\n        onPress={() => navigation.navigate('AddRoom')}\n      />\n    )\n  })}\n/>\n```\n\nAlso, remove `FormButton` in `HomeScreen.js` you create in the previous section.\n\nHere is how the home screen in the simulator looks like after this step.\n\n<img src='https://miro.medium.com/max/940/1*x40CeNj7FEFO6Exg8mLa2Q.png' />\n\n## Complete the modal screen\n\nRight now the modal screen just displays a line of text and a close button but the real functionality this screen has to provide is to allow the user to enter the name of the chat room using an input field. Then, using a form button, add the chat room name in a Firestore collection.\n\nOpen `AddRoomScreen.js` and start by modifying the import statements.\n\n```js\nimport React, { useState } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { IconButton, Title } from 'react-native-paper';\nimport FormInput from '../components/FormInput';\nimport FormButton from '../components/FormButton';\n```\n\nThen, to add a chat room, define a state variable called `roomName` inside a functional component `AddRoomScreen`.\n\nTo modify the JSX returned from this component. Make sure to add a close button at the right corner of the screen and using custom components you can add the input field as well as the submit button.\n\n```js\nexport default function AddRoomScreen({ navigation }) {\n  const [roomName, setRoomName] = useState('');\n  // ... Firestore query will come here later\n\n  return (\n    <View style={styles.rootContainer}>\n      <View style={styles.closeButtonContainer}>\n        <IconButton\n          icon=\"close-circle\"\n          size={36}\n          color=\"#6646ee\"\n          onPress={() => navigation.goBack()}\n        />\n      </View>\n      <View style={styles.innerContainer}>\n        <Title style={styles.title}>Create a new chat room</Title>\n        <FormInput\n          labelName=\"Room Name\"\n          value={roomName}\n          onChangeText={text => setRoomName(text)}\n          clearButtonMode=\"while-editing\"\n        />\n        <FormButton\n          title=\"Create\"\n          modeValue=\"contained\"\n          labelStyle={styles.buttonLabel}\n          onPress={() => handleButtonPress()}\n          disabled={roomName.length === 0}\n        />\n      </View>\n    </View>\n  );\n}\n```\n\nDo not worry about the `handleButtonPress` method on `onPress` prop for `FormButton`. This is going to execute the Firestore query and that is what you are going to do from the next section.\n\nThe corresponding styles of the above component are defined as below.\n\n```js\nconst styles = StyleSheet.create({\n  rootContainer: {\n    flex: 1\n  },\n  closeButtonContainer: {\n    position: 'absolute',\n    top: 30,\n    right: 0,\n    zIndex: 1\n  },\n  innerContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  title: {\n    fontSize: 24,\n    marginBottom: 10\n  },\n  buttonLabel: {\n    fontSize: 22\n  }\n});\n```\n\nIf you go to the modal screen, you are going to get the following result.\n\n<img src='https://miro.medium.com/max/940/1*ylHD71PivqxothYaSrypfg.png' />\n\nHere is the complete flow of the `HomeStack` navigator so far.\n\n<img src='https://miro.medium.com/max/684/1*7d5TY6H9ZznNmdJ5QRG1UQ.gif' />\n\nThe **Create** button will remain disabled unless the user starts typing.\n\n## Add Firestore to the Chat app\n\nTo store messages as well as user information, let us use the Firestore data storage service from Firebase. Firestore has similarities to a NoSQL database (if you are familiar with NoSQL types).\n\nTo use the Firestore database, all you have to do is install the `@react-native-firebase/firestore` package and run the command to build the app again. Open up a terminal window and execute the following command.\n\n```shell\nyarn add @react-native-firebase/firestore\n\n# do not forget to install pods for ios\ncd ios / && pod install\n\n# after pods have been installed\ncd ..\n```\n\nDo note that, the Firestore package from `react-native-firebase` depends on two other packages:\n\n- `@react-native-firebase/app`\n- `@react-native-firebase/auth`\n\nThis means that these two packages are required to install to use Firestore. For the current app, you have already installed these packages so you do not have to install them again.\n\nThe last step in this section is to rebuild the app for each OS.\n\n```shell\n# for iOS\nnpx react-native run-ios\n\n# for Android\n\nnpx react-native run-android\n```\n\nThat's it to install Firestore.\n\n## Create a collection in firestore to store chat rooms\n\nEach chat room is going to contain `x` number of messages between different users. To store a chat room in the Firestore, let's create a collection called `THREADS`.\n\nStart by importing `firestore` in the `AddRoomScreen.js` file.\n\n```js\n// after other import statements\nimport firestore from '@react-native-firebase/firestore';\n```\n\nInside the functional component `AddHomeScreen` add a handler method called `handleButtonPress`.\n\nThis method is going to have the business logic to store the name of the chat room under the collection `THREADS`. The unique id of each chat room is going to be created by the Firestore itself.\n\n```js\nfunction handleButtonPress() {\n  if (roomName.length > 0) {\n    firestore()\n      .collection('THREADS')\n      .add({\n        name: roomName\n        }\n      })\n      .then(() => {\n        navigation.navigate('Home');\n      });\n  }\n}\n```\n\nGo back to the simulator and try to create a new chat room.\n\n<img src='https://miro.medium.com/max/684/1*hJ5PwM-DWhfRpunWSX4fYg.gif' />\n\nAfter that, go to the Firebase database console and verify if the `THREADS` collection has a room called `Room 1` or not.\n\n<img src='https://miro.medium.com/max/1400/1*HHM2H9Y2e2yIsDdBCk-8bg.png' />\n\n## Display a list of chat rooms on the home screen\n\nTo display chat rooms from Firestore you are going to make use of `FlatList` form React Native. Start by adding the following the import statements inside the `src/screens/HomeScreen.js` file.\n\n```js\nimport React, { useState, useEffect } from 'react';\nimport { View, StyleSheet, FlatList } from 'react-native';\nimport { List, Divider } from 'react-native-paper';\nimport firestore from '@react-native-firebase/firestore';\n\nimport Loading from '../components/Loading';\n```\n\nInside the functional component `HomeScreen`, define two state variables:\n\n- `threads` that is going to be used as the source of data for the FlatList component after the data has been fetched from the Firestore.\n- `loading` variable is going to keep track of whether the data is being fetched or not.\n\n```js\nexport default function HomeScreen() {\n  const [threads, setThreads] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const unsubscribe = firestore()\n      .collection('THREADS')\n      .onSnapshot(querySnapshot => {\n        const threads = querySnapshot.docs.map(documentSnapshot => {\n          return {\n            _id: documentSnapshot.id,\n            // give defaults\n            name: '',\n            ...documentSnapshot.data()\n          };\n        });\n\n        setThreads(threads);\n\n        if (loading) {\n          setLoading(false);\n        }\n      });\n\n    /**\n     * unsubscribe listener\n     */\n    return () => unsubscribe();\n  }, []);\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  // ...rest of the component\n}\n```\n\nUsing the hook `useEffect` in the above snippet you can query the Firestore to fetch the name of chat rooms from the collection `THREADS`.\n\nWhen the component loads, to fetch the existing chat rooms or in other words, to read the data from the Firestore, start by declaring a `unsubscribe` listener to the query. This listener is going to subscribe to any updates. These updates can be new or existing chat rooms. Declaring a listener here is important because when the screen unmounts, it is important to unsubscribe from this listener.\n\nUsing the `querySnapShot`, you are going fetch every document or the chat thread is going to be the part of the the state variable threads. At this point, data is returned from the query, as well as a default object that contains the `_id`(required as unique if for each item in the `FlatList` component), and the name of the chat room.\n\nHere is the complete JSX rendered by this component.\n\n```js\n<View style={styles.container}>\n  <FlatList\n    data={threads}\n    keyExtractor={item => item._id}\n    ItemSeparatorComponent={() => <Divider />}\n    renderItem={({ item }) => (\n      <List.Item\n        title={item.name}\n        description=\"Item description\"\n        titleNumberOfLines={1}\n        titleStyle={styles.listTitle}\n        descriptionStyle={styles.listDescription}\n        descriptionNumberOfLines={1}\n      />\n    )}\n  />\n</View>\n```\n\nThe [`Divider` component](https://callstack.github.io/react-native-paper/divider.html) is a lightweight separator provided by UI library `react-native-paper`. Here are the styles associated with the above JSX.\n\n```js\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#f5f5f5',\n    flex: 1\n  },\n  listTitle: {\n    fontSize: 22\n  },\n  listDescription: {\n    fontSize: 16\n  }\n});\n```\n\nGo back to the simulator device and you are going to get the following result.\n\n<img src='https://miro.medium.com/max/684/1*5owHh4tZ5mmOyVfsn9kOwA.gif' />\n\n## Conclusion\n\nThe main objective of this tutorial is to create and store chat room names in a Firestore cloud database collection as well as integrate the configure the Firestore in our current app. This objective has been completed among other tips and techniques to create a modal screen and share header bar modifications among different route screens.\n\n## What's Next?\n\nIn the [next part](https://amanhimself.dev/blog/chat-app-with-react-native-part-4) of this series, we are going to explore how to integrate and use [`react-native-gifted-chat`](https://github.com/FaridSafi/react-native-gifted-chat) which is one of the most important, open source, and actively maintained library to use when building a chat app using React Native. The \"out of the box\" features it provides in terms of mere props are so helpful and saves a ton of development time.\n\nYou can find the complete source code for this project at [this Github repo](https://github.com/amandeepmittal/react-native-examples/tree/master/ChatApp).\n\n👉 Here is a list of resources used in this tutorial:\n\n- Reactjs [Context API](https://reactjs.org/docs/context.html#reactcreatecontext)\n- [Firebase Authentication reference](https://invertase.io/oss/react-native-firebase/v6/auth/quick-start) from `react-native-firebase`\n- Getting started with stack navigator using `react-navigation` v5 [here](https://heartbeat.fritz.ai/getting-started-with-stack-navigator-using-react-navigation-5-in-react-native-and-expo-apps-4c516becaee1)\n",
            "url": "https://amanhimself.dev//blog/chat-app-with-react-native-part-3",
            "title": "Chat app with React Native (part 3) - Create Firestore collections to store chat rooms",
            "summary": "Chat app with React Native (part 3) - Create Firestore collections to store chat rooms",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/add-search-bar-to-a-flatlist-in-react-native",
            "content_html": "---\ntitle: 'How to add a Search bar in a FlatList in React Native apps'\ndate: '2020-04-16'\nslug: 'add-search-bar-to-a-flatlist-in-react-native'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://blog.crowdbotics.com/add-search-bar-flatlist-react-native-apps/'\n---\n\n![cover_image](https://i.imgur.com/zeVnUHd.png)\n\n> Originally published at [Crowdbotics.com](https://blog.crowdbotics.com/add-search-bar-flatlist-react-native-apps)\n\nThere are few ways to create scrollable lists in React Native. Two of the common ways available in React Native core are `ScrollView` and `FlatList` components. Each has its strength and in this tutorial, let us dive deep to create a search bar with `FlatList` component.\n\nThe final result you are going to achieve at the end of this tutorial is shown below.\n\n![ss8](https://i.imgur.com/a5FpiUm.gif)\n\n## Table of contents\n\n- Getting started\n- What is FlatList?\n- Basic usage of a FlatList component\n- Fetching data from Remote API in a FlatList\n- Adding a custom Separator to FlatList component\n- Adding a Search bar\n- Run the app\n- Add clear button to input text field\n- Conclusion\n\n## Getting started\n\nFor the demo we are going to create in this tutorial, I am going to use [Expo](https://expo.io/). You are free to choose and use anything between an Expo CLI or a `react-native-cli`.\n\nTo start, let us generate a React Native app using Expo CLI and then install the required dependency to have a charming UI for the app. Open up a terminal window and run the following commands in the order they are mentioned.\n\n```shell\nexpo init searchbarFlatList\n\ncd searchbarFlatList\n\nyarn install @ui-kitten/components @eva-design/eva lodash.filter\n\nexpo install react-native-svg\n```\n\n_Note_: The dependency `react-native-svg` is required as a peer dependency for the UI kitten library.\n\nUI Kitten is ready to use now. To check, everything has installed correctly, let us modify `App.js` file as the following snippet:\n\n```js\nimport React from 'react';\nimport { ApplicationProvider, Layout, Text } from '@ui-kitten/components';\nimport { mapping, light as lightTheme } from '@eva-design/eva';\n\nconst HomeScreen = () => (\n  <Layout style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n    <Text category=\"h1\">HOME</Text>\n  </Layout>\n);\n\nconst App = () => (\n  <ApplicationProvider mapping={mapping} theme={lightTheme}>\n    <HomeScreen />\n  </ApplicationProvider>\n);\n\nexport default App;\n```\n\nThe `ApplicationProvider` accepts two props, `mapping` and `theme`.\n\nTo run this demo, open up the terminal window and execute the following command.\n\n```shell\nexpo start\n```\n\nI am using an iOS simulator for the demo. Here is the output of the above code snippet.\n\n![ss1](https://i.imgur.com/TZ173Uv.png)\n\n## What is FlatList?\n\nThe component `FlatList` is an efficient way to create scrolling data lists in a React Native app. It has a simple API to work with and is more efficient and preferment with a large amount of information to display in comparison to its alternate.\n\nBy default, you can just pass in an array of data and this component will do its work. You do not have to take care of formatting the data too often.\n\n## Basic usage of a FlatList component\n\nThere are three primary props that a FlatList component requires to display a list of data:\n\n- `data`: an array of data that is used to create a list. Generally, this array is built of multiple objects.\n- `renderItem`: is a function that takes an individual element from the `data` array and renders it on the UI.\n- `keyExtractor`: it tells the list of data to use the unique identifiers or `id` for an individual element.\n\nTo get understand this pragmatically, let us build a mock an array of data and using `FlatList`, let us display it on our demo app. To start, import the following statements in `App.js` file.\n\n```js\nimport React from 'react';\nimport { FlatList, View, Text } from 'react-native';\n```\n\nThen, create an array of mock data.\n\n```js\nconst mockData = [\n  { id: '1', text: 'Expo 💙' },\n  { id: '2', text: 'is' },\n  { id: '3', text: 'Awesome!' }\n];\n```\n\nNow, modify the `HomeScreen` component with the following snippet:\n\n```js\nconst HomeScreen = () => (\n  <View\n    style={{\n      flex: 1,\n      paddingHorizontal: 20,\n      paddingVertical: 20,\n      marginTop: 40\n    }}\n  >\n    <FlatList\n      data={mockData}\n      keyExtractor={item => item.id}\n      renderItem={({ item }) => (\n        <Text style={{ fontSize: 22 }}>\n          {item.id} - {item.text}\n        </Text>\n      )}\n    />\n  </View>\n);\n```\n\nIf the Expo cli command to run the development server is still running, you are going to get the following result.\n\n![ss2](https://i.imgur.com/penUpT7.png)\n\n## Fetching data from Remote API in a FlatList\n\nYou can even play around with it. Try to fetch data from a real-time remote API and display them in the list instead of mock data. For a start, you can use a public API URL such as [Randomuser.me API](https://randomuser.me/api/). The result to obtain at the end of this section is displayed below.\n\n![ss3](https://i.imgur.com/cAwKEaD.png)\n\nOpen, `App.js` file and a state object with some properties to keep track of data from the Random User API. Also, do not forget to modify the import statements.\n\n```js\n// modify the import statements as below\nimport React from 'react';\nimport {\n  FlatList,\n  View,\n  ActivityIndicator,\n  TouchableOpacity\n} from 'react-native';\nimport { ApplicationProvider, Text, Avatar } from '@ui-kitten/components';\nimport { mapping, light as lightTheme } from '@eva-design/eva';\n\n// add a state object to the HomeScreen component\nclass HomeScreen extends React.Component {\n  state = {\n    loading: false,\n    data: [],\n    page: 1,\n    seed: 1,\n    error: null\n  };\n\n  // ... rest of the code\n}\n```\n\nWith the HTTP request to the API URL, let us fetch the first 20 results for now. Create a handler method called `makeRemoteRequest` that uses JavaScript's `fetch(url)` where `url` is the API request. It will fetch the results in JSON format. In case of a successful response from the API, the loading indicator (_which is going to add later_) will be false.\n\nAlso, using the lifecycle method `componentDidMount`, you can render the list of random users at the initial render of the `HomeScreen` component.\n\n```js\n componentDidMount() {\n this.makeRemoteRequest()\n }\n\n makeRemoteRequest = () => {\n const { page, seed } = this.state\n const url = `https://randomuser.me/api/?seed=${seed}&page=${page}&results=20`\n this.setState({ loading: true })\n\n fetch(url)\n .then(res => res.json())\n .then(res => {\n this.setState({\n data: page === 1 ? res.results : [...this.state.data, ...res.results],\n error: res.error || null,\n loading: false\n })\n })\n .catch(error => {\n this.setState({ error, loading: false })\n })\n }\n```\n\nNext, add a `renderFooter` handler method that is going to display a loading indicator based on the value from the state object. This indicator is shown when the list of data in still being fetched. When the value of `this.state.loading` is true, using the `ActivityIndicator` from react-native components, a loading indicator on the UI screen is shown.\n\n```js\nrenderFooter = () => {\n  if (!this.state.loading) return null;\n\n  return (\n    <View\n      style={{\n        paddingVertical: 20,\n        borderTopWidth: 1,\n        borderColor: '#CED0CE'\n      }}\n    >\n      <ActivityIndicator animating size=\"large\" />\n    </View>\n  );\n};\n```\n\nHere is the output you are going to get when the loading indicator is shown.\n\n![ss5](https://i.imgur.com/FYDMKsp.png)\n\n## Adding a custom Separator to FlatList component\n\nPreviously, you learned about the three most important props in the FlatList component. It is so flexible that it comes with extra props to render different components to make UI as pleasing to the user. One such prop is called `ItemSeparatorComponent`. You can add your own styling with custom JSX.\n\nTo do so, add another handler method called `renderSeparator`. It consists of rendering a `View` with some styling.\n\n```js\nrenderSeparator = () => {\n  return (\n    <View\n      style={{\n        height: 1,\n        width: '86%',\n        backgroundColor: '#CED0CE',\n        marginLeft: '5%'\n      }}\n    />\n  );\n};\n```\n\nThis completes all of the handler method currently required. Now, let us replace the previous `FlatList` component in `App.js` file with the following snippet.\n\nA list of user names is going to be rendered with an individual item as the user. When pressed it shows an alert message for now but in real-time app, it will go on to display the complete user profile or user's contact.\n\nThe individual items in the list are going to be separated by the `renderSeparator` method as well as each item is going to display a user image which is composed of `Avatar` component from `react-native-ui-kitten`. The data is coming from the state object.\n\n```js\n<FlatList\n  data={this.state.data}\n  renderItem={({ item }) => (\n    <TouchableOpacity onPress={() => alert('Item pressed!')}>\n      <View\n        style={{\n          flexDirection: 'row',\n          padding: 16,\n          alignItems: 'center'\n        }}\n      >\n        <Avatar\n          source={{ uri: item.picture.thumbnail }}\n          size=\"giant\"\n          style={{ marginRight: 16 }}\n        />\n        <Text\n          category=\"s1\"\n          style={{\n            color: '#000'\n          }}\n        >{`${item.name.first} ${item.name.last}`}</Text>\n      </View>\n    </TouchableOpacity>\n  )}\n  keyExtractor={item => item.email}\n  ItemSeparatorComponent={this.renderSeparator}\n  ListFooterComponent={this.renderFooter}\n/>\n```\n\nFrom the above snippet, you can also notice that the loading indicator handler method `renderFooter()` is also used as the value of a prop called `ListFooterComponent`.\n\nYou can also use this prop to render other information at the bottom of all the items in the list. One example is to fetch more items in the list and show the loading indicator when the request is made.\n\nHere is the output so far.\n\n![ss4](https://i.imgur.com/eszTsxG.gif)\n\n## Adding a Search bar\n\nTo create a search bar on top of the FlatList, you need a component that scrolls away when the list is scrolled. One possible solution is to create a custom Search bar component and render it as the value of `ListHeaderComponent` prop in a FlatList.\n\nOpen `App.js` file and add the following prop to the list.\n\n```js\n<FlatList\n  // rest of the props remain same\n  ListHeaderComponent={this.renderHeader}\n/>\n```\n\nThe search bar component is going to be an input field that can take the user's name from the end-user. To build one, let us start by modifying the import statements as below.\n\n```js\nimport filter from 'lodash.filter';\nimport {\n  ApplicationProvider,\n  Text,\n  Avatar,\n  Input\n} from '@ui-kitten/components';\n```\n\nNext, modify the `state` object and the following variables to it. The `query` is going to hold the search term when the input is provided. The `fullData` is a temporary array that a handler method is going to filter the user's name on the basis of a query.\n\n```js\nstate = {\n  // add the following\n  query: '',\n  fullData: []\n};\n```\n\nSince you are already storing the `results` fetched from the remote API, state variable `data`, let us do the same for `fullData` as well. Add the following inside the handler method `makeRemoteRequest()`.\n\n```js\nmakeRemoteRequest = () => {\n  const { page, seed } = this.state;\n  const url = `https://randomuser.me/api/?seed=${seed}&page=${page}&results=20`;\n  this.setState({ loading: true });\n\n  fetch(url)\n    .then(res => res.json())\n    .then(res => {\n      this.setState({\n        data: page === 1 ? res.results : [...this.state.data, ...res.results],\n        error: res.error || null,\n        loading: false,\n\n        // ---- ADD THIS ----\n        fullData: res.results\n      });\n    })\n    .catch(error => {\n      this.setState({ error, loading: false });\n    });\n};\n```\n\nNext, add the handler method that is going to handle the search bar. By default, it is going to format the search term provided as a query to lowercase. The user's name is filtered from the state variable `fullData` while the state variable `data` stores the final results after the search to render the correct user.\n\n```js\nhandleSearch = text => {\n  const formattedQuery = text.toLowerCase();\n  const data = filter(this.state.fullData, user => {\n    return this.contains(user, formattedQuery);\n  });\n  this.setState({ data, query: text });\n};\n```\n\nThe `contains` handler method is going to look for the query. It accepts two parameters, the first and last name of the user and the formatted query to lowercase from `handleSearch()`.\n\n```js\ncontains = ({ name, email }, query) => {\n  const { first, last } = name;\n  if (first.includes(query) || last.includes(query) || email.includes(query)) {\n    return true;\n  }\n  return false;\n};\n```\n\nLastly, add `renderHeader` to render the search bar on the UI.\n\n```js\nrenderHeader = () => (\n  <View\n    style={{\n      backgroundColor: '#fff',\n      padding: 10,\n      alignItems: 'center',\n      justifyContent: 'center'\n    }}\n  >\n    <Input\n      autoCapitalize=\"none\"\n      autoCorrect={false}\n      onChangeText={this.handleSearch}\n      status=\"info\"\n      placeholder=\"Search\"\n      style={{\n        borderRadius: 25,\n        borderColor: '#333',\n        backgroundColor: '#fff'\n      }}\n      textStyle={{ color: '#000' }}\n    />\n  </View>\n);\n```\n\nThat's it to add a search bar to the FlatList component.\n\n## Run the app\n\nTo run the app, make sure the `expo start` command is running. Next, go to Expo client and you are going to be prompted by the following screen:\n\n![ss6](https://i.imgur.com/nUcoa0G.png)\n\nNext, try to add a user name from the list being rendered.\n\n![ss7](https://i.imgur.com/KCL5zYz.gif)\n\n## Add clear button to input text field\n\nThe last thing I want to emphasize is that using a custom UI component from a UI library such as UI Kitten, you can use general `TextInputProps` from React Native core as well. A few examples are props such as `autoCapitalize`, and `autoCorrect`.\n\nLet us add another prop called `clearButtonMode` that allows the input field to have a clear button appear on the right side. Add the prop to the `Input` inside `renderHeader()`.\n\n```js\n<Input\n  // rest of the props remain same\n  clearButtonMode=\"always\"\n/>\n```\n\nNow go back to the Expo client and see it in action\n\n![ss8](https://i.imgur.com/fQvxr4j.gif)\n\n## Conclusion\n\nThis brings an end to this current tutorial. The screen implemented in this demo is from one of the templates from **Crowdbotics' react-native collection**.\n\nWe use UI Kitten for our latest template libraries. Find more about how to create custom screens like this from our open source project [here](https://github.com/crowdbotics/blueprint-react-native-contacts-screen).\n\nYou can also find the source code from this tutorial at this [Github repo](https://github.com/amandeepmittal/searchableFlatListDemo).\n",
            "url": "https://amanhimself.dev//blog/add-search-bar-to-a-flatlist-in-react-native",
            "title": "How to add a Search bar in a FlatList in React Native apps",
            "summary": "How to add a Search bar in a FlatList in React Native apps",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/chat-app-with-react-native-part-2",
            "content_html": "---\ntitle: 'Chat app with React Native (part 2) - Firebase Email Authentication with react-native-firebase'\ndate: '2020-04-16'\nslug: 'chat-app-with-react-native-part-2'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://heartbeat.fritz.ai/chat-app-with-react-native-part-2-firebase-user-authentication-with-react-native-firebase-533352870497'\n---\n\n![cover](https://i.imgur.com/ROYjoYo.jpg)\n\nIn [the first part of this tutorial series](https://amanhimself.dev/blog/chat-app-with-react-native-part-1) to build a chat-based app in React Native, we learned how to create reusable form elements using the react-native-paper UI library. Along with that, we learned how to install the navigation library react-navigation and configure a basic authentication stack navigator using two routes.\n\nIn this tutorial, let us start using a backend service to add real-time features to the Chat app. For backend services, I am going to use Firebase. You are going to learn how to install and configure Firebase SDK in a react native app with the help of [`react-native-firebase`](https://rnfirebase.io/) module as well as set up and configure Email authentication. In order to follow this tutorial and future posts, you are required to use a Firebase project.\n\n## Create a new Firebase project from console\n\nTo access the Firebase credentials for each mobile OS platform and configure them to use Firebase SDK, create a new Firebase project or use one if you have access already from [Firebase console](http://console.firebase.google.com/), you can skip this step.\n\nCreate a new project as shown below.\n\n<img src='https://miro.medium.com/max/1400/1*wYi5SITEofv4nuIAPnQglg.png' />\n\nComplete the details of your Firebase project:\n\n<img src='https://miro.medium.com/max/1090/1*UDDFg0ZBF7w1jwRRIqxcwA.png' />\n\nClick the button **Create project** and you are going to be redirected to the dashboard screen. That's it. You have successfully created a new Firebase project.\n\nNow make sure that the **Email** **Sign-in method** is enabled. From the Firebase console and navigate to **Authentication** section from the side menu.\n\n<img src='https://miro.medium.com/max/257/1*mGwJz9i3SAzboUgZhs21Ng.png' />\n\nGo to the second tab **Sign-in method** and make sure to enable the **Email** sign-in provider.\n\n<img src='https://miro.medium.com/max/1400/1*lYvrmJXPQBRrs8Xpvqn05w.png' />\n\n## Add Firebase SDK to React Native app\n\nIf you have used `react-native-firebase` version 5 or below, you must have noticed that it was a monorepo that used to manage all Firebase dependencies from one module.\n\nVersion 6 of this library wants you to only install those dependencies based on Firebase features that you want to use. For example, in the current app, to support the email authentication feature you are going to install the auth and core app package.\n\nFrom the terminal window execute the following command.\n\n```shell\nyarn add @react-native-firebase/app @react-native-firebase/auth\n```\n\n## Add Firebase credentials to your iOS app\n\nFirebase provides a file called `GoogleService-Info.plist` that contains all the API keys as well as other credentials for iOS devices to authenticate the correct Firebase project.\n\nTo get these credentials, go to back to the [Firebase console](http://console.firebase.google.com/) in a browser window. From the dashboard screen of your Firebase project, open **Project settings** from the side menu.\n\n<img src='https://miro.medium.com/max/241/1*Vh9zbrjZEGjKJl0XDCfFQQ.png' />\n\nGo to **Your apps** section and click on the icon iOS to select the platform.\n\n<img src='https://miro.medium.com/max/1396/1*nYRgVjO8DFSOdOJhPU-1DA.png' />\n\nEnter the application details and click on **Register app**.\n\n<img src='https://miro.medium.com/max/1270/1*Z1v4E3vhPGXmwfwrFtaxsA.png' />\n\nThen download the `GoogleService-Info.plist` file as shown below.\n\n<img src='https://miro.medium.com/max/1400/1*mKKqIHaDcv2UQsG-3idn7Q.png' />\n\nOpen Xcode, then open the file `/ios/ChatApp.xcodeproj` file. Right-click on the project name and **Add Files** option, then select the file to add to this project.\n\n<img src='https://miro.medium.com/max/273/1*800RInfgPmKJXt_k58xQ4w.png' />\n\nThen open `ios/ChatApp/AppDelegate.m` and add the following header.\n\n```c\n#import <Firebase.h>\n```\n\nIn the same file, within the `didFinishLaunchingWithOptions` method, add the following configure method.\n\n```c\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    if ([FIRApp defaultApp] == nil) {\n      [FIRApp configure];\n    }\n```\n\nLastly, go back to the terminal window to install pods.\n\n```js\ncd ios/ && pod install\n# after pods are installed\ncd ..\n```\n\nMake sure you build the iOS app.\n\n```js\nnpx react-native run-ios\n```\n\nThat's it. The configuration to set up a Firebase SDK and credentials in a React Native app is complete.\n\n## Create a home screen\n\nIn the previous post, you have successfully configured an Auth stack that displays those screens when the end-user is not authorized or logged in inside the app. There are a set of screens that are only going to be accessible to the user when they are logged in. Let us call the group of screens that are visible after login, home stack.\n\nOne such screen is going to be a home screen where all the chat rooms are going to be listed. In this section, let us start by creating a basic home screen such that you can complete navigational flow between the home stack and the auth stack.\n\nCreate a new screen component called `HomeScreen.js` inside `src/screens/` directory with the following code snippet.\n\n```js\nimport React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Title } from 'react-native-paper';\n\nexport default function HomeScreen() {\n  return (\n    <View style={styles.container}>\n      <Title>Home Screen</Title>\n      <Title>All chat rooms will be listed here</Title>\n      <FormButton modeValue=\"contained\" title=\"Logout\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#f5f5f5',\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\n```\n\n## Create home stack navigator\n\nCreate a new stack navigator file called `HomeStack.js` inside `src/navigation.js` that is going to have those routes which are only available after logging in. You can think of these routes as protected routes.\n\nOpen this file and add the following code snippet. Nothing new is going in terms of creating a stack navigator as shown below.\n\n```js\nimport React from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport HomeScreen from '../screens/HomeScreen';\n\nconst Stack = createStackNavigator();\n\nexport default function HomeStack() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n    </Stack.Navigator>\n  );\n}\n```\n\n## Create an auth provider\n\nIn this section, you are going to create an authentication provider to check whether the user is logged in or not and access them if they are logged in.\n\nCreate a new file called `AuthProvider.js` inside `src/navigation/`. Start by importing the following statements.\n\n```js\nimport React, { createContext, useState } from 'react';\nimport auth from '@react-native-firebase/auth';\n```\n\nThen create an `AuthContext` and make sure to export it since you are going to use it on several different screens.\n\n```js\nexport const AuthContext = createContext({});\n```\n\nIn Reactjs, the [Context API](https://reactjs.org/docs/context.html#reactcreatecontext) is designed to share data that is considered global for a tree of React components. When you are creating a context (like above), there is a requirement to pass a default value. This value is used when a component does not have a matching Provider.\n\nThe Provider allows the React components to subscribe to the context changes. To create an auth provider, export a function called `AuthProvider`. This provider is going to allow the screen components to access the current user in the application. Define a state variable called `user`.\n\n```js\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        setUser,\n        login: async (email, password) => {\n          try {\n            await auth().signInWithEmailAndPassword(email, password);\n          } catch (e) {\n            console.log(e);\n          }\n        },\n        register: async (email, password) => {\n          try {\n            await auth().createUserWithEmailAndPassword(email, password);\n          } catch (e) {\n            console.log(e);\n          }\n        },\n        logout: async () => {\n          try {\n            await auth().signOut();\n          } catch (e) {\n            console.error(e);\n          }\n        }\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n```\n\nIn the `value` prop above, also define some functions. These functions are now available to be used anywhere in the screens component tree using React Context.\n\nEach of the functions is consuming Firebase methods to interact with real-time Firebase backend service. Both the login and register functions require the user's `email` and `password` to verify/save credentials. The logout method invokes a simple `signOut()` method. All these Firebase methods are available from the `@react-native-firebase/auth` package. Do note that, all these functions are asynchronous actions and thus, using `async await` syntax helps.\n\n## Wrapping routes with auth provider\n\nNow, that the provider is created, but how to use for a set of components in the current app tree? Well, you have to wrap this provider around the `Routes` such as to use the helper functions as well as the value of current `user` (as described above) in the screen components.\n\nOpen `navigation/index.js` file and modify it as follows.\n\n```js\nimport React from 'react';\nimport { Provider as PaperProvider } from 'react-native-paper';\nimport { AuthProvider } from './AuthProvider';\nimport Routes from './Routes';\n\n/**\n * Wrap all providers here\n */\n\nexport default function Providers() {\n  return (\n    <PaperProvider>\n      <AuthProvider>\n        <Routes />\n      </AuthProvider>\n    </PaperProvider>\n  );\n}\n```\n\nRemember, from the previous post, we added that comment that to wrap all components using all providers in this file? Well, that's what this file is for.\n\n## Check if the user is logged in or not\n\nTo check if the user is logged or not, let us modify the `navigation/Routes.js` file. Using the value of the `user` from the auth provider, you are going to switch between the stack navigators. To start, make sure you imported the following statements.\n\n```js\nimport React, { useContext, useState, useEffect } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport auth from '@react-native-firebase/auth';\nimport AuthStack from './AuthStack';\nimport HomeStack from './HomeStack';\nimport { AuthContext } from './AuthProvider';\nimport Loading from '../components/Loading';\n```\n\nFrom the above snippet, ignore the `Loading` component for now. You are going to create it at the end of this section.\n\nNow, inside the `Routes` function, you are two define two state variables `initializing` and `loading` to check whether the user's state is logged in or not. Also, from the context value, fetch `user` and `setUser`.\n\nThen, define a function called `onAuthStateChanged` which is going to handle user state changes. Using `useEffect` hook, you can subscribe to this state change function and make sure you unsubscribe it when the component unmounts. This method allows you to subscribe to real-time events when the user performs an action. The action here can be, logging in, signing out, and so on.\n\n```js\nexport default function Routes() {\n  const { user, setUser } = useContext(AuthContext);\n  const [loading, setLoading] = useState(true);\n  const [initializing, setInitializing] = useState(true);\n\n  // Handle user state changes\n  function onAuthStateChanged(user) {\n    setUser(user);\n    if (initializing) setInitializing(false);\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    const subscriber = auth().onAuthStateChanged(onAuthStateChanged);\n    return subscriber; // unsubscribe on unmount\n  }, []);\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return (\n    <NavigationContainer>\n      {user ? <HomeStack /> : <AuthStack />}\n    </NavigationContainer>\n  );\n}\n```\n\nLastly, create a new component file called `Loading.js` inside `src/components/` directory. This component is going to be responsible to display a loading spinner.\n\n```js\nimport React from 'react';\nimport { View, ActivityIndicator, StyleSheet } from 'react-native';\n\nexport default function Loading() {\n  return (\n    <View style={styles.loadingContainer}>\n      <ActivityIndicator size=\"large\" color=\"#6646ee\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  loadingContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n```\n\n## Completing the app\n\nIn order for the user to perform auth actions in the app, you have to use the context in each of the screen components for different actions.\n\nStart by opening `LoginScreen.js`. Import `useContext` from react and `AuthContext` from `AuthProvider`.\n\n```js\nimport React, { useState, useContext } from 'react';\n// rest of the import statements remain same\nimport { AuthContext } from '../navigation/AuthProvider';\n\nexport default function LoginScreen({ navigation }) {\n  const { login } = useContext(AuthContext);\n\n  // rest remains statements\n}\n```\n\nInside the `LoginScreen` function, make sure to add an `onPress` prop as shown below.\n\n```js\n<FormButton\n  title=\"Login\"\n  modeValue=\"contained\"\n  labelStyle={styles.loginButtonLabel}\n  onPress={() => login(email, password)}\n/>\n```\n\nSimilarly, you have to modify the `SignupScreen.js` file.\n\n```js\nimport React, { useState, useContext } from 'react';\n// rest of the import statements remain same\nimport { AuthContext } from '../navigation/AuthProvider';\n\nexport default function SignupScreen({ navigation }) {\n  const { register } = useContext(AuthContext);\n  // rest remains statements\n}\n\n// Add the onPress prop to <FormButton />\n\n<FormButton\n  title=\"Signup\"\n  modeValue=\"contained\"\n  labelStyle={styles.loginButtonLabel}\n  onPress={() => register(email, password)}\n/>;\n```\n\nLastly, modify the `HomeScreen` to add a sign out button and when the user is in the logged-in state, display their user `uid` (_the unique identifier in Firebase to differentiate and store different users_).\n\n```js\nimport React, { useContext } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Title } from 'react-native-paper';\nimport { AuthContext } from '../navigation/AuthProvider';\nimport FormButton from '../components/FormButton';\n\nexport default function HomeScreen() {\n  const { user, logout } = useContext(AuthContext);\n\n  return (\n    <View style={styles.container}>\n      <Title>Home Screen</Title>\n      <Title>All chat rooms will be listed here</Title>\n      <Title>{user.uid}</Title>\n      <FormButton\n        modeValue=\"contained\"\n        title=\"Logout\"\n        onPress={() => logout()}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#f5f5f5',\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\n```\n\nGo to the simulator, and you are going to get similar results as shown below. Perform these steps. Try creating a new user from the sign-up screen, and you are going to get their `uid` on the home screen.\n\n<img src='https://miro.medium.com/max/684/1*2HWlA1jyqJzAIhxgHDB0sg.gif' />\n\nYou can verify the `uid` of the current user by going to the dashboard screen from Firebase console.\n\n<img src='https://miro.medium.com/max/1400/1*NVUhPQOP2YjgYF_qmCdXBQ.png' />\n\n## Conclusion\n\n_Congratulations!_ You've completed this tutorial and successfully added an authentication flow between the two stack navigators. In the next part of this series, we'll explore more features such as creating and storing chat rooms in a collection in Firestore, as well as displaying all chat rooms on the home screen. To create a new chat room, we'll create a new modal screen and make changes to the current home stack accordingly.\n\n---\n\n## What's Next?\n\nIn the [next post](https://amanhimself.dev/blog/chat-app-with-react-native-part-3) of this series, we are going to explore how to create a modal screen using `react-navigation` stack navigator. This modal screen is going to have separate navigator as well as to be used to create a new chat room.\n\nThen, we are going to add Firebase NoSQL database Firestore and add a query to store the name of a chat room in a collection.\n\nYou can find the complete source code for this project at [this Github repo](https://github.com/amandeepmittal/react-native-examples/tree/master/ChatApp).\n\n---\n\n👉 Here is a list of resources used in this tutorial:\n\n- Reactjs [Context API](https://reactjs.org/docs/context.html#reactcreatecontext)\n- [Firebase Authentication reference](https://invertase.io/oss/react-native-firebase/v6/auth/quick-start) from `react-native-firebase`\n- Getting started with stack navigator using `react-navigation` v5 [here](https://heartbeat.fritz.ai/getting-started-with-stack-navigator-using-react-navigation-5-in-react-native-and-expo-apps-4c516becaee1)\n\nOriginally published at [Heartbeat.Fritz.Ai](https://heartbeat.fritz.ai/chat-app-with-react-native-part-2-firebase-user-authentication-with-react-native-firebase-533352870497).\n",
            "url": "https://amanhimself.dev//blog/chat-app-with-react-native-part-2",
            "title": "Chat app with React Native (part 2) - Firebase Email Authentication with react-native-firebase",
            "summary": "Chat app with React Native (part 2) - Firebase Email Authentication with react-native-firebase",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/blogging-tips-after-3-years",
            "content_html": "---\ntitle: 'Blogging tips after 3 years and a 100+ posts'\nslug: 'blogging-tips-after-3-years'\ndate: '2020-04-13'\nthumbnail: '/thumbnails/writing.png'\ntag: 'writing'\ncanonicalUrl: 'https://amanhimself.dev/blog/blogging-tips-after-3-years/'\n---\n\n![cover_image](https://i.imgur.com/XHghbGg.jpg)\n\n> Your time is limited... - Steve Jobs\n\nA blog can be a useful piece for many reasons not only to you but to many others. Such it has been in my journey. Not only I have been able to generate leads (being a contract developer, it helps), it has been one of the most important things I have done in my career of being a dev. Sometimes, I do go back and read my blog posts when seeking information for a specific topic.\n\nI've been [blogging](https://amanhimself.dev) in tech and writing tutorials using various JavaScript frameworks (Node.js, Reactjs, React Native, Gatsby) for three years now. One of the biggest advantages through blogging I have found lies in the previous sentence. I have the freedom to try and play around with many different stacks and frameworks. This helps me understand about the betterment of their use case.\n\nThe motivation behind this article is to share my thoughts on blogging since I have been asked too many times to provide some insight from my journey and why I think blogging can help you achieve your goals at a faster rate if you are willing to dip your toes. Or let us just say you want to share what you know and you find blogging as the medium to do so.\n\n## Its about consistency\n\nOne of the major lessons I have learned from blogging is that to build an audience or if you are trying to scratch that itch of sharing what you know, you have to be consistent. That said, it doesn't matter how many blog posts you write and publish in a week or a month, achieving the deadlines you set for yourself, you need to be diligent.\n\nWhen I started blogging on [Medium](https://medium.com/@amanhimself) I wasn't much consistent for the first year. But I was putting content out in form shorter posts or long length tutorials once in a while.\n\nAfter a while, it made me realize how far I have come and how can I improve managing my time if I want to continue to publish more content. It helps me to create a schedule in my daily routine and dedicate several hours in a week either researching or building app demos and writing tutorials around them.\n\n## Topic consistency is a thing too\n\nApart from managing one's time and schedule, you have to be focused as to what your blog is going to be about. For example, when I started blogging, for a long time, I was writing posts on Node.js and backend. With time, my focus of work shifted towards front-end development and more precisely, towards the React Native ecosystem.\n\nIn recent times, my focus on writing tutorials on what I do and know shifted with that. You have to keep the content you are sharing in some sense, professional for the audience to read. You cannot assume the type of reader you are going to have.\n\n## Draft your posts in advance\n\nPlan ahead. This is the best suggestion I can give it to you if you are interested in pursuing blogging in tech for a longer period of time.\n\nDraft your posts in advance and make sure that it helps you stick to your publishing schedule even when you are taking vacations or having a week off.\n\nI usually write almost all of my blog posts in Markdown format and store each draft on my laptop, inside a directory of [my blog site](https://amanhimself.dev). This way, it saves me time when I publish them since I use Gatsby and Markdown format for each blog post.\n\nWhen I publish on sites like [Medium](https://medium.com/@amanhimself) that do not support Markdown format completely, I use a tool called [Markdown to Medium](https://markdowntomedium.com/) which allows you to publish markdown formatted posts on Medium with correct syntax highlighting **( this is important if your post contain code snippets)** using editable GitHub gists. It is fast and it works like a charm. (_Shoutout to [Jake Bennett](https://twitter.com/jacobbennett) for creating it and making it free to use_). However, at the same time, publishing on sites like [Dev.to](https://dev.to/amanhimself), Markdown can be your friend.\n\n## List your ideas\n\nHaving a list of ideas is beneficial. Not every day you are going to feel like brainstorming about new topics or micro-managing a bigger topic in its subparts.\n\nThis helps you follow the previous step too, and help you plan with a clearer vision of what you might be writing or publishing in upcoming weeks or months.\n\nUse tools that are favorable to you to manage a list of ideas. I use Notion to track each blog post. From the idea to the date, it gets published.\n\nYou can decide on what topics you want to write about. Not everything has to be too technical or walk through about building \"X\" with a specific framework or a stack or have to belong. It can be something work-related you are passionate about, something that you might find super simple (like writing Redux sagas) but it helps someone less experienced or who are just starting in their career.\n\n## Publish on your platform\n\nThis is a lesson I have learned late and in a hard way. Even though I have been professionally blogging for about two years now, I only did create and hosted my blog in the middle of last year.\n\nI don't want you to make this mistake. Since day one, make sure you have a blog hosted on under your domain and it is linked with your portfolio website. It doesn't have to be pretty. Even though you are writing on other platforms or for publications, make sure to ask about their policy of re-publishing the post on your platform. Most publications do allow and generally have time span after which you can publish it under your domain provided the post links back to the original link/website.\n\nHaving one's platform with blog posts (regardless of their number) is much better than having no personal blogging platform at all. It is the core. When someone comes knocking on your down for a role or an offer, at first, they are going to see your website/platform and rather than publication.\n\n## Study not other bloggers but content creators too\n\nOne advantage we have these days is there is no shortage of the amount of content and platforms that you can host. To keep up to date with topics you want to write about, surely, at a certain point in time, you can never know everything about it.\n\nApart from other blogs I regularly follow, I exhaustively use Twitter, Medium, Dev.to, tech podcasts, official documentation and sometimes books to keep myself up to date and research whats going on. I can never be an expert on everything but I do love to share my perspective and I believe everyone has a unique perspective. Also researching and learning go hand-in-hand. I learn new things every day and at a faster rate when I share them.\n\n## You learn how to take criticism\n\nBlogging taught me how to separate constructive criticism (which I consider actual feedback) from the criticism we find every day on the internet and that doesn't help anyone.\n\nSome places on the internet exist where people are too harsh in their opinions but that's a good thing. You get a sense of feeling whom to hear and whom to shut out completely. In other words, you grow.\n\n## Share everything, everywhere\n\nIf you are writing on your blog but not sharing on every available platform that costs nothing, you are not helping much. Your blog post tends to help someone you might even don't know them.\n\nIt helps to drive the community forward and help someone when they are actually seeking useful information to their problem that you have already faced or shared.\n\nPlatforms I regularly share my content on:\n\n- Medium\n- Dev.to\n- Twitter\n- Reddit\n- Hacker News\n- LinkedIn\n- Instagram\n- Major publications like [freeCodeCamp](https://www.freecodecamp.org/news/)\n\nGetting on the first page of the search engine is amazing but that doesn't happen in every scenario or overnight. Use these platforms. Cross-post and use canonical URLs and get on the wagon.\n\n## Summary\n\nI hope this post serves its purpose and I urge you to go ahead and write your blog post if you haven't started already. There is no worst-case scenario here. Have a starting point, and stick to it. Also, I do consider writing is a skill in life worth learning and practicing, and blogging helps me do that.\n\nHappy Writing!\n",
            "url": "https://amanhimself.dev//blog/blogging-tips-after-3-years",
            "title": "Blogging tips after 3 years and a 100+ posts",
            "summary": "Blogging tips after 3 years and a 100+ posts",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/chat-app-with-react-native-part-1",
            "content_html": "---\ntitle: 'Chat app with React Native (part 1) - Build reusable UI form elements using react-native-paper'\nslug: 'chat-app-with-react-native-part-1'\ndate: '2020-04-06'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://heartbeat.fritz.ai/chat-app-with-react-native-part-1-build-reusable-ui-form-elements-using-react-native-paper-75d82e2ca94f'\n---\n\n![cover](https://i.imgur.com/ROYjoYo.jpg)\n\nThis year, the React Native community has seen a lot of changes. Starting from community adaption of React Hooks, the official documentation having [new domain](http://reactnative.dev/), one of the most popular library `react-navigation` adopting a more dynamic and component-based approach to add routes to your apps and lastly, `react-native-firebase` the go-to package to use Firebase SDK, released its sixth version with some improvements.\n\nIn this tutorial series, I am going to use all of the latest version packages described previously to showcase how to build an app with React Native in 2020. You are going to learn a lot about these libraries while following along as well as build a chat app.\n\nThe purpose of this tutorial is to get you familiar with all the latest updates in React Native world and its libraries such as `react-navigation` and `react-native-firebase` that are often the choice. If you wish to add a new feature that is not covered in this tutorial, feel free to do that and follow along at your own pace.\n\n## Requirements\n\nThe following requirements are going to make sure you have a suitable development environment:\n\n- Node.js above `10.x.x` installed on your local machine\n- JavaScript/ES6 basics\n- watchman the file watcher installed\n- `react-native-cli` installed through npm or access via npx\n- [`react-navigation`](https://reactnavigation.org/docs/getting-started)\n- [`Firebase`](http://console.firebase.google.com/) project\n- [`react-native-firebase`](https://rnfirebase.io/)\n- [`react-native-paper`](https://reactnativepaper.com/)\n\nFor a complete walkthrough on how you can set up a development environment for React Native, you can go through official documentation here.\n\nAlso, do note that the following tutorial is going to use the react-native version `0.61.5`. Please make sure you are using a version of React Native above `0.60.x`.\n\n## Installing libraries\n\nTo begin, start by creating a new React Native project and installing libraries as described in the following steps. You are going to need to open a terminal window for this process.\n\n```shell\nnpx react-native init ChatApp\n\n# navigate inside the project directory\ncd ChatApp\n\n# install following libraries for navigationOptions\nyarn add @react-navigation/native @react-navigation/stack react-native-reanimated\nreact-native-gesture-handler react-native-screens\nreact-native-safe-area-context\n@react-native-community/masked-view\nreact-native-paper react-native-vector-icons\n```\n\nAfter installing the dependencies, please make sure to follow instructions given in their official documentation to configure their native binaries to make it work with React Native.\n\n- [`react-native-paper`](https://callstack.github.io/react-native-paper/getting-started.html)\n- [`react-navigation`](https://reactnavigation.org/docs/getting-started)\n\nThese instructions may change in the future, so it is better to follow the official documentation.\n\niOS users, make sure to install pods via [cocoapods](https://cocoapods.org/) where ever necessary.\n\n## Creating reusable form elements\n\nIn this section, let us create some reusable form components such as `FormInput` and `FormButton`. These UI components are going to be used in two screens: Login and Signup.\n\nThe advantage these reusable form components are going to give is that you do not have to write the same common code again and again for both screen components.\n\nAt the root of this React Native app, create a new directory called `src/` and inside it create a new directory called `components/`.\n\nInside this directory, create a new file called `FormInput.js`. This component is going to provide a Text Input field for the screen components to use and for the user to enter the credentials.\n\nStart by importing the following statements.\n\n```js\nimport React from 'react';\nimport { StyleSheet, Dimensions } from 'react-native';\nimport { TextInput } from 'react-native-paper';\n```\n\n[`Dimensions`](https://reactnative.dev/docs/dimensions) from React Native core API, provides a way to get the screen width and height. Instead of giving the fix width and height to a text input field, let this API calculate it for us. You can get the application's screen and height by adding the following snippet.\n\n```js\nconst { width, height } = Dimensions.get('screen');\n```\n\nNext, export the default function `FormInput` that is going to have some props.\n\n```js\nexport default function FormInput({ labelName, ...rest }) {\n  return (\n    <TextInput\n      label={labelName}\n      style={styles.input}\n      numberOfLines={1}\n      {...rest}\n    />\n  );\n}\n```\n\nThe `...rest` props must be the last prop passed as a parameter, otherwise, you are going to get an error. The purpose of passing this prop is to allow the component to have other props value.\n\nLastly, define the corresponding styles for this reusable component.\n\n```js\nconst styles = StyleSheet.create({\n  input: {\n    marginTop: 10,\n    marginBottom: 10,\n    width: width / 1.5,\n    height: height / 15\n  }\n});\n```\n\nThe next reusable component is going to be in a separate file called `FormButton.js`. It is similar to `FormInput` except that this component is going to be used to display a button on the screen.\n\nIt is also going to use the width and height of the screen using `Dimensions` from React Native.\n\nHere is the complete code snippet:\n\n```js\nimport React from 'react';\nimport { StyleSheet, Dimensions, Text } from 'react-native';\nimport { Button } from 'react-native-paper';\n\nconst { width, height } = Dimensions.get('screen');\n\nexport default function FormButton({ title, modeValue, ...rest }) {\n  return (\n    <Button\n      mode={modeValue}\n      {...rest}\n      style={styles.button}\n      contentStyle={styles.buttonContainer}\n    >\n      {title}\n    </Button>\n  );\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    marginTop: 10\n  },\n  buttonContainer: {\n    width: width / 2,\n    height: height / 15\n  }\n});\n```\n\nThe `react-native-paper` UI library, has three modes to display a button.\n\n- `text`: a flat button without background or outline\n- `outlined`: a button with the outline\n- `contained`: a button with background color and elevation shadow\n\nFor different purposes, you are going to make use of different button modes. You will see them in screen components later. That is why it is better to accept the value as a prop (_as mentioned in the above snippet: `modeValue`_).\n\n## Create a login screen\n\nTo being implementing screens in the current app, start by creating the most essential screen called `LoginScreen`. This is going to be the initial route when the user is not authenticated or authorized to enter the app and use its features.\n\nHere is a demo of the screen you are going to achieve in this section.\n\n<img src='https://miro.medium.com/max/700/1*IGoOjbiB5pWNogRPqfl7rA.png' />\n\nInside `src/`, create another directory called `screens/`. In this directory, we are going to store all screen components. Inside it, also create `LoginScreen.js`.\n\nThe Login screen is going to have four main UI elements:\n\n- two text input fields for user's email and password\n- one login button and one button to navigate to sign up screen (_in case the end-user is not registered to use the app_)\n\nStart by importing the following statements.\n\n```js\nimport React, { useState } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Title } from 'react-native-paper';\nimport FormInput from '../components/FormInput';\nimport FormButton from '../components/FormButton';\n```\n\nInside the `LoginScreen` functional component, define two state variables:\n\n- `email`\n- `password`\n\nBoth of these variables are going to be used with the `FormInput` component to obtain the value of the user credentials. By default, they are going to have an empty string as its value.\n\n```js\nexport default function Login() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  return (\n    <View style={styles.container}>\n      <Title style={styles.titleText}>Welcome to Chat app</Title>\n      <FormInput\n        labelName=\"Email\"\n        value={email}\n        autoCapitalize=\"none\"\n        onChangeText={userEmail => setEmail(userEmail)}\n      />\n      <FormInput\n        labelName=\"Password\"\n        value={password}\n        secureTextEntry={true}\n        onChangeText={userPassword => setPassword(userPassword)}\n      />\n      <FormButton\n        title=\"Login\"\n        modeValue=\"contained\"\n        labelStyle={styles.loginButtonLabel}\n      />\n      <FormButton\n        title=\"New user? Join here\"\n        modeValue=\"text\"\n        uppercase={false}\n        labelStyle={styles.navButtonText}\n      />\n    </View>\n  );\n}\n```\n\nDo note that each of the `FormInput` element has different props being passed. For example, The email component has `autoCaptialize` set to `none`. The password component has `secureTextEntry` set to boolean true. Including others, this is where `...rest` becomes helpful (_as you have seen in the previous section_).\n\nThe `onChangeText` prop accepts a callback that is invoked whenever the text of the input field changes.\n\nLastly, here are the styles.\n\n```js\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#f5f5f5',\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  titleText: {\n    fontSize: 24,\n    marginBottom: 10\n  },\n  loginButtonLabel: {\n    fontSize: 22\n  },\n  navButtonText: {\n    fontSize: 16\n  }\n});\n```\n\nDo notice that, you are using a JavaScript object to define styles for each component so far. `StyleSheet` in React Native provides an API to create styles inside the component file. It takes a JavaScript object as it does above, and returns a new `Stylesheet` object from it. There are no _classes_ or _ids_ in React Native like in web development. To create a new style object you use `StyleSheet.create()` method.\n\nThe way you have defined styles by creating an object is the preferred way. Not only it helps you organize styles and keep them separate, but these styles when defined in this manner are also sent through the native render bridge only once (_unlike inline styles_).\n\n## Create a signup screen\n\nIf the user is not registered to use the app but wants to make a new account to get authorized, this where the signup screen becomes useful.\n\n<img src='https://miro.medium.com/max/700/1*a_LZfux_VkejnIgdZ0MjIQ.png' />\n\nCreate a new file called `SignupScreen.js` inside `src/screens/` directory. It is going to be similar to the login screen that you created in the previous section in many ways. I am going to leave it to you to find similarities and differences between the two screens. Take a look at the code snippet for the signup screen below.\n\n```js\nimport React, { useState } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Title, IconButton } from 'react-native-paper';\nimport FormInput from '../components/FormInput';\nimport FormButton from '../components/FormButton';\n\nexport default function SignupScreen({ navigation }) {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  return (\n    <View style={styles.container}>\n      <Title style={styles.titleText}>Register to chat</Title>\n      <FormInput\n        labelName=\"Email\"\n        value={email}\n        autoCapitalize=\"none\"\n        onChangeText={userEmail => setEmail(userEmail)}\n      />\n      <FormInput\n        labelName=\"Password\"\n        value={password}\n        secureTextEntry={true}\n        onChangeText={userPassword => setPassword(userPassword)}\n      />\n      <FormButton\n        title=\"Signup\"\n        modeValue=\"contained\"\n        labelStyle={styles.loginButtonLabel}\n      />\n      <IconButton\n        icon=\"keyboard-backspace\"\n        size={30}\n        style={styles.navButton}\n        color=\"#6646ee\"\n        onPress={() => navigation.navigate('Login')}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#f5f5f5',\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  titleText: {\n    fontSize: 24,\n    marginBottom: 10\n  },\n  loginButtonLabel: {\n    fontSize: 22\n  },\n  navButtonText: {\n    fontSize: 18\n  },\n  navButton: {\n    marginTop: 10\n  }\n});\n```\n\nThe major difference in the above component snippet is that you are going to use an `IconButton` to navigate from the signup screen to log in screen. This is provided by `react-native-paper` and is actually a button that displays an icon without any label.\n\n## Create an auth stack navigator\n\nThere are going to be two stack navigators in the current app. The first navigator is going to be called `AuthStack`.\n\nIt is going to contain only those screens which allow the user to add their credentials or create credentials. Thus, login screen and sign up screen as routes, where the login screen is going to the initial route. You will learn more about the second stack later.\n\nCreate a new directory `src/navigation/`. This directory is going to contain all the routes and other necessary components to build the navigation in the app.\n\nInside this directory, create a new file called `AuthStack.js`. This file is going to have a stack navigator.\n\nStart by importing the following statements including both screen components.\n\n```js\nimport React from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport SignupScreen from '../screens/SignupScreen';\nimport LoginScreen from '../screens/LoginScreen';\n```\n\nA **Stack Navigator** provides the React Native app to transit between different screens similar to how the navigation in a web browser works. It pushes or pops a screen when in the navigational state.\n\nNext, create an instance of a stack navigator as below.\n\n```js\nconst Stack = createStackNavigator();\n```\n\nNavigators are defined declaratively using version 5 of `react-navigation`. It follows a more component based approach, similar to that of `react-router` in web development using Reactjs (if you are familiar with it).\n\nThe `createStackNavigator` is a function used to implement a stack navigation pattern. This function returns two React components: `Screen` and `Navigator`, that help us configure each component screen as shown below.\n\n```js\nexport default function AuthStack() {\n  return (\n    <Stack.Navigator initialRouteName=\"Login\" headerMode=\"none\">\n      <Stack.Screen name=\"Login\" component={LoginScreen} />\n      <Stack.Screen name=\"Signup\" component={SignupScreen} />\n    </Stack.Navigator>\n  );\n}\n```\n\nThe `Stack.Navigator` takes those prop values that are common to each screen route. For example, generally, the stack navigator adds a header to each screen inside it. For the current stack, you are not going to require a header on each screen. Thus, setting `headerMode` to the value of `none` fulfills it.\n\nThe `headerMode` prop specifies how the header should be rendered for each screen in the stack. Setting it to `none`, specifies that it should not be rendered at all. You can find the other values for this mode [here](https://reactnavigation.org/docs/stack-navigator/#headermode).\n\nThe `initialRouteName` is the name of the route to render on the first load of the navigator.\n\nYou can learn more Stack Navigator and its common properties in the post [here](https://heartbeat.fritz.ai/getting-started-with-stack-navigator-using-react-navigation-5-in-react-native-and-expo-apps-4c516becaee1).\n\nTo make the navigation between Login to sign up screen work, you have to add the `navigation` prop to each component. Go to the `LoginScreen.js` file and pass the `navigation` prop reference as a parameter.\n\n```js\nexport default function LoginScreen({ navigation }) {\n  // ...\n}\n```\n\nThis prop reference provides a set of functions ready to dispatch as actions for each screen component. Do note that, you can only pass it those screen components that are routes for one of the navigators.\n\nFor example, in the login screen component, to navigate to sign up screen, add the `onPress` prop to the last `FormButton`. The `navigation.navigate` accepts the value of the screen to navigate to, from the current screen.\n\n```js\n<FormButton\n  title=\"New user? Join here\"\n  modeValue=\"text\"\n  uppercase={false}\n  labelStyle={styles.navButtonText}\n  onPress={() => navigation.navigate('Signup')}\n/>\n```\n\nSimilarly, open `SignupScreen.js` screen file, and pass the prop reference for `navigation`.\n\n```js\nexport default function SignupScreen({ navigation }) {\n  // ...\n}\n```\n\nNext, add the `onPress` prop to the `IconButton`.\n\n```js\n<IconButton\n  icon=\"keyboard-backspace\"\n  size={30}\n  style={styles.navButton}\n  color=\"#6646ee\"\n  onPress={() => navigation.goBack()}\n/>\n```\n\nThe `goBack()` action closes the active screen (Signup screen) and moves back in the stack (Login screen).\n\nFor more information on the `navigation` prop, check out the official reference [here](https://reactnavigation.org/docs/navigation-prop/).\n\n## Add a navigation container\n\nBoth of our screen components are now configured for the navigation to work. In this section, let us add the missing piece called `NavigationContainer` to make sure the current navigation in the auth stack works.\n\nCreate a new file called `Routes.js` inside `src/navigation/` directory. This file is going to contain all the stacks that the app is going to have, but for now, the auth stack.\n\n```js\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport AuthStack from './AuthStack';\n\nexport default function Routes() {\n  return (\n    <NavigationContainer>\n      <AuthStack />\n    </NavigationContainer>\n  );\n}\n```\n\nThe `NavigationContainer` is a component that manages the navigation tree. It also allows the screen components to refer to the `navigation` prop reference. This is done by wrapping all the navigator’s structure.\n\n## Wrapping with the paper provider\n\nCreate a file called `index.js` inside `src/navigation/` directory.\n\nTo make UI components from `react-native-paper` to work, you have to wrap all the routes inside `PaperProvider` as shown below.\n\n```js\nimport React from 'react';\nimport { Provider as PaperProvider } from 'react-native-paper';\nimport Routes from './Routes';\n\n/**\n * Wrap all providers here\n */\n\nexport default function Providers() {\n  return (\n    <PaperProvider>\n      <Routes />\n    </PaperProvider>\n  );\n}\n```\n\nThe `PaperProvider` component provides the theme to all the components in the framework. It also acts as a portal to components that need to be rendered at the top level.\n\nThis is a mandatory step. The reason to create a separate `Providers` component and wrap `Routes` and not wrap the `App` component (as mentioned in official docs [here](https://callstack.github.io/react-native-paper/getting-started.html#usage)) is that there going to be some custom providers later in this app. So to manage all the providers, it is better if you create a separate file.\n\n## Conclusion\n\nThe form of screen components is now complete. To make sure they are working as desired, open up a terminal window and build the app for a specific mobile platform.\n\n```shell\n# for ios\nnpx react-native run-ios\n\n# for android\nnpx react-native run-android\n```\n\nThen, go to the simulator and you are going to get the following result.\n\n<img src='https://miro.medium.com/max/684/1*7UqfiUWxFDtSyR2_CQoigQ.gif' />\n\n---\n\n## What’s Next?\n\nIn part one of this tutorial series, you’ve successfully built a navigation flow using the react-navigation library, set up a stack navigator, and learned how to use pre-defined UI components from react-navtive-paper to create re-usable custom form components.\n\nIn the [next part](https://amanhimself.dev/blog/chat-app-with-react-native-part-2) of this series, we’ll learn how to install the Firebase SDK, how to generate and add Firebase credentials and API keys for iOS apps, implement an email sign-in provider with Firebase, and thus, use the navigation flow with a real-time backend service.\n\nYou can find the complete source code for this project at [this Github repo](https://github.com/amandeepmittal/react-native-examples/tree/master/ChatApp).\n\n---\n\n👉 Here is a list of resources used in this tutorial.\n\n- Learn more about [`navigation prop reference`](https://reactnavigation.org/docs/navigation-prop/)\n- [`Dimensions`](https://reactnative.dev/docs/dimensions) API in React Native\n- Getting started with stack navigator using `react-navigation` v5 [here](https://heartbeat.fritz.ai/getting-started-with-stack-navigator-using-react-navigation-5-in-react-native-and-expo-apps-4c516becaee1)\n\n---\n\n💙 To learn more about React Native, check out these resources:\n\n- [Official documentation](http://reactnative.dev/)\n\nOriginally published at [Heartbeat.Fritz.Ai](https://heartbeat.fritz.ai/chat-app-with-react-native-part-1-build-reusable-ui-form-elements-using-react-native-paper-75d82e2ca94f)\n",
            "url": "https://amanhimself.dev//blog/chat-app-with-react-native-part-1",
            "title": "Chat app with React Native (part 1) - Build reusable UI form elements using react-native-paper",
            "summary": "Chat app with React Native (part 1) - Build reusable UI form elements using react-native-paper",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/create-custom-status-bar-hook-react-navigation",
            "content_html": "---\ntitle: 'How to create a custom hook to change status bar styles for every screen using React Navigation'\nslug: 'create-custom-status-bar-hook-react-navigation'\ndate: '2020-03-13'\nthumbnail: '/thumbnails/expo.png'\ntag: 'react-native'\ncanonicalUrl: 'https://heartbeat.fritz.ai/creating-custom-wavy-headers-using-react-native-svg-639ce0861327'\n---\n\nReact Native has a component called `StatusBar` that is used to control the app status bar. Using the `react-navigation` library you might have a scenario where you don't have a header bar and on different screens, you would like to ensure the color of the status bar is correctly rendered. Such as on the light background, a dark status bar is displayed and on a darker background of the screen, a light status bar is displayed.\n\nIn this tutorial, let us create a custom hook that is going to keep track of the status bar color change whenever a screen changes. For this, you are also going to create mock screens with different background colors and integrate a tab bar.\n\nI am going to use Expo to create a new React Native app but you can use React Native cli to generate a new project too.\n\n## Requirements\n\nEnsure your dev environment includes the following required packages:\n\n- Node.js above `10.x.x` installed on your local machine\n- JavaScript/ES6 basics\n- `expo-cli`\n\n## Installing and configuring react-navigation\n\nStart by creating a new project using `expo-cli`. Navigate inside the project directory when the CLI has finished generating the new project. Then install all the required dependencies to integrate `react-navigation` library and bottom tabs.\n\n```shell\nexpo init customStatusBarHook\n\ncd customStatusBarHook\n\nyarn add @react-navigation/native @react-navigation/bottom-tabs\n\nexpo install react-native-gesture-handler\nreact-native-reanimated react-native-screens\nreact-native-safe-area-context\n@react-native-community/masked-view\n```\n\nThat's it to configure the `react-navigation` library.\n\n## Create bottom Tabs\n\nCreate a new file called `AppTabs.js` inside `src/navigation/` directory. This file is going to be the sole routes file for this demo. Inside it, you are going to create two tab components called `HomeScreen` and `SettingsScreen.\n\nStart by importing all the necessary components.\n\n```js\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { View, Text } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\n```\n\nI am using `@expo/vector-icons` to display icons for each tab but if you are using react-native cli to generate this project, you will have to install `react-native-vector-icons` library.\n\nCreate the functional component `HomeScreen` with a `View` and a `Text` as shown in the snippet below. This is going to be the first tab screen in the tab navigator.\n\n```js\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text style={{ fontSize: 20, color: '#333333' }}>Home Screen</Text>\n    </View>\n  );\n}\n```\n\nAlso, add the following code snippet for the tab screen, `SettingsScreen`.\n\n```js\nfunction SettingsScreen() {\n  useStatusBar('light-content');\n  return (\n    <View\n      style={{\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#be79df'\n      }}\n    >\n      <Text style={{ fontSize: 20, color: 'white' }}>Settings Screen</Text>\n    </View>\n  );\n}\n```\n\nNext, add the following snippet to create the tab navigator with the previous two screens. The following tab navigator is also going to use have tab icons that are going to have different tint colors based on whether being active or not. This can be done by using `screenOptions`.\n\n```js\nconst Tabs = createBottomTabNavigator();\n\nexport default function AppTabs() {\n  return (\n    <NavigationContainer>\n      <Tabs.Navigator\n        screenOptions={({ route }) => ({\n          tabBarIcon: ({ focused, color, size }) => {\n            let iconName;\n\n            if (route.name === 'Home') {\n              iconName = focused\n                ? 'ios-information-circle'\n                : 'ios-information-circle-outline';\n            } else if (route.name === 'Settings') {\n              iconName = focused ? 'ios-list-box' : 'ios-list';\n            }\n            return <Ionicons name={iconName} size={size} color={color} />;\n          }\n        })}\n        tabBarOptions={{\n          activeTintColor: 'tomato',\n          inactiveTintColor: 'gray'\n        }}\n      >\n        <Tabs.Screen name=\"Home\" component={HomeScreen} />\n        <Tabs.Screen name=\"Settings\" component={SettingsScreen} />\n      </Tabs.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\nGo to the terminal window and trigger the command `expo start`. You are going to get the following output in a simulator.\n\n![ss3](https://i.imgur.com/h4ZpdMF.gif)\n\nAs you can notice from the above demo that on each the tab screen the color of the status bar is dark. On the second tab, since it has a darker background than the first tab, there should be a way to change the status bar for each screen component as it is mounted.\n\n## Create a custom Status bar hook\n\nThe `react-navigation` library provides a hook called `useFocusEffect` that helps to run side-effects when a specific screen is focused.\n\nIt is similar to `useEffect` hook from React with the difference being between the two is that side-effects in `useFocusEffect` run only when a screen component is focused.\n\nAlso, it is important to wrap the side-effect in `React.useCallback` hook to avoid triggering the effect after every render when the screen is focused.\n\nCreate a new file called `Hooks.js` inside `src/utils/` directory. Import the following statements.\n\n```js\nimport React, { useCallback } from 'react';\nimport { StatusBar } from 'react-native';\nimport { useFocusEffect } from '@react-navigation/native';\n```\n\nThen export a custom function called `useStatusBar` that is going to provide a simple way to change the color of the status bar when applied. Pass the `style` as the only parameter.\n\n```js\nexport const useStatusBar = style => {\n  useFocusEffect(\n    useCallback(() => {\n      StatusBar.setBarStyle(style);\n    }, [])\n  );\n};\n```\n\n## Apply custom hook to change the status bar color\n\nOpen `src/navigation/AppTabs.js` file and import `useStatusBar`. Also, inside both function components, add the following statements with appropriate bar style value.\n\n```js\n// after other import statements\nimport { useStatusBar } from '../utils/Hooks';\n\nfunction HomeScreen() {\n  useStatusBar('dark-content');\n  // rest of the code remains same\n}\n\nfunction SettingsScreen() {\n  useStatusBar('light-content');\n  // rest of the code remains same\n}\n```\n\nGo back to the simulator or Expo client and you are going to notice the changes now.\n\n![ss4](https://i.imgur.com/EuVkbSG.gif)\n\nFor a better transition between two tabs, you can pass on another parameter called `animate` with a default value of boolean `true` in the `useStatusBar` custom hook.\n\nOpen `src/utils/Hooks.js` and add the following.\n\n```js\nexport const useStatusBar = (style, animated = true) => {\n  useFocusEffect(\n    useCallback(() => {\n      StatusBar.setBarStyle(style, animated);\n    }, [])\n  );\n};\n```\n\nNow, go back to the Expo client to see the changes.\n\n![ss5](https://i.imgur.com/sS9ASUg.gif)\n\n## Conclusion\n\nTo read more about the `useFocusEffect` hook provided by the `react-navigation` library take a look at this [link](https://reactnavigation.org/docs/use-focus-effect/).\n\nYou can also set a status bar configuration based on different routes when using `react-navigation`. Take a look at this [link](https://reactnavigation.org/docs/status-bar/) to read more.\n\nI hope this short tutorial was useful to you. Thanks for reading it!\n",
            "url": "https://amanhimself.dev//blog/create-custom-status-bar-hook-react-navigation",
            "title": "How to create a custom hook to change status bar styles for every screen using React Navigation",
            "summary": "How to create a custom hook to change status bar styles for every screen using React Navigation",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/react-app-with-localstorage-api-and-hooks",
            "content_html": "---\ntitle: 'Build an Expense Tracker app with React Hooks and LocalStorage API'\ndate: '2020-03-11'\nslug: 'react-app-with-localstorage-api-and-hooks'\nthumbnail: '/thumbnails/react.png'\ntag: 'react'\ncanonicalUrl: 'https://blog.crowdbotics.com/build-a-react-app-with-localstorage-api-and-hooks/'\n---\n\nHooks in React have been available since the version 16.7.0-alpha. They are functions that allow you to use React state and a component's lifecycle methods in a functional component. Hooks do not work with classes. If you are familiar with React, you know that the functional component has been called as a functional stateless component. Not any more.\n\nSince previously, only a class component allowed you to have a local state. Using Hooks, you do not have to refactor a class component when using React or React Native into a functional component only because you want to introduce local state or lifecycle methods in that component. In other words, Hooks allow us to write apps in React with functional components.\n\nIn this tutorial, you are going to build a small Expense Tracker app that using React Hooks. Furthermore, to add real-time functionality, you are going to learn how to use `localStorage` API in a React application.\n\n## What are we building?\n\nHere is a demo of how the end result of this tutorial will look like.\n\n![ss10](https://crowdbotics.ghost.io/content/images/2019/09/ss10.gif)\n\n## Table of Contents\n\n- Requirements\n- Setup Bootstrap\n- Implementing Hooks in a React app\n- Building the Expense Tracker App\n- Add input fields\n- Add a list to display expenses\n- Handling controlled input fields\n- Handling Form submission\n- Adding localStorage API to persist data\n- Adding side-effects\n- Deleting all items from the list\n- Conclusion\n\n## Requirements\n\nIn order to follow this tutorial, you are required to have the following installed on your dev machine:\n\n- NodeJS above `10.x.x` installed on your local machine\n- Know, how to run simple npm/yarn commands\n- JavaScript/ES6 and React basics\n\n## Setup Bootstrap\n\nBootstrap 4 uses `flexbox` to handle the layout of a web app. In order to get started using Bootstrap in a React app, you have first to create a react app.\n\n```shell\nnpx create-react-app react-expense-tracker\n```\n\nNext, install the following libraries to add Bootstrap. I am going to use [reactstrap](https://reactstrap.github.io/) that offers built-in Bootstrap 4 components. Reactstrap does not include Bootstrap CSS, so it needs to be installed.\n\n```shell\nyarn add bootstrap reactstrap\n```\n\nAfter installing these dependencies, open the React project you created and open the file `index.js`. Add an import statement to include Bootstrap CSS file.\n\n```js\n// after other imports\nimport 'bootstrap/dist/css/bootstrap.min.css';\n```\n\nThe last step is to test and verify that `reactstrap` components are available to the current React app. Let us add a simple button. Open `App.js` file and import both `Container` and `Button` components from `reactstrap`. A `Container` is a layout component.\n\n```js\nimport React from 'react';\nimport { Button, Container } from 'reactstrap';\n\nfunction App() {\n  return (\n    <Container style={{ marginTop: 20 }}>\n      <Button color=\"success\">Let's start</Button>\n    </Container>\n  );\n}\n\nexport default App;\n```\n\nNow, go back to the terminal window and run `yarn start`. You will see similar results in the browser window on the URL `http://localhost:3000`.\n\n![ss1](https://crowdbotics.ghost.io/content/images/2019/09/ss1-1.png)\n\nThat's it for setting up Bootstrap 4 in a React app.\n\n## Implementing Hooks in a React App\n\nIn this section, you are going to learn how to use `useState` hook to define an initial state to a React component. Open `App.js` file and start by importing `useState` from React core. All built-in hooks can be imported this way.\n\n```js\nimport React, { useState } from 'react';\n```\n\nThe `useState` hook returns two values in an array. The first value is the current value of the state object and the second value in the array is a function to update the state value of the first. This why the second value starts with a conventional prefix of `set`. Although you can make it anything but following conventions that are commonly used in the React world is a good practice to follow.\n\nHooks are always called at the top level of function. Meaning when defining a state, they must be the first thing in the function, especially before returning a JSX. Let us implement a classic example of incrementing and decrementing an initial value of `0`. Inside the `App` function, define the following.\n\n```js\nconst [count, setCount] = useState(0);\n```\n\nReact preserves this state between all the re-rendering happening. `useState()` hook also takes a single argument that represents the initial state. Here is the code of the complete `App` function.\n\n```js\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <Container style={{ marginTop: 20 }}>\n      <p className=\"text-primary\">You clicked {count} times.</p>\n      <Button onClick={() => setCount(count + 1)} color=\"success\">\n        Increase the count\n      </Button> <Button onClick={() => setCount(count - 1)} color=\"danger\">\n        Decrease the count\n      </Button>\n    </Container>\n  );\n}\n```\n\nMake sure that `yarn start` is running and go the browser window to see this component in action. Click on any of the button to increase or decrease the count's value.\n\n![ss2](https://crowdbotics.ghost.io/content/images/2019/09/ss2.gif)\n\nIt works!\n\n## Building the Expense Tracker App\n\nThe Expense Tracker React application you are going to build going to contain two input fields that will contain the expense cause or the name of the expense and amount of that expense. It will also be going to show the total amount of all expenses below a list of individual expenses. These are the main functionalities you have to implement first.\n\nTo get started, let us define an initial array that is going to store the value of each expense and the name or the title of the expense. Then, using this array with `useState` you can render to the total amount of all expenses. Open `App.js` file and define an object `ALL_EXPENSES` as below.\n\n```js\nconst ALL_EXPENSES = [\n  { id: 1, name: 'Buy a book', amount: 20 },\n  { id: 2, name: 'Buy a milk', amount: 5 },\n  { id: 3, name: 'Book a flight ticket', amount: 225 }\n];\n```\n\nThe `App` function is going to be simple since there are now handler functions to modify or add a new expense for now. Define the state `expenses` with its initial value being all the expenses stored in `ALL_EXPENSES`. Then, using `array.reduce`, you calculate the sum of all the expenses.\n\n```js\nimport React, { useState } from 'react';\nimport { Jumbotron, Container } from 'reactstrap';\nimport Logo from './logo.svg';\n\nconst ALL_EXPENSES = [\n  { id: 1, name: 'Buy a book', amount: 20 },\n  { id: 2, name: 'Buy a milk', amount: 5 },\n  { id: 3, name: 'Book a flight ticket', amount: 225 }\n];\n\nfunction App() {\n  const [expenses, setExpenses] = useState(ALL_EXPENSES);\n\n  return (\n    <Container className=\"text-center\">\n      <Jumbotron fluid>\n        <h3 className=\"display-6\">\n          Expense Tracker React App\n          <img src={Logo} style={{ width: 50, height: 50 }} alt=\"react-logo\" />\n        </h3>\n        <div>\n          <p>\n            Total Expense:{' '}\n            <span className=\"text-success\">\n              ${' '}\n              {expenses.reduce((accumulator, currentValue) => {\n                return (accumulator += parseInt(currentValue.amount));\n              }, 0)}\n            </span>\n          </p>\n        </div>\n      </Jumbotron>\n    </Container>\n  );\n}\n\nexport default App;\n```\n\nThe `reduce()` method executes a function to output a single value from all the individual values from an array. In the current case, you have to calculate the total sum of all the `amount` in `ALL_EXPENSES` array. This method executes a callback that takes two arguments once for each assigned value present in the array.\n\nThe first argument, `accumulator` returns the value of the previous invocation of the callback. If the callback hasn't invoked yet, provide an initial value (_in the current scenario_) such that the `accumulator` will be equal to it on the first iteration. On the initial run of the callback, the `currentValue` is going to be equal to the first value of the array. As this callback will run for each of value in the array, on the second iteration, the `accumulator` is equal to the `currentValue` of the first or initial iteration. That is going to be the first value in the array. Also, on the second iteration, the `currentValue` will be equal to the second value in the array. The process continues. To read more about how `reduce()` works, visit this [MDN web docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).\n\nNow, if you go to the browser window, you will get the following result.\n\n![ss3](https://crowdbotics.ghost.io/content/images/2019/09/ss3-1.png)\n\n## Add input fields\n\nThe application currently requires two input fields and a button. Both the input field are going to represent the name of the expense and the amount of each expense. The button is going to add these expenses to the list of all expenses (_which still needs to be created_). Let us set up a new component inside `components` within a new file called `Form`.\n\n```js\nimport React from 'react';\n\nimport {\n  Form as BTForm,\n  FormGroup,\n  Input,\n  Label,\n  Col,\n  Button\n} from 'reactstrap';\n\nconst Form = () => (\n  <BTForm style={{ margin: 10 }}>\n    <FormGroup className=\"row\">\n      <Label for=\"exampleEmail\" sm={2}>\n        Name of Expense\n      </Label>\n      <Col sm={4}>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          id=\"expenseName\"\n          placeholder=\"Name of expense?\"\n        />\n      </Col>\n    </FormGroup>\n    <FormGroup className=\"row\">\n      <Label for=\"exampleEmail\" sm={2}>\n        $ Amount\n      </Label>\n      <Col sm={4}>\n        <Input\n          type=\"number\"\n          name=\"amount\"\n          id=\"expenseAmount\"\n          placeholder=\"0.00\"\n        />\n      </Col>\n    </FormGroup>\n    <Button type=\"submit\" color=\"primary\">\n      Add\n    </Button>\n  </BTForm>\n);\n\nexport default Form;\n```\n\nYou will notice how helpful UI library such as `reactstrap` is going to be at the end of this section to serve the purpose of displaying a form, rather than adding your own CSS. Also, note that both the input fields are of a different type. The name of the expense is of type `text` whereas the amount of the expense is type `number`.\n\nImport this component in the `App.js` file.\n\n```js\n// after other imports...\nimport Form from './components/Form'\n\nfunction App() {\n  const [expenses, setExpenses] = useState(ALL_EXPENSES)\n\n  return (\n    <Container>\n      <Jumbotron fluid>\n        <h3 className='display-6 text-center'>\n          Expense Tracker React App\n          <img src={Logo} style={{ width: 50, height: 50 }} alt='react-logo' />\n        </h3>\n        <div className='text-center'>\n          <p>\n            Total Expense:{' '}\n            <span className='text-success'>\n              ${' '}\n              {expenses.reduce((accumulator, currentValue) => {\n                return (accumulator += parseInt(currentValue.amount))\n              }, 0)}\n            </span>\n          </p>\n        </div>\n        {*/ ADD THE BELOW LINE/*}\n        <Form />\n      </Jumbotron>\n    </Container>\n  )\n}\n\nexport default App\n```\n\nIn the browser window, you will get the following result.\n\n![ss4](https://crowdbotics.ghost.io/content/images/2019/09/ss4.png)\n\n## Add a list to display expenses\n\nLet us setup another component that is going to display a list of expense items with their corresponding amount. To display the item in the list, items from array `ALL_EXPENSES` are going to be used since it will serve as some mock data for now.\n\nCreate a file `List.js` and use UI components `ListGroup` and `ListGroupItem` to create an unordered list.\n\n```js\nimport React from 'react';\nimport { ListGroup, ListGroupItem } from 'reactstrap';\n\nconst List = ({ expenses }) => (\n  <div>\n    <ListGroup>\n      {expenses.map(item => (\n        <ListGroupItem key={item.id}>\n          {item.name} - $ {item.amount}\n        </ListGroupItem>\n      ))}\n    </ListGroup>\n  </div>\n);\n\nexport default List;\n```\n\nImport this component in `App.js` file. In the above snippet, you will notice that it accepts one prop: `expenses`. This refers to the `ALL_EXPENSES` array from the initial value of `useState` hook.\n\n```js\n// after other impors\nimport List from './components/List'\n\nfunction App() {\n  const [expenses, setExpenses] = useState(ALL_EXPENSES)\n\n  return (\n    <Container>\n      <Jumbotron fluid>\n        <h3 className='display-6' className='text-center'>\n          Expense Tracker React App\n          <img src={Logo} style={{ width: 50, height: 50 }} alt='react-logo' />\n        </h3>\n        <div className='text-center'>\n          <p>\n            Total Expense:{' '}\n            <span className='text-success'>\n              ${' '}\n              {expenses.reduce((accumulator, currentValue) => {\n                return (accumulator += parseInt(currentValue.amount))\n              }, 0)}\n            </span>\n          </p>\n        </div>\n        <Form />\n        {*/ ADD THE BELOW LINE/*}\n        <List expenses={expenses} />\n      </Jumbotron>\n    </Container>\n  )\n}\n```\n\nVisiting the browser window will yield the following list.\n\n![ss5](https://crowdbotics.ghost.io/content/images/2019/09/ss5.png)\n\n## Handling controlled input fields with Hooks\n\nIn this section, let us manage to convert both the static input fields which are as of right now, of no use, into usable controlled input fields. A **controlled input field** accepts its current value as a prop as well as a callback to change that value.\n\nOf course, you are going to use Hooks to do this. Add the following initial state for `name` and `amount` use `useState()` inside `App` component. Both of them are going to have an empty string as their initial values.\n\n```js\nconst [name, setName] = useState('');\nconst [amount, setAmount] = useState('');\n```\n\nTo update their values when a user starts typing, add the following handler methods. Both of these functions are going to retrieve the value from the corresponding field. The `console` statements are for testing purpose.\n\n```js\nconst handleName = event => {\n  console.log('Name ', event.target.value);\n  setName(event.target.value);\n};\n\nconst handleAmount = event => {\n  console.log('Amount ', event.target.value);\n  setAmount(event.target.value);\n};\n```\n\nLastly, to submit the form, there is going to be another handler method called `handleSubmitForm`.\n\n```js\nconst handleSubmitForm = event => {\n  event.preventDefault();\n  // do something when submitting the form\n};\n```\n\nRight now, it doesn't have business logic to add the expense to the list. It is just preventing the form from refreshing the whole page in submission using `event.preventDefault()`.\n\nAll of these have to be passed as props to the `Form` component. Modify it.\n\n```js\n<Form\n  name={name}\n  amount={amount}\n  handleName={handleName}\n  handleAmount={handleAmount}\n  handleSubmitForm={handleSubmitForm}\n/>\n```\n\nNext, open `Form.js` file and destructor the props as well as update both the input fields with attributes such as `value` and `onChange` method.\n\nHere is how the modified `Form.js` component looks like.\n\n```js\nimport React from 'react';\n\nimport {\n  Form as BTForm,\n  FormGroup,\n  Input,\n  Label,\n  Col,\n  Button\n} from 'reactstrap';\n\nconst Form = ({ name, amount, handleName, handleAmount, handleSubmitForm }) => (\n  <BTForm style={{ margin: 10 }} onSubmit={handleSubmitForm}>\n    <FormGroup className=\"row\">\n      <Label for=\"exampleEmail\" sm={2}>\n        Name of Expense\n      </Label>\n      <Col sm={4}>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          id=\"expenseName\"\n          placeholder=\"Name of expense?\"\n          value={name}\n          onChange={handleName}\n        />\n      </Col>\n    </FormGroup>\n    <FormGroup className=\"row\">\n      <Label for=\"exampleEmail\" sm={2}>\n        $ Amount\n      </Label>\n      <Col sm={4}>\n        <Input\n          type=\"number\"\n          name=\"amount\"\n          id=\"expenseAmount\"\n          placeholder=\"0.00\"\n          value={amount}\n          onChange={handleAmount}\n        />\n      </Col>\n    </FormGroup>\n    <Button type=\"submit\" color=\"primary\">\n      Add\n    </Button>\n  </BTForm>\n);\n\nexport default Form;\n```\n\nNow, go to the browser window. Make sure to open **Console** tab from the **Developer Tools**. Start typing into an input field, and you will see the console statement corresponding to a particular input fields triggers.\n\n![ss6](https://crowdbotics.ghost.io/content/images/2019/09/ss6-1.gif)\n\n## Handling Form submission\n\nIn this section, you are going to add the logic to handle the form submission. Start by adding an `if/else` statement to check whether the first input field `name` is not empty, and the second input field `amount` is not a negative value.\n\nNext, create a single `expense` object that takes the current value of `name` and `amount` input fields. Now the hard part. Right now, the `expenses` array has already an initial value with three individual expense objects. If you are going to add to that array, you will have to take care of not override the previous expense objects in that array. _Spread_ operator to the rescue.\n\n```js\nconst handleSubmitForm = event => {\n  event.preventDefault();\n  //check whether the name is not empty and the amount is not negative\n  if (name !== '' && amount > 0) {\n    // single expense object\n    const expense = { name, amount };\n    // do not override previous values in the array\n    // use spread operator to access previous values\n    setExpenses([...expenses, expense]);\n\n    // clean input fields\n    setName('');\n    setAmount('');\n  } else {\n    console.log('Invalid expense name or the amount');\n  }\n};\n```\n\nLastly, you have to clear both the input fields after the form submission. Set them back to their initial values, that is, empty strings.\n\nGo the browser window and try adding a few items. Do notice that the **Total Expense** gets an update after each form submission.\n\n![ss7](https://crowdbotics.ghost.io/content/images/2019/09/ss7.gif)\n\nOn the empty submission, it will trigger the `else` clause. To see it in action, make sure you have **Console** tab from **Developer Tools** open.\n\n![ss8](https://crowdbotics.ghost.io/content/images/2019/09/ss8.gif)\n\n## Adding localStorage API to persist data\n\nRight now, there is a way to persist these values permanently since all you are using a mock array to display and add new expenses. Using `localStorage()` API let us add the functionality to save all the expenses that the user adds to the list.\n\nThe `localStorage` API allows you to access a `Storage` object that is the stored data saved across browser sessions.\n\nEach expense value you are going to store in the `localStorage` API is going to be a string so make sure you understand the difference between `JSON.stringify()` and `JSON.parse()`.\n\nReplace the current mock `ALL_EXPENSES` with the following conditional operator.\n\n```js\nconst ALL_EXPENSES = localStorage.getItem('expenses')\n  ? JSON.parse(localStorage.getItem('expenses'))\n  : [];\n```\n\nUsing the method `getItem()` from the `localStorage` API you can read any value stored. However, right now, there is no value stored so it is going to be an empty array. You can verify this by opening **Developer Tools** > **Application** > **Storage** > **LocalStorage** > **https://localhost:3000**.\n\n![ss9](https://crowdbotics.ghost.io/content/images/2019/09/ss9.png)\n\n## Adding side-effects\n\nUsing the hook `useEffect` you can handle lifecycle methods directly inside the functional components. By default, it runs after every render including the initial render, but you can control that behavior by passing _dependencies_ in an array. If dependency being passed changes or gets an update, then only it will run.\n\nImport the `useEffect` app from React in `App.js` file.\n\n```js\nimport React, { useState, useEffect } from 'react';\n```\n\nInside this `useEffect` function you are going to use `localStorage.setItem()` to store the expenses. It accepts two parameters. First is going to be a callback function and second is going to the _dependency_.\n\nThis dependency is going to be the `expenses` from the state. Basically, you are saying that, whenever there is an update to the initial value of the `expenses`, run the `useEffect` method.\n\nAdd the following after other handler methods.\n\n```js\nuseEffect(() => {\n  localStorage.setItem('expenses', JSON.stringify(expenses));\n}, [expenses]);\n```\n\nMake sure the key (`expenses`) you are passing in `setItem()` is the same as the key whose value you are getting using `getItem`.\n\nThe `useEffect` is still going to run after the initial render but won't run after that until there is a change in the value of `expenses`.\n\nSee the demo below.\n\n![ss10](https://crowdbotics.ghost.io/content/images/2019/09/ss10-1.gif)\n\nNotice that it works. If you refresh the browser window, the list stays as it is.\n\n![ss11](https://crowdbotics.ghost.io/content/images/2019/09/ss11.gif)\n\n## Deleting all items from the list\n\nThis is a small section in which you are going to add the functionality of clearing the whole list of expenses with a single button click. To do so, create a handler method and inside it, set the initial value of the `expenses` to an empty array.\n\nOpen `App.js` file and add this:\n\n```js\nconst handleClearExpenses = () => {\n  setExpenses([]);\n};\n```\n\nPass it as a prop to the `Form` component.\n\n```js\n<Form\n  name={name}\n  amount={amount}\n  handleName={handleName}\n  handleAmount={handleAmount}\n  handleSubmitForm={handleSubmitForm}\n  handleClearExpenses={handleClearExpenses}\n/>\n```\n\nNext, edit the `Form.js` file and add a new button to delete the list of items. Do not forget to destructor the new prop `handleClearExpenses`.\n\n```js\nimport React from 'react';\n\nimport {\n  Form as BTForm,\n  FormGroup,\n  Input,\n  Label,\n  Col,\n  Button\n} from 'reactstrap';\n\nconst Form = ({\n  name,\n  amount,\n  handleName,\n  handleAmount,\n  handleSubmitForm,\n  handleClearExpenses\n}) => (\n  <BTForm style={{ margin: 10 }} onSubmit={handleSubmitForm}>\n    <FormGroup className=\"row\">\n      <Label for=\"exampleEmail\" sm={2}>\n        Name of Expense\n      </Label>\n      <Col sm={4}>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          id=\"expenseName\"\n          placeholder=\"Name of expense?\"\n          value={name}\n          onChange={handleName}\n        />\n      </Col>\n    </FormGroup>\n    <FormGroup className=\"row\">\n      <Label for=\"exampleEmail\" sm={2}>\n        $ Amount\n      </Label>\n      <Col sm={4}>\n        <Input\n          type=\"number\"\n          name=\"amount\"\n          id=\"expenseAmount\"\n          placeholder=\"0.00\"\n          value={amount}\n          onChange={handleAmount}\n        />\n      </Col>\n    </FormGroup>\n    <Button type=\"submit\" color=\"primary\">\n      Add\n    </Button>{' '}\n    <Button type=\"submit\" color=\"danger\" onClick={handleClearExpenses}>\n      Delete\n    </Button>\n  </BTForm>\n);\n\nexport default Form;\n```\n\nNotice, that right now there are three items in the list, as shown below.\n\n![ss12](https://crowdbotics.ghost.io/content/images/2019/09/ss12.png)\n\nOn clicking the delete button will erase all the items from the localstorage.\n\n![ss13](https://crowdbotics.ghost.io/content/images/2019/09/ss13.gif)\n\n## Conclusion\n\n_Congratulations 🎉_\n\nYou have just learned the basics of React hooks and how to implement them in a real-time application. Also, using `localStorage` API is easy. I hope you had fun and gained something useful out of this tutorial. Go ahead, and try to extend this app by adding features like:\n\n- editing a single item in the list\n- deleting a single item in the list\n- adding a uniquely generated id for each item\n\nTo learn more about React hooks, I can highly recommend following React official documentation [**here**](https://reactjs.org/docs/hooks-effect.html).\n\n_Originally published at [Crowdbotics' Blog](https://crowdbotics.ghost.io/build-a-react-app-with-localstorage-api-and-hooks/)_.\n",
            "url": "https://amanhimself.dev//blog/react-app-with-localstorage-api-and-hooks",
            "title": "Build an Expense Tracker app with React Hooks and LocalStorage API",
            "summary": "Build an Expense Tracker app with React Hooks and LocalStorage API",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/nested-navigators-in-react-native",
            "content_html": "---\ntitle: 'Nesting Tab and Stack navigators in React Native and Expo apps'\ndate: '2020-02-26'\nslug: 'nested-navigators-in-react-native'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://heartbeat.fritz.ai/nesting-tab-and-stack-navigators-in-react-native-and-expo-apps-cc118a141e70'\n---\n\nUsing [`react-navigation`](https://reactnavigation.org/docs/en/getting-started.html) you can definitely nest different types of navigators. The term nesting navigators mean that rendering one navigator inside a screen of another navigator.\n\nThe possible scenarios of nesting navigators are:\n\n- Stack navigator nested inside drawer navigator\n- Tab navigator nested inside stack navigator\n- Stack navigator nested inside a tab navigator\n\nIn this tutorial, let us examine one of the above scenarios by nesting Tab inside a stack navigator. Whether you are following from the previous tutorial on building a stack navigator using a component-based configuration with the latest version of the react-navigation library, or not, here is the source code of the Expo demo app that is going to be leveraged. This demo app, already has a stack navigator running. You can download the source code from the Github rep [here](https://github.com/amandeepmittal/react-native-examples/tree/master/reactnav5-stack-navigator).\n\n## Table of contents\n\n- Install dependencies\n- Create a mock screen\n- Create a tab navigator\n- Adding icon and changing active tint color\n- Passing `screenOptions` in a Tab Navigator\n- Updating the header title for the nested child navigator\n- Conclusion\n\n## Requirements\n\nRequirements for this tutorial is simple. Have the following installed on your local dev environment.\n\n- Node.js version >= `10.x.x` installed\n- Have access to one package manager such as npm or yarn\n- Latest `expo-cli` version installed or use npx\n\nDo note that, without dwelling much into the configuration of native binaries with the `react-navigation` library, I am going to use a project that is already generated using `expo-cli`. If you wish to start afresh, choose the blank template.\n\n## Install dependencies\n\nInstall the following dependency to setup a Tab Navigator. Run the following command from a terminal window.\n\n```shell\nyarn add @react-navigation/bottom-tabs\n```\n\nThis package is going to allow the app to have a simple tab bar appear at the bottom of the screen and switch between different routes. The demo app we are going to build is going to consist of two tabs. We are going to nest the stack navigator inside the first tab and create a mock screen for the second tab.\n\n## Create a mock screen\n\nEven though the current app structure has three different screen components (_open `src/screens` to view them_), let us create another screen component called `Profile` that will act as the second tab. Create a new file called `src/screens/Profile.js` with the following code snippet:\n\n```js\nimport React from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\n\nfunction Profile(props) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Profile Tab</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#ebebeb'\n  },\n  text: {\n    color: '#101010',\n    fontSize: 24,\n    fontWeight: 'bold'\n  }\n});\n\nexport default Profile;\n```\n\n## Create a tab navigator\n\nIn this section, let us set up a basic Tab navigator. Start by renaming the file `MainStackNavigator` to `AppNavigator.js` in the directory `src/navigation`.\n\nAfter the renaming, the routes config file, after other import statements, import the `createBottomTabNavigator` from `@react-navigation/bottom-tabs` as well as the `Profile` screen component.\n\n```js\nimport * as React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n// add this after other import statements\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nimport Home from '../screens/Home';\nimport Detail from '../screens/Detail';\nimport Settings from '../screens/Settings';\n// add this after other import statements\nimport Profile from '../screens/Profile';\n```\n\nThen create an instance of the `createBottomTabNavigator` called `Tab` as below:\n\n```js\n// after other instances\nconst Tab = createBottomTabNavigator();\n```\n\nNext, create a function called `MainTabNavigator()`. Using `Tab.Navigator` you can define the structure of the routes and use `Tab.Screen` you can define each of the routes.\n\nLet us define tab routes for now: `Home` and `Profile`.\n\n```js\nfunction MainTabNavigator() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Home\" component={Home} />\n      <Tab.Screen name=\"Profile\" component={Profile} />\n    </Tab.Navigator>\n  );\n}\n```\n\nNow, in the `MainStackNavigator()` instead of passing the `Home` screen, let us pass the `MainTabNavigator`.\n\n```js\n<Stack.Screen name=\"Home\" component={MainTabNavigator} />\n```\n\nLastly, to make all of this work, open `App.js` file in the root of the project and modify the statement that imports the `MainStackNavigator` with the correct file name.\n\n```js\nimport React from 'react';\n\n// make sure this matches the file name of navigator config\nimport MainStackNavigator from './src/navigation/AppNavigator';\n\nexport default function App() {\n  return <MainStackNavigator />;\n}\n```\n\nGo back to the terminal window, execute `expo start` and open up an Expo client inside a simulator or a real device. You are going to get the following result.\n\n<img src='https://miro.medium.com/max/369/1*_noQNKBA1wUf8EkgNyCsQA.gif' />\n\n## Adding icon and changing active tint color\n\nFrom the last image, you notice that the active tab is highlighted by a tint color of blue and the non-active tab is of gray. Let us change this tint color.\n\nOpen `AppNavigator.js` file at `Tab.Navigator` add a prop called `tabBarOptions`. This prop allows you to customize the tab bar shared between different routes.\n\nAdd the following:\n\n```js\n<Tab.Navigator\n  tabBarOptions={{\n    activeTintColor: '#101010'\n  }}\n>\n  {/* rest remains same */}\n</Tab.Navigator>\n```\n\nGo to the simulator device, you are going to notice that the active tab bar label has a color of black from the previous blue.\n\n<img src='https://miro.medium.com/max/350/1*y3hy861GwUm_mj1HCvr3Ew.png' />\n\nLet us add some icons to the tab bar. Start by importing the `Ionicons` from `@expo/vector-icons`.\n\n```js\nimport { Ionicons } from '@expo/vector-icons';\n```\n\nThen, in each `Tab.Screen`, add an options prop that is going to have a property of `tabBarIcon`. This function returns the component `Ionicons`. Pass the arguments `color` and `size` you can maintain the active tint color.\n\n```js\n<Tab.Navigator\n  tabBarOptions={{\n    activeTintColor: '#101010'\n  }}\n>\n  <Tab.Screen\n    name=\"Home\"\n    component={Home}\n    options={{\n      tabBarIcon: ({ color, size }) => (\n        <Ionicons name=\"ios-home\" color={color} size={size} />\n      )\n    }}\n  />\n  <Tab.Screen\n    name=\"Profile\"\n    component={Profile}\n    options={{\n      tabBarIcon: ({ color, size }) => (\n        <Ionicons name=\"ios-person\" size={size} color={color} />\n      )\n    }}\n  />\n</Tab.Navigator>\n```\n\nHere is the output:\n\n<img src='https://miro.medium.com/max/350/1*3G4fINzTR9vNIGQzujkegQ.png' />\n\nYou can even change the background of the tab bar by adding a `style` property to `tabBarOptions`.\n\n```js\n<Tab.Navigator\n  tabBarOptions={{\n    activeTintColor: '#101010',\n    style: {\n      backgroundColor: '#ffd700'\n    }\n  }}\n>\n  {/* rest remains same */}\n</Tab.Navigator>\n```\n\nHere is the output for the above snippet:\n\n<img src='https://miro.medium.com/max/350/1*Gxk9p_0XQ2z-y-sYHH7Epw.png' />\n\n## Passing screenOptions in a Tab Navigator\n\nThe previous section is one way to add icons to each route or screen in the tab bar. There is another way you can do it by passing `screenOptions` in the wrapper `Tab.Navigator`. This prop is used to modify or add common styles to a navigator.\n\n```js\nfunction MainTabNavigator() {\n  return (\n    <Tab.Navigator\n      tabBarOptions={{\n        activeTintColor: '#101010',\n        style: {\n          backgroundColor: '#ffd700'\n        }\n      }}\n      screenOptions={({ route }) => ({\n        tabBarIcon: ({ color, size }) => {\n          let iconName;\n          if (route.name == 'Home') {\n            iconName = 'ios-home';\n          } else if (route.name == 'Profile') {\n            iconName = 'ios-person';\n          }\n          return <Ionicons name={iconName} color={color} size={size} />;\n        }\n      })}\n    >\n      <Tab.Screen name=\"Home\" component={Home} />\n      <Tab.Screen name=\"Profile\" component={Profile} />\n    </Tab.Navigator>\n  );\n}\n```\n\nThere is no change in the functioning of the tab navigator from the previous section, as you can notice below:\n\n<img src='https://miro.medium.com/max/369/1*X06mUqbYfHKYEDdPAVBJjA.gif' />\n\n## Updating the header title for the nested child navigator\n\nRight now the title for each tab screen is going to be the same. This is because the root navigator (which, here is the Stack Navigator) structure is going to look at its immediate children, which are Home, Detail and Settings screen. In the current scenario, if you are to set the title for the `Profile` screen passing the prop `options`, it is not going to work.\n\nThis is because the `Profile` screen is a child of the Tab Navigator and not Stack Navigator. The tab navigator is nested inside the Stack navigator and thus, Profile is not the immediate child to Stack Navigator.\n\nFor each tab to have its own title (since the tab navigator is nested inside the stack navigator), you have to determine the title for a specific tab screen based on the navigation state from the property `route.state`.\n\nThis can be done by defining a helper function called `getHeaderTitle` that has `route` as its parameter. Why pass `route`? Because it contains the `state` property which refers to the child's navigator state and the value of the currently active route name can be obtained from this state.\n\nAdd a function called `getHeaderTitle` in `AppNavigator.js` file.\n\n```js\nfunction getHeaderTitle(route) {\n  const routeName = route.state\n    ? route.state.routes[route.state.index].name\n    : route.params?.screen || 'Home';\n\n  switch (routeName) {\n    case 'Home':\n      return 'Home';\n    case 'Profile':\n      return 'Profile';\n  }\n}\n```\n\nThen, [as per the recommended way](https://reactnavigation.org/docs/en/screen-options-resolution.html#__docusaurus), add the options prop to the `Stack.Screen` route whose value is `Home`.\n\n```js\n<Stack.Screen\n  name=\"Home\"\n  component={MainTabNavigator}\n  options={({ route }) => ({\n    headerTitle: getHeaderTitle(route)\n  })}\n/>\n```\n\nNow, when visiting the `Profile` tab, you are going to get the desired title in the header.\n\n<img src='https://miro.medium.com/max/369/1*gCs24QDMEQ_D6DcDxjiALw.gif' />\n\n## Conclusion\n\n_Congratulations! You’ve completed this tutorial._\n\nIn this tutorial, we discuss only one scenario of nesting navigators. The main objective here is to get familiar with the component-based configuration of the Tab Navigator in the latest version of the `react-navigation` library.\n\nHere is the link to the complete Tab Navigator API [here](https://reactnavigation.org/docs/en/bottom-tab-navigator.html) I'd recommend you to check.\n\nYou can find the complete code for this tutorial at this [GitHub repo](https://github.com/amandeepmittal/react-native-examples/tree/master/reactnav5-tab-navigator).\n\nOriginally published at [Heartbeat.fritz.ai](https://heartbeat.fritz.ai/nesting-tab-and-stack-navigators-in-react-native-and-expo-apps-cc118a141e70)\n",
            "url": "https://amanhimself.dev//blog/nested-navigators-in-react-native",
            "title": "Nesting Tab and Stack navigators in React Native and Expo apps",
            "summary": "Nesting Tab and Stack navigators in React Native and Expo apps",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/stack-navigator-with-react-navigation-v5",
            "content_html": "---\ntitle: 'Getting Started with Stack Navigator using react-navigation 5 in React Native and Expo apps'\ndate: '2020-02-21'\nslug: 'stack-navigator-with-react-navigation-v5'\nthumbnail: '/thumbnails/expo.png'\ntemplate: post\ntag: 'expo'\ncanonicalUrl: 'https://heartbeat.fritz.ai/getting-started-with-stack-navigator-using-react-navigation-5-in-react-native-and-expo-apps-4c516becaee1'\n---\n\n[React Navigation](https://reactnavigation.org/) as the library released its 5th stable version recently, just being two years old. Without a doubt, it is one of the most popular navigation solutions in React Native apps that also has support for the Expo.\n\nRecently, it underwent some core changes and how you used to define routes till `react-navigation` version `4.x.x` has some major changes as to how you are going to define routes using the latest version of the library.\n\nSome of the major highlights the team of maintainers released in a [blog post](https://reactnavigation.org/blog/) are that the navigation patterns are now more component-based, common use cases can now be handled with pre-defined Hooks, new architecture allows you to configure and update a screen from the component itself and some other changes that you can dwell in the [blog post here](https://reactnavigation.org/blog/).\n\nThe major highlight from these new changes in the component based configuration. If you have experience developing with web development libraries such as Reactjs in combination with `react-router`, you won't experience much of a learning curve here. However, if you are diving into React Native recently, and chances are that you are going to use `react-navigation`, I'd recommend starting with this latest version. I hope this tutorial serves as a starting point or a refreshing one in your journey.\n\nIf you’d like to receive **more React Native tutorials** in your inbox, you can sign up for my newsletter **[here](https://www.getrevue.co/profile/amanhimself)**.\n\n## Table of contents\n\n- Install dependencies\n- Create mock screens\n- Create a basic stack navigator\n- Specifying options for each screen in Stack Navigator\n- Navigating between two screens\n- Enabling gestures in react-navigation\n- Passing data between routes\n- How to use params in the screen's title\n- Using common screenOptions to modify header styles\n- Making the back button title invisible on iOS\n- Understanding header modes and changing it in an Android app\n- Directly navigating from the third screen to the top of the stack screen navigator\n- Conclusion\n\n## Requirements\n\nRequirements for this tutorial is simple. Have the following installed on your local dev environment.\n\n- Node.js version >= `10.x.x` installed\n- Have access to one package manager such as npm or yarn\n- Latest `expo-cli` version installed or use npx\n\nDo note that, without dwelling much into the configuration of native binaries with the `react-navigation` library, I am going to `expo-cli` to generate the project and Expo client to view output from time to time. Make sure you have both installed.\n\n## Install dependencies\n\nTo start, generate a new Expo project with a `blank` template by running the following command in a terminal window.\n\n```shell\nnpx expo init [Project Name]\n\n# after the project directory has been generated\n\ncd [Project Name]\n```\n\nNext, install the following dependencies for the `react-navigation` library to work. The first command is going to install core utilities of `react-navigation` that are used by navigators to create the navigation structure in the app. The second command uses `expo install` instead of `npm install` or `yarn add`. The reason is that `expo` is going to install the version of the libraries mentioned that are compatible with the Expo SDK.\n\n```shell\nyarn add @react-navigation/native @react-navigation/stack\n\n# use expo install for Expo projects only\nexpo install react-native-gesture-handler react-native-reanimated\nreact-native-screens react-native-safe-area-context\n@react-native-community/masked-view\n```\n\nDo note that the package `@react-navigation/stack` is only required to install when you are going to use the Stack navigation pattern in the app. For example, if you are just going to use tab navigation, you are going to install a different package as shown [here](https://reactnavigation.org/docs/en/material-bottom-tab-navigator.html).\n\n## Create mock screens\n\nCreate a new directory `src/screens` and inside it, create two new files called `Home.js` and `Detail.js`. The code snippet for both of these files is listed below:\n\n```js\n// src/screens/Home.js\n\nimport React from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\n\nfunction Home() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Home Screen</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#ebebeb'\n  },\n  text: {\n    color: '#101010',\n    fontSize: 24,\n    fontWeight: 'bold'\n  }\n});\n\nexport default Home;\n\n// src/screens/Detail.js\n\nimport React from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\n\nfunction Details() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Details Screen</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#ebebeb'\n  },\n  text: {\n    color: '#101010',\n    fontSize: 24,\n    fontWeight: 'bold'\n  }\n});\n\nexport default Details;\n```\n\nThese screen components are for demonstration purposes. You have to feed the routes to the navigator to work with, these screen components are going to the routes.\n\n## Create a basic stack navigator\n\nIn this section, let us set up a basic Stack navigator. Start by creating a new directory `src/navigation`. The best definition of what a Stack Navigator does can be read from its docs. I am going to quote it here:\n\n> React Navigation's stack navigator provides a way for your app to transition between screens and manage navigation history. If your app uses only one stack navigator then it is conceptually similar to how a web browser handles navigation state - your app pushes and pops items from the navigation stack as users interact with it, and this results in the user seeing different screens.\n\nNow that you have an idea of what exactly a stack navigation pattern is, let us start by creating one. Inside the `src/navigation` directory, create a new file called `MainStackNavigator.js` and import the following statements:\n\n```js\nimport * as React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nimport Home from '../screens/Home';\n```\n\nFrom the above snippet, the `NavigationContainer` is a component that manages the navigation tree. It also contains the navigation state and it has to wrap all navigators structure.\n\nThe `createStackNavigator` is a function that is used to implement a stack navigation pattern. This function returns two React components: `Screen` and `Navigator` that help to configure each component screen. For now, let us add one screen to this navigation pattern.\n\n```js\nconst Stack = createStackNavigator();\n\nfunction MainStackNavigator() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={Home} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nexport default MainStackNavigator;\n```\n\nIn the above snippet, there are two required props with each `Stack.Screen`. The prop `name` refers to the name of the route and prop `component` specifies which screen to render at the particular route.\n\nDo not forget to export the `MainStackNavigator` since it is going to be imported in the root of the app, that is, inside `App.js` file as shown below.\n\n```js\nimport React from 'react';\n\nimport MainStackNavigator from './src/navigation/MainStackNavigator';\n\nexport default function App() {\n  return <MainStackNavigator />;\n}\n```\n\nExecute the command `expo start` and make sure the Expo client is running either in a simulator device or a real device. You are going to get the HomeScreen as the following result.\n\n<img src='https://miro.medium.com/max/350/1*xO2cNaDxKiisiipKN6YhdA.png' />\n\n## Specifying options for each screen in Stack Navigator\n\nBy default, it shows the title bar on the screen. However, you can set the title of the screen. Let us change the title of the screen shown, from `Home` to render `Home Screen`.\n\nThis is done by specifying the options on each screen as shown below. Open `MainStackNavigator.js` file and the prop `options` on `Stack.Screen` for `Home` component.\n\n```js\n<Stack.Screen name=\"Home\" component={Home} options={{ title: 'Home Screen' }} />\n```\n\nThe changes are instantly reflected in the Expo client.\n\n<img src='https://miro.medium.com/max/350/1*YV2HwIMzcnU1-GbSaEAkAg.png' />\n\n## Navigating between two screens\n\nIn the current stack navigator structure, let us add the second screen component called `Detail`. Import it from `screens/Detail.js` and another route as shown below.\n\n```js\n// rest import statements remain same\nimport Detail from '../screens/Detail';\n\nfunction MainStackNavigator() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen\n          name=\"Home\"\n          component={Home}\n          options={{ title: 'Home Screen' }}\n        />\n        <Stack.Screen\n          name=\"Detail\"\n          component={Detail}\n          options={{ title: 'Detail Screen' }}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\nTo see that `Detail` screen is currently in our stack, try adding the prop `initialRouteName` on `Stack.Navigator`. The first screen that renders is going to be the `Detail` screen.\n\n```js\n<Stack.Navigator initialRouteName='Detail'>\n```\n\nHere is the output:\n\n<img src='https://miro.medium.com/max/350/1*2FuxHYiJZtynAxlu7XoSog.png' />\n\nBut we need a way to navigate from the Home screen to the Detail screen not just display the later screen as the initial route. Change the value of `initialRouteName` to `Home`.\n\n```js\n<Stack.Navigator initialRouteName='Home'>\n```\n\nThen, open `screen/Home.js` and a button component that is going to navigate to the Detail screen when pressed.\n\nImport `TouchableOpacity` from `react-native` core and make sure to utilize the `navigation` prop passed to the `Home` screen. This prop is passed to every screen that is a route wrapped by the Stack Navigator.\n\n```js\nimport React from 'react';\nimport { StyleSheet, View, Text, TouchableOpacity } from 'react-native';\n\nfunction Home(props) {\n  const { navigation } = props;\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Home Screen</Text>\n      <TouchableOpacity\n        style={styles.buttonContainer}\n        onPress={() => navigation.navigate('Detail')}\n      >\n        <Text style={styles.buttonText}>Go to Detail Screen</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#ebebeb'\n  },\n  text: {\n    color: '#101010',\n    fontSize: 24,\n    fontWeight: 'bold'\n  },\n  buttonContainer: {\n    backgroundColor: '#222',\n    borderRadius: 5,\n    padding: 10,\n    margin: 20\n  },\n  buttonText: {\n    fontSize: 20,\n    color: '#fff'\n  }\n});\n\nexport default Home;\n```\n\nHere is the changed Home screen:\n\n<img src='https://miro.medium.com/max/350/1*7Ap75E1ik7p3HCUYyDT2jA.png' />\n\n## Enabling gestures in react-navigation\n\nIf you press the button, you are going to notice that it navigates you to the Detail screen. On the Detail screen, do note that the back button with the name of the previous screen is shown in the header.\n\n<img src='https://miro.medium.com/max/374/1*c70jHetvl1YYf4dJu3u5Lw.gif' />\n\nThe above demo is how the navigation between two-screen works on an iOS device. The default native transition on iOS when using stack navigation is that the screen is pushed or pulled from the right side. On Android, as you will notice below, the behavior is different. The new screen is pushed from the bottom.\n\n<img src='https://miro.medium.com/max/327/1*D8q7w0OjqFJQVUtQZw6U0g.gif' />\n\nAlso, in the below demo notice that on iOS swipe gesture works when going back from Detail to Home screen. On Android, it doesn't.\n\n<img src='https://miro.medium.com/max/825/1*1w3g_Wymp31A4siy7PcSNw.gif' />\n\nTo enable gestures on Android as well, in `Stack.Navigator` you have to add a prop called `screenOptions`. This prop is used when you want to pass some value to all the children's routes of a stack navigator.\n\n```js\n<Stack.Navigator\n        initialRouteName='Home'\n        screenOptions={{\n          gestureEnabled: true\n        }}>\n```\n\nThis is going to enable the gestures on Android as well.\n\n<img src='https://miro.medium.com/max/825/1*0Z0iyNBAjToSldPXaChgHQ.gif' />\n\n## Passing data between routes\n\nYou can pass parameters to a route by putting the params in an object as the second argument using `navigation.navigate`. Let's mimic a small example by passing data from Home to Detail screen.\n\nAdd the following mock object for some data in `Home.js`.\n\n```js\nconst character = {\n  name: 'Luke Skywalker',\n  home: 'Tatooine',\n  species: 'human'\n};\n```\n\nThen, in the same screen component file, modify the `TouchableOpacity` and pass the previous object as the second argument.\n\n```js\n<TouchableOpacity\n  style={styles.buttonContainer}\n  onPress={() => navigation.navigate('Detail', { item: character })}\n>\n  <Text style={styles.buttonText}>Who is {character.name}?</Text>\n</TouchableOpacity>\n```\n\nHere is the output:\n\n<img src='https://miro.medium.com/max/350/1*cGivoNSclkmj6yUVdYQVnw.png' />\n\nOpen `Detail.js` and add the following code snippet. Using `route.params` this screen component can read the parameters passed from the Home screen. Inside the `Detail` component, let us destructure the `route.params` and then display those values.\n\n```js\nimport React from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\n\nfunction Detail(props) {\n  const { route } = props;\n  const { item } = route.params;\n  const { name, home, species } = item;\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Detail Screen</Text>\n      <View style={styles.card}>\n        <Text style={styles.cardText}>Name: {name}</Text>\n        <Text style={styles.cardText}>Home Planet: {home}</Text>\n        <Text style={styles.cardText}>Species: {species}</Text>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#ebebeb'\n  },\n  text: {\n    color: '#101010',\n    fontSize: 24,\n    fontWeight: 'bold'\n  },\n  card: {\n    width: 350,\n    height: 100,\n    borderRadius: 10,\n    backgroundColor: '#101010',\n    margin: 10,\n    padding: 10,\n    alignItems: 'center'\n  },\n  cardText: {\n    fontSize: 18,\n    color: '#ffd700',\n    marginBottom: 5\n  }\n});\n\nexport default Detail;\n```\n\nHere is the output showing above works:\n\n<img src='https://miro.medium.com/max/825/1*dq6r8ObVqOAjyVwg8dFj3A.gif' />\n\n## How to use params in the screen's title\n\nYou can use params in the title of the screen component. For example, instead of saying `Detail Screen`, it could say the name of the character.\n\nThis can be done by passing `route` as an object in options for Detail screen in `MainStackNavigator.js` file and use the value of the title from `route.params.item.name`.\n\n```js\n<Stack.Screen\n  name=\"Detail\"\n  component={Detail}\n  options={({ route }) => ({\n    title: route.params.item.name\n  })}\n/>\n```\n\nHere is the output:\n\n<img src='https://miro.medium.com/max/825/1*Pu2ML5XbSihSxOqLloTfGg.gif' />\n\n## Using common screenOptions to modify header styles\n\nYou can use the prop `screenOptions` to apply common styles to the header across the navigator. For example, in the code snippet, below, let us set two properties, `headerStyle`, `headerTintColor` and `headerTitleStyle` to change the background color of all screen headers as well as the color of the title on each screen.\n\n```js\n<Stack.Navigator\n  initialRouteName=\"Home\"\n  screenOptions={{\n    gestureEnabled: true,\n    headerStyle: {\n      backgroundColor: '#101010'\n    },\n    headerTitleStyle: {\n      fontWeight: 'bold'\n    },\n    headerTintColor: '#ffd700'\n  }}\n>\n  {/* ... */}\n</Stack.Navigator>\n```\n\nThe `headerStyle` is a style object that can be used to set the `backgroundColor` of the header for the screen component.\n\nThe `headerTitleStyle` is another style object that allows you to customize the title or the text of the header.\n\nThe `headerTintColor` is the color property for both the back button and the title of the header.\n\nHere is the output in action after the above changes:\n\n<img src='https://miro.medium.com/max/825/1*Xyt-C0u-SN151ybZTiD6Bw.gif' />\n\n## Making the back button title invisible on iOS\n\nSo far, you must have noticed that on iOS the back button shows the name of the previous screen by default. On Android, this behavior is only shown by a back button icon.\n\nTo make an iOS app just to show the back button icon instead of the name of the previous screen in the stack, add the following property to `screenOptions` on `Stack.Navigator`.\n\n```js\n<Stack.Navigator\n  initialRouteName=\"Home\"\n  screenOptions={{\n    gestureEnabled: true,\n    headerStyle: {\n      backgroundColor: '#101010'\n    },\n    headerTitleStyle: {\n      fontWeight: 'bold'\n    },\n    headerTintColor: '#ffd700',\n    headerBackTitleVisible: false\n  }}\n>\n  {/* ... */}\n</Stack.Navigator>\n```\n\nHere is the output:\n\n<img src='https://miro.medium.com/max/825/1*2v_4y5qgHX89sDGEyr326A.gif' />\n\n## Understanding header modes and changing it in the Android app\n\nUsing the react-navigation library, there are three header modes available that render the header in different ways. By default on iOS, the `headerMode` is of the value of `float`.\n\nOn Android, the value `screen` is commonly used. These are the native patterns of how a header renders on each platform. The last header mode value is `none` which abolishes any header to render.\n\nTake a look at the below demo of how it differs on both platforms.\n\n<img src='https://miro.medium.com/max/825/1*4VtcuE-YrenIvI8NcaLQ6w.gif' />\n\nIn the section, let us make the header mode of the Android app behave in the same way as the iOS app. Just add the property `headerMode` with the value of `float` in `Stack.Navigator`.\n\n```js\n<Stack.Navigator\n  initialRouteName=\"Home\"\n  screenOptions={{\n    gestureEnabled: true,\n    headerStyle: {\n      backgroundColor: '#101010'\n    },\n    headerTitleStyle: {\n      fontWeight: 'bold'\n    },\n    headerTintColor: '#ffd700',\n    headerBackTitleVisible: false\n  }}\n  headerMode=\"float\"\n>\n  {/* ... */}\n</Stack.Navigator>\n```\n\nThe header in the Android app, when navigating from one screen to another, is going to stay fixed, just link in the iOS app.\n\n<img src='https://miro.medium.com/max/825/1*oKb19-8G5_fBf-SGz6_dGw.gif' />\n\n## Directly navigating from the third screen to the top of the stack screen navigator\n\nIn this section, let us create a small demo on how you can leverage a helper method from `navigation` prop to navigate back to the top or first screen in the stack navigator from any other screen in navigator's structure, no matter how deep.\n\nStart by creating a new file called `Settings.js` inside the `src/screens/` directory and the following component snippet.\n\n```js\nimport React from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\n\nfunction Settings() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Settings</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#ebebeb'\n  },\n  text: {\n    color: '#101010',\n    fontSize: 24,\n    fontWeight: 'bold'\n  }\n});\n\nexport default Settings;\n```\n\nNext, modify the `MainStackNavigator.js` file and import a new screen.\n\n```js\nimport Settings from '../screens/Settings';\n```\n\nAdd this newly imported screen to the current `Stack.Navigator`.\n\n```js\n<Stack.Screen\n  name=\"Settings\"\n  component={Settings}\n  options={{ title: 'Settings' }}\n/>\n```\n\nOpen, `Detail.js` and modify it to add a button. When this button is pressed, the navigator leads to the Settings screen.\n\n```js\nimport React from 'react';\nimport { StyleSheet, View, Text, TouchableOpacity } from 'react-native';\n\nfunction Detail(props) {\n  const { route, navigation } = props;\n  const { item } = route.params;\n  const { name, home, species } = item;\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Detail Screen</Text>\n      <View style={styles.card}>\n        <Text style={styles.cardText}>Name: {name}</Text>\n        <Text style={styles.cardText}>Home Planet: {home}</Text>\n        <Text style={styles.cardText}>Species: {species}</Text>\n      </View>\n      <TouchableOpacity\n        style={styles.buttonContainer}\n        onPress={() => navigation.navigate('Settings')}\n      >\n        <Text style={styles.buttonText}>Go to Settings</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#ebebeb'\n  },\n  text: {\n    color: '#101010',\n    fontSize: 24,\n    fontWeight: 'bold'\n  },\n  card: {\n    width: 350,\n    height: 100,\n    borderRadius: 10,\n    backgroundColor: '#101010',\n    margin: 10,\n    padding: 10,\n    alignItems: 'center'\n  },\n  cardText: {\n    fontSize: 18,\n    color: '#ffd700',\n    marginBottom: 5\n  },\n  buttonContainer: {\n    backgroundColor: '#222',\n    borderRadius: 5,\n    padding: 10,\n    margin: 20\n  },\n  buttonText: {\n    fontSize: 20,\n    color: '#fff'\n  }\n});\n\nexport default Detail;\n```\n\nIn the following demo, you are going to notice that to move back from Settings screen to Home screen, you have to pass through the Detail screen.\n\n<img src='https://miro.medium.com/max/825/1*hNtPWfht4_b3uer51fGrTA.gif' />\n\nHowever, using the helper method `navigation.popToTop()` without any arguments, you can navigate from Settings screen to the Home screen directly.\n\nTo accomplish this, modify the `Settings.js` file as below by adding a button. The `onPress` of this button is going to make use of the helper method.\n\n```js\nimport React from 'react';\nimport { StyleSheet, View, Text, TouchableOpacity } from 'react-native';\n\nfunction Settings(props) {\n  const { navigation } = props;\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Settings</Text>\n      <TouchableOpacity\n        style={styles.buttonContainer}\n        onPress={() => navigation.popToTop()}\n      >\n        <Text style={styles.buttonText}>Go to Home</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#ebebeb'\n  },\n  text: {\n    color: '#101010',\n    fontSize: 24,\n    fontWeight: 'bold'\n  },\n  buttonContainer: {\n    backgroundColor: '#222',\n    borderRadius: 5,\n    padding: 10,\n    margin: 20\n  },\n  buttonText: {\n    fontSize: 20,\n    color: '#fff'\n  }\n});\n\nexport default Settings;\n```\n\nHere is the demo:\n\n<img src='https://miro.medium.com/max/825/1*IUWdHNEwH4bLtRzBwQ8yng.gif' />\n\n## Conclusion\n\n_Congratulations! You’ve completed this tutorial._\n\nIn this tutorial, we have discussed many strategies and properties that you can apply and implement in your Stack navigator. The main objective is to get familiar with the component-based configuration of the Stack Navigator in the latest version of the `react-navigation` library.\n\nHere is the link to the complete Stack Navigator API [here](https://reactnavigation.org/docs/en/stack-navigator.html) I'd recommend you to check.\n\n[Source code](https://github.com/amandeepmittal/react-native-examples/tree/master/reactnav5-stack-navigator)\n\nOriginally published at [Heartbeat.fritz.ai](https://heartbeat.fritz.ai/getting-started-with-stack-navigator-using-react-navigation-5-in-react-native-and-expo-apps-4c516becaee1)\n",
            "url": "https://amanhimself.dev//blog/stack-navigator-with-react-navigation-v5",
            "title": "Getting Started with Stack Navigator using react-navigation 5 in React Native and Expo apps",
            "summary": "Getting Started with Stack Navigator using react-navigation 5 in React Native and Expo apps",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/handle-navigation-in-webviews-react-native",
            "content_html": "---\ntitle: 'How to handle navigation in WebViews in a React Native app'\ndate: '2020-02-07'\nslug: 'handle-navigation-in-webviews-react-native'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://heartbeat.fritz.ai/how-to-handle-navigation-with-webviews-in-a-react-native-app-1ed51ab3342f'\n---\n\nAs a React Native developer, you are going to come across use cases that will require you to embed or redirect a web application or a web page inside a React Native app. [WebViews](https://facebook.github.io/react-native/docs/webview.html) are often used for such use cases.\n\nA community-maintained module, WebViews in React Native are the only way to let the user visit external links within an iOS or Android application. The WebView component in React Native core first became available in React Native version `0.57.x`.\n\nIn this tutorial, you are going to learn how to create a simple WebView component using `react-native-webview` npm module, and stretch it further to add custom navigation to handle URL history (just like in a web browser) using props provided y this module.\n\nYou can find the complete code for this tutorial at this [Github repo](https://github.com/amandeepmittal/react-native-examples/tree/master/rnWebViewCustomNav).\n\n## Table of Contents\n\n- Requirements\n- Installing WebView package\n- Implement a simple WebView\n- Add a loading spinner\n- Handle navigation when using WebViews\n- Conclusion\n\n## Requirements\n\n- Nodejs version `<= 10.x.x` installed\n- watchman installed\n- Have access to one package manager such as npm or yarn\n- use react native version `0.60.x` or above\n\n## Installing WebView package\n\nTo generate a new React Native project you can use the react-native cli tool. open a terminal window and enter the following command.\n\n```shell\nnpx react-native init [Project Name]\n```\n\nYou can name your project anything you want. Make sure to navigate inside the project directory after it has been created. Then, install the `react-native-webview` dependency using a package manager.\n\n```shell\nyarn add react-native-webview\n```\n\nAfter the dependency has installed, you are going to config it to work on iOS and Android devices. For iOS devices make sure you install pods by navigating inside the `ios/` directory and execute the command `pod install`.\n\nFor Android users, if you are using the latest `react-native-webview` version (_which you are_) open the file `android/gradle.properties` and make sure the following two lines exist. If not, add them.\n\n```groovy\nandroid.useAndroidX=true\nandroid.enableJetifier=true\n```\n\nOnce the dependency installation is done, let us run the application. We are going to use an iOS simulator for this tutorial. If you are on Windows or Linux based operating systems, you can use Android Studio.\n\nRun the command as stated below to open the boilerplate application that comes with `react-native-cli`.\n\n```shell\n# for Mac users\nreact-native run-ios\n\n# for Windows/Linux users\nreact-native run-android\n```\n\nIf the app opens without any error, that means the configuration we have done so far is good to go.\n\n<img src='https://miro.medium.com/max/350/1*eYqHih1QsrZsxfiHsYnfPQ.png' />\n\n## Implementing a simple WebView\n\nIn this section, let us create a simple webview component and understand how it works. Start by importing the `WebView` component from `react-native-webview` to render web content in a native view. Open the `App.js` file.\n\n```js\nimport React from 'react';\nimport { SafeAreaView, StyleSheet, StatusBar } from 'react-native';\nimport WebView from 'react-native-webview';\n```\n\nThe `WebView` component requires a `source` prop. This prop loads the static HTML or a URI (which is the current case if you look closely at the above snippet). A URI is a remote location for a web page to exist.\n\nInside the `App` function component let us render this simple webview component.\n\n```js\nconst App = () => {\n  return (\n    <>\n      <StatusBar barStyle=\"dark-content\" />\n      <SafeAreaView style={styles.flexContainer}>\n        <WebView source={{ uri: 'https://heartbeat.fritz.ai/' }} />\n      </SafeAreaView>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  flexContainer: {\n    flex: 1\n  }\n});\n\nexport default App;\n```\n\nTo view this in action, make sure you build the React Native app for the first time using either of the command specified below from a terminal window. For Android users, if you are using a real device or a simulator, make sure it is running first. You are going to see a similar output as below:\n\n<img src='https://miro.medium.com/max/350/1*l6ZpJ0_d8j58uJRMC-XLSQ.png' />\n\n## Add a loading spinner\n\nDid you notice that when the screen or the component loads for the first time, it just shows a blank white screen for a few seconds? This indicates that the web page is loading from the remote source. However, in a real-time application, you have to provide some type of loading indicator to the user to imply that the web page is being currently loaded.\n\nThis can be done by adding an `ActivityIndicator` component from the `react-native` core. It is going to display a spinner on the device's screen when the web page is in the loading state.\n\nIn the `App.js` file, among other imported components from `react-native`, import `ActivityIndicator`.\n\n```js\n// ... rest of the import statements\nimport {\n  SafeAreaView,\n  StyleSheet,\n  StatusBar,\n  ActivityIndicator\n} from 'react-native';\n```\n\nTo add a loading indicator that starts when the web page starts loading. Also, the indicator should stop when the web page has done loading.\n\nThe first requirement is that the prop `startInLoadingState` from `react-native-webview` module must be set to a value of true. Another prop, `renderLoading` is responsible for triggering the activity indicator. It always accepts a function as its value. The value of the function is going to be the `ActivityIndicator` component.\n\nAdd both of these props to `WebView` in `App.js`:\n\n```js\n<WebView\n  source={{ uri: 'https://heartbeat.fritz.ai/' }}\n  startInLoadingState={true}\n  renderLoading={() => (\n    <ActivityIndicator\n      color=\"black\"\n      size=\"large\"\n      style={styles.flexContainer}\n    />\n  )}\n/>\n```\n\nTake a look at how it works on the below screen.\n\n<img src='https://miro.medium.com/max/377/1*m3pKSlirL8gqEXUHmlZc-A.gif' />\n\n## Handle navigation when using WebViews\n\nThe [`WebView`](https://facebook.github.io/react-native/docs/webview) has a vast API and out of the box provides the most common functionalities that you can add to support different features in the app.\n\nThe `WebView` API provides some methods like `goBack` and `goForward` to handle navigation state and transitions. Such as the `goBack` method allows the user to go back one page at a time in the web view's history. Similarly, using the method `goForward`, you can move forward.\n\nThis navigation between web pages is done when there is a way to store or listen to the URL change. Using the prop called `onNavigationStateChange` that represents the navigation state of the component, you just need to pass the current URL and keep track of the previous and forward buttons.\n\nThe current is passed by creating a `ref` object which is the approach you are going to use in this demo app. It holds a mutable `.current` property that can be used to uniquely identify the URL.\n\nI am going to use the latest Hooks syntax. If you are using the counterpart of the functional components, please make sure to check how to use `ref` property on the `WebView` instance inside the class component.\n\nFor those who have been following along this tutorial so far, please make sure that you import hooks such as `useRef`, and `useState` from React.\n\nAlso, import some more components from the react-native core that is going to help us add a footer to the app screen. This footer is going to have two buttons: one to go to the previous URL and one to go to the forward URL (if exists).\n\n```js\nimport React, { useState, useRef } from 'react';\nimport {\n  SafeAreaView,\n  StyleSheet,\n  StatusBar,\n  ActivityIndicator,\n  View,\n  TouchableOpacity,\n  Text\n} from 'react-native';\nimport WebView from 'react-native-webview';\n```\n\nInside the functional component `App`, let us create three state variables for the following purposes:\n\n- `canGoBack`: to go the previous web page from the navigational state. Its initial value is going to be a boolean false.\n- `canGoForward`: to go to the next web page in the navigational state. Its initial value is going to be a boolean false.\n- `currentUrl` to keep a reference of the current URL. Its initial value is going to be an empty string.\n\nLet us create these state variables inside the `App` component.\n\n```js\nconst App = () => {\n  const [canGoBack, setCanGoBack] = useState(false);\n  const [canGoForward, setCanGoForward] = useState(false);\n  const [currentUrl, setCurrentUrl] = useState('');\n\n  //...\n};\n```\n\nUse the `useRef` hook to create a `webviewRef` and define it after the state variables.\n\n```js\nconst webviewRef = useRef(null);\n```\n\nNow, create two handler methods that are going to handle the navigational state transition of the current URL in real-time using the mutable property `current` on a button press.\n\n```js\nbackButtonHandler = () => {\n  if (webviewRef.current) webviewRef.current.goBack();\n};\n\nfrontButtonHandler = () => {\n  if (webviewRef.current) webviewRef.current.goForward();\n};\n```\n\nAdd the props `ref` and `onNavigationStateChange` to the `WebView` component. The `navState` is going to track the state changes and update it as well as fetch and set the current URL as shown below in the code snippet.\n\n```js\n<WebView\n  source={{ uri: 'https://heartbeat.fritz.ai/' }}\n  startInLoadingState={true}\n  renderLoading={() => (\n    <ActivityIndicator\n      color=\"black\"\n      size=\"large\"\n      style={styles.flexContainer}\n    />\n  )}\n  ref={webviewRef}\n  onNavigationStateChange={navState => {\n    setCanGoBack(navState.canGoBack);\n    setCanGoForward(navState.canGoForward);\n    setCurrentUrl(navState.url);\n  }}\n/>\n```\n\nAfter the `WebView` component, create a `View` component that holds two buttons. Each of the buttons is defined from `TouchableOpacity` that has an `onPress` prop. This prop is going to make use of the handler methods you defined earlier.\n\n```jsx\n<View style={styles.tabBarContainer}>\n  <TouchableOpacity onPress={backButtonHandler}>\n    <Text style={styles.button}>Back</Text>\n  </TouchableOpacity>\n  <TouchableOpacity onPress={frontButtonHandler}>\n    <Text style={styles.button}>Forward</Text>\n  </TouchableOpacity>\n</View>\n```\n\nHere are the corresponding styles used in the above code snippet:\n\n```js\nconst styles = StyleSheet.create({\n  flexContainer: {\n    flex: 1\n  },\n  tabBarContainer: {\n    padding: 20,\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    backgroundColor: '#b43757'\n  },\n  button: {\n    color: 'white',\n    fontSize: 24\n  }\n});\n```\n\nTo see it in action, go back to the simulator/device of your choice and the first thing you are going to notice is the bottom tab bar on the screen.\n\n<img src='https://miro.medium.com/max/350/1*5g5rXbyg4k1_J02DKL3QIA.png' />\n\nHere is the complete demo in action with back and forward buttons working.\n\n<img src='https://miro.medium.com/max/377/1*r2li3qWatN2JM_Pl9nhGBA.gif' />\n\n## Conclusion\n\n_Congratulations! You have completed this tutorial._\n\nWebViews might not be the prominent way to create mobile apps but it does add an important feature to handle specific use cases where there is a requirement to connect web interfaces and native code.\n\nThe `WebView` component has a great API that you can refer [here](https://facebook.github.io/react-native/docs/webview).\n\nYou can find the complete code for this tutorial at this [Github repo](https://github.com/amandeepmittal/react-native-examples/tree/master/rnWebViewCustomNav).\n\nOriginally published at [Heartbeat.fritz.ai](https://heartbeat.fritz.ai/how-to-handle-navigation-with-webviews-in-a-react-native-app-1ed51ab3342f)\n",
            "url": "https://amanhimself.dev//blog/handle-navigation-in-webviews-react-native",
            "title": "How to handle navigation in WebViews in a React Native app",
            "summary": "How to handle navigation in WebViews in a React Native app",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/getting-started-with-react-native-expo-hooks-2020",
            "content_html": "---\ntitle: 'Getting Started with React Native and Expo using Hooks in 2020'\ndate: '2020-01-17'\nimage: 'getting-started-with-react-native-expo-hooks-2020'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://heartbeat.fritz.ai/getting-started-with-react-native-and-expo-using-hooks-in-2020-fb466c25b04c'\n---\n\nWe live in the world of a variety of mobile devices majorly dominated by two platforms, iOS, and Android. It is a two-horse race and I am sure we can all agree on that. Building a mobile application is not an easy task though.\n\nFor iOS, you write code using Objective-C or Swift and for Android, you will find yourself using Java or Kotlin. Apart from different programming languages used to create a mobile that can run on each of the two platforms, the toolchains are entirely different too for both of these mobile platforms.\n\nMany modern-day developers use a specific set of technology that is used to build web applications: HTML, CSS, and JavaScript. Different frameworks fall under the category commonly known as Hybrid applications. You can use almost one set of source code for developing the application for both iOS and Android platforms.\n\nIn recent years, hybrid frameworks have evolved coming from web view to use native APIs. This cross-platform approach of developing a mobile application comes with its own pros and cons.\n\nOne great option that falls under the umbrella of cross-platform development is [React Native](https://facebook.github.io/react-native/). Developed and used by Facebook as well others such as Tesla, Walmart, Uber Eats, Instagram, Discord, Wix and so on. React Native is based on Facebook’s web library ReactJS.\n\n## What this tutorial is about?\n\nReact Hooks are available since the release version `16.8.x`. In this tutorial, you are going to get a quick introduction on how to use them in a React Native app. These functions allow using React state and a component’s lifecycle methods in a functional component. If you are familiar with React, you know that the functional component has been called as a functional stateless component since the introduction of `classes`, but not anymore.\n\nPreviously, a class component allowed you to have a local state. Using React Hooks, there is no requirement to refactor a class component React Native into a functional component only because you want to introduce local state or lifecycle methods in that component. However, they do not work with classes. React provides a few built-in Hooks such as useState and useEffect. You can also create your Hooks to re-use to manage state between different components.\n\n## Table of contents\n\n- Getting Started\n- The entry point of a React Native app\n- Setting up a stack navigation\n- Adding the second screen to the stack navigator\n- Adding a Floating Button component\n- Adding a custom header component\n- Implementing Hooks\n- Adding a FlatList component to render notes\n- Using Navigation parameters to update the state\n- Running the app\n- Conclusion\n\n## Getting started\n\nTo quickly create a React Native app, let us use a tool called [Expo](https://expo.io/). It is a managed development toolset that provides a client to preview and make changes to React Native apps using JavaScript. You do not need tools such as Xcode or Android Studio to get started.\n\nTo generate a new app, open a terminal window and enter the following command to install the command-line tool provided by Expo itself.\n\n```shell\nnpm install -g expo-cli\n```\n\nNext, step is to run `expo init` command and choose the default template `blank`.\n\n```shell\n# generate a new app\nexpo init expo-rnHooks\n\n# make sure to navigate inside the project directory\ncd expo-rnHooks\n```\n\nOnce the project directory is generated, navigate inside it. The demo you are going to build requires the use of a navigation pattern between two screens. The first screen is going to display a list of items and through the second screen, you can add an item to the list. This is a typical stack navigation pattern and using the `react-navigation` library, you can add this to your React Native app.\n\nThe `react-navigation` library is a third party library that needs to be installed in a React Native or Expo app separately as a dependency. You can either use `npm` or `yarn` but I am going to stick with `yarn`. Each navigational pattern comes as a dependency too since the demo requires only one pattern, let us install that too.\n\nThe third library you are going to install is called [`react-native-paper`](https://callstack.github.io/react-native-paper/) that will provide a collection of custom UI components based on Material Design that you can integrate directly. Go back to the terminal window and execute the following command.\n\n```shell\nyarn add react-navigation react-navigation-stack\nreact-native-paper @react-native-community/masked-view\n```\n\nReact Navigation is made up of some core utilities and those are then used by navigators to create the navigation structure in your app. After the above step, Expo requires you to configure these core utilities as dependencies.\n\n```shell\nexpo install react-navigation\nreact-native-gesture-handler\nreact-native-reanimated react-native-screens\nreact-navigation-stack\n```\n\nThat's all for the setup. Let us build something.\n\n## The entry point of a React Native app\n\nThe `App.js` file in the generated app structure is what initializes the Expo app. In other words, it is the entry point of the development process. By default, it displays a text message and uses a functional component for that. Open the `App.js` file and you are going to get the following screen component file.\n\n```js\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text>Open up App.js to start working on your app!</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n```\n\nComponents are the visual elements that you see on the screen in a React Native app. The three major components to look for in the above code snippet are:\n\n- `View`\n- `Text`\n- `StyleSheet`\n\nA `View` component is the basic building block in a React Native component file. It maps to fundamental native iOS (`UIView`) and Android (`View`) components, hence its name. It puts a container element that supports layout styling with flexbox and other styles using a JavaScript object called `StyleSheet`. Hence, it can be said that `View` components are primarily used for styling and the layout of children elements.\n\nThe StyleSheet component in React Native provides an API to create styles inside the component file. It takes a JavaScript object as it does above, and returns a new StyleSheet object from it. There are no classes or IDs in React Native like in web development. To create a new style object, you can use the StyleSheet.create() method.\n\nThe `Text` component is in many ways just like the `View` component, except that it is specifically available to display text. Also, like the `View` component, it supports styling.\n\nTo see the default app in action, start the development server from the terminal window `expo start`. Either using a simulator or a real device (make sure it has an Expo client installed from the app store) you can test the app.\n\n<img src='https://miro.medium.com/max/509/1*9xg5D_74gvTYRyt89JL_KA.png' />\n\n## Setting up a stack navigation\n\nThe `react-navigation-stack` library provides an inbuilt function that returns a React component. This function, `createStackNavigator` takes a route configuration object and an options object (_which is optional_).\n\nThe `react-navigation` library provides a function called `createAppContainer` that returns a React component. It takes React component created by the `createStackNavigator` as a parameter and is be directly exported to `App.js` to be used as our App's root component.\n\nTo create the first route, you need to create the first screen. Create a new file called `ViewNotes.js` inside `src/screens` directory. This screen is going to be served as the first or home screen of the app. Right now, let us add some mock components and later we will add UI component to reflect the demo app.\n\n```js\nimport React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Text } from 'react-native-paper';\n\nfunction ViewNotes() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.titleContainer}>\n        <Text style={styles.title}>You do not have any notes</Text>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingHorizontal: 10,\n    paddingVertical: 20\n  },\n  titleContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    flex: 1\n  },\n  title: {\n    fontSize: 20\n  }\n});\n\nexport default ViewNotes;\n```\n\nNext, create a new file called `index.js` inside `src/navigation/` with the following code snippet.\n\n```js\nimport { createAppContainer } from 'react-navigation';\nimport { createStackNavigator } from 'react-navigation-stack';\nimport ViewNotes from '../screens/ViewNotes';\n\nconst StackNavigator = createStackNavigator(\n  {\n    ViewNotes: {\n      screen: ViewNotes\n    }\n  },\n  {\n    initialRouteName: 'ViewNotes',\n    headerMode: 'none'\n  }\n);\n\nexport default createAppContainer(StackNavigator);\n```\n\nIn the above code snippet, the parameters such as `initialRouteName` and `headerMode` are passed as the optional object properties. The first object contains the route configuration.\n\nTo see this in action, open the `App.js` file, import the navigator created above as well as `PaperProvider` component from `react-native-paper`. This provider is going to wrap the navigator and provides the theme to all the components in the framework. I\n\n```js\nimport React from 'react';\nimport { Provider as PaperProvider } from 'react-native-paper';\nimport AppNavigator from './src/navigation';\n\nexport default function App() {\n  return (\n    <PaperProvider>\n      <AppNavigator />\n    </PaperProvider>\n  );\n}\n```\n\nMake sure the development server is running. You are going to get the following output in an Expo client.\n\n<img src='https://miro.medium.com/max/509/1*yVurLxAGaVp5CiEynWKl5w.png' />\n\n## Adding the second screen to the stack navigator\n\nTo complete the navigation process, let us set up the other screen with some mock text to display. Inside `src/screens/` create another file called `AddNotes.js` and the following code snippet.\n\n```js\nimport React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Text } from 'react-native-paper';\n\nfunction AddNotes() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.titleContainer}>\n        <Text style={styles.title}>Add Notes modal screen</Text>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingHorizontal: 10,\n    paddingVertical: 20\n  },\n  titleContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    flex: 1\n  },\n  title: {\n    fontSize: 20\n  }\n});\n\nexport default AddNotes;\n```\n\nOpen the `navigation/index.js` file and modify the stack navigator.\n\n```js\nimport { createAppContainer } from 'react-navigation';\nimport { createStackNavigator } from 'react-navigation-stack';\nimport ViewNotes from '../screens/ViewNotes';\nimport AddNotes from '../screens/AddNotes';\n\nconst StackNavigator = createStackNavigator(\n  {\n    ViewNotes: {\n      screen: ViewNotes\n    },\n    AddNotes: {\n      screen: AddNotes\n    }\n  },\n  {\n    initialRouteName: 'ViewNotes',\n    headerMode: 'none',\n    mode: 'modal'\n  }\n);\n\nexport default createAppContainer(StackNavigator);\n```\n\nDo note that in the _options_ object, adds a `mode` for stack navigator to `modal`. A modal is like a popup and displays the content but temporarily blocks the interaction from the primary screen, which in this case is `ViewNotes` screen. To access the second screen you still require to add a way to navigate.\n\n## Adding a Floating Button component\n\nSince `react-native-paper` provides cross-platform components to add to the app. In this section, let us add a floating button on the `ViewNotes` screen that can be used to navigate to the `AddNotes` screen. Import the component from the UI library.\n\n```js\nimport { Text, FAB } from 'react-native-paper';\n```\n\nNext, modify the return function and a `FAB` component as well as corresponding styles to position it at the bottom of the screen.\n\n```js\nfunction ViewNotes({ navigation }) {\n  return (\n    <View style={styles.container}>\n      <View style={styles.titleContainer}>\n        <Text style={styles.title}>You do not have any notes</Text>\n      </View>\n      <FAB\n        style={styles.fab}\n        small\n        icon=\"plus\"\n        label=\"Add new note\"\n        onPress={() => navigation.navigate('AddNotes')}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingHorizontal: 10,\n    paddingVertical: 20\n  },\n  titleContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    flex: 1\n  },\n  title: {\n    fontSize: 20\n  },\n  fab: {\n    position: 'absolute',\n    margin: 20,\n    right: 0,\n    bottom: 10\n  }\n});\n```\n\nIn the Expo client you are going to get the following output:\n\n<img src='https://miro.medium.com/max/509/1*o_Sco68X5QLpboYqHkg8kw.png' />\n\nAlso, when you click the FAB button, it will navigate you to the `AddNotes` screen.\n\n<img src='https://miro.medium.com/max/378/1*G1YJr6IgxikVul-JVhNhsQ.gif' />\n\nThis is done by navigation props from `react-navigation`. Using `navigation.navigate` as the value of the button press prop `onPress`, the app will navigate to the screen with its name passed as the second parameter.\n\n```js\nonPress={() => navigation.navigate('AddNotes')}\n```\n\n## Adding a custom header component\n\nIn this section, let us build a custom header component that is reusable for both of the screens currently residing in the app. Inside the directory `src/components/` create a new file called `Header.js` file.\n\nImport the following components from `react-native` and `react-native-paper`.\n\n```js\nimport React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Appbar, Title } from 'react-native-paper';\n```\n\nThe `Appbar` is a component that displays items in a bar. Each of the items can have an action associated but for the demo app, you only require it to display a title. Add the following code snippet that consists of the component as well as the corresponding styles.\n\nThe `Header` component is going to accept one prop `titleText` that is the title of a specific screen.\n\n```js\nfunction Header({ titleText }) {\n  return (\n    <Appbar.Header style={styles.headerContainer}>\n      <View style={styles.container}>\n        <Title style={styles.title}>{titleText}</Title>\n      </View>\n    </Appbar.Header>\n  );\n}\n\nconst styles = StyleSheet.create({\n  headerContainer: {\n    backgroundColor: '#60DBC5'\n  },\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  title: {\n    color: '#2E7166'\n  }\n});\n\nexport default Header;\n```\n\nImport this component in `ViewNotes.js` and modify the contents of the component file in order to display the header.\n\n```js\n// add the following statement\nimport Header from '../components/Header';\n\n// modify ViewNotes component\nfunction ViewNotes({ navigation }) {\n  return (\n    <>\n      <Header titleText=\"Simple Note Taker\" />\n      <View style={styles.container}>\n        <View style={styles.titleContainer}>\n          <Text style={styles.title}>You do not have any notes</Text>\n        </View>\n        <FAB\n          style={styles.fab}\n          small\n          icon=\"plus\"\n          label=\"Add new note\"\n          onPress={() => navigation.navigate('AddNotes')}\n        />\n      </View>\n    </>\n  );\n}\n```\n\nThe following is going to be the output.\n\n<img src='https://miro.medium.com/max/509/1*PbKVolX0GTycuojptMpSBQ.png' />\n\nSimilarly, modify the `AddNotes.js` file.\n\n```js\n// add the following statement\nimport Header from '../components/Header';\n\n// modify AddNotes component\nfunction AddNotes() {\n  return (\n    <>\n      <Header titleText=\"Add a new note\" />\n      <View style={styles.container}>\n        <View style={styles.titleContainer}>\n          <Text style={styles.title}>Add Notes modal screen</Text>\n        </View>\n      </View>\n    </>\n  );\n}\n```\n\nHere is the output:\n\n<img src='https://miro.medium.com/max/509/1*WBDEbWvNeRd-QMWRPvqxXQ.png' />\n\n## Implementing Hooks\n\nTo clearly understand how functional components could be leveraged to manage a state’s component, let us try to go through one of the most basic examples by leveraging one of the few built-in Hooks like `useState`.\n\nOpen `ViewNotes.js` file and start by importing `useState` from the React library.\n\n```js\nimport React, { useState } from 'react';\n```\n\nLet us an array to store and display all the notes. Using the array later as the value to the `FlatList` component, you can easily render each note. In a functional component, you can define a default state variable as shown below.\n\n```js\nfunction ViewNotes({ navigation }) {\n  const [notes, setNotes] = useState([]);\n\n  // ...\n}\n```\n\nReact preserves the state between all the re-rendering that happens. The hook `useState` returns a pair of values. In the above snippet, the first one being the `notes` which holds the current value of an empty array (_by default_) and the second, `setNotes` is a function that lets you update the current value or in the out case, add items to the array.\n\nTo add items to the array, let us create a helper method called `addNotes`.\n\n```js\nconst addNote = note => {\n  note.id = notes.length + 1;\n  setNotes([...notes, note]);\n};\n```\n\n## Adding a FlatList component to render notes\n\nWhen the array `notes` is empty, let us display a text message that indicates that there is no item in the list otherwise render a `FlatList` component. To do this, you have to import the component itself first.\n\nThe component `FlatList` is an efficient way to create scrolling data lists in a React Native app. It has a simple API to work with and is more efficient and preferment with a large amount of information to display in comparison to its alternate.\n\n```js\nimport { StyleSheet, View, FlatList } from 'react-native';\nimport { Text, FAB, List } from 'react-native-paper';\n```\n\nNext, modify the JSX of the `ViewNotes` component. Do take note that when navigating to `AddNotes` screen, you have to pass it as a prop. This can be done by passing it as the second parameter to `navigation.navigate` function.\n\n```js\nreturn (\n  <>\n    <Header titleText=\"Simple Note Taker\" />\n    <View style={styles.container}>\n      {notes.length === 0 ? (\n        <View style={styles.titleContainer}>\n          <Text style={styles.title}>You do not have any notes</Text>\n        </View>\n      ) : (\n        <FlatList\n          data={notes}\n          renderItem={({ item }) => (\n            <List.Item\n              title={item.noteTitle}\n              description={item.noteValue}\n              descriptionNumberOfLines={1}\n              titleStyle={styles.listTitle}\n            />\n          )}\n          keyExtractor={item => item.id.toString()}\n        />\n      )}\n      <FAB\n        style={styles.fab}\n        small\n        icon=\"plus\"\n        label=\"Add new note\"\n        // add a second parameter object\n        onPress={() =>\n          navigation.navigate('AddNote', {\n            addNote\n          })\n        }\n      />\n    </View>\n  </>\n);\n```\n\nFrom the above snippet, observe that there are three primary props that a FlatList component requires to display a list of data:\n\n- `data`: an array of data that is used to create a list. Generally, this array is built of multiple objects.\n- `renderItem`: is a function that takes an individual element from the data array and renders it on the UI.\n- `keyExtractor`: it tells the list of data to use the unique identifiers or id for an individual element.\n\nAlso, add the `listTitle` inside the `StyleSheet` object.\n\n```js\nlistTitle: {\n  fontSize: 20;\n}\n```\n\n## Using Navigation parameters to update the state\n\nSince there are no notes, for now, let us modify the `AddNotes` screen to make it functional. This screen is responsible to add a note to the `ViewNotes` screen. Start by modifying the existing import statements.\n\n```js\nimport React, { useState } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { IconButton, TextInput, FAB } from 'react-native-paper';\n```\n\nUsing the hook `useState` the component is going to hold the value of each note's title and its description as `noteTitle` and `noteValue`.\n\n```js\nfunction AddNote({ navigation }) {\n  const [noteTitle, setNoteTitle] = useState('');\n  const [noteValue, setNoteValue] = useState('');\n\n  // ...\n}\n```\n\nThe `IconButton` component from `react-native-paper` is going to be used to close the modal. After that add two input fields using `TextInput` that are going to take the user value for the title of the note and its description.\n\nLastly, using a `FAB` component, the user can submit the form. This component is going to be temporarily disabled of there is no title provided for the note. It can be done by using the `disabled` prop.\n\nOn clicking this button the component using `navigation` props is going to perform to actions simultaneously. It is going to save the note's title and its description as well as perform an action to go back to the `ViewNotes` screen.\n\nHere is the complete `AddNotes` code snippet along with corresponding styles.\n\n```js\nfunction AddNote({ navigation }) {\n  const [noteTitle, setNoteTitle] = useState('');\n  const [noteValue, setNoteValue] = useState('');\n\n  function onSaveNote() {\n    navigation.state.params.addNote({ noteTitle, noteValue });\n    navigation.goBack();\n  }\n  return (\n    <>\n      <Header titleText=\"Add a new note\" />\n      <IconButton\n        icon=\"close\"\n        size={25}\n        color=\"white\"\n        onPress={() => navigation.goBack()}\n        style={styles.iconButton}\n      />\n      <View style={styles.container}>\n        <TextInput\n          label=\"Add Title Here\"\n          value={noteTitle}\n          mode=\"outlined\"\n          onChangeText={setNoteTitle}\n          style={styles.title}\n        />\n        <TextInput\n          label=\"Add Note Here\"\n          value={noteValue}\n          onChangeText={setNoteValue}\n          mode=\"flat\"\n          multiline={true}\n          style={styles.text}\n          scrollEnabled={true}\n          returnKeyType=\"done\"\n          blurOnSubmit={true}\n        />\n        <FAB\n          style={styles.fab}\n          small\n          icon=\"check\"\n          disabled={noteTitle == '' ? true : false}\n          onPress={() => onSaveNote()}\n        />\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingHorizontal: 20,\n    paddingVertical: 20\n  },\n  iconButton: {\n    backgroundColor: 'rgba(46, 113, 102, 0.8)',\n    position: 'absolute',\n    right: 0,\n    top: 40,\n    margin: 10\n  },\n  title: {\n    fontSize: 24,\n    marginBottom: 20\n  },\n  text: {\n    height: 300,\n    fontSize: 16\n  },\n  fab: {\n    position: 'absolute',\n    margin: 20,\n    right: 0,\n    bottom: 0\n  }\n});\n\nexport default AddNote;\n```\n\nHere is the output you are going to get when navigating to the `AddNotes` screen.\n\n<img src='https://miro.medium.com/max/509/1*bwq4b8Y-YilTgZkWO2YCEA.png' />\n\n## Running the app\n\nThe demo app is complete and ready to be tested. In the Expo client image below, and you can find a demo for adding a note and rendering the note.\n\n<img src='https://miro.medium.com/max/378/1*hcV-c1jFreqaSOkHORxoMA.gif' />\n\n## Conclusion\n\nIf you are getting started in React Native development, Expo as a toolkit can serve you well in your journey. Instead of dwelling much into iOS and Android development setup which can be overwhelming at the start, I'd recommend the least possible amount of tooling and incline more towards learning the core APIs and fundamentals of React Native.\n\nThe way the Expo is being maintained and adding support for Web and universal apps, it going to be an important part of the journey.\n\nOriginally published at [Heartbeat.fritz.ai](https://heartbeat.fritz.ai/getting-started-with-react-native-and-expo-using-hooks-in-2020-fb466c25b04c)\n",
            "url": "https://amanhimself.dev//blog/getting-started-with-react-native-expo-hooks-2020",
            "title": "Getting Started with React Native and Expo using Hooks in 2020",
            "summary": "Getting Started with React Native and Expo using Hooks in 2020",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/dark-mode-with-react-hooks",
            "content_html": "---\ntitle: 'How to add Dark mode functionality with React Hooks'\ndate: '2020-01-09'\nslug: 'dark-mode-with-react-hooks'\nthumbnail: '/thumbnails/react.png'\ntag: 'react'\ncanonicalUrl: 'https://blog.crowdbotics.com/how-to-add-dark-mode-functionality-with-react-hooks/'\n---\n\n![cover](https://i.imgur.com/WDIlL4i.png)\n\nDevelopers seems to love dark mode. A lot of popular websites like Twitter, Reddit, and YouTube are now supporting this dark mode on their websites and applications as well. It is more than a trend. It's easy on user's eyes and decreasing the problem of eye fatigue.\n\nIn this post, I am going to show you how you can add this functionality in your React apps whether it is an admin dashboard that is consuming some third party API hosted elsewhere or a web blog using static site generators like [Gatsby](https://www.gatsbyjs.org/). The steps discussed below are going to be same whether you decide to use `create-react-app` utility to generate a React app or using any static site generator.\n\nThis tutorial is going to use React hooks. If you are not familiar with them at all, it is recommended that you get familiar with them from the [official React docs](https://reactjs.org/docs/hooks-reference.html). Otherwise, whenever hooks are used, a brief overview is provided.\n\n## Table of Contents\n\n- Requirements\n- Setting up a base theme\n- Add a toggle button to change the theme\n- Adding theme persistence using local storage\n- Connecting Crowdbotics support to Your Github Repo\n- Conclusion\n\n## Requirements\n\nNote: These requirements are needed if you are looking to follow this post from a technical point of view, which means, if you are looking to try out Crowdbotics for the first using a custom template from the marketplace or are actually interested in building a custom dating app using Crowdbotics template, React Native, and Expo. If later is your scenario, this post can act as a guide and an entry point to the template.\n\n- [Node.js](https://nodejs.org/en/) (>=`10.x.x`) with npm/yarn installed.\n- [create-react-app](https://www.npmjs.com/package/create-react-app) to generate a new React app\n- [Crowdbotics App builder platform](http://app.crowdbotics.com/) account (preferably log in with your valid Github ID)\n\n## Setting up a base theme\n\nIn this section, let us start by adding a base React app that uses light mode by default. To start, using `create-react-app` create a new directory. After you have created a new directory, navigate inside the project directory. You can copy and paste the following steps in your terminal window.\n\n```shell\ncreate-react-app react-darkmode-app\n\ncd react-darkmode-app\n```\n\nOnce inside the project directory, open `App.css` file and the following styles for the base light theme.\n\n```css\nbody {\n  margin: 0;\n  text-align: center;\n}\n\n.light-theme {\n  background-color: #fff;\n  color: #444444;\n}\n\nnav {\n  display: flex;\n  text-align: center;\n  background-color: #503d81;\n  width: 100%;\n  padding: 20px;\n  color: #f8f8f8;\n}\n\n.content {\n  padding: 0.5em;\n  margin: 0 auto;\n  max-width: 600px;\n  font-size: 1.2rem;\n  line-height: 1.1;\n  height: 90vh;\n}\n```\n\nTo apply these styles, open `App.js` component file and replace the default code with the below snippet.\n\n```js\nimport React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"light-theme\">\n      <nav>Toggle button will go here</nav>\n      <div className=\"content\">\n        <h1>Light Mode</h1>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n```\n\nNow, try to run the app using the command `yarn start` from a terminal window. Visit the URL `http://localhost:3000` in a browser window and you will get the following result.\n\n![ss1](https://crowdbotics.ghost.io/content/images/2019/08/ss1-1.png)\n\nHead back to the `App.css` file and create base styles for the dark theme.\n\n```css\n.dark-theme {\n  background-color: #1f1b24;\n  color: #f8f8f8;\n}\n\n.dark-theme nav {\n  background-color: #332940;\n}\n\n.dark-theme code {\n  color: red;\n}\n```\n\nNotice that using CSS selector property, you are changing the background color of the navbar and the rest of the styles remain the same as before. For example, the text `color` property is going to be the same as in light theme. To test out the dark theme, change the `className` of the first `div` element inside the `App.js` file to `dark-theme`.\n\n```js\nfunction App() {\n  return (\n    <div className=\"dark-theme\">\n      <nav>Toggle button will go here</nav>\n      <div className=\"content\">\n        <h1>Dark Mode</h1>\n        <p>\n          Do take a note of the <code>color</code> property in the nav bar.\n        </p>\n      </div>\n    </div>\n  );\n}\n```\n\nLooking back at the browser window, you get the following result.\n\n![ss2](https://crowdbotics.ghost.io/content/images/2019/08/ss2-1.png)\n\nAt this point, you have a very simplified version of the app, but it doesn't fulfill the purpose. It has to keep track of which theme the user selects and show the styles accordingly.\n\n## Add a toggle button to change the theme\n\nTo let the end-user decide which theme they want to the view, your React app would be done by adding a toggle button. To change the theme between the light or dark, there is a need for a variable to keep track of what theme the user has selected. For this purpose, let us add the new concepts of _React Hooks_ rather than converting the current `App` component into a class component.\n\nTo give a brief overview of React Hooks, one can say they are available to React since the version `16.8.x`. They are functions that allow you to initialize and use React state and a component's life-cycle methods in a functional component. Hooks do not work with classes. If you are familiar with React, you know that the functional component has been called as a functional stateless component. Not any more.\n\nReact provides a few built-in Hooks such as `useState` to initialize a default state of a component similarly as in a class component with the keyword `state`. Open `App.js` file and initialize the state as below.\n\n```js\nfunction App() {\n  const [darkTheme, setDarkTheme] = React.useState(false);\n  // rest remains same\n}\n```\n\nIn the above snippet, the default value of `darkTheme` variable is `false`. This means that it is not the default set of styles that the app will use. Using conditional operator, update the `return` function inside `App()`.\n\n```js\nreturn (\n  43 -\n  (\n    <div className={darkTheme ? 'dark-theme' : 'light-theme'}>\n      <nav>\n        <div className=\"button-container\">\n          <button onClick={() => setDarkTheme(prevTheme => !prevTheme)}>\n            Toggle Theme\n          </button>\n        </div>\n      </nav>\n      <div className=\"content\">\n        <h1>{darkTheme ? 'Dark Mode' : 'Light Mode'}</h1>\n        <p>\n          Do take a note of the <code>color</code> property in the nav bar.\n        </p>\n      </div>\n    </div>\n  )\n);\n```\n\nStarting from the first `div` element, it uses the conditional operator to check whether the value of the state variable `darkTheme` is true or false. If it is true, the styles related to the dark theme are going to be applicable. Otherwise, the default light theme is activated. The same conditional operator goes on the `h1` element to display the text of which theme is being currently used.\n\nThe `button` uses an `onClick` event to toggle the behavior of light and a dark theme. The `prevTheme` is used to apply functional updates. It computes the value of the previous state and then returns an updated value. In the current case, the value here represented is the theme itself.\n\nHere is the output in the browser window. Click the `Toggle Theme` button to change the theme and the heading in the content.\n\n![ss3](https://crowdbotics.ghost.io/content/images/2019/08/ss3.gif)\n\nHere are the corresponding styles for the `button-container`.\n\n```css\n.button-container {\n  display: flex;\n  margin: 0 auto;\n}\n```\n\n## Adding theme persistence using local storage\n\nRight now, the user can easily switch between the two themes your app is running on. However, whenever the web page reloads, the default theme shown is light even though the last theme you selected was dark. To provide the pragmatic solution, in this section, you are going to store the value of dark theme in the browser's local storage.\n\nAs compared to lifecycle methods in class components, in modern-day React functional components, you can easily add the same working functionality using `useEffect`. It accepts a function in the form of an argument. This function can be written with the keyword `function` or use an arrow function. Also, this function passed to `useEffect` as the argument will run after every render is completed.\n\nTo avoid this, you can conditionally render the `useEffect` method. This is done by passing an empty array as the second argument. The value this array will contain is going to be the value of the `darkTheme`. After you have defined the state in the `App` component, add this effect method.\n\n```js\nReact.useEffect(() => {\n  localStorage.setItem('dark', JSON.stringify(darkTheme));\n}, [darkTheme]);\n```\n\nUsing an arrow function as the first argument, it is setting the value of `darkTheme` in the browser's `localStorage`. To add a theme value to the local storage, there are two things required in combination. An identifier or a key has to be passed as the first argument to `setItem()` along with boolean value of `darkTheme` as the second argument.\n\nNow, go back to the browser window and open dev tools. In the tab, `Application` look for the **Storage > Local Storage** as described in the image below. You will find a key `dark` that has the value of `false`.\n\n![ss4](https://crowdbotics.ghost.io/content/images/2019/08/ss4.png)\n\nOn clicking the button `Toggle Theme` the value of the key `dark` in the local storage changes to `true`.\n\n![ss5](https://crowdbotics.ghost.io/content/images/2019/08/ss5-1.png)\n\nIt works but on reloading the React app, switches back to the light theme. This is because the default value provided to the dark theme is always false. Let us change that.\n\nGo back to the `App` component and create a new function, `getDefaultTheme`. It will keep track of getting the value of the `dark` from the local storage. Also, the default value of the `darkTheme` in the state is going to be read from this function (_in other words, from the local storage_) rather than a boolean `false`.\n\n```js\nconst [darkTheme, setDarkTheme] = React.useState(getDefaultTheme());\n\nReact.useEffect(() => {\n  localStorage.setItem('dark', JSON.stringify(darkTheme));\n}, [darkTheme]);\n\nfunction getDefaultTheme() {\n  const selectedTheme = JSON.parse(localStorage.getItem('dark'));\n  return selectedTheme || false;\n}\n```\n\nNotice in below demo of how the value of the dark is saved in the local storage even when the React app reloads.\n\n![ss6](https://crowdbotics.ghost.io/content/images/2019/08/ss6-1.gif)\n\n## Connecting Crowdbotics support to your Github Repo\n\nOnce everything is working, now let us add git version to this React project and then, further add the support for Crowdbotics app building platform. Open a terminal window and execute:\n\n```shell\ngit init\n\n# add all files\ngit add .\n\n# commit\ngit commit -m \"update\"\n```\n\nOnce all the files are committed, add this repository to your Github account. Crowdbotics app building platform now gives you an option to connect a Github repository directly using GitHub OAuth integration ( which means you need to have a Crowdbotics account or login into one using your Github account).\n\n![ss7](https://crowdbotics.ghost.io/content/images/2019/08/ss7.png)\n\nMore and in-detail information about this process could be found [here](https://medium.com/crowdbotics/connect-your-github-repo-to-crowdbotics-36008d35e681).\n\n## Conclusion\n\n_Congratulations!_ You have made to the end. I hope you learned something useful here. React Hooks is a powerful concept, and getting more commonly used as the time progress. Here are some resources related to this post:\n\n- [Hooks official docs](https://reactjs.org/docs/hooks-intro.html)\n- [Using Hooks in a React Native app](https://crowdbotics.ghost.io/react-hooks-basics-building-a-react-native-app-with-react-hooks/)\n\nOriginally published at [Crowdbotics.com](https://crowdbotics.ghost.io/how-to-add-dark-mode-functionality-with-react-hooks/)\n",
            "url": "https://amanhimself.dev//blog/dark-mode-with-react-hooks",
            "title": "How to add Dark mode functionality with React Hooks",
            "summary": "How to add Dark mode functionality with React Hooks",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/handle-deep-linking-react-native",
            "content_html": "---\ntitle: 'How to handle Deep Links in a React Native app'\ndate: '2020-01-08'\nslug: 'handle-deep-linking-react-native'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://blog.jscrambler.com/how-to-handle-deep-linking-in-a-react-native-app/'\n---\n\n![cover](https://i.imgur.com/cHaZZW8.jpg)\n\n> Originally published at [Jscrambler](https://blog.jscrambler.com/how-to-handle-deep-linking-in-a-react-native-app/)\n\nDeep Linking is a technique in which with a given URL or resource, a specific page or screen in mobile gets open. Navigating to this specific page or screen which can be under a series of hierarchical pages, hence the term \"deep\", is called deep linking.\n\nIn this tutorial, let us try to mimic a react-native demo app that opens a specific page based on the URI provided from an external source. To handle deep links, I am going to use an optimum solution provided by [`react-navigation`](https://reactnavigation.org/docs/) library.\n\nYou can find the complete code for the tutorial at this [GitHub repo](https://github.com/amandeepmittal/rnDeepLinkingDemo).\n\n## Configure react-navigation in a React Native app\n\nTo start, create a new React Native project by running the following command:\n\n```shell\nreact-native init rnDeepLinkingDemo\n\ncd rnDeepLinkingDemo\n```\n\nTo be able to support Deep linking via the navigation, add the required npm dependencies. Once the project directory has been generated from the above command, navigate inside the project folder from your terminal and install the following dependencies.\n\n```shell\nyarn add react-navigation react-navigation-stack\nreact-native-gesture-handler react-native-reanimated\nreact-native-screens@1.0.0-alpha.23\n```\n\nThe next step is to link all the libraries you just installed. I am using React Native version greater than `0.60.x`. If you are using a lower version of React Native, please follow the instructions to link these libraries from [here](https://reactnavigation.org/docs/en/getting-started.html).\n\nOnly for the iOS devices, you just have to run the following set of commands.\n\n```shell\ncd ios\npod install\n```\n\nFor the Android devices, add the following lines to the `android/app/build.gradle` file under `dependencies` section:\n\n```groovy\nimplementation 'androidx.appcompat:appcompat:1.1.\n0-rc01'\nimplementation 'androidx.\nswiperefreshlayout:swiperefreshlayout:1.1.0-alpha02'\n```\n\nThen open `android/app/src/main/java/com/rndeeplinkdemo/MainActivity.java` file and add the following snippet:\n\n```java\n// Add this with other import statements\nimport com.facebook.react.ReactActivityDelegate;\nimport com.facebook.react.ReactRootView;\nimport com.swmansion.gesturehandler.react.RNGestureHandlerEnabledRootView;\n// Add this inside \"class MainActivity\"\n@Override\nprotected ReactActivityDelegate createReactActivityDelegate() {\nreturn new ReactActivityDelegate(this, getMainComponentName()) {\n@Override\nprotected ReactRootView createRootView() {\nreturn new RNGestureHandlerEnabledRootView(MainActivity.this);\n}\n};\n}\n```\n\n## Create a Home & Details Screen\n\nI am going to create all the screens for the rest of this tutorial inside the directory `src/screens`. To start with the Home screen, create a new file `Home.js`. inside the aforementioned path.\n\nThis screen is going to render a list of users from an array of mock data from a [placeholder API](https://jsonplaceholder.typicode.com/users) using a `FlatList` component. Each user is going to be wrapped inside a `TouchableOpacity`. The reason being, when an end-user press a user name from the list, this is going to contain the logic of navigating from `Home` screen to `Details` screen (_which we will add later_).\n\n```js\nimport React, { useState, useEffect } from 'react';\nimport { View, Text, FlatList, TouchableOpacity } from 'react-native';\n\nfunction Home() {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then(res => {\n        setData(res);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }, []);\n\n  const Separator = () => (\n    <View\n      style={{\n        borderBottomColor: '#d3d3d3',\n        borderBottomWidth: 1,\n        marginTop: 10,\n        marginBottom: 10\n      }}\n    />\n  );\n\n  return (\n    <View style={{ flex: 1 }}>\n      <View style={{ paddingHorizontal: 20, paddingVertical: 20 }}>\n        <FlatList\n          data={data}\n          keyExtractor={item => item.id}\n          ItemSeparatorComponent={Separator}\n          renderItem={({ item }) => (\n            <TouchableOpacity onPress={() => alert('Nav to details screen')}>\n              <Text style={{ fontSize: 24 }}>{item.name}</Text>\n            </TouchableOpacity>\n          )}\n        />\n      </View>\n    </View>\n  );\n}\n\nexport default Home;\n```\n\nFor the details screen, for now, let us just display a text string. Create a new file called `Details.js`.\n\n```js\nimport React from 'react';\nimport { View, Text } from 'react-native';\n\nfunction Details() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Deep Link Screen</Text>\n    </View>\n  );\n}\nexport default Details;\n```\n\n## Configure Deep Linking in React Navigation\n\nTo navigate from Home to Details screen, we need Stack Navigator from `react-navigation`. Create a new file called `index.js` inside `src/navigation` directory and import the following statements.\n\n```js\nimport React from 'react';\nimport { createAppContainer, createSwitchNavigator } from 'react-navigation';\nimport { createStackNavigator } from 'react-navigation-stack';\nimport Home from '../screens/Home';\nimport Details from '../screens/Details';\n```\n\nCreate a stack navigator with `Home` as the initial screen.\n\n```js\nconst MainApp = createStackNavigator({\n  Home: {\n    screen: Home,\n    navigationOptions: {\n      headerTitle: 'Home'\n    }\n  },\n  Details: {\n    screen: Details,\n    navigationOptions: {\n      headerTitle: 'Details'\n    }\n  }\n});\n```\n\nTo enable deep linking the current app requires an identifier to recognize the URI path from the external source to the screen of the app.\n\nThe library `react-navigation` provides path attribute for this. It tells the router relative path to match against the URL. Re-configure both the routes as following:\n\n```js\nconst MainApp = createStackNavigator({\n  Home: {\n    screen: Home,\n    navigationOptions: {\n      headerTitle: 'Home'\n    },\n    path: 'home'\n  },\n  Details: {\n    screen: Details,\n    navigationOptions: {\n      headerTitle: 'Details'\n    },\n    path: 'details/:userId'\n  }\n});\n```\n\nIn the above snippet, the dynamic variable specified by `:userId` is passed to `details/`. This is going to allow the app to accept a dynamic value such as `details/1234`.\n\nNext, add the configuration to the navigation to extract the path from the incoming URL from the external resource. This is done by `uriPrefix`. Add the following code snippet at the end of the file.\n\n```js\nexport default () => {\n  const prefix = 'myapp://';\n  return <AppContainer uriPrefix={prefix} />;\n};\n```\n\nImport this navigation module inside `App.js` file for it to work.\n\n```js\nimport React from 'react';\nimport AppContainer from './src/navigation';\n\nconst App = () => {\n  return <AppContainer />;\n};\n\nexport default App;\n```\n\n## Configure URI scheme for native IOS apps\n\nTo make this work, you have to configure the native iOS and Android app to open URLs based on the prefix `myapp://`.\n\nFor iOS devices, open `Open ios/rnDeepLinkDemo/AppDelegate.m` file and add the following.\n\n```c\n// Add the header at the top of the file:\n#import <React/RCTLinkingManager.h>\n// Add this above the `@end`:\n- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url\n options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options\n{\n return [RCTLinkingManager application:app openURL:url options:options];\n}\n```\n\nOpen the `ios/rnDeepLinkingDemo.xcodeproj` in the Xcode app and select the app from the left navigation bar.\n\n![jss1](https://i.imgur.com/oSuKeRy.png)\n\nOpen the **Info** tab.\n\n![jss2](https://i.imgur.com/HXQ820b.png)\n\nNext, go to the **URL Types**.\n\n![jss3](https://i.imgur.com/yYUfDuN.png)\n\nClick the **+** button and in identifier as well as **URL schemes** add `myapp`.\n\n![jss4](https://i.imgur.com/sOe21B1.png)\n\nRebuild the react native binaries by running `react-native run-ios`.\n\nFor android users, you have to configure the external linking as well. Open `/android/app/src/main/AndroidManifest.xml` and set the value of `launchMode` to `singleTask`. Also, add a new `intent-filter`.\n\n```xml\n<activity\n android:name=\".MainActivity\"\n <!--set the below value-->\n android:launchMode=\"singleTask\">\n <intent-filter>\n <action android:name=\"android.intent.action.MAIN\" />\n <category android:name=\"android.intent.category.LAUNCHER\" />\n </intent-filter>\n <!--Add the following-->\n\n <intent-filter>\n <action android:name=\"android.intent.action.VIEW\" />\n <category android:name=\"android.intent.category.DEFAULT\" />\n <category android:name=\"android.intent.category.BROWSABLE\" />\n <data android:scheme=\"mychat\" />\n </intent-filter>\n</activity>\n```\n\n## Testing the app\n\nBefore you run the app on your choice of platform, make sure to re-build it using the specific command for the mobile OS as below:\n\n```shell\n# ios\nreact-native run-ios\n\n# android\nreact-native run-android\n```\n\nThe `Home` screen of the app is going to be like below.\n\n![jss5](https://i.imgur.com/BDEtLkH.png)\n\nOpen a web browser in your simulator device, and run the URL `myapp://home`. It is going to ask you to whether open the external URI in the app associated as shown below.\n\n![jss6](https://i.imgur.com/AQRBfDA.png)\n\nNext, try entering the URL `myapp://details/1` and see what happens.\n\n![jss7](https://i.imgur.com/PjoLbGh.gif)\n\nNotice in the above demo that on visiting the last-mentioned URI, it opens the details screen in the app but fails to show details of the specific user. _Why?_ Because we have to add the business logic for it to recognize the dynamic parameters based on the external source.\n\n## Access dynamic parameters in a route\n\nTo display information for each user when visiting `Details` screen, you have to pass the value of each item using navigation parameters. Open `Home.js` file and replace the value `onPress` prop on `TouchableOpacity` as shown below.\n\n```js\n<TouchableOpacity onPress={() => navigation.navigate('Details', { item })}>\n  {/* rest of the code remains same*/}\n</TouchableOpacity>\n```\n\nNext, open `Details.js`. To fetch the data from the placeholder API on initial render, let us use `useEffect` hook from React. This hook is going to behave like a good old lifecycle method `componentDidMount()`. It also allows that if the full `item` object is passed or not. If not, just grab the `userId` and request the API. Start by modifying the following import statement.\n\n```js\nimport React, { useState, useEffect } from 'react';\n```\n\nThen, define a state variable `data` to store the incoming user information. Also, modify the contents of `return` in this component screen.\n\n```js\nfunction Details({ navigation }) {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    const item = navigation.getParam('item', {});\n\n    if (Object.keys(item).length === 0) {\n      const userId = navigation.getParam('userId', 1);\n      fetch(`https://jsonplaceholder.typicode.com/users/${userId}`)\n        .then(res => res.json())\n        .then(res => {\n          const data = [];\n\n          Object.keys(res).forEach(key => {\n            data.push({ key, value: `${res[key]}` });\n          });\n\n          setData(data);\n        });\n    } else {\n      const data = [];\n\n      Object.keys(item).forEach(key => {\n        data.push({ key, value: `${item[key]}` });\n      });\n\n      setData(data);\n    }\n  }, []);\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      {data.map(data => (\n        <Text\n          style={{ fontSize: 20 }}\n          key={data.key}\n        >{`${data.key}: ${data.value}`}</Text>\n      ))}\n    </View>\n  );\n}\n```\n\nHere is the output you are going to get from the above modifications.\n\n![jss8](https://i.imgur.com/6N7ibwU.gif)\n\nNow, let us try to open a user's detail based on available ids from an external source such as a web browser.\n\n![jss9](https://i.imgur.com/h2dj0BM.gif)\n\n## Conclusion\n\nThat's it. You have now a complete demo of a React Native app that handles deep linking using `react-navigation`.\n",
            "url": "https://amanhimself.dev//blog/handle-deep-linking-react-native",
            "title": "How to handle Deep Links in a React Native app",
            "summary": "How to handle Deep Links in a React Native app",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/how-to-use-react-native-localize",
            "content_html": "---\ntitle: 'How to use React Native Localize in React Native apps'\ndate: '2020-01-01'\nslug: 'how-to-use-react-native-localize'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://heartbeat.fritz.ai/how-to-use-react-native-localize-in-react-native-apps-3bb3d510f801'\n---\n\nNot every app require global customers but if you have plans to have, you would need internationalization in your React Native app. Using [`react-native-localize`](https://github.com/react-native-community/react-native-localize) your app can detect the operating system or the device language and support the multi-languages.\n\nIn this tutorial, let us build a small demo that uses `react-native-localize` along with a popular internationalization library [`i18n-js`](https://github.com/fnando/i18n-js). The app will display some mock locales based on the device's language and region settings.\n\n## Table of contents\n\n- Requirements\n- Installing react-native-localize\n- Add locales\n- Add i18n Functionality\n- Completing the App component\n- Run the app\n- Conclusion\n\n## Requirements\n\n- Node.js >= `10.x.x` version installed\n- watchman\n- react-native-cli\n\nDo note that I’m going to use an iOS simulator for this tutorial.\n\n## Installing react-native-localize\n\nTo get started, open a terminal window and generate a new React Native app. Also, install the following dependencies after navigating inside the app directory.\n\n```shell\nreact-native init rni18nDemo\n\ncd rni18nDemo\n\nyarn add react-native-localize i18n-js lodash.memoize\n\n# for ios only\ncd ios/\npod install\n```\n\nIf you are using `react-native` version greater than `0.60.x` you won't have to link the library `react-native-localize` manually. If you are below the specified version, please refer to the module's official documentation [here](https://github.com/react-native-community/react-native-localize).\n\nThis library gives you access to localization constants related to a particular device. These constants are not included in `i18n-js` library.\n\nThe `lodash.memoize` package is going to be used since `i18n-js` does not have a concept of caching.\n\n## Add locales\n\nCreate two new files `en.json` and `nl.json` inside the directory `src/translations/`. Both of these files are for separate languages: English, and Dutch. Inside these files are JSON objects that have key-value pairs. The key for both files or the languages is going to be the same. The value for each key is going to differ as it contains the actual translation.\n\nFollowing are the contents of each file:\n\n```json\n// en.json\n{\n \"hello\": \"Hello!\",\n \"Good morning\": \"Good morning\",\n \"Currency\": \"USD\"\n}\n\n// nl.json\n{\n \"hello\": \"Hallo!\",\n \"Good morning\": \"Goedemorgen\",\n \"Currency\": \"EUR\"\n}\n```\n\n## Add i18n Functionality\n\nOpen `App.js` file and import the following statements.\n\n```js\nimport React from 'react';\nimport * as RNLocalize from 'react-native-localize';\nimport i18n from 'i18n-js';\nimport memoize from 'lodash.memoize';\nimport { SafeAreaView, StyleSheet, Text } from 'react-native';\n```\n\nNext, require the translation files from the directory created in the previous step, using an object `translationGetters`.\n\n```js\nconst translationGetters = {\n  en: () => require('./src/translations/en.json'),\n  nl: () => require('./src/translations/nl.json')\n};\n```\n\nAdd the helper function `translate` that is going to translate the keywords on the language selection.\n\n```js\nconst translate = memoize(\n  (key, config) => i18n.t(key, config),\n  (key, config) => (config ? key + JSON.stringify(config) : key)\n);\n```\n\nNext, add another helper method that is going to detect the fallback language when there is no proper translation available for a particular word or phrase.\n\nAlso, using `RNLocalize.findBestAvailableLanguage()` method, you can let the app detect the possible language tag (_value for each tag is coming from the language getters object_) and if not tag is available, it is going to use the fallback language tag. This method can also be used with some languages to detect their reading direction (_such as RTL_).\n\n```js\nconst setI18nConfig = () => {\n  const fallback = { languageTag: 'en' };\n  const { languageTag } =\n    RNLocalize.findBestAvailableLanguage(Object.keys(translationGetters)) ||\n    fallback;\n\n  translate.cache.clear();\n\n  i18n.translations = { [languageTag]: translationGetters[languageTag]() };\n  i18n.locale = languageTag;\n};\n```\n\n## Completing the App component\n\nLastly, let us create the `App` component. In the `App.js` file, start by adding a `constructor` method that is going to be used to set the i18n config helper method.\n\n```js\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    setI18nConfig();\n  }\n\n  // ...\n}\n\nexport default App;\n```\n\nThen, using the lifecycle methods `componentDidMount` and `componentWillUnmount`, you are going to add and remove event listeners to listen for any localization change.\n\n```js\ncomponentDidMount() {\n RNLocalize.addEventListener('change', this.handleLocalizationChange)\n }\n\n componentWillUnmount() {\n RNLocalize.removeEventListener('change', this.handleLocalizationChange)\n }\n\n handleLocalizationChange = () => {\n setI18nConfig()\n .then(() => this.forceUpdate())\n .catch(error => {\n console.error(error)\n })\n }\n```\n\nHere is the rest of the component file with the `render` method and the styles used in it. Apart from translation locales, `react-native-localize` provide ready to use helper methods such as `getCountry()`. This particular method returns a value in the form of a country code based on the device's locale.\n\n```js\nrender() {\n return (\n <SafeAreaView style={styles.safeArea}>\n <Text style={styles.value}>{translate('hello')}</Text>\n <Text style={styles.value}>{translate('Good morning')}</Text>\n <Text style={styles.value}>Currency: {translate('Currency')}</Text>\n <Text style={styles.value}>Country: {RNLocalize.getCountry()}</Text>\n </SafeAreaView>\n )\n}\n\n// styles\nconst styles = StyleSheet.create({\n safeArea: {\n backgroundColor: 'white',\n flex: 1,\n alignItems: 'center',\n justifyContent: 'center'\n },\n value: {\n fontSize: 24\n }\n})\n```\n\n## Run the app\n\nMake sure you build the app before running it on the platform of your choice. Here are the commands you need to run depending on the device.\n\n```shell\n# ios\nreact-native run-ios\n\n# android\nreact-native run-android\n```\n\nWhen the app's build process is complete, it is going to run the English locales by default.\n\n<img src='https://miro.medium.com/max/350/1*3KLq-CScY5yMp1pPnf1qjg.png' />\n\nOn changing the locale, the correct result is reflected in the app.\n\n<img src='https://miro.medium.com/max/377/1*cURVMx8splW7SgIaLd6y_g.gif' />\n\n## Conclusion\n\nThis completes the tutorial on how to use `react-native-localize` to add and use language translations in a React Native app.\n\nHere is the complete code for this demo in a **[Github repo](https://github.com/amandeepmittal/rni18nDemo)**.\n\nCheckout [Jonathan Palma's](https://twitter.com/jonathanpalma__) who wrote [a small i18n library](https://github.com/jonathanpalma/react-native-simple-i18n#readme) after being inspired from this post. Check the library here on [GitHub](https://github.com/jonathanpalma/react-native-simple-i18n#readme).\n\nOriginally published at [Heartbeat.fritz.ai](https://heartbeat.fritz.ai/how-to-use-react-native-localize-in-react-native-apps-3bb3d510f801)\n",
            "url": "https://amanhimself.dev//blog/how-to-use-react-native-localize",
            "title": "How to use React Native Localize in React Native apps",
            "summary": "How to use React Native Localize in React Native apps",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/push-notifications-android-apps-react-native",
            "content_html": "---\ntitle: 'Implement Push notifications for Android apps with React Native'\ndate: '2019-11-19'\nslug: 'push-notifications-android-apps-react-native'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://blog.jscrambler.com/implementing-react-native-push-notifications-in-android-apps/'\n---\n\nRelevant Push notifications are a great way to boost a user's engagement towards an application. According to some [analysis](http://info.localytics.com/blog/6-stats-that-prove-how-important-push-notifications-in-app-messaging-are-to-your-apps-success), push notifications increase app engagement by 88%. It’s also curious to see that the [click-through rate](https://clevertap.com/blog/mobile-marketing-stats-2019/) for push notifications in Android (4.06%) is much higher than in iOS (1.7%).\n\nIn this tutorial, you are going to learn how to implement push notifications as an app feature using React Native and Firebase. I will be testing out the notification feature on an Android device, but you can go ahead and try it out on iOS yourself.\n\nThere are two main ways you can send push notifications to your app users: local and remote. Local notifications are sent from a React Native application, while remote push notifications are sent from the server or a push notification service such as Google's Cloud Messaging Service (GCM). We will explore both approaches.\n\n## Requirements\n\nTo follow this tutorial, please make sure you have the following installed on your local development environment and have access to the services mentioned below:\n\n- Nodejs (>=`10.x.x`) with npm/yarn installed.\n- react-native-cli\n- Windows/Linux users must be running an Android emulator or a real device via USB\n- Active [Firebase](https://firebase.google.com/) project\n\nTo know more about how to set up a development environment for React Native using react-native-cli, please refer to the [official documentation](https://facebook.github.io/react-native/docs/getting-started).\n\nYou can find the complete code for this tutorial at [this GitHub repository](https://github.com/amandeepmittal/RNnotifications-demo).\n\n## Install and Set Up react-native-push-notifications\n\nThe [react-native-push-notifications](https://github.com/zo0r/react-native-push-notification#readme) library helps you set up controllers to consume local or remote notifications for iOS and Android devices. To begin, follow the instructions from the terminal window. Create a new React Native project and then install this library.\n\n```shell\nreact-native int RNnotifications\n\ncd RNnotifications\n\nyarn add react-native-push-notification\n```\n\nFor iOS devices, this library depends on the manual installation instructions mentioned at [PushNotificationIOS](https://github.com/react-native-community/react-native-push-notification-ios) - an API that is maintained by react-native-community.\n\nFor Android devices, you are going to make the following edits in the appropriate files mentioned below. First, open the file `android/build.gradle` and add the following:\n\n```groovy\nbuildscript {\n    ext {\n        // add the following two lines\n        googlePlayServicesVersion = \"16.1.0\" // default: \"+\"\n        firebaseVersion = \"17.3.4\" // default: \"+\"\n    }\n    repositories {\n        google()\n        jcenter()\n    }\n    dependencies {\n        // add the following dependency\n        classpath 'com.google.gms:google-services:4.3.2'\n    }\n}\n```\n\nNext, open `android/settings.gradle` and add the following before `include ':app'`.\n\n```groovy\ninclude ':react-native-push-notification'\nproject(':react-native-push-notification').projectDir = file('../node_modules/react-native-push-notification/android')\n```\n\nDo note that, if you are not looking forward to using remote notifications, you can ignore the above step. However, the following step is important for both types of notifications to work. Open the `android/app/src/main/AndroidManifest.xml` file. Before the `<application>` tag, add the following.\n\n```xml\n  <uses-permission android:name=\"android.permission.WAKE_LOCK\" />\n    <permission\n        android:name=\"${applicationId}.permission.C2D_MESSAGE\"\n        android:protectionLevel=\"signature\" />\n    <uses-permission android:name=\"${applicationId}.permission.C2D_MESSAGE\" />\n    <!-- < Only if you're using GCM or localNotificationSchedule() > -->\n\n    <uses-permission android:name=\"android.permission.VIBRATE\" />\n    <uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\"/>\n```\n\nThen, inside the `<application>` tag (and without deleting any existing tags) add:\n\n```xml\n <meta-data  android:name=\"com.dieam.reactnativepushnotification.notification_channel_name\"\n                android:value=\"YOUR NOTIFICATION CHANNEL NAME\"/>\n        <meta-data  android:name=\"com.dieam.reactnativepushnotification.notification_channel_description\"\n                    android:value=\"YOUR NOTIFICATION CHANNEL DESCRIPTION\"/>\n        <!-- Change the resource name to your App's accent color - or any other color you want -->\n        <meta-data  android:name=\"com.dieam.reactnativepushnotification.notification_color\"\n                    android:resource=\"@android:color/white\"/>\n\n        <!-- < Only if you're using GCM or localNotificationSchedule() > -->\n        <receiver\n            android:name=\"com.google.android.gms.gcm.GcmReceiver\"\n            android:exported=\"true\"\n            android:permission=\"com.google.android.c2dm.permission.SEND\" >\n            <intent-filter>\n                <action android:name=\"com.google.android.c2dm.intent.RECEIVE\" />\n                <category android:name=\"${applicationId}\" />\n            </intent-filter>\n        </receiver>\n        <!-- < Only if you're using GCM or localNotificationSchedule() > -->\n\n        <receiver android:name=\"com.dieam.reactnativepushnotification.modules.RNPushNotificationPublisher\" />\n        <receiver android:name=\"com.dieam.reactnativepushnotification.modules.RNPushNotificationBootEventReceiver\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.BOOT_COMPLETED\" />\n            </intent-filter>\n        </receiver>\n        <service android:name=\"com.dieam.reactnativepushnotification.modules.RNPushNotificationRegistrationService\"/>\n\n        <!-- < Only if you're using GCM or localNotificationSchedule() > -->\n        <service\n            android:name=\"com.dieam.reactnativepushnotification.modules.RNPushNotificationListenerServiceGcm\"\n            android:exported=\"false\" >\n            <intent-filter>\n                <action android:name=\"com.google.android.c2dm.intent.RECEIVE\" />\n            </intent-filter>\n        </service>\n        <!-- </ Only if you're using GCM or localNotificationSchedule() > -->\n\n        <!-- < Else > -->\n        <service\n            android:name=\"com.dieam.reactnativepushnotification.modules.RNPushNotificationListenerService\"\n            android:exported=\"false\" >\n            <intent-filter>\n                <action android:name=\"com.google.firebase.MESSAGING_EVENT\" />\n            </intent-filter>\n        </service>\n```\n\nLastly, go to `android/app/src/res/values/colors.xml`. If the file does not exist, create it. This file determines the color of the notification on an Android device. For example, the notification can be white:\n\n```xml\n<resources>\n    <color name=\"white\">#FFF</color>\n</resources>\n```\n\n_Note:_ To use this library with Expo, you have to eject the Expo SDK app.\n\n## Configure Local Push Notifications\n\nIn this section, you are going to write a configure function such that, when a button is pressed, a local notification is triggered. Create a new file inside `src/services/LocalPushController.js`. Start by importing `PushNotification` from the library you initialized in the previous step.\n\n```js\nimport PushNotification from 'react-native-push-notification';\n```\n\nAdd `PushNotification.configure()` to the file. This accepts an object with a required method `onNotification`. This method handles what happens after the notification is opened or received. Since it is a required method, it has to be invoked whether the notification is local or remote. The demo application only invokes a `console` statement stating the properties of the local notification object used in the current demo app.\n\n```js\nPushNotification.configure({\n  // (required) Called when a remote or local notification is opened or received\n  onNotification: function (notification) {\n    console.log('LOCAL NOTIFICATION ==>', notification);\n  },\n\n  popInitialNotification: true,\n  requestPermissions: true\n});\n```\n\nNext, export `LocalNotification` in the snippet below which gets invoked when a button pressed by the user _or as the value of the `onPress` attribute_.\n\n```js\nexport const LocalNotification = () => {\n  PushNotification.localNotification({\n    autoCancel: true,\n    bigText:\n      'This is local notification demo in React Native app. Only shown, when expanded.',\n    subText: 'Local Notification Demo',\n    title: 'Local Notification Title',\n    message: 'Expand me to see more',\n    vibrate: true,\n    vibration: 300,\n    playSound: true,\n    soundName: 'default',\n    actions: '[\"Yes\", \"No\"]'\n  });\n};\n```\n\n`PushNotification.localNotification` has plenty of properties for each mobile platform (such as iOS or Android). From the above snippet, properties like `vibrate`, `vibration`, `bigText`, `subText` are Android only. However, properties like `actions`, `title`, `message`, `playSound` & `soundName` are cross-platform.\n\nImport this method in the `App.js` file. Import `LocalNotification` from the `src/services/LocalPushController.js` file. Then, inside the functional `App` component, add a handler method `handleButtonPress` to invoke only when the user presses the button.\n\n```js\nimport React from 'react';\nimport { Text, View, Button, StyleSheet } from 'react-native';\nimport { LocalNotification } from './src/services/LocalPushController';\n\nconst App = () => {\n  const handleButtonPress = () => {\n    LocalNotification();\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text>Press a button to trigger the notification</Text>\n      <View style={{ marginTop: 20 }}>\n        <Button title={'Local Push Notification'} onPress={handleButtonPress} />\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  buttonContainer: {\n    marginTop: 20\n  }\n});\n\nexport default App;\n```\n\nNow, from a terminal window, run `react-native run-android`. Make sure you have a device connected via USB and have USB debugging enabled, or you can test on an Android Emulator.\n\nThe output of the above code snippet should look like this:\n\n![ss1](https://i.imgur.com/Pq3hR5P.png)\n\nWhen the button is pressed, it displays the notification, vibrates the device, and plays a default notification sound.\n\n![ss2](https://i.imgur.com/KKhYuLE.gif)\n\nExpanding the notification displays the message from `bigText`. Pressing the notification results in triggering the console statement from `onNotification` method.\n\n![ss3](https://i.imgur.com/JSHRAXh.png)\n\nYou can add scheduled notifications by using the `PushNotification.localNotificationSchedule(details: Object)` method or you can repeat notifications after a particular time too. Read how to do this or add more customizations in the [module's official docs](https://github.com/zo0r/react-native-push-notification#readme).\n\n## Configure Remote Notifications\n\nTo test out how remote notifications work, let us integrate the Cloud Messaging Service using Firebase. To follow the steps below, make sure you have an active Firebase project.\n\nFrom the main **Dashboard** page, go to **Project Settings**. In the **Your apps** section, click on **Add app** and set up a new Android app.\n\nNext, it will ask you to register the application.\n\n![ss4](https://i.imgur.com/gcW6Giq.png)\n\nDownload the file `google-services.json` and save it at the location `android/app/` inside your React Nativ project.\n\n![ss5](https://i.imgur.com/mTEX4G9.png)\n\nThen, open the `android/app/build.gradle` file and add the following.\n\n```groovy\ndependencies {\n    implementation project(':react-native-push-notification')\n    // ... rest remains same\n}\n\n// at the end of the file, add\napply plugin: 'com.google.gms.google-services'\n```\n\nNext, create a new service file called `RemotePushController.js` inside the `src/services/` directory. This file contains all the configuration to handle a remote push notification. Inside the mandatory `onNotification` method, let us again display the result of the remote notification in the console.\n\nIt also requires a mandatory Android property called `senderID`. This can be fetched form **Project Settings** > **Cloud Messaging**.\n\n![ss7](https://i.imgur.com/CbXvImG.png)\n\n```js\nimport React, { useEffect } from 'react';\nimport PushNotification from 'react-native-push-notification';\n\nconst RemotePushController = () => {\n  useEffect(() => {\n    PushNotification.configure({\n      // (optional) Called when Token is generated (iOS and Android)\n      onRegister: function (token) {\n        console.log('TOKEN:', token);\n      },\n\n      // (required) Called when a remote or local notification is opened or received\n      onNotification: function (notification) {\n        console.log('REMOTE NOTIFICATION ==>', notification);\n\n        // process the notification here\n      },\n      // Android only: GCM or FCM Sender ID\n      senderID: '256218572662',\n      popInitialNotification: true,\n      requestPermissions: true\n    });\n  }, []);\n\n  return null;\n};\n\nexport default RemotePushController;\n```\n\nAlso, the Cloud Messaging service works based on using a `Token` between the app and the notification service. The `onRegister` method registers the remote server and obtains this token. You can view this by adding a console statement.\n\n![ss6](https://i.imgur.com/EjCkPNd.png)\n\nThe controller component returns `null` to avoid having any effects on the final layout. Add this method inside the `App.js` file as shown below:\n\n```js\n// after other import statements\nimport RemotePushController from './src/services/RemotePushController'\n\n// before the ending <View>\n  <RemotePushController />\n</View>\n```\n\nTo test it out, go to **Cloud Messaging** section and compose a notification.\n\n![ss8](https://i.imgur.com/VlclUtb.png)\n\nClick the button **Send test message**. You will have the following output.\n\n![ss9](https://i.imgur.com/uq1KGhW.gif)\n\nThe Log in the terminal is shown for the same notification.\n\n![ss10](https://i.imgur.com/1wZOjG7.png)\n\nYou can customize the title, message and another behavior of the Firebase Cloud Messaging service to send notifications at a particular time or date by composing the notification.\n\n## Conclusion\n\nCongratulations! You have successfully implemented both ways to send a push notification in a React Native app. Go ahead and try to implement a scheduled notification as a challenge.\n\nOriginally published at [Jscrambler](https://blog.jscrambler.com/implementing-react-native-push-notifications-in-android-apps/)\n",
            "url": "https://amanhimself.dev//blog/push-notifications-android-apps-react-native",
            "title": "Implement Push notifications for Android apps with React Native",
            "summary": "Implement Push notifications for Android apps with React Native",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/handle-different-field-types-in-react-native-forms",
            "content_html": "---\ntitle: 'Handle different field types in React Native forms with formik and yup'\ndate: '2019-10-26'\nslug: 'handle-different-field-types-in-react-native-forms'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://heartbeat.fritz.ai/handling-different-field-types-in-react-native-forms-with-formik-and-yup-fa9ea89d867e'\n---\n\nIn the [previous post](https://amanhimself.dev/build-validate-forms-with-react-native-formik-yup), you did a lot of things. From creating Login and Signup forms from scratch and using powerful libraries like Formik and yup to validate those forms.\n\nIn this tutorial, let us extend our knowledge of building and validating forms by handling different input field types other than strings. You are also going to take a look at my share of the solution on how to gracefully create a Confirm Password field and validate it using the reference of already setup `password` field.\n\nLastly, there is a small bonus section that will allow you to complete the UI of the form. You are going to add a toggle icon to show or hide the password for the user to re-check.\n\nThis tutorial is going to use an already setup source code from [**this Github repo**](https://github.com/amandeepmittal/expo-firebase/releases/tag/0.2.0) release.\n\nAfter installing the source code, please navigate inside the project directory and install dependencies by running the following command:\n\n```shell\nnpm install\n\n# or\n\nyarn install\n```\n\n## Table of Contents\n\n- Requirements\n- Adding Confirm Password Field to Signup Screen\n- Handling a CheckBox with Formik and Yup\n- Bonus: Hide/Show Password fields\n- Conclusion\n\n## Requirements\n\nTo follow this tutorial, please make sure you following installed on your local development environment and access to the services mentioned below.\n\n- Nodejs (>= `10.x.x`) with npm/yarn installed\n- expo-cli (>= `3.x.x`), (previously known as create-react-native-app)\n\n## Adding Confirm Password Field to Signup Screen\n\nIn the [**last post**](LINK HERE), I left you with a challenge to figure out how to add validation for confirm password field in the signup screen using `yup`. If you succeeded, please skip this section and move on the next one. If you are still curious about it, open `Signup.js` file and a new input field for the confirm password as well as a new property with the same name in the `initialValues` object of `Formik` element.\n\n```js\n<Formik\n  initialValues={{\n    name: '',\n    email: '',\n    password: '',\n    // add this\n    confirmPassword: ''\n  }}\n  onSubmit={values => {\n    this.handleSubmit(values);\n  }}\n  validationSchema={validationSchema}\n>\n  {({\n    handleChange,\n    values,\n    handleSubmit,\n    errors,\n    isValid,\n    touched,\n    handleBlur,\n    isSubmitting\n  }) => (\n    <Fragment>\n      {/* Rest of the code remains same */}\n      <FormInput\n        name=\"password\"\n        value={values.confirmPassword}\n        onChangeText={handleChange('confirmPassword')}\n        placeholder=\"Confirm password\"\n        secureTextEntry\n        iconName=\"ios-lock\"\n        iconColor=\"#2C384A\"\n        onBlur={handleBlur('confirmPassword')}\n      />\n      <ErrorMessage\n        errorValue={touched.confirmPassword && errors.confirmPassword}\n      />\n      <View style={styles.buttonContainer}>\n        <FormButton\n          buttonType=\"outline\"\n          onPress={handleSubmit}\n          title=\"SIGNUP\"\n          buttonColor=\"#F57C00\"\n          disabled={!isValid || isSubmitting}\n          loading={isSubmitting}\n        />\n      </View>\n    </Fragment>\n  )}\n</Formik>\n```\n\nIn the `validationSchema` object add a new property called `confirmPassword` that is going to be a string. Next, using `oneOf` the method from Yup's API. Inside its array parameter, it accepts a `Yup.ref()` which creates a reference to another sibling from the `intialValues` object.\n\n```js\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .label('Name')\n    .required()\n    .min(2, 'Must have at least 2 characters'),\n  email: Yup.string()\n    .label('Email')\n    .email('Enter a valid email')\n    .required('Please enter a registered email'),\n  password: Yup.string()\n    .label('Password')\n    .required()\n    .min(4, 'Password must have more than 4 characters '),\n\n  // add this\n  confirmPassword: Yup.string()\n    .oneOf([Yup.ref('password')], 'Confirm Password must matched Password')\n    .required('Confirm Password is required')\n});\n```\n\nThe `Yup.ref('password')` here refers to the actual `password` field. Let us try to add a different password to both of these fields and see what happens.\n\nI am going to add `pass` to the `password` field (_since it accepts four minimum characters_) and `passo` to the `confirmPassword` field.\n\n![1](https://i.imgur.com/p9CEa5H.gif)\n\nSee the error message being displayed when both input fields do not match.\n\n## Handling a CheckBox with Formik and Yup\n\nYou can create and validate other field types using Formik and Yup. In this section, you are going to achieve that by creating a checkbox field that is quite common when signing up into new applications where they make you agree to all of their terms and app policies.\n\nOpen `Signup.js` file and the following [checkbox element](https://react-native-training.github.io/react-native-elements/docs/checkbox.html#docsNav) from `react-native-elements` library. It is going to contain a boolean value. In the `initialValues` object, please add that.\n\n```js\n// import checkbox element\nimport { Button, CheckBox } from 'react-native-elements'\n\ninitialValues={{\n  name: '',\n  email: '',\n  password: '',\n  confirmPassword: '',\n  // add \"check\" to initial values\n  check: false\n}}\n```\n\nAt the checkbox, there is a prop called `checked` that is required. It holds the current value of the element whether it checked or not. After you have defined the `confirmPassword` input field, please state the following.\n\n```js\n<CheckBox\n  containerStyle={styles.checkBoxContainer}\n  checkedIcon=\"check-box\"\n  iconType=\"material\"\n  uncheckedIcon=\"check-box-outline-blank\"\n  title=\"Agree to terms and conditions\"\n  checkedTitle=\"You agreed to our terms and conditions\"\n  checked={values.check}\n  onPress={() => setFieldValue('check', !values.check)}\n/>\n```\n\nThe required prop `checked` that changes the icon to check or uncheck. By default, it will be marked uncheck. The `uncheckedIcon` prop takes the value of an icon. The `title` prop's value of the checkbox when marked check, changes to the value of `checkedTitle`. These are fair advantages of using a component library like `react-native-elements`.\n\nUsing `setFieldValue` from Formik props, you can set the value of the `check` to true or false. It accepts the reference of the key `check` itself as the first parameter. `!values.check` states the opposite of the current value of the key `check`.\n\nLastly, edit the `validationSchema` by adding the key `check`. It is going to use boolean schema type.\n\n```js\ncheck: Yup.boolean().oneOf([true], 'Please check the agreement');\n```\n\nSee the below demonstration on how it works.\n\n![2](https://i.imgur.com/pj1wjhS.gif)\n\n## Bonus: Hide/Show Password fields\n\nIn this section, you are going to add the ability to hide or show the password on the corresponding field. By the end of this section, the password input field is going to look like this.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*1-32GyAIseC81jkInsRxSg.png' />\n\nTo start, open `Login.js` file and import `TouchableOpacity` from `react-native` and `Ionicons` from expo's vector icons library which comes with Expo SDK.\n\n```js\nimport { StyleSheet, SafeAreaView, View, TouchableOpacity } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\n```\n\nNext step is to define an initial state inside the `Login` component. This will help track of the current icon being shown and the visibility of the password.\n\n```js\nstate = {\n  passwordVisibility: true,\n  rightIcon: 'ios-eye'\n};\n```\n\nThe define a handler method that will trigger on the `onPress` prop of `TouchableOpacity`. It checks the previous state of the icon and the password's visibility field.\n\n```js\nhandlePasswordVisibility = () => {\n  this.setState(prevState => ({\n    rightIcon: prevState.rightIcon === 'ios-eye' ? 'ios-eye-off' : 'ios-eye',\n    passwordVisibility: !prevState.passwordVisibility\n  }));\n};\n```\n\nThen go to the password input field and add the prop `rightIcon` from `react-native-elements`, you are going to pass the `TouchableOpacty` for the icon to be touchable and trigger some function (_in this case, handlePasswordVisibility_).\n\nAlso, tame the prop `secureEntryText`. It accepts a boolean as its value, and that is what `passwordVisibility` is. If its value is true, which is the initial state, it will secure the password field entry. When clicked on the icon, the visibility is going to change to false, and then the password will be shown.\n\n```js\nsecureTextEntry={passwordVisibility}\nrightIcon={\n  <TouchableOpacity onPress={this.handlePasswordVisibility}>\n    <Ionicons name={rightIcon} size={28} color='grey' />\n  </TouchableOpacity>\n}\n```\n\nThis is the output you are going to get.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*m5e8YiiykjcR2h9-PuqwqA.gif' />\n\n## Conclusion\n\nThat's it. This post and the [previous one](https://amanhimself.dev/build-validate-forms-with-react-native-formik-yup) covers enough to get you started and create forms in advance forms in React Native apps using formik and yup.\n\nYou can go ahead and add the toggle password visibility to the `Signup` form screen as well. You will find the source code from [**this Github repo**](https://github.com/amandeepmittal/expo-firebase/releases/tag/0.5.0) release.\n\n[Originally published at Heartbeat](https://heartbeat.fritz.ai/handling-different-field-types-in-react-native-forms-with-formik-and-yup-fa9ea89d867e)\n",
            "url": "https://amanhimself.dev//blog/handle-different-field-types-in-react-native-forms",
            "title": "Handle different field types in React Native forms with formik and yup",
            "summary": "Handle different field types in React Native forms with formik and yup",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/implement-forgot-password-firebase-react-native",
            "content_html": "---\ntitle: 'How to implement Forgot Password feature in React Native with Firebase'\ndate: '2019-10-25'\nslug: 'implement-forgot-password-firebase-react-native'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://amanhimself.dev/blog/implement-forgot-password-firebase-react-native/'\n---\n\n> Originally published at [Heartbeat.Fritz.ai](https://heartbeat.fritz.ai/how-to-implement-forgot-password-feature-in-react-native-and-firebase-app-890b572d9759)\n\nIn some of the previous posts, you built a React Native app using Firebase as the backend service provider for Email authentication and storing user's data upon successful sign-up.\n\nLet's add another common yet useful and necessary feature in the current app structure: **Forgot Password**. This feature will require another screen in the current React Native app. To follow this tutorial, you can either go through the previous posts if you are a beginner to React Native world:\n\n- [How authenitcation works using react-navigation 4.x.x](https://heartbeat.fritz.ai/how-authentication-flow-works-in-react-native-apps-using-react-navigation-4-x-a30bb4d9e5d6)\n- [How to build and validate forms in React Native apps using Formik and Yup](https://heartbeat.fritz.ai/build-and-validate-forms-in-react-native-using-formik-and-yup-6489e2dff6a2)\n- [Handle different field types in React Native forms](https://heartbeat.fritz.ai/handling-different-field-types-in-react-native-forms-with-formik-and-yup-fa9ea89d867e)\n- [Use React Context API to build React Native, Expo and Firebase apps](https://amanhimself.dev/context-api-react-native-firebase)\n\n**Or** you if you are comfortable in understanding React Native code, dive deep in source code or download it from the Github repo release [here](https://github.com/amandeepmittal/expo-firebase/releases/tag/0.6.0).\n\nAfter downloading the source code, please navigate inside the project directory and install dependencies by running the command `npm install` or `yarn install`.\n\n## Table of Contents\n\n- Requirements\n- Add Forgot Password Screen\n- Add a method to send a password reset email\n- Create a Form\n- Handle Password Reset\n\n## Requirements\n\nTo follow this tutorial, please make sure you the following libraries are installed on your local development environment and access to the services mentioned below.\n\n- Nodejs (`>= 12.x.x`) with npm/yarn installed\n- Expo SDK (`>= 40.x.x`)\n- Firebase account, free tier will do\n\n## Add Forgot Password Screen\n\nLet’s start with a basic screen and hook it up with current navigation flow such that an app user will be able to navigate to this new screen from the `Login` screen.\n\nCreate a new file `screens/ForgotPassword.js` with some dummy text.\n\n```js\nimport React, { Component } from 'react';\nimport { Text, View } from 'react-native';\n\nclass ForgotPassword extends Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Forgot Password Screen</Text>\n      </View>\n    );\n  }\n}\n\nexport default ForgotPassword;\n```\n\nOpen the `AuthNavigation.js` file and this new class component as below.\n\n```js\nimport { createStackNavigator } from 'react-navigation-stack';\nimport Login from '../screens/Login';\nimport Signup from '../screens/Signup';\nimport ForgotPassword from '../screens/ForgotPassword';\n\nconst AuthNavigation = createStackNavigator(\n  {\n    Login: { screen: Login },\n    Signup: { screen: Signup },\n    ForgotPassword: { screen: ForgotPassword }\n  },\n  {\n    initialRouteName: 'Login',\n    headerMode: 'none'\n  }\n);\n\nexport default AuthNavigation;\n```\n\nLastly, open `Login.js` file. Logically, this where a button to navigate to this new `ForgotPassword` component should exist. First, add the handler method `goToForgotPassword` inside the `Login` class component with other handler methods.\n\n```js\ngoToForgotPassword = () => this.props.navigation.navigate('ForgotPassword');\n```\n\nPassing the name of the route as the first parameter to `navigation.navigate()` is how you navigate from one screen to the other screen using `react-navigation` library. In this case, the name of the route is going to be `ForgotPassword`.\n\nNext, add the a `Button` component after the `Signup` button. The value of the `onPress` prop of this button is going to be the handler method.\n\n```js\n<Button\n  title=\"Forgot Password?\"\n  onPress={this.goToForgotPassword}\n  titleStyle={{\n    color: '#039BE5'\n  }}\n  type=\"clear\"\n/>\n```\n\nNow, open a simulator or a real device with an Expo client installed and run the command `expo start` from a terminal window. You will be welcomed by the following screen.\n\n![ss1](https://i.imgur.com/U7hRwYl.png)\n\nClicking on the button `Forgot Password ?` will lead you to the new screen.\n\n![ss2](https://i.imgur.com/UrH4dJY.png)\n\n## Add a method to send a password reset email\n\nThe Firebase authentication module provides a method that you can use in React Native apps to send a link to the user's registered email id with the app. Users can click the link to reset the password. Firebase does this on its own. You do not have to write the server code to add this functionality to your app.\n\nTo start, open `config/Firebase/firebase.js` file and add the following method. You will use this method inside the `ForgotPassword` component by providing the user's email as input.\n\n```js\npasswordReset: email => {\n  return firebase.auth().sendPasswordResetEmail(email)\n},\n```\n\nThat's all you need to configure the Firebase app to make sure it sends the email on the registered email id.\n\nTo extend this further, you can try and customize the Email template that Firebase uses to send the reset password link [here](https://support.google.com/firebase/answer/7000714).\n\n## Create a Form\n\nUsing the previously obtained knowledge of Formik ad yup let us add an input field and a button. The input field will take in the email and the button will be responsible to perform the action of submitting the form. In other words, it will trigger the network to reset the user's email in a handler method.\n\nOpen `ForgotPassword.js` file and add the following import statements.\n\n```js\nimport React, { Component, Fragment } from 'react';\nimport { Text, SafeAreaView, View, StyleSheet } from 'react-native';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport FormInput from '../components/FormInput';\nimport FormButton from '../components/FormButton';\nimport ErrorMessage from '../components/ErrorMessage';\nimport { withFirebaseHOC } from '../config/Firebase';\n```\n\nAfter the import statements, add `validationSchema` object. This object is similar to that used in `Login` component and will help to determine whether the input provided already exists as the registered email or not.\n\n```js\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .label('Email')\n    .email('Enter a valid email')\n    .required('Please enter a registered email')\n});\n```\n\nGo the `render` function, and replace its existing content to the form below.\n\n```js\nrender() {\n    return (\n      <SafeAreaView style={styles.container}>\n        <Text style={styles.text}>Forgot Password?</Text>\n        <Formik\n          initialValues={{ email: '' }}\n          onSubmit={(values, actions) => {\n            this.handlePasswordReset(values, actions)\n          }}\n          validationSchema={validationSchema}>\n          {({\n            handleChange,\n            values,\n            handleSubmit,\n            errors,\n            isValid,\n            touched,\n            handleBlur,\n            isSubmitting\n          }) => (\n            <Fragment>\n              <FormInput\n                name='email'\n                value={values.email}\n                onChangeText={handleChange('email')}\n                placeholder='Enter email'\n                autoCapitalize='none'\n                iconName='ios-mail'\n                iconColor='#2C384A'\n                onBlur={handleBlur('email')}\n              />\n              <ErrorMessage errorValue={touched.email && errors.email} />\n              <View style={styles.buttonContainer}>\n                <FormButton\n                  buttonType='outline'\n                  onPress={handleSubmit}\n                  title='Send Email'\n                  buttonColor='#039BE5'\n                  disabled={!isValid || isSubmitting}\n                />\n              </View>\n              <ErrorMessage errorValue={errors.general} />\n            </Fragment>\n          )}\n        </Formik>\n      </SafeAreaView>\n    )\n  }\n```\n\nIn the above code snippet, the elements such as `FormInput`, `FormButton` and `ErrorMessage` are some re-usable custom presentational components that you can find inside `components/` directory. `this.handlePasswordReset(values, actions)` is the handler method that accepts two parameters. You will write the logic behind this method in the next section.\n\nThe corresponding styles to the component are:\n\n```js\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    marginTop: 150\n  },\n  text: {\n    color: '#333',\n    fontSize: 24,\n    marginLeft: 25\n  },\n  buttonContainer: {\n    margin: 25\n  }\n});\n```\n\nLastly, do not forget to wrap the `ForgotPassword` with the Firebase High Order Component `withFirebaseHOC` to use `passwordReset` method as props.\n\n```js\nexport default withFirebaseHOC(ForgotPassword);\n```\n\nNow go back to the simulator and you will get the following screen.\n\n![ss3](https://i.imgur.com/2ry1EAn.png)\n\n## Handle Password Reset\n\nInside the `ForgotPassword` component create a new handler method called `handlePasswordReset`. This is going to be an asynchronous function that will accept the user's email as the parameter from the Formik's values.\n\nAlso, pass the `actions` from Formik as the second parameter. Instead of just console logging the error values, to display the error on the screen, Formik provides `setFieldError`.\n\n```js\nhandlePasswordReset = async (values, actions) => {\n  const { email } = values;\n\n  try {\n    await this.props.firebase.passwordReset(email);\n    console.log('Password reset email sent successfully');\n    this.props.navigation.navigate('Login');\n  } catch (error) {\n    actions.setFieldError('general', error.message);\n  }\n};\n```\n\nThe above snippet signifies that if the email provided as the input is valid, it will send the request to reset the password. On success, a message on Expo's console will be displayed as shown below.\n\n![ss4](https://i.imgur.com/zDL0Pfg.png)\n\nAlso, on success, it will navigate the user back to the login screen. On errors, the code inside the `catch` block will be triggered.\n\nTo try it out, register a user with a valid email address such that you can receive an email. On registering a new user, right now, the app will log you in. Sign out from the app which will take you back to the login screen. Next, go the `Forgot Password` screen and enter the valid email.\n\n![ss8](https://i.imgur.com/YwJ191G.png)\n\nYou will receive an email like the below. It uses the default Firebase template. To demonstrate, I am using my personal Gmail address.\n\n![ss5](https://i.imgur.com/kmgey8U.png)\n\nClick on the link and it will redirect you to a webpage like below.\n\n![ss6](https://i.imgur.com/vhuApsk.png)\n\nUpon successful password change, it will prompt with the following message to the user.\n\n![ss7](https://i.imgur.com/rLPkUeE.png)\n\n## Conclusion\n\nThat's it! It is that simple. With a new password, you can try to login to the app now and it will work. If you have come this far, I am hope enjoyed reading this post. These are some of the strategies I try to follow with any Firebase + React Native projects.\n\nI hope any of the codebase used in this tutorial helps you. To find the complete code, you will have to visit this [Github repo release](https://github.com/amandeepmittal/expo-firebase/releases/tag/0.7.0).\n\n## Further reading\n\n- [Hiring a React Native Developer: What Should You Look For? by Jess Marranco](https://www.g2i.co/blog/hiring-a-react-native-developer)\n",
            "url": "https://amanhimself.dev//blog/implement-forgot-password-firebase-react-native",
            "title": "How to implement Forgot Password feature in React Native with Firebase",
            "summary": "How to implement Forgot Password feature in React Native with Firebase",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/tensorflow-image-classification-expo",
            "content_html": "---\ntitle: 'Image Classification on React Native with TensorFlow.js and MobileNet'\ndate: '2019-10-17'\nslug: 'tensorflow-image-classification-expo'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://heartbeat.fritz.ai/image-classification-on-react-native-with-tensorflow-js-and-mobilenet-48a39185717c'\n---\n\nRecently, the alpha version [Tensorflow.js](https://www.tensorflow.org/js/) for React Native and Expo applications was released. It currently provides the capabilities of loading pre-trained models and training. Here is the announcement tweet:\n\n> [Tweet](https://twitter.com/tensorflow/status/1169309153715732480?lang=en)\n\nTensorFlow.js provides many [pre-trained models](https://github.com/tensorflow/tfjs-models) that simplify the time-consuming task of training a machine learning model from scratch. In this tutorial, we are going to explore [Tensorflow.js](https://www.tensorflow.org/js/) and the MobileNet pre-trained model to classify image based on the input image provided in a React Native mobile application.\n\nHere is the link to the complete code in a [Github repo](https://github.com/amandeepmittal/mobilenet-tfjs-expo) for your reference.\n\n## Requirements\n\n- Nodejs >= 10.x.x install on your local dev environment\n- `expo-cli`\n- Expo Client app for Android or iOS, used for testing the app\n\n## Integrating TFJS in an Expo app\n\nTo start and use the Tensorflow library in a React Native application, the initial step is to integrate the platform adapter. The module `tfjs-react-native` is the platform adapter that supports loading all major tfjs models from the web. It also provides GPU support using `expo-gl`.\n\nOpen the terminal window, and create a new Expo app by executing the command below.\n\n```shell\nexpo init mobilenet-tfjs-expo\n```\n\nNext, make sure to generate Expo managed app. Then navigate inside the app directory and install the following dependencies.\n\n```shell\nyarn add @react-native-community/async-storage\n@tensorflow/tfjs @tensorflow/tfjs-react-native\nexpo-gl @tensorflow-models/mobilenet jpeg-js\n```\n\n> _Note:_ If you are looking forward to using `react-native-cli` to generate an app, you can follow the clear instructions to modify `metro.config.js` file and other necessary steps, mentioned [here](https://github.com/tensorflow/tfjs/tree/master/tfjs-react-native).\n\nEven though you are using Expo, it is necessary to install [async-storage](https://github.com/react-native-community/async-storage) as tfjs module depends on that.\n\n## Testing TFJS that it is working\n\nBefore we move on, let us test out that the tfjs is getting loaded into the app before the app is rendered. There is an asynchronous function to do so, called `tf.ready()`. Open `App.js` file, import the necessary dependencies, and define an initial state `isTfReady` with a boolean false.\n\n```js\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport * as tf from '@tensorflow/tfjs';\nimport { fetch } from '@tensorflow/tfjs-react-native';\n\nclass App extends React.Component {\n  state = {\n    isTfReady: false\n  };\n\n  async componentDidMount() {\n    await tf.ready();\n    this.setState({\n      isTfReady: true\n    });\n\n    //Output in Expo console\n    console.log(this.state.isTfReady);\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text>TFJS ready? {this.state.isTfReady ? <Text>Yes</Text> : ''}</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n\nexport default App;\n```\n\nSince the lifecycle method is asynchronous, it will only update the value of `isTfReady` to true when tfjs is actually loaded.\n\nYou can see the output in the simulator device as shown below.\n\n<img src='https://miro.medium.com/max/300/1*Qc2DyJWJztezFuQ8JltDlw.png' />\n\nOr in the console, if using the `console` statement as the above snippet.\n\n<img src='https://miro.medium.com/max/319/1*0rmnFTDv6wAHCBdggIk8TA.png' />\n\n## Loading Tensorflow model\n\nSimilar to the previous section, you can load the model being used in this app (_mobilenet_) is integrating or not. Loading a tfjs pre-trained model from the web is an expensive network call and will take a good amount of time. Modify the `App.js` file to load the MobileNet model. Start by importing the model.\n\n```js\nimport * as mobilenet from '@tensorflow-models/mobilenet';\n```\n\nNext, add another property to the initial state.\n\n```js\nstate = {\n  isTfReady: false,\n  isModelReady: false\n};\n```\n\nThen, modify the lifecycle method.\n\n```js\nasync componentDidMount() {\n    await tf.ready()\n    this.setState({\n      isTfReady: true\n    })\n    this.model = await mobilenet.load()\n    this.setState({ isModelReady: true })\n}\n```\n\nLastly, the display on the screen when the loading of the model is complete.\n\n```js\n<Text>\n  Model ready?{' '}\n  {this.state.isModelReady ? <Text>Yes</Text> : <Text>Loading Model...</Text>}\n</Text>\n```\n\nWhen the model is being loaded, it will display the following message.\n\n<img src='https://miro.medium.com/max/300/1*DIZZk1CMDLwnmq7XUq9TOA.png' />\n\nWhen the loading of the MobileNet model is complete, you will get the following output.\n\n<img src='https://miro.medium.com/max/300/1*hS5fFnGr4R_5Zuj9nHvtCg.png' />\n\n## Asking user permissions\n\nNow that both the platform adapter and the model are currently integrated with the React Native app, add an asynchronous function to ask for the user's permission to allow access to the camera roll. This is a mandatory step when building iOS applications using the image picker component from Expo.\n\nBefore, you proceed, run the following command to install all the packages provided by Expo SDK.\n\n```shell\nexpo install expo-permissions expo-constants expo-image-picker\n```\n\nNext, add the following import statements in the `App.js` file.\n\n```js\nimport Constants from 'expo-constants';\nimport * as Permissions from 'expo-permissions';\n```\n\nIn the `App` class component, add the following method.\n\n```js\ngetPermissionAsync = async () => {\n  if (Constants.platform.ios) {\n    const { status } = await Permissions.askAsync(Permissions.CAMERA_ROLL);\n    if (status !== 'granted') {\n      alert('Sorry, we need camera roll permissions to make this work!');\n    }\n  }\n};\n```\n\nLastly, call this asynchronous method inside `componentDidMount()`.\n\n```js\nasync componentDidMount() {\n    await tf.ready()\n    this.setState({\n      isTfReady: true\n    })\n    this.model = await mobilenet.load()\n    this.setState({ isModelReady: true })\n\n    // add this\n    this.getPermissionAsync()\n  }\n```\n\n## Convert a raw image into a Tensor\n\nThe application will require the user to upload an image from their phone's camera roll or gallery. You have to add a handler method that is going to load the image and allow the Tensorflow to decode the data from the image. Tensorflow supports JPEG and PNG formats.\n\nIn the `App.js` file, start by importing [`jpeg-js` package](https://www.npmjs.com/package/jpeg-js) that will be used to decode the data from the image.\n\n```js\nimport * as jpeg from 'jpeg-js';\n```\n\nIt decodes the width, height and the binary data from the image inside the handler method `imageToTensor` that accepts a parameter of the raw image data.\n\n```js\nimageToTensor(rawImageData) {\n    const TO_UINT8ARRAY = true\n    const { width, height, data } = jpeg.decode(rawImageData, TO_UINT8ARRAY)\n    // Drop the alpha channel info for mobilenet\n    const buffer = new Uint8Array(width * height * 3)\n    let offset = 0 // offset into original data\n    for (let i = 0; i < buffer.length; i += 3) {\n      buffer[i] = data[offset]\n      buffer[i + 1] = data[offset + 1]\n      buffer[i + 2] = data[offset + 2]\n\n      offset += 4\n    }\n\n    return tf.tensor3d(buffer, [height, width, 3])\n  }\n```\n\nThe `TO_UINT8ARRAY` array represents an array of 8-bit unsigned integers. the constructor method `Uint8Array()` is the [new ES2017 syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray). There are different types of typed arrays, each having its own byte range in the memory.\n\n## Load and Classify the image\n\nNext, we add another handler method `classifyImage` that will read the raw data from an image and yield results upon classification in the form of `predictions`.\n\nThe image is going to be read from a source and the path to that image source has to be saved in the `state` of the app component. Similarly, the results yield by this asynchronous method have to be saved too. Modify the existing state in the `App.js` file for the final time.\n\n```js\nstate = {\n  isTfReady: false,\n  isModelReady: false,\n  predictions: null,\n  image: null\n};\n```\n\nNext, add the asynchronous method.\n\n```js\nclassifyImage = async () => {\n  try {\n    const imageAssetPath = Image.resolveAssetSource(this.state.image);\n    const response = await fetch(imageAssetPath.uri, {}, { isBinary: true });\n    const rawImageData = await response.arrayBuffer();\n    const imageTensor = this.imageToTensor(rawImageData);\n    const predictions = await this.model.classify(imageTensor);\n    this.setState({ predictions });\n    console.log(predictions);\n  } catch (error) {\n    console.log(error);\n  }\n};\n```\n\nThe results from the pre-trained model are yield in an array. An example is shown below.\n\n<img src='https://miro.medium.com/max/376/1*MIDSYfqejEkwyLO6SKkY9Q.png' />\n\n## Allow user to pick the image\n\nTo select an image from the device's camera roll using the system's UI, you are going to use the asynchronous method `ImagePicker.launchImageLibraryAsync` provided the package `expo-image-picker`. Import the package itself.\n\n```js\nimport * as Permissions from 'expo-permissions';\n```\n\nNext, add a handler method `selectImage` that will be responsible for\n\n- let the image to be selected by the user\n- if the image selection process is not canceled, populate the source URI object in the `state.image`\n- lastly, invoke `classifyImage()` method to make predictions from the given input\n\n```js\nselectImage = async () => {\n  try {\n    let response = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      allowsEditing: true,\n      aspect: [4, 3]\n    });\n\n    if (!response.cancelled) {\n      const source = { uri: response.uri };\n      this.setState({ image: source });\n      this.classifyImage();\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n```\n\nThe package `expo-image-picker` returns an object. In case the user cancels the process of picking an image, the image picker module will return a single property: `canceled: true`. f successful, the image picker module returns properties such as the `uri` of the image itself. That’s why the `if` statement in the above snippet holds so much significance.\n\n## Run the app\n\nTo complete this demonstration app, you need to add a touchable opacity where the user will click to add the image.\n\nHere is the complete snippet of the `render` method in the `App.js` file.\n\n```js\nrender() {\n    const { isTfReady, isModelReady, predictions, image } = this.state\n\n    return (\n      <View style={styles.container}>\n        <StatusBar barStyle='light-content' />\n        <View style={styles.loadingContainer}>\n          <Text style={styles.commonTextStyles}>\n            TFJS ready? {isTfReady ? <Text>✅</Text> : ''}\n          </Text>\n\n          <View style={styles.loadingModelContainer}>\n            <Text style={styles.text}>Model ready? </Text>\n            {isModelReady ? (\n              <Text style={styles.text}>✅</Text>\n            ) : (\n              <ActivityIndicator size='small' />\n            )}\n          </View>\n        </View>\n        <TouchableOpacity\n          style={styles.imageWrapper}\n          onPress={isModelReady ? this.selectImage : undefined}>\n          {image && <Image source={image} style={styles.imageContainer} />}\n\n          {isModelReady && !image && (\n            <Text style={styles.transparentText}>Tap to choose image</Text>\n          )}\n        </TouchableOpacity>\n        <View style={styles.predictionWrapper}>\n          {isModelReady && image && (\n            <Text style={styles.text}>\n              Predictions: {predictions ? '' : 'Predicting...'}\n            </Text>\n          )}\n          {isModelReady &&\n            predictions &&\n            predictions.map(p => this.renderPrediction(p))}\n        </View>\n        <View style={styles.footer}>\n          <Text style={styles.poweredBy}>Powered by:</Text>\n          <Image source={require('./assets/tfjs.jpg')} style={styles.tfLogo} />\n        </View>\n      </View>\n    )\n  }\n}\n```\n\nHere is the list of the complete `styles` object.\n\n```js\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#171f24',\n    alignItems: 'center'\n  },\n  loadingContainer: {\n    marginTop: 80,\n    justifyContent: 'center'\n  },\n  text: {\n    color: '#ffffff',\n    fontSize: 16\n  },\n  loadingModelContainer: {\n    flexDirection: 'row',\n    marginTop: 10\n  },\n  imageWrapper: {\n    width: 280,\n    height: 280,\n    padding: 10,\n    borderColor: '#cf667f',\n    borderWidth: 5,\n    borderStyle: 'dashed',\n    marginTop: 40,\n    marginBottom: 10,\n    position: 'relative',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  imageContainer: {\n    width: 250,\n    height: 250,\n    position: 'absolute',\n    top: 10,\n    left: 10,\n    bottom: 10,\n    right: 10\n  },\n  predictionWrapper: {\n    height: 100,\n    width: '100%',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  transparentText: {\n    color: '#ffffff',\n    opacity: 0.7\n  },\n  footer: {\n    marginTop: 40\n  },\n  poweredBy: {\n    fontSize: 20,\n    color: '#e69e34',\n    marginBottom: 6\n  },\n  tfLogo: {\n    width: 125,\n    height: 70\n  }\n});\n```\n\nRun the application by executing the `expo start` command from a terminal window. The first thing you’ll notice is that upon bootstrapping the app in the Expo client, it will ask for permissions.\n\n<img src='https://miro.medium.com/max/300/1*yI8SE6c25GMpfSoqgethYg.png' />\n\nThen, once the model is ready, it will display the text **\"Tap to choose image\"** inside the box. Select an image to see the results.\n\n<img src='https://miro.medium.com/max/358/1*qxXtE5tU7yuuFKVKjQbIFg.gif' />\n\nPredicting results can take some time. Here are the results of the previously selected image.\n\n<img src='https://miro.medium.com/max/300/1*7yGIbTerLleJeSDUN5LW2A.png' />\n\n## Conclusion\n\nI hope this post serves the purpose of giving you a head start in understanding how to implement a TesnorFlow.js model in a React Native app, as well as a better understanding of image classification, a core use case in computer vision-based machine learning.\n\nSince the TF.js for React Native is in alpha at the time of writing this post, we can hope to see many more advanced examples in the future to build real-time applications.\nHere are some resources that I find extremely useful.\n\nHere are some resources that I find extremely useful.\n\n- [tfjs-react-native](https://github.com/tensorflow/tfjs/tree/master/tfjs-react-native) Github repo contain more examples using different pre-trained models\n- Infinite Red's [NSFW JS and React Native example](https://shift.infinite.red/nsfw-js-for-react-native-a37c9ba45fe9)\n- [Introduction to Tensorflow.js](https://medium.com/tensorflow/introducing-tensorflow-js-machine-learning-in-javascript-bf3eab376db)\n\nYou can find the complete code at this [Github repo](https://github.com/amandeepmittal/mobilenet-tfjs-expo).\n\nOriginally published at [Heartbeat.Fritz.ai](https://heartbeat.fritz.ai/image-classification-on-react-native-with-tensorflow-js-and-mobilenet-48a39185717c)\n",
            "url": "https://amanhimself.dev//blog/tensorflow-image-classification-expo",
            "title": "Image Classification on React Native with TensorFlow.js and MobileNet",
            "summary": "Image Classification on React Native with TensorFlow.js and MobileNet",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/build-validate-forms-with-react-native-formik-yup",
            "content_html": "---\ntitle: 'Build and validate forms in React Native using Formik and Yup'\ndate: '2019-10-16'\nimage: 'build-validate-forms-with-react-native-formik-yup'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://heartbeat.fritz.ai/build-and-validate-forms-in-react-native-using-formik-and-yup-6489e2dff6a2'\n---\n\n![cover](https://i.imgur.com/JK4oQuJ.png)\n\n> [Originally published at Heartbeat](https://heartbeat.fritz.ai/build-and-validate-forms-in-react-native-using-formik-and-yup-6489e2dff6a2)\n\nFormik and yup are great development tools to build awesome looking UI forms as per your React Native application needs. You will get the full context of this statement by the end of this tutorial when I walk you through in this post, to build two forms for login and signup screens, and showcase how easy it is to validate them using the combination of libraries like Formik and Yup.\n\n> This tutorial is going to use some already setup source code from [**this Github repo release**](https://github.com/amandeepmittal/expo-firebase/releases/tag/0.1.0).\n\nMake sure you download the source code in order to follow this post closely and for a better understanding of libraries like Formik and yup. The source code file you are downloading contains the use of navigation patterns like Stack and Switch to fulfill the requirement of mimicking authentication flow in a React Native app. It also contains minimal code for three screens:\n\n- Login\n- Signup\n- Home\n\nYou are going to continue to build on them. For complete detail on how I set up this authentication flow, please follow the previous post [How Authentication Flow works in React Native apps using React Navigation 4.x](https://heartbeat.fritz.ai/how-authentication-flow-works-in-react-native-apps-using-react-navigation-4-x-a30bb4d9e5d6).\n\n## Table of Contents\n\n- Requirements\n- Installing the libraries\n- Creating reusable components\n- Create a login form\n- Add Formik to the login form\n- Handle form submission\n- Validate form with yup\n- Refactor error message\n- Disable Button when form is not valid\n- Show errors only if touch for specified field\n- Show a loading indicator on Login button while submitting\n- A challenge for you 💪\n- Conclusion\n\n## Requirements\n\nIf you are going to code along, make sure you have already installed the following:\n\n- Nodejs (>=`10.x.x`) with npm/yarn installed.\n- expo-cli (>=`3.x.x`), previously known as create-react-native-app.\n- Mac users could use an iOS simulator.\n- Windows/Linux users must be running an Android emulator.\n\nTo know more about how to setup and run the simulator or the emulator on your local development environment visit React Native's official documentation [here](https://facebook.github.io/react-native/docs/getting-started).\n\n## Installing the libraries\n\nRight now, the `package.json` file from the previous post looks like the following. It contains a basic Expo blank template and dependencies for `react-navigation` library.\n\n```json\n\"dependencies\": {\n    \"expo\": \"^34.0.1\",\n    \"react\": \"16.8.3\",\n    \"react-dom\": \"^16.8.6\",\n    \"react-native\": \"https://github.com/expo/react-native/archive/sdk-34.0.0.tar.gz\",\n    \"react-native-gesture-handler\": \"~1.3.0\",\n    \"react-native-reanimated\": \"~1.1.0\",\n    \"react-native-screens\": \"1.0.0-alpha.22\",\n    \"react-native-web\": \"^0.11.4\",\n    \"react-navigation\": \"4.0.0\",\n    \"react-navigation-stack\": \"1.5.1\"\n  },\n```\n\nInstall the libraries that are going to be used to create login and signup forms. Open up a terminal window and execute the following command.\n\n```shell\nyarn add formik yup react-native-elements\n```\n\nThe UI library `react-native-elements` is a \"Cross-Platform React Native UI Toolkit\" that makes easy to build various interface components in React Native apps with additional functionalities. It will speed up the development process for this demo.\n\n## Creating reusable components\n\nInside `components/` directory create two new files called: `FormButton.js` and `FormInput.js`. Both of these components are going to be presentational and reusable in screen components. Open `FormButton.js` file, import the `Button` component `react-native-elements` library.\n\nIt is a touchable element that allows the user to interact with the device's screen and perform the next action. This custom component will receive props for styling and its style. The component library `react-native-elements` has different ways to [style a button](https://react-native-training.github.io/react-native-elements/docs/button.html#buttonstyle).\n\n```js\n//FormButton.js\nimport React from 'react';\nimport { Button } from 'react-native-elements';\n\nconst FormButton = ({ title, buttonType, buttonColor, ...rest }) => (\n  <Button\n    {...rest}\n    type={buttonType}\n    title={title}\n    buttonStyle={{ borderColor: buttonColor, borderRadius: 20 }}\n    titleStyle={{ color: buttonColor }}\n  />\n);\n\nexport default FormButton;\n```\n\nNext, open `FormInput.js` file. Again, it is going to be a custom component for a text input field. Import the [`Input`](https://react-native-training.github.io/react-native-elements/docs/input.html#docsNav) element from `react-native-elements`. It allows the user to enter the text in a form UI. It receives props as well and since using Expo, `vector-icons` can be imported without installing a third party dependency manually.\n\nLastly, notice how the remaining props are passed through an object using rest operator. This is also known as [rest parameter syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters). Make sure the order of the props remains same as below. That is, the `...rest` comes before other props in the `FormInput` component, as it won't be able to override those other properties.\n\n```js\nimport React from 'react';\nimport { Input } from 'react-native-elements';\nimport { StyleSheet, View } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\n\nconst FormInput = ({\n  iconName,\n  iconColor,\n  returnKeyType,\n  keyboardType,\n  name,\n  placeholder,\n  value,\n  ...rest\n}) => (\n  <View style={styles.inputContainer}>\n    <Input\n      {...rest}\n      leftIcon={<Ionicons name={iconName} size={28} color={iconColor} />}\n      leftIconContainerStyle={styles.iconStyle}\n      placeholderTextColor=\"grey\"\n      name={name}\n      value={value}\n      placeholder={placeholder}\n      style={styles.input}\n    />\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  inputContainer: {\n    margin: 15\n  },\n  iconStyle: {\n    marginRight: 10\n  }\n});\n\nexport default FormInput;\n```\n\n## Create a login form\n\nNow that the custom components are all set up, let us create a login screen component. Open `screens/Login.js` file and import all required statements. Then, without changing the state or any handler functions from the previous base repo you downloaded and are following for this tutorial, let us straight dive into the render method of the `Login` component.\n\n```js\nimport React from 'react';\nimport { StyleSheet, SafeAreaView, View } from 'react-native';\nimport { Button } from 'react-native-elements';\nimport FormInput from '../components/FormInput';\nimport FormButton from '../components/FormButton';\n\nexport default class Login extends React.Component {\n  state = {\n    email: '',\n    password: ''\n  };\n\n  handleEmailChange = email => {\n    this.setState({ email });\n  };\n\n  handlePasswordChange = password => {\n    this.setState({ password });\n  };\n\n  onLogin = async () => {\n    const { email, password } = this.state;\n    try {\n      if (email.length > 0 && password.length > 0) {\n        this.props.navigation.navigate('App');\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  goToSignup = () => this.props.navigation.navigate('Signup');\n  render() {\n    const { email, password } = this.state;\n\n    return (\n      <SafeAreaView style={styles.container}>\n        <FormInput\n          name=\"email\"\n          value={email}\n          placeholder=\"Enter email\"\n          autoCapitalize=\"none\"\n          onChangeText={this.handleEmailChange}\n          iconName=\"ios-mail\"\n          iconColor=\"#2C384A\"\n        />\n        <FormInput\n          name=\"password\"\n          value={password}\n          placeholder=\"Enter password\"\n          secureTextEntry\n          onChangeText={this.handlePasswordChange}\n          iconName=\"ios-lock\"\n          iconColor=\"#2C384A\"\n        />\n        <View style={styles.buttonContainer}>\n          <FormButton\n            buttonType=\"outline\"\n            onPress={this.handleOnLogin}\n            title=\"LOGIN\"\n            buttonColor=\"#039BE5\"\n          />\n        </View>\n        <Button\n          title=\"Don't have an account? Sign Up\"\n          onPress={this.goToSignup}\n          titleStyle={{\n            color: '#F57C00'\n          }}\n          type=\"clear\"\n        />\n      </SafeAreaView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  },\n  buttonContainer: {\n    margin: 25\n  }\n});\n```\n\nNotice, inside the `SafeAreaView` there are two `FormInput` fields and two buttons, out of which, one is the custom button previously created. The properties on input fields such as `secureTextEntry` and `autoCapitalize` are unique to each input field. Thus, this where the `rest` parameter syntax comes in handy. Also, notice how the type of both buttons will make a UI difference in the output below.\n\n<img src='https://miro.medium.com/max/300/1*K-r4nW6kke_tsxLgp_BvKA.png' />\n\n## Add Formik to the login form\n\nFormik is a small library that helps forms to be organized in React and React Native with the following things:\n\n- it keeps track of form's state\n- handles form submission via reusable methods and handlers (_such as `handleChange`, `handleBlur`, and `handleSubmit`_)\n- handles validation and error messages out of the box\n\nAt times it becomes hard to manage and fulfill the above points. Using Formik, you can understand what exactly is happening in forms and write fewer lines of code. Created by [Jared Palmer](https://twitter.com/jaredpalmer) it has a great [API](https://jaredpalmer.com/formik/docs/overview) to refer.\n\nTo get started, open `Login.js` file and import the library.\n\n```js\n//Login.js\n\n// ... with other import statements\nimport { Formik } from 'formik';\n```\n\nNext, inside the `SafeAreaView` use `Formik` as the wrapper element. It comes with different props to handle forms such as `initialValues` and `onSubmit` handler method. The `initialValues` accepts an object containing form values. In the case of the current form, these values are going to be `email` and `password`. The `onSubmit` method accepts a function that has these `values` as the first argument to handle the form submission.\n\nLastly, the third method used in Formik is the render method itself. It follows the [Render Prop pattern](https://reactpatterns.com/#render-prop). Take a look at the Login component below.\n\n```js\nexport default class Login extends React.Component {\n  goToSignup = () => this.props.navigation.navigate('Signup');\n  render() {\n    return (\n      <SafeAreaView style={styles.container}>\n        <Formik\n          initialValues={{ email: '', password: '' }}\n          onSubmit={values => {}}\n        >\n          {formikProps => (\n            <Fragment>\n              <FormInput\n                name=\"email\"\n                value={values.email}\n                onChangeText={formikProps.handleChange('email')}\n                placeholder=\"Enter email\"\n                autoCapitalize=\"none\"\n                iconName=\"ios-mail\"\n                iconColor=\"#2C384A\"\n              />\n              <FormInput\n                name=\"password\"\n                value={values.password}\n                onChangeText={formikProps.handleChange('password')}\n                placeholder=\"Enter password\"\n                secureTextEntry\n                iconName=\"ios-lock\"\n                iconColor=\"#2C384A\"\n              />\n              <View style={styles.buttonContainer}>\n                <FormButton\n                  buttonType=\"outline\"\n                  onPress={formikProps.handleSubmit}\n                  title=\"LOGIN\"\n                  buttonColor=\"#039BE5\"\n                />\n              </View>\n            </Fragment>\n          )}\n        </Formik>\n        <Button\n          title=\"Don't have an account? Sign Up\"\n          onPress={this.goToSignup}\n          titleStyle={{\n            color: '#F57C00'\n          }}\n          type=\"clear\"\n        />\n      </SafeAreaView>\n    );\n  }\n}\n```\n\nThe `value` prop in each of the above input fields is given the initial value from the `formikProps`. It is passed through each render function that provides access to the state of the form as `initialValues`. You have to define these values just as you would do in the state of a class component. Other than that, it also gives access to handle the change of each input field (when user types in the email or the password) and a method to submit the form: `handleSubmit`.\n\nYou can refactor the current component into the following:\n\n```js\n{\n  ({ handleChange, values, handleSubmit }) => (\n    <Fragment>\n      <FormInput\n        name=\"email\"\n        value={values.email}\n        onChangeText={handleChange('email')}\n        placeholder=\"Enter email\"\n        autoCapitalize=\"none\"\n        iconName=\"ios-mail\"\n        iconColor=\"#2C384A\"\n      />\n      <FormInput\n        name=\"password\"\n        value={values.password}\n        onChangeText={handleChange('password')}\n        placeholder=\"Enter password\"\n        secureTextEntry\n        iconName=\"ios-lock\"\n        iconColor=\"#2C384A\"\n      />\n      <View style={styles.buttonContainer}>\n        <FormButton\n          buttonType=\"outline\"\n          onPress={handleSubmit}\n          title=\"LOGIN\"\n          buttonColor=\"#039BE5\"\n        />\n      </View>\n    </Fragment>\n  );\n}\n```\n\nOn looking back to the simulator you will notice that Login form looks the same but now on clicking the login button, nothing happens. Let us make it work. The `onSubmit` prop handles the form submission. Right now, to see that the values of both input field are being recorded, let us add an `alert` method.\n\n```js\nonSubmit={values => { alert(JSON.stringify(values))}}\n```\n\nGo back to the login screen and fill both input fields and click the login button. You will get a dialog box stating the values of both `email` and `password`.\n\n<img src='https://miro.medium.com/max/342/1*u5tfp9wdSzcC1C_yXVOpXA.gif' />\n\n## Handle Form Submission\n\nNow let us add the logic to enter the app whenever the user clicks the login button instead of showing the values they entered in a dialog box. First, add a method on the `onSubmit` prop on `Formik` element.\n\n```js\nonSubmit={values => {this.handleSubmit(values)}}\n```\n\nNext, define the `handleSubmit` method before the `render` function.\n\n```js\nhandleSubmit = values => {\n  if (values.email.length > 0 && values.password.length > 0) {\n    this.props.navigation.navigate('App');\n  }\n};\n```\n\nThe logic is still the same as it was when you started building this login form. The user can only log in to the app if the `email` and `password` fields are not empty. The only difference that the values for both fields were derived from the initial state of the component before.\n\n<img src='https://miro.medium.com/max/342/1*V7tcVyD4usE5LHxmBjWYfQ.gif' />\n\nThe custom input component does not need the `value` prop to be passed on separately.\n\n```js\n//FormInput.js\nconst FormInput = ({\n  iconName,\n  iconColor,\n  returnKeyType,\n  keyboardType,\n  name,\n  placeholder,\n  ...rest\n}) => (\n  <View style={styles.inputContainer}>\n    <Input\n      {...rest}\n      leftIcon={<Ionicons name={iconName} size={28} color={iconColor} />}\n      leftIconContainerStyle={styles.iconStyle}\n      placeholderTextColor=\"grey\"\n      name={name}\n      placeholder={placeholder}\n      style={styles.input}\n    />\n  </View>\n);\n```\n\n## Validating form with yup\n\nThe [`yup`](https://github.com/jquense/yup) library is useful to manage complex validation when using Formik in either React or React Native apps. Formik supports both synchronous and asynchronous form validation. It has support for schema based form level validation from yup.\n\nImport everything from the `yup` library with other import statements.\n\n```js\nimport * as yup from 'yup';\n```\n\nIf you are familiar with Nodejs development, you will find `yup` library is quite similar to another validation library called `joi`. Next, let us define a new object before the `Login` class component called `validationSchema`.\n\nSince `initialValues` is an object, you have to specify `yup.object()` and define a `shape` of the object. Note that, inside the `shape` when defining input fields, make sure their name corresponds the same as described in `initialValues`. Next, each field in this object is supported by a chain of validation methods provided by the [yup API](https://github.com/jquense/yup#api). The type of both `email` and `password` is going to be a string since the method `onChangeText` return values as strings.\n\n```js\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .label('Email')\n    .email('Enter a valid email')\n    .required('Please enter a registered email'),\n  password: Yup.string()\n    .label('Password')\n    .required()\n    .min(4, 'Password must have at least 4 characters ')\n});\n```\n\nUsing a library like Yup saves a lot of time, especially when you do not have to define custom validation methods to check for an input field. For example, in the above snippet, using [`.email()`](https://github.com/jquense/yup#stringemailmessage-string--function-schema) automatically matches against a regex instead defining regex to check the validity of an email input field.\n\nAlso, for every valid method, you can enter a custom return message that's shown in case of an error. Look at the .required() again at the email in the above code snippet. It's stating that when an email isn't provided, this message passed in quotes will be shown as the error message. Similarly, for password, when the length of the input field is less than four characters, it will display an error message.\nThe last step to add the validationSchema to work, is to add a prop with the same name in the Formik element.\n\n```js\n<Formik\n  initialValues={{ email: '', password: '' }}\n  onSubmit={values => {\n    this.handleSubmit(values)\n  }}\n  // new line\n  validationSchema={validationSchema}>\n  {*/ Rest of the code /*}\n</Formik>\n```\n\nNext, `formikProps` also provide `errors` to access error messages.\n\n```js\n// pass errors below\n{({ handleChange, values, handleSubmit, errors }) => (\n```\n\nAfter each input field, you will have to add a `Text` element to display the error message. Import it from `react-native` and then after each input field adds the following.\n\n```js\n<FormInput\n  name='email'\n  value={values.email}\n  onChangeText={handleChange('email')}\n  placeholder='Enter email'\n  autoCapitalize='none'\n  iconName='ios-mail'\n  iconColor='#2C384A'\n/>\n<Text style={{ color: 'red' }}>{errors.email}</Text>\n<FormInput\n  name='password'\n  value={values.password}\n  onChangeText={handleChange('password')}\n  placeholder='Enter password'\n  secureTextEntry\n  iconName='ios-lock'\n  iconColor='#2C384A'\n  />\n<Text style={{ color: 'red' }}>{errors.password}</Text>\n```\n\nTry to click the login button without entering details in any input field.\n\n<img src='https://miro.medium.com/max/342/1*expc7TVHGfERe5bAzqRQyg.gif' />\n\nNotice, how both the custom error message for the `email` field and a default message for `password` is displayed. Now, try to enter an invalid string in the email and a password of fewer than four characters and then submit the login button.\n\n<img src='https://miro.medium.com/max/342/1*ZwUTsbRc712QZ5EKAHfJ5A.gif' />\n\nNotice that the error messages change and the correct error message is displayed.\n\n## Refactor error message\n\nIn this section, let us create a reusable presentational component to display the error messages. Open `components/ErrorMessage.js` file and add the following.\n\n```js\nimport React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nconst ErrorMessage = ({ errorValue }) => (\n  <View style={styles.container}>\n    <Text style={styles.errorText}>{errorValue}</Text>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    marginLeft: 25\n  },\n  errorText: {\n    color: 'red'\n  }\n});\n\nexport default ErrorMessage;\n```\n\nNext, go back to the `Login.js` file, import this component. Below each input field where there is a `Text` element, replace it with the newly created custom `ErrorMessage`.\n\n```js\n<FormInput\n  name='email'\n  value={values.email}\n  onChangeText={handleChange('email')}\n  placeholder='Enter email'\n  autoCapitalize='none'\n  iconName='ios-mail'\n  iconColor='#2C384A'\n/>\n<ErrorMessage errorValue={errors.email} />\n<FormInput\n  name='password'\n  value={values.password}\n  onChangeText={handleChange('password')}\n  placeholder='Enter password'\n  secureTextEntry\n  iconName='ios-lock'\n  iconColor='#2C384A'\n  />\n<ErrorMessage errorValue={errors.password} />\n```\n\nThe error messages are now properly aligned with the input fields.\n\n<img src='https://miro.medium.com/max/300/1*KwAE5I4ur3B8qaktUhT40Q.png' />\n\n## Disable Button when form is not valid\n\nFormik provides a quicker way to disable the submit button until there is no error shown for any input field. This is done via the prop value of `isValid` which returns `true` when there are no errors. The `disabled` property is added to the `FormButton`, which is where `react-native-elements` shine.\n\n```js\n {({ handleChange, values, handleSubmit, errors, isValid, isSubmitting }) => (\n            <Fragment>\n              {*/ Res of the code remains same /*}\n              <View style={styles.buttonContainer}>\n                <FormButton\n                  buttonType='outline'\n                  onPress={handleSubmit}\n                  title='LOGIN'\n                  buttonColor='#039BE5'\n                  disabled={!isValid}\n                />\n              </View>\n            </Fragment>\n          )}\n```\n\nNotice that how the colour of the button is changed to grey and it is not clickable at all.\n\n<img src='https://miro.medium.com/max/300/1*Qy20v8rNAxUXAfTiGuEF3Q.png' />\n\nBut entering values for input fields it comes back to life.\n\n<img src='https://miro.medium.com/max/300/1*5dqPrzK-Kt1jEIZC1GE_UA.png' />\n\n## Show errors only if touch for specific field\n\nIf you have noticed that the current state of the form shows errors for both fields even when the user is entering the first field and hasn't yet seen what is required in the second field.\n\n<img src='https://miro.medium.com/max/342/1*C0h4mvUsoWFROF2g46g27A.gif' />\n\nTo fix this, let us use two `touched` and `handleBlur` from `formikProps`.\n\n```js\n{({\n  handleChange,\n  values,\n  handleSubmit,\n  errors,\n  isValid,\n  isSubmitting\n  touched,\n  handleBlur,\n}) => ()\n```\n\nThe`handleBlur` is passed as the value to the `onBlur` prop on the input field. This prop is used to track whether an input field has been touched by the user or not — the `touched` tracks what fields have been touched. Using the combination of both, you can get the following behavior.\n\n<img src='https://miro.medium.com/max/342/1*RFD3xPeXNZrcRmBfgYG6bA.gif' />\n\nHere is the code snippet on how to do this. On each input field, add the `onBlur` prop with the corresponding value passed to `handleBlur` method.\n\n```js\n// on email\nonBlur={handleBlur('email')}\n\n// on password\nonBlur={handleBlur('password')}\n```\n\nNext, when displaying the error message, modify it is as follows for both fields.\n\n```js\n// for email\n<ErrorMessage errorValue={touched.email && errors.email} />\n\n// for password\n<ErrorMessage errorValue={touched.password && errors.password} />\n```\n\n## Show a loading indicator on Login button while submitting\n\nNext, when submitting the login credentials, you do not want the user to press the button twice. `formikProps` has a solution for this too. Using `isSubmitting` you can track that when the form is is in submitting phase. Usually, in real-time application, this submitting phase will depend on the asynchronous network call to the server. On the `disabled` prop, you can use an OR condition to solve this issue.\n\n```js\ndisabled={!isValid || isSubmitting}\n```\n\nTo mimic an API call, add a `setTimeout` function to the `handleSubmit` method.\n\n```js\nhandleSubmit = values => {\n  if (values.email.length > 0 && values.password.length > 0) {\n    setTimeout(() => {\n      this.props.navigation.navigate('App');\n    }, 3000);\n  }\n};\n```\n\nNow observe how the button gets disabled when it is touched.\n\n<img src='https://miro.medium.com/max/342/1*kIE7F1iAyhq7UGQGajeDnw.gif' />\n\nYou can add a loading indicator to the button, thanks to the prop with the same name available in `react-native-elements`.\n\n```js\nloading = { isSubmitting };\n```\n\n<img src='https://miro.medium.com/max/342/1*BTJ51fiAMYUwO91C3n3xWQ.gif' />\n\n## A challenge for you 💪\n\nUsing the knowledge obtained from this tutorial, get it to work and build a signup form that looks like below with for four input fields:\n\n- Name of the user\n- Email\n- Password\n- A confirm password\n\nThe challenge here is to make sure both fields: `password` and `confirmPassword` matches and an appropriate error message are shown is they do not match. To find the solution, lookout for the next post, where you will get the answer to this problem as well as some more functionalities such handling error when the input field is not of type string.\n\nHere is a teaser:\n\n<img src='https://miro.medium.com/max/342/1*rzA-V867nUz7llMUWP26Yw.gif' />\n\n## Conclusion\n\n_Congratulations 🎉_\n\nYou just learned how to create, handle, and validate forms in React Native using Formik and Yup. I hope in your production React Native apps, some little tricks used in this tutorial such as in handling buttons and using loading indicators help. You will find the code for this tutorial along with the completed challenge at the [this Github repo release](https://github.com/amandeepmittal/expo-firebase/releases/tag/0.2.0).\n\n**Important resources used to write this tutorial**:\n\n- [`react-native-elements`](https://react-native-training.github.io/react-native-elements/docs/button)\n- [Official Formik docs](https://jaredpalmer.com/formik/docs/guides/react-native)\n- [Yup API](https://github.com/jquense/yup#api)\n- [Bamlab offers HOC components with `react-native-formik` such that you do not have write everything from scratch](https://github.com/bamlab/react-native-formik)\n",
            "url": "https://amanhimself.dev//blog/build-validate-forms-with-react-native-formik-yup",
            "title": "Build and validate forms in React Native using Formik and Yup",
            "summary": "Build and validate forms in React Native using Formik and Yup",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/create-app-themes-styled-components-redux",
            "content_html": "---\ntitle: 'Changing app themes using React Native, Styled Components and Redux'\ndate: '2019-10-02'\nslug: 'create-app-themes-styled-components-redux'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://blog.jscrambler.com/changing-app-themes-using-react-native-styled-components-and-redux/'\n---\n\n![cover](https://i.imgur.com/RSo1BSr.jpg)\n\n> [Originally published at Jscrambler](https://blog.jscrambler.com/changing-app-themes-using-react-native-styled-components-and-redux/)\n\nIf you are getting into React Native or have already dipped your toes, you know that there are different ways you can style a React Native app. React Native uses JavaScript objects to style by default. If you have some experience with the CSS of the web, you know that styling a component is nothing more than writing code by using proper styling syntax.\n\nThis tutorial is going to be about styling your React Native apps using 💅 [Styled Components](https://www.styled-components.com/) and switching between two themes using Redux as state management library with it. It is a third-party open-source library. Using it is a matter of choice, but also another way to add styling to your app, and many might find it easy to use, especially if you have used this library before with other frameworks.\n\n## Requirements\n\nTo follow this tutorial, please make sure you have the following installed on your local development environment and have access to the services mentioned below:\n\n- Nodejs (>=`10.x.x`) with npm/yarn installed.\n- `react-native-cli`\n- Mac users must be running an iOS simulator.\n- Windows/Linux users must be running an Android emulator.\n\nTo know more about how to setup a development environment for React Native using `react-native-cli` please refer to the [official documentation here](https://facebook.github.io/react-native/docs/getting-started).\n\nYou can find the complete code for this tutorial at [this Github repository](https://github.com/amandeepmittal/StyledThemeApp).\n\n## Installing styled-components\n\nAssuming that you have created a new React Native project using the command `react-native init StyledThemeApp` from a terminal window, please navigate inside the newly generated directory. When inside it, please execute the following command to install `styled-components` library.\n\n```shell\nnpm install styled-components\n```\n\n_That's all you need to do to use it in your React Native app!_\n\nStyled Components is a CSS-in-JS library that enables developers to write each component with their styles and allows the code to be in a single location. By coupling your styles with the components, it results in optimizing developer experience and output.\n\nLet us create a simple component that will act as a primary screen of the app. Create a new file inside `screens/HomeScreen.js`. It is a class component that displays a text inside a box. The visual components are created using `styled-components`. To consume this library, you start by writing an import statement from `styled-components/native`.\n\n```js\nimport React from 'react';\nimport styled from 'styled-components/native';\n\nconst Container = styled.SafeAreaView`\n  flex: 1;\n  background-color: papayawhip;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst TextContainer = styled.View`\n  padding: 15px;\n  border-radius: 5px;\n  border: 1px solid palevioletred;\n`;\n\nconst Title = styled.Text`\n  padding: 20px;\n  font-size: 24px;\n  font-weight: 500;\n  color: palevioletred;\n`;\n\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <Container>\n        <TextContainer>\n          <Title>Themed App with React Native & Styled Components</Title>\n        </TextContainer>\n      </Container>\n    );\n  }\n}\n\nexport default HomeScreen;\n```\n\n`styled-components` utilizes tagged template literals to style your components using backtick. The `Container` and the `TextContainer` are React Native `View` and have styling attached to them. The `Title` uses `Text` from React Native. The `styled-components` library uses the same `flexbox` model that React Native Layouts. The advantage here is that you get to write styles in the same understandable syntax that you have been using in web development and standard CSS.\n\nImport the `HomeScreen` component inside the entry point file, `App.js`. Replace its existing content with the following.\n\n```js\nimport React from 'react';\n\nimport HomeScreen from './screens/HomeScreen';\n\nconst App = () => {\n  return <HomeScreen />;\n};\n\nexport default App;\n```\n\nOpen the app in a simulator. You can execute either of the commands from the terminal window depending on the mobile platform you are using.\n\n```shell\n# for ios\nreact-native run-ios\n\n# for android\nreact-native run-android\n```\n\nYou will get the following result.\n\n![ss1](https://i.imgur.com/4IsQKiW.png)\n\n## Define Themes\n\nIn the current React Native app, you have are going to make use of the classic example of a dark and a light mode.\n\nCreate a new file called `/styles/theme.js`. It is going to contain the style attributes that are going to be changed when setting a theme at the run time.\n\nThese attributes are nothing but colors for different React Native components. In a later section, using `props` from `styled-components` you learn how to extend the current styles of `HomeScreen` component.\n\n```js\nexport const darkTheme = {\n  mode: 'dark',\n  PRIMARY_BACKGROUND_COLOR: '#353c51',\n  PRIMARY_TEXT_COLOR: '#767d92',\n  SECONDARY_TEXT_COLOR: '#ffffff',\n  PRIMARY_BUTTON_COLOR: '#152642',\n  SECONDARY_BUTTON_COLOR: '#506680'\n};\nexport const lightTheme = {\n  mode: 'light',\n  PRIMARY_BACKGROUND_COLOR: '#ffefd5',\n  PRIMARY_TEXT_COLOR: '#DB7093',\n  SECONDARY_TEXT_COLOR: '#333333',\n  PRIMARY_BUTTON_COLOR: '#b9d6f3',\n  SECONDARY_BUTTON_COLOR: '#a1c9f1'\n};\n```\n\n## Adding Redux\n\nTo manage to switch between two themes, let us use Redux. With the help of this state management library, you are going to create a store that will keep an initial value of a theme. Redux will help to change switch between two themes (_defined in the previous section_) at the run time. This means you do not have to hard code these values every time you want to add a new theme. Every time a theme is changed, the component or the screen will be re-rendered to display the new style attributes.\n\nFirst, you will have to install the following libraries to create a store.\n\n```shell\nyarn add redux react-redux redux-thunk\n```\n\nApart from `redux`, the other two packages have important uses. `react-redux` lets your React Native components connect with the Redux store. `redux-thunk` is a middleware that enables you to make Redux actions return asynchronous operations. A `thunk` is a function that wraps an expression to delay its evaluation.\n\n## Creating actions and reducer\n\nIn Redux, the state of the whole application is represented by one JavaScript object. Think of this object as read-only, since you cannot make changes to this state (which is represented in the form of a tree) directly. That is what `actions` are for.\n\nActions are like events in Redux. They can be triggered in the form of a user's touch on a button, key presses, timers, or network requests. The nature of each event mentioned is mutable. An action is a JavaScript object. To define an action, there’s one requirement. Each action has its type property. Every action needs a type property for describing how the state should change.\n\nCreate a new folder called `redux` in the root of your project. This directory is going to contain all the files related to Redux. To define an action, create a new file called `action.js` inside this folder.\n\nThere is the only action required right now called `switchTheme`. It will accept one parameter, the value of the theme.\n\n```js\n// define type\nexport const SWITCH_THEME = 'SWITCH_THEME';\n\n// dispatch actions\nexport const switchTheme = BaseTheme => {\n  return dispatch => {\n    dispatch({\n      type: SWITCH_THEME,\n      baseTheme: BaseTheme\n    });\n  };\n};\n```\n\nTo change the state of the app when using Redux, or in our case, to change the state of the value of the theme, dispatching the theme from the action `switchTheme` is the only way.\n\nNext, let us define `themeReducer` that will take the initial state of the application's theme and action to change that theme.\n\n```js\nimport { lightTheme } from '../styles/theme';\nimport { SWITCH_THEME } from './actions';\n\nconst initialState = {\n  theme: { ...lightTheme }\n};\n\nconst themeReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SWITCH_THEME:\n      let newState = {\n        ...state,\n        theme: { ...state.theme, ...action.baseTheme }\n      };\n      return newState;\n    default:\n      return state;\n  }\n};\n\nexport default themeReducer;\n```\n\nA reducer is a pure function that calculates the next state based on the initial or previous state. It always produces the same output if the state is unchanged. In the above snippet, the current state of this application is the light theme. This theme will change whenever the user is going to press the button to switch it to the dark theme.\n\n## Creating Store\n\nTo create the store, you will have to modify the `App.js` file. Start by adding the following import statements.\n\n```js\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport themeReducer from './redux/themeReducer';\nimport HomeScreen from './screens/HomeScreen';\n```\n\nA store is an object that brings actions and reducers together. It provides and holds state at the application level instead of individual components. Redux is not an opinionated library in terms of which framework or library should use it or not.\n\nNext, create the following store.\n\n```js\nconst store = createStore(\n  combineReducers({ themeReducer }),\n  applyMiddleware(thunk)\n);\n```\n\nTo bind a React Native application with Redux, you do it with `react-redux` module. This is done by using the high ordered component `Provider`. It basically passes the store down to the rest of the React Native application.\n\n```js\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <HomeScreen />\n    </Provider>\n  );\n};\n```\n\n## Updating HomeScreen Component\n\nIn this section, you are going write the logic to consume the state from redux's store as well as make use of `ThemeProvider`.\n\n`styled-components` has gives React Native components theming support by a `ThemeProvider` wrapper component. In the render tree all `styled-components` such as `Container`, `Title` and so on, will have access to the provided theme. Open `HomeScreen.js` file adds the following import statements.\n\n```js\nimport styled, { ThemeProvider } from 'styled-components/native';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { switchTheme } from '../redux/actions';\nimport { darkTheme, lightTheme } from '../styles/theme';\n```\n\nIn the above code snippet, do note that you are also importing both the theme objects from `styles/theme.js` file. This is necessary because, initially, you will have to pass a theme value for `ThemeProvider` to know and display the components accordingly. Then, the redux action `switchTheme` that is responsible for the change theme, expects a parameter of the current theme value.\n\nNext, modify the render function inside the `HomeScreen` component. Wrap all of its previous contents inside `ThemeProvider` wrapper and then add a new component called `Button` which will be display the contents to change the current theme.\n\n```js\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <ThemeProvider theme={this.props.theme}>\n        <Container>\n          <TextContainer>\n            <Title>Themed App with React Native & Styled Components</Title>\n          </TextContainer>\n          {this.props.theme.mode === 'light' ? (\n            <Button onPress={() => this.props.switchTheme(darkTheme)}>\n              <ButtonText>Switch to Dark Theme</ButtonText>\n            </Button>\n          ) : (\n            <Button onPress={() => this.props.switchTheme(lightTheme)}>\n              <ButtonText>Switch to Light Theme</ButtonText>\n            </Button>\n          )}\n        </Container>\n      </ThemeProvider>\n    );\n  }\n}\n```\n\nNow, a question you may ask, how come `this.props.theme` & `this.props.switchTheme` are available to the above component. In `App.js`, which is the parent component for `HomeScreen`, is not passing any props down the component tree.\n\nWell, from the previous import statements, you are importing two important Redux methods: `bindActionCreators` and `connect`. The bindActionCreators maps actions to an object using the names of the action functions. These functions automatically dispatch the action to the store when the function is invoked. As we learned earlier, to change the data, we need to dispatch an action.\n\nTo enable this, you further need two things: `mapStateToProps` and `mapDispatchToProps`. You have to connect both of them with `HomeScreen` component. This connection is done by using the `connect()` method from the `react-redux` package which connects the current React Native component to the Redux store.\n\nAdd the following at the end of component file:\n\n```js\nconst mapStateToProps = state => ({\n  theme: state.themeReducer.theme\n});\n\nconst mapDispatchToProps = dispatch => ({\n  switchTheme: bindActionCreators(switchTheme, dispatch)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeScreen);\n```\n\n## Using Props in styled-components\n\nBy passing an interpolated function `${props => props...}` to a styled component's template literal you can extend that component's styles. Take a look at the following code snippet, and modify the styles wherever necessary.\n\n```js\nconst Container = styled.SafeAreaView`\n  flex: 1;\n  background-color: ${props => props.theme.PRIMARY_BACKGROUND_COLOR};\n  justify-content: center;\n  align-items: center;\n`;\n\nconst TextContainer = styled.View`\n  padding: 15px;\n  border-radius: 5px;\n  border: 1px solid ${props => props.theme.PRIMARY_TEXT_COLOR};\n`;\n\nconst Title = styled.Text`\n  padding: 20px;\n  font-size: 24px;\n  font-weight: 500;\n  color: ${props => props.theme.PRIMARY_TEXT_COLOR};\n`;\n\nconst Button = styled.TouchableOpacity`\n  margin-top: 20px;\n  background-color: ${props => props.theme.SECONDARY_BUTTON_COLOR};\n  border-radius: 5px;\n  padding: 10px;\n`;\n\nconst ButtonText = styled.Text`\n  font-size: 20px;\n  color: ${props => props.theme.SECONDARY_TEXT_COLOR};\n`;\n```\n\nNow, go to the simulator running and you will notice a new button with a text that says `Switch to ...` name of the next theme. If you have been following this tutorial, you will notice that the initial or current theme is the light mode. By pressing the button, you can switch to the dark mode.\n\n![ss2](https://i.imgur.com/W6offhJ.gif)\n\n## Conclusion\n\n_Congratulations!_ You have successfully integrated redux and styled-components in a React Native app to create style attributes for React Native and manage themes. Using `props` in styled-components you learned how to manage and write composable components. This is just one of the way to create a themeable React Native app.\n\nTo dwell more into styled-components, please refer to the official documentation [**here**](https://www.styled-components.com/docs/basics#react-native).\n",
            "url": "https://amanhimself.dev//blog/create-app-themes-styled-components-redux",
            "title": "Changing app themes using React Native, Styled Components and Redux",
            "summary": "Changing app themes using React Native, Styled Components and Redux",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/context-api-react-native-firebase",
            "content_html": "---\ntitle: 'Using Context API with React Native'\ndate: '2019-09-27'\nslug: 'context-api-react-native-firebase'\nthumbnail: '/thumbnails/expo.png'\ntag: 'react-native'\ncanonicalUrl: 'https://amanhimself.dev/blog/context-api-react-native-firebase'\n---\n\n![cover](https://i.imgur.com/tEzuwkP.png)\n\nThe React Context API lets you avoid passing props from parent to child at every level of the component tree. Neither you have to unnecessarily increase the complexity of the codebase using state management libraries like Redux. Consuming something like Firebase authentication and storage services with the Context API in a React Native or Expo apps is a great use case to try.\n\nIn this tutorial, I am going to show you how to setup Firebase email authentication in an Expo app using Context API. Before we get started, please note that I am going to use an Expo project that has:\n\n- [navigation setup with `react-navigation` 4.x.x](https://amanhimself.dev/authentication-navigation-flow-in-react-native-apps)\n- caching local images/assets\n- [login and signup screen setup with formik and yup](https://amanhimself.dev/build-validate-forms-with-react-native-formik-yup)\n- [handle different field types in React Native forms with formik and yup](https://amanhimself.dev/handle-different-field-types-in-react-native-forms)\n\nYou can download the **source code** in its current state from [**this Github repo**](https://github.com/amandeepmittal/expo-firebase/releases/tag/0.5.0) before you begin.\n\nAfter installing the source code, please navigate inside the project directory and install dependencies by running the following command:\n\n```shell\nyarn install\n\n# or\n\nnpm install\n```\n\n## Table of Contents\n\n- Requirements\n- Add Firebase Config & integrate Firebase SDK\n- Enable Firestore\n- Add Context API\n- Signup with Firebase\n- Handle Real-time/Server Errors\n- Login a Firebase user\n- Add a signout button\n- Check user auth state for automatic login\n- Conclusion\n\n## Requirements\n\nTo follow this tutorial, please make sure you following installed on your local development environment and access to the services mentioned below.\n\n- Nodejs (>= `10.x.x`) with npm/yarn installed\n- expo-cli (>= `3.x.x`), (previously known as create-react-native-app)\n- Firebase account, free tier will do\n\n## Add Firebase Config & integrate Firebase SDK\n\n> If you already know how to obtain Firebase API and storage keys, you can skip this section. Otherwise, you can follow along.\n\nCreate a new [Firebase project from Firebase Console](https://console.firebase.google.com).\n\n![1](https://i.imgur.com/7TSnVLL.png)\n\nNext, fill in the suitable details regarding the Firebase project and click on **Create project** button.\n\n![2](https://i.imgur.com/oXFOQBd.png)\n\nYou will be re-directed towards the dashboard of the Firebase project. Go to **Project settings** from the sidebar menu and copy the `firebaseConfig` object. It has all the necessary API keys that we need in order to use a Firebase project as the backend for any React Native or Expo app.\n\n![3](https://i.imgur.com/XbVjdkB.png)\n\nNext, go inside the [Expo app](https://github.com/amandeepmittal/expo-firebase/releases/tag/0.5.0) and create a new directory called `config`. This folder will contain all the configuration files. Inside it, create `Firebase/firebaseConfig.js` file and paste the contents of the config object as below.\n\n```js\n// Replace all Xs with real Firebase API keys\n\nexport default {\n  apiKey: 'XXXX',\n  authDomain: 'XXXX',\n  databaseURL: 'XXXX',\n  projectId: 'XXXX',\n  storageBucket: 'XXXX',\n  messagingSenderId: 'XXXX',\n  appId: 'XXXX'\n};\n```\n\nNext, from the terminal window, install Firebase SDK.\n\n```shell\nyarn add firebase\n```\n\nBack to the `config/Firebase/` directory. Create a new file `firebase.js`. This will hold all the configuration related to integrate the Firebase SDK and the function it provides for authentication, real time database and so on.\n\nAlso, define a `Firebase` object with some initial methods that you are going to use in the tutorial. These methods are going to conduct real-time events such as user authentication, sign out from the app, and store the user details based on the reference to `uid` (_unique user id Firebase creates for every registered user_) in real-time NoSQL database called **Cloud Firestore**.\n\n```js\nimport * as firebase from 'firebase';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport firebaseConfig from './firebaseConfig';\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nconst Firebase = {\n  // auth\n  loginWithEmail: (email, password) => {\n    return firebase.auth().signInWithEmailAndPassword(email, password);\n  },\n  signupWithEmail: (email, password) => {\n    return firebase.auth().createUserWithEmailAndPassword(email, password);\n  },\n  signOut: () => {\n    return firebase.auth().signOut();\n  },\n  checkUserAuth: user => {\n    return firebase.auth().onAuthStateChanged(user);\n  },\n\n  // firestore\n  createNewUser: userData => {\n    return firebase\n      .firestore()\n      .collection('users')\n      .doc(`${userData.uid}`)\n      .set(userData);\n  }\n};\n\nexport default Firebase;\n```\n\nThis approach used with React's Context API will eliminate the use of Redux state management (which is the approach I worked with [previously](https://amanhimself.dev/how-to-build-an-email-authentication-app-with-firebase-firestore-and-react-native)) library and simply use React principles. Populating the `Firebase` object with Context, you will be able to access all the functions as well as the user throughout this React Native app as props.\n\n## Enable Firestore\n\nThere are two types of cloud-based database services provided by Firebase. One is called Cloud Firestore, and the other one is known as Realtime Database. Realtime Database stores data as one large JSON tree. Complex and scalable data is hard to organize in it.\n\nCloud Firestore follows proper NoSQL terminology when it comes to storing data. It stores data in documents, and each document can have sub-collections—thus, making it suitable for scalable and complex data scenarios.\n\nGo back to the Firebase console and in the Database section, choose the Cloud Firestore and click on the button **Create database**.\n\n![4](https://i.imgur.com/k7Ecql7.png)\n\nThen, choose the option Start in **test mode** and click the button **Next** as shown below.\n\n![5](https://i.imgur.com/jLWPy9K.png)\n\n## Add Context API\n\nThe common reason to use Context API in a React Native app is that you need to share some data in different places or components in the component tree. Manually passing props can be tedious as well as hard to keep track of.\n\nThe Context API consists of three building blocks:\n\n- creating a context object\n- declaring a provider that gives the value\n- declaring a consumer that allows a value to be consumed (_provided by the provider_)\n\nCreate a new file inside the `Firebase` directory called `context.js`. Declare a `FirebaseContext` that is going to be an object.\n\n```js\nimport React, { createContext } from 'react';\n\nconst FirebaseContext = createContext({});\n```\n\nAfter creating the context, the next step is to declare a provider and a consumer.\n\n```js\nexport const FirebaseProvider = FirebaseContext.Provider;\n\nexport const FirebaseConsumer = FirebaseContext.Consumer;\n```\n\nLastly, let us declare an HoC (_High Order Component_) to generalize this Firebase Context. An HoC in React is a function that takes a component and returns another component. What this HoC will do is instead of importing and using `Firebase.Consumer` in every component necessary, all there is to be done is just pass the component as the argument to the following HoC.\n\n```js\nexport const withFirebaseHOC = Component => props =>\n  (\n    <FirebaseConsumer>\n      {state => <Component {...props} firebase={state} />}\n    </FirebaseConsumer>\n  );\n```\n\nYou will understand with more clarity in the next section when modifying the existing `Login` and `Signup` component with this HoC. Now, create a new file `index.js` to export both the `Firebase` object from the `firebase.js` file, the provider and the HoC.\n\n```js\nimport Firebase from './firebase';\nimport { FirebaseProvider, withFirebaseHOC } from './context';\n\nexport default Firebase;\n\nexport { FirebaseProvider, withFirebaseHOC };\n```\n\nThe provider has to grab the value from the context object for the consumer to use that value. This is going to be done in `App.js` file. The value for the `FirebaseProvider` is going to be the `Firebase` object with different strategies and functions to authenticate and store the user data in real-time database. Wrap the `AppContainer` with it.\n\n```js\nimport React from 'react';\nimport AppContainer from './navigation';\nimport Firebase, { FirebaseProvider } from './config/Firebase';\n\nexport default function App() {\n  return (\n    <FirebaseProvider value={Firebase}>\n      <AppContainer />\n    </FirebaseProvider>\n  );\n}\n```\n\nThat's it for setting up the Firebase SDK.\n\n## Signup with Firebase\n\nIn this section, you are going to modify the existing `Signup.js` component in order to register a new user with the firebase backend and store their data in Firestore. To start, import the `withFirebaseHOC`.\n\n```js\nimport { withFirebaseHOC } from '../config/Firebase';\n```\n\nReplace the `handleSubmit()` method with `handleOnSignup()`. Since all the input values are coming from Formik, you have to edit `onSubmit` prop on the `Formik` element too. The `signupWithEmail` is coming from firebase props and since you are already wrapping the navigation container with `FirebaseProvider`, `this.props.firebase` will make sure any method inside the `Firebase` object in the file `config/Firebase/firebase.js` is available to be used in this component.\n\nThe `signupWithEmail` method takes two arguments, `email` and `password` and using them, it creates a new user and saves their credentials. It then fetches the user id (_`uid`_) from the response when creating the new user. The `createNewUser()` method stores the user object `userData` inside the collection `users`. This user object contains the `uid` from the authentication response, the name, and email of the user entered in the signup form.\n\n```js\nhandleOnSignup = async values => {\n    const { name, email, password } = values\n\n    try {\n      const response = await this.props.firebase.signupWithEmail(\n        email,\n        password\n      )\n\n      if (response.user.uid) {\n        const { uid } = response.user\n        const userData = { email, name, uid }\n        await this.props.firebase.createNewUser(userData)\n        this.props.navigation.navigate('App')\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n// replace with handleOnSignup\n\nonSubmit={values => {\n  this.handleOnSignup(values)\n}}\n```\n\nThe logic behind saving the user object is the following:\n\n```js\n// config/Firebase/firebase.js\ncreateNewUser: userData => {\n  return firebase\n    .firestore()\n    .collection('users')\n    .doc(`${userData.uid}`)\n    .set(userData);\n};\n```\n\nLastly, do not forget to export the `Signup` component inside the `withFirebaseHOC`.\n\n```js\nexport default withFirebaseHOC(Signup);\n```\n\nLet see how it works.\n\n![f1](https://i.imgur.com/r40CEuW.gif)\n\nSince it is going to the Home screen, means that use is getting registered. To verify this, visit the Database section from Firebase Console Dashboard. You will find a `users` collection have one document with the `uid`.\n\n![6](https://i.imgur.com/Q1aoXx2.png)\n\nTo verify the `uid`, visit **Authentication** section.\n\n![7](https://i.imgur.com/QXX3tXM.png)\n\n## Handle Real-time/Server Errors\n\nTo handle real-time or server errors, Formik has a solution to this. Now, understand that something valid on the client-side can be invalid on the server. Such as, when registering a new user with an already existing email in the Firebase storage should notify the user on the client-side by throwing an error.\n\nTo handle this, edit the `onSubmit` prop at the `Formik` element bypassing the second argument called `actions`.\n\n```js\nonSubmit={(values, actions) => {\n  this.handleOnSignup(values, actions)\n}}\n```\n\nNext, instead of just console logging the error values, to display the error, you will have to use `setFieldError`. This will set an error message in the `catch` block. Also, add a `finally` block that will avoid the form to submit in case of an error.\n\n```js\nhandleOnSignup = async (values, actions) => {\n  const { name, email, password } = values;\n\n  try {\n    const response = await this.props.firebase.signupWithEmail(email, password);\n\n    if (response.user.uid) {\n      const { uid } = response.user;\n      const userData = { email, name, uid };\n      await this.props.firebase.createNewUser(userData);\n      this.props.navigation.navigate('App');\n    }\n  } catch (error) {\n    // console.error(error)\n    actions.setFieldError('general', error.message);\n  } finally {\n    actions.setSubmitting(false);\n  }\n};\n```\n\nLastly, do display the error on the app screen, add an `ErrorMessage` just after the `FormButton` component.\n\n```js\n<View style={styles.buttonContainer}>\n  <FormButton\n    buttonType='outline'\n    onPress={handleSubmit}\n    title='SIGNUP'\n    buttonColor='#F57C00'\n    disabled={!isValid || isSubmitting}\n    loading={isSubmitting}\n  />\n</View>\n<ErrorMessage errorValue={errors.general} />\n```\n\nNow go back to the Signup form in the app and try registering the user with the same email id used in the previous step.\n\n![f2](https://i.imgur.com/XXK3D7N.gif)\n\n_Voila!_ It works! The error message is shown and it does not submit the form.\n\n## Login a Firebase user\n\nAs the previous section, similar number of steps have to be performed for the Login form to work. Instead of going through them individually, here is the complete `Login` component.\n\n```js\nimport React, { Component, Fragment } from 'react';\nimport { StyleSheet, SafeAreaView, View, TouchableOpacity } from 'react-native';\nimport { Button } from 'react-native-elements';\nimport { Ionicons } from '@expo/vector-icons';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { HideWithKeyboard } from 'react-native-hide-with-keyboard';\nimport FormInput from '../components/FormInput';\nimport FormButton from '../components/FormButton';\nimport ErrorMessage from '../components/ErrorMessage';\nimport AppLogo from '../components/AppLogo';\nimport { withFirebaseHOC } from '../config/Firebase';\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .label('Email')\n    .email('Enter a valid email')\n    .required('Please enter a registered email'),\n  password: Yup.string()\n    .label('Password')\n    .required()\n    .min(6, 'Password must have at least 6 characters ')\n});\n\nclass Login extends Component {\n  state = {\n    passwordVisibility: true,\n    rightIcon: 'ios-eye'\n  };\n\n  goToSignup = () => this.props.navigation.navigate('Signup');\n\n  handlePasswordVisibility = () => {\n    this.setState(prevState => ({\n      rightIcon: prevState.rightIcon === 'ios-eye' ? 'ios-eye-off' : 'ios-eye',\n      passwordVisibility: !prevState.passwordVisibility\n    }));\n  };\n\n  handleOnLogin = async (values, actions) => {\n    const { email, password } = values;\n    try {\n      const response = await this.props.firebase.loginWithEmail(\n        email,\n        password\n      );\n\n      if (response.user) {\n        this.props.navigation.navigate('App');\n      }\n    } catch (error) {\n      actions.setFieldError('general', error.message);\n    } finally {\n      actions.setSubmitting(false);\n    }\n  };\n\n  render() {\n    const { passwordVisibility, rightIcon } = this.state;\n    return (\n      <SafeAreaView style={styles.container}>\n        <HideWithKeyboard style={styles.logoContainer}>\n          <AppLogo />\n        </HideWithKeyboard>\n        <Formik\n          initialValues={{ email: '', password: '' }}\n          onSubmit={(values, actions) => {\n            this.handleOnLogin(values, actions);\n          }}\n          validationSchema={validationSchema}\n        >\n          {({\n            handleChange,\n            values,\n            handleSubmit,\n            errors,\n            isValid,\n            touched,\n            handleBlur,\n            isSubmitting\n          }) => (\n            <Fragment>\n              <FormInput\n                name=\"email\"\n                value={values.email}\n                onChangeText={handleChange('email')}\n                placeholder=\"Enter email\"\n                autoCapitalize=\"none\"\n                iconName=\"ios-mail\"\n                iconColor=\"#2C384A\"\n                onBlur={handleBlur('email')}\n              />\n              <ErrorMessage errorValue={touched.email && errors.email} />\n              <FormInput\n                name=\"password\"\n                value={values.password}\n                onChangeText={handleChange('password')}\n                placeholder=\"Enter password\"\n                secureTextEntry={passwordVisibility}\n                iconName=\"ios-lock\"\n                iconColor=\"#2C384A\"\n                onBlur={handleBlur('password')}\n                rightIcon={\n                  <TouchableOpacity onPress={this.handlePasswordVisibility}>\n                    <Ionicons name={rightIcon} size={28} color=\"grey\" />\n                  </TouchableOpacity>\n                }\n              />\n              <ErrorMessage errorValue={touched.password && errors.password} />\n              <View style={styles.buttonContainer}>\n                <FormButton\n                  buttonType=\"outline\"\n                  onPress={handleSubmit}\n                  title=\"LOGIN\"\n                  buttonColor=\"#039BE5\"\n                  disabled={!isValid || isSubmitting}\n                  loading={isSubmitting}\n                />\n              </View>\n              <ErrorMessage errorValue={errors.general} />\n            </Fragment>\n          )}\n        </Formik>\n        <Button\n          title=\"Don't have an account? Sign Up\"\n          onPress={this.goToSignup}\n          titleStyle={{\n            color: '#F57C00'\n          }}\n          type=\"clear\"\n        />\n      </SafeAreaView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    marginTop: 50\n  },\n  logoContainer: {\n    marginBottom: 15,\n    alignItems: 'center'\n  },\n  buttonContainer: {\n    margin: 25\n  }\n});\n\nexport default withFirebaseHOC(Login);\n```\n\nLet us see how it works. For a successful login, use registered credentials.\n\n![f3](https://i.imgur.com/DrqOjct.gif)\n\n## Add a signout button\n\nSign out button at this point is essential but since there is no app interface right now, I am going to put a simple button on the home screen. Open, `Home.js` file and import `Button` from `react-native-elements`.\n\nAlso, import `withFirebaseHOC` and add the `Button` component below the text.\n\n```js\nimport React, { Component } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { Button } from 'react-native-elements';\nimport { withFirebaseHOC } from '../config/Firebase';\n\nclass Home extends Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text>Home</Text>\n        <Button\n          title=\"Signout\"\n          onPress={this.handleSignout}\n          titleStyle={{\n            color: '#F57C00'\n          }}\n          type=\"clear\"\n        />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n\nexport default withFirebaseHOC(Home);\n```\n\nHere is out the output.\n\n![8](https://i.imgur.com/YLzeMt6.png)\n\nRight now, this button doesn't do anything. You will have to add the `handleSignout` method as below.\n\n```js\nhandleSignOut = async () => {\n  try {\n    await this.props.firebase.signOut();\n    this.props.navigation.navigate('Auth');\n  } catch (error) {\n    console.log(error);\n  }\n};\n```\n\nGo back to the home screen and login into the app. Once the home screen is displayed, click the button `Signout`.\n\n![f4](https://i.imgur.com/qo3v0BF.gif)\n\n## Check user auth state for automatic login\n\nRight now, whenever the user successfully logs in or registers it does lead to the Home screen of the app but on refreshing the simulator, the navigation pattern takes back to the login screen.\n\nIn this section, you are going to add a small authentication check using Firebase method `onAuthStateChanged()` that takes the current user as the argument if they are logged in.\n\nThe auth check is going to do at the same point when the application is loading assets, that is, the `Initial` screen component. It has been already hooked in the navigation pattern to be the first screen or the initial route.\n\n```js\n// navigation.js\n\nimport { createSwitchNavigator, createAppContainer } from 'react-navigation';\nimport Initial from '../screens/Initial';\nimport AuthNavigation from './AuthNavigation';\nimport AppNavigation from './AppNavigation';\n\nconst SwitchNavigator = createSwitchNavigator(\n  {\n    Initial: Initial,\n    Auth: AuthNavigation,\n    App: AppNavigation\n  },\n  {\n    initialRouteName: 'Initial'\n  }\n);\n\nconst AppContainer = createAppContainer(SwitchNavigator);\n\nexport default AppContainer;\n```\n\nUsing the lifecycle method inside the `Initial.js`, the authentication status of whether is user is logged in the app or not can be checked.\n\nStart by importing the Firebase HoC in the file `screens/Initial.js`.\n\n```js\nimport { withFirebaseHOC } from '../config/Firebase';\n```\n\nNext, inside the `componendDidMount` method add the following. If the user has previously logged in, the navigation flow will directly take the user to the Home screen. If the is not logged in, it will show the Login screen.\n\n```js\ncomponentDidMount = async () => {\n  try {\n    // previously\n    this.loadLocalAsync();\n\n    await this.props.firebase.checkUserAuth(user => {\n      if (user) {\n        // if the user has previously logged in\n        this.props.navigation.navigate('App');\n      } else {\n        // if the user has previously signed out from the app\n        this.props.navigation.navigate('Auth');\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// Don't forget to export\nexport default withFirebaseHOC(Initial);\n```\n\nLet us see it in action. Even after refreshing the app, the authenticated user stays logged in.\n\n![f5](https://i.imgur.com/toxtKit.gif)\n\n## Conclusion\n\n_Congratulations! 🎉_ If you have come this far, I am hope enjoyed reading this post. These are some of the strategies I try to follow with any Firebase + React Native + Expo project. I hope any of the codebase used in this tutorial helps you.\n\nTo find the complete code, you will have to visit [this Github repo release](https://github.com/amandeepmittal/expo-firebase/releases/tag/0.6.0).\n",
            "url": "https://amanhimself.dev//blog/context-api-react-native-firebase",
            "title": "Using Context API with React Native",
            "summary": "Using Context API with React Native",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/authentication-navigation-flow-in-react-native-apps",
            "content_html": "---\ntitle: 'How Authentication Flow works in React Native apps using React Navigation 4.x'\ndate: '2019-09-10'\nslug: 'authentication-navigation-flow-in-react-native-apps'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://heartbeat.fritz.ai/how-authentication-flow-works-in-react-native-apps-using-react-navigation-4-x-a30bb4d9e5d6'\n---\n\n![cover_image](https://i.imgur.com/0xwhr2a.png)\n\nMobile apps are made of screens that in number can vary depending on the app you are developing. Handling user navigation can be tricky to learn and do in mobile apps, but with dedicated open-source libraries like [`react-navigation`](https://reactnavigation.org) do make the process a lot easier.\n\nReact Navigation library is common among React Native developers. It is built with JavaScript, and you can create React components and apply any navigation pattern. On the device, it will give the natural look and feel.\n\nIt is up to the developer now, on how to make the best use of navigation between different screens in a React Native app. There are more than one navigation patterns available. If you are starting in the React Native ecosystem, this post will guide you through to use different the patterns of navigation such as Stack and Switch navigation using `react-navigation` library's latest `4.x.x` version.\n\n## Table of Contents\n\n- Requirements\n- Installing navigation library\n- Create app screens\n- Setup navigation\n- Navigating between two screens\n- Managing authentication flow\n- Conclusion\n\n## Requirements\n\nIf you are going to code along, make sure you have already installed the following:\n\n- [Nodejs](https://nodejs.org) (>=`10.x.x`) with npm/yarn installed.\n- [expo-cli](https://docs.expo.io/versions/latest/workflow/expo-cli/) (>= `3.x.x`), previously known as `create-react-native-app`.\n- Mac users must be running an iOS simulator.\n- Windows/Linux users must be running an Android emulator.\n\nTo know more about how to setup and run the simulator or the emulator on your local development environment visit React Native’s [official documentation here](https://facebook.github.io/react-native/docs/getting-started).\n\n## Installing navigation library\n\nTo get started, create a new Expo app using `expo-cli` with the following command from a terminal window. When asked, choose the `blank` template.\n\n```shell\nexpo init expo-example\n\n# navigate inside the project directory\ncd expo-example\n```\n\nOnce inside the project directory, install the following dependencies.\n\n```shell\nyarn add react-navigation react-navigation-stack\n\nexpo install react-native-gesture-handler\nreact-native-screens\n```\n\nAs compared to previous versions of `react-navigation`, all three navigation patterns have been modularised in their own dependencies. If you are using:\n\n- stack navigation, then install `react-navigation-stack`\n- for tabs install `react-navigation-tabs`\n- for drawer install `react-navigation-drawer`\n- switch navigation pattern is still under `react-navigation` and is only used for specific use cases such as authentication flow\n\nMore appropriate information about each dependency related to its own navigation pattern can be found in the [official docs here](https://reactnavigation.org/docs/en/stack-navigator.html).\n\nAfter installing these dependencies, you can verify that they have been installed by opening the `package.json` file.\n\n```json\n\"dependencies\": {\n    \"expo\": \"^34.0.1\",\n    \"react\": \"16.8.3\",\n    \"react-dom\": \"^16.8.6\",\n    \"react-native\": \"https://github.com/expo/react-native/archive/sdk-34.0.0.tar.gz\",\n    \"react-native-gesture-handler\": \"~1.3.0\",\n    \"react-native-reanimated\": \"~1.1.0\",\n    \"react-native-screens\": \"1.0.0-alpha.22\",\n    \"react-native-web\": \"^0.11.4\",\n    \"react-navigation\": \"4.0.0\",\n    \"react-navigation-stack\": \"1.5.1\"\n  },\n```\n\n## Create App Screens\n\nI like to arrange different setups and related files under the folder structure. Here is how it is going to look like at the end of this tutorial. It is also a good practice to organize or give structure to your project.\n\n![1](https://i.imgur.com/lkVcW5L.png)\n\nThe three files inside the `screens` folder are going to be functional components for now, with some dummy text to display. Create these files with the following code snippets.\n\nFor `Home.js`:\n\n```js\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function Home() {\n  return (\n    <View style={styles.container}>\n      <Text>Home</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n```\n\nFor `Login.js`:\n\n```js\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function Login() {\n  return (\n    <View style={styles.container}>\n      <Text>Login</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n```\n\nFor `Signup.js`:\n\n```js\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function Signup() {\n  return (\n    <View style={styles.container}>\n      <Text>Signup</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n```\n\nThe idea here is to create a foundation of three different screens and mock a login/signup and main (_in the current case, the home screen_) screen navigation pattern. This is a common pattern in most mobile apps where the user has to either signup or login before accessing the rest of the application.\n\n## Setup Navigation\n\nAfter creating these three screens, create a new directory called `navigation`. Inside this, create three new files:\n\n- `index.js`\n- `AppNavigation.js`\n- `AuthNavigation.js`\n\nLet us setup the `AppNavigation` first since it will contain only one screen. Open up the file and add the following code.\n\n```js\n//AppNavigation.js\nimport { createStackNavigator } from 'react-navigation-stack';\nimport Home from '../screens/Home';\n\nconst AppNavigation = createStackNavigator(\n  {\n    Home: { screen: Home }\n  },\n  {\n    initialRouteName: 'Home'\n  }\n);\n\nexport default AppNavigation;\n```\n\nStack Navigation provides your app to navigate between screens, where each new screen is placed on the top of the previous one. It is literally like a stack and hence the name. This is done by `createStackNavigator` function. A route configuration object is passed to this function. The `Home` route corresponds to the `Home.js` component.\n\nOn an iOS device, a new screen slides from the right, and on Android, it fades from the bottom.\n\nNext, edit `AuthNavigation.js` file.\n\n```js\n//AuthNavigation.js\nimport { createStackNavigator } from 'react-navigation-stack';\nimport Login from '../screens/Login';\nimport Signup from '../screens/Signup';\n\nconst AuthNavigation = createStackNavigator(\n  {\n    Login: { screen: Login },\n    Signup: { screen: Signup }\n  },\n  {\n    initialRouteName: 'Login'\n  }\n);\n\nexport default AuthNavigation;\n```\n\nSimilarly, in `AuthNavigation` two screens, login and signup are passed. In the second object that is passed to `createStackNavigator` function, the `initialRouteName` indicates that when this navigation file runs, the first screen that will be shown is going to be `Login`. In other words, it is used to set a default screen to whatever the value `initialRouteName` is set to.\n\nIn `AppNavigation` since there is only one screen, so it will always show `Home` screen whether to pass the `initialRouteName` in that file or not. Next, open `index.js` file in the same directory and add the following code.\n\n```js\n//index.js\nimport { createAppContainer } from 'react-navigation';\nimport AuthNavigation from './AuthNavigation';\n\nconst AppContainer = createAppContainer(AuthNavigation);\n\nexport default AppContainer;\n```\n\nThe `createAppContainer` function is responsible for managing the navigation state of the app and links the app to the top-level navigator. The navigation state comes in handy when you are passing data between two screens.\n\nLastly, open the `App.js` file and use `AppContainer` to be the top-level component.\n\n```js\n//App.js\nimport React from 'react';\nimport AppContainer from './navigation';\n\nexport default function App() {\n  return <AppContainer />;\n}\n```\n\nNow open your app in a simulator device by executing the command `expo start` from a terminal window. You will see that it shows only the `Login` screen.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*AjWvmQ72BYHLrqCtmBsbiw.png' />\n\n_Notice the empty space at the top of the screen?_ That is the header section. When using Stack Navigation pattern, each screen is assigned a header automatically. If you do not require to use it, you can set the `headerMode` property to the value of `none` to `createStackNavigator` function. Open `AuthNavigation.js` to edit.\n\n```js\n// AuthNavigation.js\nconst AuthNavigation = createStackNavigator(\n  {\n    Login: { screen: Login },\n    Signup: { screen: Signup }\n  },\n  {\n    initialRouteName: 'Login',\n    headerMode: 'none'\n  }\n);\n```\n\nYou can read more about app containers [here](https://reactnavigation.org/docs/en/app-containers.html#props-of-createappcontainer-on-react-native).\n\n## Navigating between two screens\n\nRight now, there is no way you can navigate from the `Login` to the `Signup` screen. To do so, let us use `this.props.navigation`. Each screen component in the app using `react-navigation` library is automatically provided with the `navigation` prop. It further has [different reference values](https://reactnavigation.org/docs/en/navigation-prop.html) to navigate between different screens directly from a screen.\n\nTo transit between login to signup, create a button like below and pass an `onPress` prop to it in `Login.js` file. The value of this prop is going to hold the `navigation` prop reference.\n\n```js\n//Login.js\n\n//import Button\nimport { StyleSheet, Text, View, Button } from 'react-native';\n\nexport default class Login extends React.Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text>Login</Text>\n        <Button\n          title=\"Go to Signup\"\n          onPress={() => this.props.navigation.navigate('Signup')}\n        />\n      </View>\n    );\n  }\n}\n```\n\nPassing the name of the route as the first parameter to `navigation.navigate()` is necessary. Now go back to the simulator, and you will find a new button. Press the button, and it will take you to the `Signup` screen component.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*1SAUNjPgkuXtC-QU8tioSg.gif' />\n\nSimilarly, you can add a way to navigate back to the login screen component from the signup.\n\n```js\n//Signup.js\n\nexport default class Signup extends React.Component {\n  goToLogin = () => this.props.navigation.navigate('Login');\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text>Signup</Text>\n        <Button title=\"Go to Login\" onPress={this.goToLogin} />\n      </View>\n    );\n  }\n}\n```\n\nHere is the output.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*dO_4EKaKWrv8HlNo3WPPJA.gif' />\n\n## Managing Authentication Flow\n\nIn React Navigation, to manage authentication flow, Switch Navigator is used. This navigation pattern only loads one screen at a time, and there is no back functionality by default. It resets the initial route when switching between the screens. To get started open `index.js` file, import `createSwitchNavigator` from `react-navigation` and add the following code.\n\n```js\n//index.js\nimport { createSwitchNavigator, createAppContainer } from 'react-navigation';\nimport AuthNavigation from './AuthNavigation';\nimport AppNavigation from './AppNavigation';\n\nconst SwitchNavigator = createSwitchNavigator(\n  {\n    Auth: AuthNavigation,\n    App: AppNavigation\n  },\n  {\n    initialRouteName: 'Auth'\n  }\n);\n\nconst AppContainer = createAppContainer(SwitchNavigator);\n\nexport default AppContainer;\n```\n\nNote that, the `AppContainer` is still being exported from the file, but it now accepts `SwitchNavigator` as the parameter. Like the `createStackNavigator`, `createSwitchNavigator` also accepts route config as the first parameter and the configuration values as the second. The route config is going to be done between the authentication navigation screens and the other screens related to the app.\n\nImport both `AuthNavigation` and `AppNavigation` and set the `Auth` as the initial route. This means that the login screen is going to be shown for the when apps load for the first time.\n\nLet us mock the behavior of logging into the app and see what happens when the user successfully logs in. Open `Login.js` file, define an initial state with two properties: `email` and `password`.\n\n```js\n//Login.js\nimport React from 'react';\nimport { StyleSheet, View, Button, TextInput } from 'react-native';\n\nexport default class Login extends React.Component {\n  state = {\n    email: '',\n    password: ''\n  };\n\n  handleEmailChange = email => {\n    this.setState({ email });\n  };\n\n  handlePasswordChange = password => {\n    this.setState({ password });\n  };\n\n  onLogin = async () => {\n    const { email, password } = this.state;\n    try {\n      if (email.length > 0 && password.length > 0) {\n        this.props.navigation.navigate('App');\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  goToSignup = () => this.props.navigation.navigate('Signup');\n  render() {\n    const { email, password } = this.state;\n\n    return (\n      <View style={styles.container}>\n        <View style={{ margin: 10 }}>\n          <TextInput\n            name=\"email\"\n            value={email}\n            placeholder=\"Enter email\"\n            autoCapitalize=\"none\"\n            onChangeText={this.handleEmailChange}\n          />\n        </View>\n        <View style={{ margin: 10 }}>\n          <TextInput\n            name=\"password\"\n            value={password}\n            placeholder=\"Enter password\"\n            secureTextEntry\n            onChangeText={this.handlePasswordChange}\n          />\n        </View>\n        <Button title=\"Login\" onPress={this.onLogin} />\n        <Button title=\"Go to Signup\" onPress={this.goToSignup} />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n```\n\nThe `onLogin` handler function allows the user to navigate to the `Home` screen only if the email and the password fields are not empty. It is used on the `onPress` prop for the following button.\n\n```js\n<Button title=\"Login\" onPress={this.onLogin} />\n```\n\nLook at the complete demo below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*mPCEThKI-qoYL6y1TgWzHw.gif' />\n\n## Conclusion\n\n_The authentication flow works!_ By following this tutorial, you have learned how to use the latest `react-navigation` library to manage and mimic an authentication flow in a React Native app. Using the current knowledge, in the next post, you are going to build some actual forms in React Native apps with proper styling and validation using awesome libraries like Formik and Yup. I hope this post works as fundamental for the next one.\n\n_You can find the complete code used in this tutorial at the Github repo [here](https://github.com/amandeepmittal/expo-firebase/releases/tag/0.1.0)._\n\n**Important resources from this post:**\n\n- [`react-navigation`](https://reactnavigation.org) library docs\n- [Stack Navigator](https://reactnavigation.org/docs/en/stack-navigator.html)\n- [Switch Navigator](https://reactnavigation.org/docs/en/switch-navigator.html)\n- [`navigation` props](https://reactnavigation.org/docs/en/navigation-prop.html)\n\n[Originally published at Heartbeat](https://heartbeat.fritz.ai/how-authentication-flow-works-in-react-native-apps-using-react-navigation-4-x-a30bb4d9e5d6)\n",
            "url": "https://amanhimself.dev//blog/authentication-navigation-flow-in-react-native-apps",
            "title": "How Authentication Flow works in React Native apps using React Navigation 4.x",
            "summary": "How Authentication Flow works in React Native apps using React Navigation 4.x",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/build-an-audio-player-in-react-native",
            "content_html": "---\ntitle: 'How to Build an Audio Player in React Native'\ndate: '2019-08-28'\nslug: 'build-an-audio-player-in-react-native'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://blog.jscrambler.com/how-to-build-an-audio-player-in-react-native/'\n---\n\n![cover_image](https://i.imgur.com/XFvTGys.jpg)\n\nLearning React Native development revolves around some common interface patterns that you should practice. One common UI built-in mobile application is an audio player.\n\nIn this tutorial, you are going to build a functioning interface for an audio player with common functionalities like\n\n- Load the audio file;\n- Play/pause the audio file;\n- Navigate to next track;\n- Navigate to the previous track.\n\nApart from building the user interface, you are also going to learn a lot about using the `expo-av` module. This module provides an API for any Expo application to consume for media playback. Also, this module contains APIs both for audio and video media, but here we are only going to look at the audio portion.\n\nYou will find the complete code for this tutorial at [this GitHub repository](https://github.com/amandeepmittal/music-player-expo).\n\n## What Are We Building?\n\nThe end result of this React Native tutorial is to have an audio player that can play tracks from remote audio files. For the demonstration, the app is going to use audio files related to a play written by William Shakespeare from **[Librivox](https://librivox.org/hamlet-by-william-shakespeare/)**. All these audio files are available under the public domain, so you do not have to worry about copyright issues.\n\n![](https://i.imgur.com/euXYG6Z.png)\n\n## Requirements\n\nTo follow this tutorial, please make sure you have the following installed on your local development environment and have access to the services mentioned below:\n\n- [Nodejs](https://nodejs.org) (>=`10.x.x`) with npm/yarn installed.\n- [expo-cli](https://docs.expo.io/versions/latest/workflow/expo-cli/) (>= `3.x.x`), previously known as `create-react-native-app`.\n- Mac users must be running an iOS simulator.\n- Windows/Linux users must be running an Android emulator.\n\nTo know more about how to setup and run the simulator or the emulator on your local development environment visit React Native’s [official documentation here](https://facebook.github.io/react-native/docs/getting-started).\n\n## Getting Started\n\nTo start, you first have to initialize a new React Native project using the `expo-cli` tool. The only requirement right now is to have `expo-cli` installed. Then, create a new project directory, navigate to it, and install the required dependency to add the functionality of playing an audio file inside the React Native app.\n\n```shell\nexpo init music-player-expo\n\n# navigate inside the app folder\ncd music-player-expo\n\n# install the following dependency\nnpm install expo-av\n```\n\nThe dependency `expo-av` will help you use the Audio API and its promise-based asynchronous methods to play the audio files within the React Native app. The source of these audio files can be local or remote.\n\nOnce you have generated the app and installed the dependency, execute the command below to open the boilerplate application that comes with `expo-cli`.\n\n```shell\nexpo start\n```\n\nThe following screen will welcome you:\n\n![ss1](https://i.imgur.com/dxJdAeg.png)\n\nSince the app will be consuming a bunch of audio files from a remote resource, it is better if you create an array that will contain details related to each of the audio files and their resource in the form of a URI. Open `App.js` and add the following array before the `App` component.\n\n```js\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nconst audioBookPlaylist = [\n  {\n    title: 'Hamlet - Act I',\n    author: 'William Shakespeare',\n    source: 'Librivox',\n    uri:\n      'https://ia800204.us.archive.org/11/items/\n      hamlet_0911_librivox/hamlet_act1_shakespeare.\n      mp3',\n    imageSource:\n      'http://www.archive.org/download/\n      LibrivoxCdCoverArt8/hamlet_1104.jpg'\n  },\n  {\n    title: 'Hamlet - Act II',\n    author: 'William Shakespeare',\n    source: 'Librivox',\n    uri:\n      'https://ia600204.us.archive.org/11/items/\n      hamlet_0911_librivox/hamlet_act2_shakespeare.\n      mp3',\n    imageSource:\n      'http://www.archive.org/download/\n      LibrivoxCdCoverArt8/hamlet_1104.jpg'\n  },\n  {\n    title: 'Hamlet - Act III',\n    author: 'William Shakespeare',\n    source: 'Librivox',\n    uri:\n      'http://www.archive.org/download/\n      hamlet_0911_librivox/hamlet_act3_shakespeare.\n      mp3',\n    imageSource:\n      'http://www.archive.org/download/\n      LibrivoxCdCoverArt8/hamlet_1104.jpg'\n  },\n  {\n    title: 'Hamlet - Act IV',\n    author: 'William Shakespeare',\n    source: 'Librivox',\n    uri:\n      'https://ia800204.us.archive.org/11/items/hamlet_0911_librivox/hamlet_act4_shakespeare.mp3',\n    imageSource:\n      'http://www.archive.org/download/LibrivoxCdCoverArt8/hamlet_1104.jpg'\n  },\n  {\n    title: 'Hamlet - Act V',\n    author: 'William Shakespeare',\n    source: 'Librivox',\n    uri:\n      'https://ia600204.us.archive.org/11/items/hamlet_0911_librivox/hamlet_act5_shakespeare.mp3',\n    imageSource:\n      'http://www.archive.org/download/LibrivoxCdCoverArt8/hamlet_1104.jpg'\n  }\n];\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text>Open up App.js to start working on your app!</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n```\n\nIn the above snippet, `imageSource` is going to provide an album or an audiobook cover.\n\n## Define an initial state in the App Component\n\nIn this section, you are going to convert the functional `App` component that comes with the default Expo app into a class component. This conversion will be useful to define an initial state that will hold an object with properties like:\n\n- `isPlaying` to check whether the audio player is playing the audio file or not. This is going to be a boolean value.\n- `playbackInstance` to hold the instance of the current track being played.\n- `volume` the current volume of the audio for this media.\n- `currentIndex` to gather the index of which track is currently being played. This helps in navigating and playing the next and the previous track from the `audioBookPlaylist` array.\n- `isBuffering` holds a boolean value to check whether the current media is being buffered.\n\nThe initial state of the `App` component is going to look like the below snippet. Open `App.js` to add the state.\n\n```js\nexport default class App extends React.Component {\n  state = {\n    isPlaying: false,\n    playbackInstance: null,\n    currentIndex: 0,\n    volume: 1.0,\n    isBuffering: false\n  };\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text>Open up App.js to start working on your app!</Text>\n      </View>\n    );\n  }\n}\n```\n\n## Building the UI: Audio Player Controls\n\nIn this section, let us build the UI components of how the basic audio player is going to look like. To start, please make sure that you are importing React Native elements like `TouchableOpacity` and `Image` from the core. Also, to add icons, let us import `Ionicons` from the library [`@expo/vector-icons`](https://github.com/expo/vector-icons).\n\nThis package comes with the Expo app, so you do not have to undergo the process of installing it as a separate module. This demo is going to use `Ionicons` from this package but feel free to use [another icon library](https://expo.github.io/vector-icons/).\n\n```js\nimport { StyleSheet, TouchableOpacity, View, Image } from 'react-native'\nimport { Ionicons } from '@expo/vector-ico\n```\n\nThe next step is to modify the render function inside `App.js`. Inside the container view, you are going to add an image that will display the cover of the audio book from the resource. Beneath this cover image, there will be three buttons that will let you control the audio files within the app.\n\n```js\n<View style={styles.container}>\n  <Image\n    style={styles.albumCover}\n    source={{\n      uri: 'http://www.archive.org/download/LibrivoxCdCoverArt8/hamlet_1104.jpg'\n    }}\n  />\n  <View style={styles.controls}>\n    <TouchableOpacity style={styles.control} onPress={() => alert('')}>\n      <Ionicons name=\"ios-skip-backward\" size={48} color=\"#444\" />\n    </TouchableOpacity>\n    <TouchableOpacity style={styles.control} onPress={() => alert('')}>\n      {this.state.isPlaying ? (\n        <Ionicons name=\"ios-pause\" size={48} color=\"#444\" />\n      ) : (\n        <Ionicons name=\"ios-play-circle\" size={48} color=\"#444\" />\n      )}\n    </TouchableOpacity>\n    <TouchableOpacity style={styles.control} onPress={() => alert('')}>\n      <Ionicons name=\"ios-skip-forward\" size={48} color=\"#444\" />\n    </TouchableOpacity>\n  </View>\n</View>\n```\n\nThe conditional rendering implied on the second button states that whenever the boolean value of `isPlaying` is changed to true, the UI will display a pause button instead of a play button. Each button is accumulating an icon.\n\nAll of these buttons are going to be inside another view with a specific styling. You will notice the same thing in the above snippet. Outside the class component, using a `StyleSheet` object, let us add the styling.\n\n```js\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  albumCover: {\n    width: 250,\n    height: 250\n  },\n  controls: {\n    flexDirection: 'row'\n  },\n  control: {\n    margin: 20\n  }\n});\n```\n\nTo provide styles to your React Native components, there are no classes or IDs in React Native like in web development. To create a new style object, you use the `StyleSheet.create()` method. When creating a new style object every time the component renders, `StyleSheet` creates style objects with IDs that are further used to reference instead of rendering the whole component again and again.\n\nExecute the command `expo start` from a terminal window, if you haven't already, and you will get the following result.\n\n![](https://i.imgur.com/V15bamY.png)\n\n## Exploring the Audio API\n\nTo play a sound in an Expo application, you’re required to use and import the API for the Audio class from `expo-av`. So at the top of the `App.js` file and after other imports, you can add the following line.\n\n```js\nimport { Audio } from 'expo-av';\n```\n\nTo customize the audio experience inside an iOS or an Android app, Expo provides an asynchronous method called `setAudioModeAsync()`. This method takes an options object as its only parameter. This object contains a list of key-value pairs that are required to enable and use the audio component.\n\nInside the `App` component, you are going to add a lifecycle method `componentDidMount()`. This method should be defined after the initial state. It will help you configure the `Audio` component from the `expo-av` module.\n\n```js\nasync componentDidMount() {\n    try {\n      await Audio.setAudioModeAsync({\n        allowsRecordingIOS: false,\n        interruptionModeIOS: Audio.INTERRUPTION_MODE_IOS_DO_NOT_MIX,\n        playsInSilentModeIOS: true,\n        interruptionModeAndroid: Audio.INTERRUPTION_MODE_ANDROID_DUCK_OTHERS,\n        shouldDuckAndroid: true,\n        staysActiveInBackground: true,\n        playThroughEarpieceAndroid: true\n      })\n\n      this.loadAudio()\n    } catch (e) {\n      console.log(e)\n    }\n  }\n```\n\nLet us take all the options that are being passed in the `setAudioModeAsync` method. These options will define how the audio player is going to behave.\n\nThe `allowsRecordingIOS` is a boolean which, when enabled, will allow recording in iOS devices. The `playsInSilentModeIOS` indicates whether the audiobook app should play while the device is in silent mode.\n\nThe `interruptionModeIOS` & `interruptionModeAndroid` is how the audio of the app will behave with the audio of other apps. For example, what if you receive a call while listening to the audio player? How will the audio from the audiobook app behave? The value of these two options sets that. Currently, the option for the iOS device is set to be interrupted by the audio of other apps, hence `INTERRUPTION_MODE_IOS_DO_NOT_MIX`.\n\nHowever, in the case of Android, the value `INTERRUPTION_MODE_ANDROID_DUCK_OTHERS` indicates that the volume of the audio from other apps will be lowered while the audiobook app is running. This term, `Duck` is known as lowering the volume. To set this option for Android, you have to set the value of `shouldDuckAndroid` to true.\n\nLastly, the lifecycle method is going to trigger the `loadAudio` function, which you are going to see in action in the next section.\n\n## Loading the Audio File\n\nAfter the lifecycle method `componentDidMount()` inside the `App.js` file, you are going to enter another asynchronous function called `loadAudio()`. This function will handle the loading of the audio file for the app's player.\n\n```js\nasync loadAudio() {\n  const {currentIndex, isPlaying, volume} = this.state\n\n  try {\n    const playbackInstance = new Audio.Sound()\n    const source = {\n      uri: audioBookPlaylist[currentIndex].uri\n    }\n\n    const status = {\n      shouldPlay: isPlaying,\n      volume\n    }\n\n    playbackInstance.setOnPlaybackStatusUpdate(this.onPlaybackStatusUpdate)\n    await playbackInstance.loadAsync(source, status, false)\n    this.setState({playbackInstance})\n    } catch (e) {\n      console.log(e)\n    }\n}\n\nonPlaybackStatusUpdate = status => {\n  this.setState({\n    isBuffering: status.isBuffering\n  })\n}\n```\n\nThe `new Audio.Sound()` allows you to create an instance that will take the source of the audio file (_which can be either from a local asset file or a remote API URI like in the current scenario_). From the state property `currentIndex` the Audio instance created will find the index value in the array of `audioBookPlaylist` to read the source URI and play the audio file.\n\nOn the instance of Audio, a method called `setOnPlaybackStatusUpdate` is used. This method has a handler function being passed, which is known as `onPlaybackStatusUpdate`. This handler function is responsible for updating the UI whether the media is being currently buffered or being played. To track the state of buffering, `isBuffering` is used from the initial state property. Whenever the state of the Audio instance changes, this gets an update.\n\nLastly, the `loadAsync` function is called on the Audio instance, which takes in three parameters. This first parameter is the source of the audio file. The second parameter indicates the status of the object. This `status` object further uses the properties of `shouldPlay` and `volume`. The value of the property `shouldPlay` is indicated by `isPlaying` from the initial state object. The last boolean value passed in `loadAsync` indicates whether the audio player app should download the audio file before playing. In the current scenario, there is no requirement for that. Thus, it has been set to `false`.\n\n## Control Handlers\n\nAfter the previous section, let us add three new methods which are going to control the state of the audio instance being played or paused. Also, changing to the next track or the previous track is going to be represented by different handler functions. Further, these handler functions are going to be used on `onPress` props of each button created in the UI section.\n\n```js\nhandlePlayPause = async () => {\n  const { isPlaying, playbackInstance } = this.state;\n  isPlaying\n    ? await playbackInstance.pauseAsync()\n    : await playbackInstance.playAsync();\n\n  this.setState({\n    isPlaying: !isPlaying\n  });\n};\n\nhandlePreviousTrack = async () => {\n  let { playbackInstance, currentIndex } = this.state;\n  if (playbackInstance) {\n    await playbackInstance.unloadAsync();\n    currentIndex < audioBookPlaylist.length - 1\n      ? (currentIndex -= 1)\n      : (currentIndex = 0);\n    this.setState({\n      currentIndex\n    });\n    this.loadAudio();\n  }\n};\n\nhandleNextTrack = async () => {\n  let { playbackInstance, currentIndex } = this.state;\n  if (playbackInstance) {\n    await playbackInstance.unloadAsync();\n    currentIndex < audioBookPlaylist.length - 1\n      ? (currentIndex += 1)\n      : (currentIndex = 0);\n    this.setState({\n      currentIndex\n    });\n    this.loadAudio();\n  }\n};\n```\n\nThe `handlePlayPause` checks the value of `isPlaying` to decide whether to play an audio file from the resource it is currently loaded or not. This decision is made using a conditional operator, and then the state is updated accordingly. The `playBackInstance` is holding the same value from the previous section when an audio file is loaded.\n\nThe next handler function `handlePreviousTrack` is used to skip back to the previous audio track in the playlist. It first clears the current track being played using `unloadAsync` from the Audio API, using the property value of `currentIndex` from the state. Similarly, the handler function `handleNextTrack` clears the current track and then using the `currentIndex` navigates to the next track.\n\n## Completing the Player UI\n\nThe last piece of the puzzle in this audio player app is to display the information of the audio file which is being played. This information is already provided in the mock API array `audioBookPlaylist`. Create a new function called `renderFileInfo` before the `render` function with the following JSX to display. Also, update the `StyleSheet` object.\n\n```js\nrenderFileInfo() {\n    const { playbackInstance, currentIndex } = this.state\n    return playbackInstance ? (\n      <View style={styles.trackInfo}>\n        <Text style={[styles.trackInfoText, styles.largeText]}>\n          {audioBookPlaylist[currentIndex].title}\n        </Text>\n        <Text style={[styles.trackInfoText, styles.smallText]}>\n          {audioBookPlaylist[currentIndex].author}\n        </Text>\n        <Text style={[styles.trackInfoText, styles.smallText]}>\n          {audioBookPlaylist[currentIndex].source}\n        </Text>\n      </View>\n    ) : null\n  }\n\n// update the Stylesheet object\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  albumCover: {\n    width: 250,\n    height: 250\n  },\n  trackInfo: {\n    padding: 40,\n    backgroundColor: '#fff'\n  },\n  trackInfoText: {\n    textAlign: 'center',\n    flexWrap: 'wrap',\n    color: '#550088'\n  },\n  largeText: {\n    fontSize: 22\n  },\n  smallText: {\n    fontSize: 16\n  },\n  control: {\n    margin: 20\n  },\n  controls: {\n    flexDirection: 'row'\n  }\n})\n\n```\n\nNext, use this function inside the `render` method of the `App` component below the view that holds all the control buttons. Also, update the control buttons to use appropriate handler functions from the previous section. Here is the complete code of the `render` function.\n\n```js\nrender() {\n    return (\n      <View style={styles.container}>\n        <Image\n          style={styles.albumCover}\n          source={{ uri: 'http://www.archive.org/download/LibrivoxCdCoverArt8/hamlet_1104.jpg' }}\n        />\n        <View style={styles.controls}>\n          <TouchableOpacity style={styles.control} onPress={this.handlePreviousTrack}>\n            <Ionicons name='ios-skip-backward' size={48} color='#444' />\n          </TouchableOpacity>\n          <TouchableOpacity style={styles.control} onPress={this.handlePlayPause}>\n            {this.state.isPlaying ? (\n              <Ionicons name='ios-pause' size={48} color='#444' />\n            ) : (\n              <Ionicons name='ios-play-circle' size={48} color='#444' />\n            )}\n          </TouchableOpacity>\n          <TouchableOpacity style={styles.control} onPress={this.handleNextTrack}>\n            <Ionicons name='ios-skip-forward' size={48} color='#444' />\n          </TouchableOpacity>\n        </View>\n        {this.renderFileInfo()}\n      </View>\n    )\n  }\n```\n\nNow, run the application, and you will get the following result.\n\n![](https://i.imgur.com/sF49I90.gif)\n\n## Conclusion\n\nYou have reached the end of this tutorial. We hope you enjoyed it and learned how to integrate the `expo-av` library to use an Audio class to create functionality in your cross-platform applications and build an audio player. An important thing to retain from this demo application is how to use available methods like `loadAsync()`, and `unloadAsync()`.\n\nThe resources used in order to create this tutorial can be found below:\n\n- [Expo Audio API](https://docs.expo.io/versions/latest/sdk/audio/) documentation\n- [expo-av](https://docs.expo.io/versions/latest/sdk/av/) documentation\n- [Librivox audio files in public domain](https://librivox.org/hamlet-by-william-shakespeare/), a big thank you!\n\n[Originally published at Jscrambler](https://blog.jscrambler.com/how-to-build-an-audio-player-in-react-native/)\n",
            "url": "https://amanhimself.dev//blog/build-an-audio-player-in-react-native",
            "title": "How to Build an Audio Player in React Native",
            "summary": "How to Build an Audio Player in React Native",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/not-hotdog-clone-react-native",
            "content_html": "---\ntitle: 'Build a Not Hotdog clone with React Native'\ndate: '2019-08-27'\nslug: 'not-hotdog-clone-react-native'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://heartbeat.fritz.ai/build-a-not-hotdog-clone-with-react-native-8f9b9eb75bd2'\n---\n\nIf you're a fan of HBO's Silicon Valley, you'll remember when they launched a real AI-powered mobile app that classifies hotdogs from a given image (or not). Using Google's Vision API, let's try to recreate a working model of the application in React Native.\n\nGoogle's Vision API is a machine learning tool that classifies details from an image provided as an input. The process of these classifications is based on thousands of different categories that are included in pre-trained API models. The Vision API enables access to these pre-trained models via a REST API.\n\n## What are we building?\n\n<img src='https://cdn-images-1.medium.com/max/800/1*Hg6nlnaROCavW5_YLygtEA.gif' />\n\n## Table of Contents\n\n- Prerequisites\n- Setup Firebase Project\n- Integrate Firebase SDK with React Native app\n- Generate a Google Vision API Key\n- Setting Permissions for Camera & Camera Roll\n- Create a Header component\n- Adding an Overlay Spinner\n- Access Camera and Camera Roll\n- Add functionality to determine a Hot dog\n- Display final results\n- Conclusion\n\n## Prerequisites\n\nTo follow this tutorial, please make sure you have the following installed on your local development environment and have access to the services mentioned below:\n\n- [Node.js](https://nodejs.org/en/) (>=`10.x.x`) with npm/yarn installed.\n- [expo-cli](https://docs.expo.io/versions/latest/workflow/expo-cli/?) (>=`3.0.9`), previously known as create-react-native-app.\n- a [Google Cloud Platform](https://cloud.google.com/) account\n- [Firebase Storage](https://console.firebase.google.com/) setup\n- Expo Client app for Android or iOS, used for testing the app\n\n## Setup Firebase Project\n\nIn this section, let us set up a new Firebase project. If you are already familiar with the process and know how to get a config keys from a Firebase project, you can skip this step.\n\nVisit [Firebase](https://console.firebase.google.com/) and sign-in with your Google ID. Once signed in, click on a new project and enter a name. Lastly, hit the **Create project** button.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*BDhg-K1-ekeYg4D2AAir3A.jpeg' />\n\nAfter creating the project and being redirected to the dashboard screen, on the left side menu, click the **settings** icon, and then go to **Project settings**.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*yJvioMA9wqdBcPGS5HiwYQ.png' />\n\nThe whole the `firebaseConfig` object, as shown above, is required to integrate Firebase with a React Native or Expo app. Save them somewhere or make sure you know how to navigate to this page.\n\nThe next step is to setup Firebase storage rules such as to allow to upload image files through the app. From the left-hand side menu in the Firebase console, open **Storage** tab and then choose **Rules**. Modify them as follows.\n\n```shell\nservice firebase.storage {\n  match /b/{bucket}/o {\n    match /{allPaths=**} {\n      allow read, write\n    }\n  }\n}\n```\n\nFirebase setup is complete.\n\n## Integrate Firebase SDK with React Native app\n\nTo get started, create a new React Native project. For this demonstration, let us use `expo-cli`, an awesome tool that helps to create React Native apps at a faster rate. Open a terminal window, and run the following series of commands.\n\n```shell\n# generate a new app\nexpo init not-hotdog-app\n\n# navigate inside the app folder\ncd not-hotdog-app\n\n# install the firebase SDK & other dependencies\nyarn add firebase@6.0.1 expo-permissions\nexpo-image-picker uuid react-native-elements\n```\n\n> Also, this tutorial is using `yarn` as the package manager but you are most welcome to use `npm`.\n\nNow that the project is generated open the directory in your favorite text editor. Then create a new folder called `config` and inside it, a new file called `Firebase.js`. This file will be responsible for integrating Firebase with the Expo app.\n\n```js\nimport * as firebase from 'firebase';\n\nconst firebaseConfig = {\n  apiKey: 'XXXX',\n  authDomain: 'XXXX',\n  databaseURL: 'XXXX',\n  projectId: 'XXXX',\n  storageBucket: 'XXXX',\n  messagingSenderId: 'XXXX',\n  appId: 'XXXX'\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n```\n\nAll the Xs are values of each key in the `firebaseConfig` object from the previous section. This completes the step to integrate a Firebase Web SDK with an Expo app.\n\n## Generate a Google Vision API Key\n\nOnce you are signed in to Google Cloud Platform, you can visit the [Google Cloud Console](https://console.cloud.google.com/), to create a new project.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*xVCIMrUY0EDtGMfUKJC5Hg.png' />\n\nFrom the dropdown menu center, select a project. Then click the button **New Project** in the screen below. Notice you have already generated a Firebase project, select that from the list available.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*FUsemE_BjGBUN2T1gorSUg.png' />\n\nRight now you are at the screen called **Dashboard** inside the console. From the top left, click on the menu button and a sidebar menu will pop up. Select **APIs & Services > Dashboard**.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*ggHFyid_JjNABDZh6JfsMA.png' />\n\nAt the Dashboard, select the button **Enable APIs and Services**.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*rhVkQAIWdeqV9wSZsjacew.jpeg' />\n\nThen search for the **Vision API** and make sure to click the button **Enable**.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*DzHGkXJQyTeYCHqETkhIPA.jpeg' />\n\nNow, go back to the **Dashboard** and go to **Credentials** to generate an API key. Click the button **Create Credentials** and you will undergo a small process to generate the API key.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*8SdYi2l3aGS3VcvG7PU-Fg.jpeg' />\n\nOnce it is done, save the API key in `App.js` file after all the import statements.\n\n```js\nconst VISION_API_KEY = 'XXXX';\n```\n\nThe setup is complete. Let us move to the next section and start building the application.\n\n## Setting Permissions for Camera & Camera Roll\n\nTo set permissions in any Expo app, all you need is to utilize an asynchronous method from the module `expo-permissions`. For this clone, there are two permissions that need to be set. The required permissions are for Camera and Camera Roll (or Photos of your device).\n\nCamera roll is used in a case where the user wants to upload an image. For iOS simulator devs, you cannot access the camera so if you are not planning to use a real device until the end of this tutorial, but want to follow along. It is recommended to add Camera Roll functionality.\n\nImport the permissions module in `App.js` file.\n\n```js\nimport * as Permissions from 'expo-permissions';\n```\n\nNext step is to set an initial state that will control the `View` in the `render` method by determining whether the user has granted the permission to your app to use Camera and Camera roll or not.\n\n```js\nclass App extends Component {\n  state = {\n    hasGrantedCameraPermission: false,\n    hasGrantedCameraRollPermission: false,\n  }\n```\n\nNext, using a lifecycle method `componentDidMount()`, define a promise for each permission. In the below snippet, you will find two functions `cameraRollAccess()` and `cameraAccess()` performing this operation. Respectively, each of these permission component has a [permission type](https://docs.expo.io/versions/v34.0.0/sdk/permissions/#permissions-types):\n\n- for Camera Roll: `Permissions.CAMERA_ROLL`\n- for Camera: `Permissions.CAMERA`\n\n```js\nasync componentDidMount() {\n    this.cameraRollAccess()\n    this.cameraAccess()\n  }\n\n  cameraRollAccess = async () => {\n    const { status } = await Permissions.askAsync(Permissions.CAMERA_ROLL)\n\n    if (status === 'granted') {\n      this.setState({ hasGrantedCameraRollPermission: true })\n    }\n  }\n\n  cameraAccess = async () => {\n    const { status } = await Permissions.askAsync(Permissions.CAMERA)\n\n    if (status === 'granted') {\n      this.setState({ hasGrantedCameraPermission: true })\n    }\n  }\n```\n\nEach of the permission components returns a `status` value of `granted` or `denied`. In case of the permissions are granted, the value of state variables `hasGrantedCameraRollPermission` and `hasGrantedCameraPermission` are both set to true. The method `Permissions.askAsync()` to prompt the user for the type of permission.\n\nNext, go to the render method of the `App` component and add condition using the two-state variables. If both are set to true, it will display the first screen of the application.\n\n```js\n render() {\n    const {\n      hasGrantedCameraPermission,\n      hasGrantedCameraRollPermission,\n    } = this.state\n\n    if (\n      hasGrantedCameraPermission === false &&\n      hasGrantedCameraRollPermission === false\n    ) {\n      return (\n        <View style={{ flex: 1, marginTop: 100 }}>\n          <Text>No access to Camera or Gallery!</Text>\n        </View>\n      )\n    } else {\n      return (\n        <View style={styles.container}>\n          {*/ Rest of the content in the next section*/ }\n        </View>\n      )\n    }\n  }\n\n// Corresponding StyleSheet Object\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  }\n})\n```\n\nIf either or both are not granted, the app will display the message `No access to Camera or Gallery!`, also as shown below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*RPW_mo8N7A303-1dKqHsRA.png' />\n\nWhen tested on a real android device, it did ask for permissions.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*Z-YtLTjjd-jbDtNKA9gWNw.jpeg' />\n\nSimilarly, to use camera:\n\n<img src='https://cdn-images-1.medium.com/max/800/1*c0BRdUMxfP_WTYt0VoVTRA.jpeg' />\n\n## Create a Header component\n\nUsing `react-native-elements` UI library for React Native, let us quickly create a useful header that will hold two buttons and the app's title in text. The left button will be to open the phone's gallery or camera roll consisting of user photos. The right button will be to open access the Camera on a real device.\n\nImport the `Header` component from the `react-native-elements` library.\n\n```js\nimport { View, Text, StyleSheet, TouchableOpacity } from 'react-native';\nimport { Header, Icon } from 'react-native-elements';\n```\n\nThe UI library has a pre-defined component called `Header` that you can use right away. This component accepts the icons on the left and right side. Since the app needs these icons to be clickable, use `TouchableOpacity` such that its `prop` can be later used to open the camera or the camera roll.\n\n```js\n<View style={styles.container}>\n  <Header\n    statusBarProps={{ barStyle: 'light-content' }}\n    backgroundColor=\"black\"\n    leftComponent={\n      <TouchableOpacity onPress={() => alert('soon')}>\n        <Icon name=\"photo-album\" color=\"#fff\" />\n      </TouchableOpacity>\n    }\n    centerComponent={{\n      text: 'Not Hotdog?',\n      style: { color: '#fff', fontSize: 20, fontWeight: 'bold' }\n    }}\n    rightComponent={\n      <TouchableOpacity onPress={() => alert('soon')}>\n        <Icon name=\"camera-alt\" color=\"#fff\" />\n      </TouchableOpacity>\n    }\n  />\n</View>\n```\n\nThe `Header` component also has a `statusBarProps` prop to change the color of the Status bar and works cross-platform. It will give the following output.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*HUDX6p1wtfbrBGmNNanPVw.png' />\n\nBoth the icons are touchable, but right now they do not have an associated handler method except that a dummy `alert` message.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*uKMGmdh-AQESyamwCwZ3tA.png' />\n\nThe `react-native-elements` library by default uses Material Icons and has a peer dependency of [`react-native-vector-icons`](https://github.com/oblador/react-native-vector-icons).\n\n## Adding an Overlay Spinner\n\nThe next element to add in the initial state object is `uploading` with a value of false. This variable will be used in the app to display an animated spinner whenever an image is being uploaded from the Camera Roll or analyzed by the Vision API for the result.\n\n```js\nstate = {\n  //... rest,\n  uploading: false\n};\n\n// also make sure to include deconstruct the state inside render()\nconst {\n  hasGrantedCameraPermission,\n  hasGrantedCameraRollPermission,\n  uploading\n} = this.state;\n```\n\nCreate a new file inside `components/UploadingOverlay.js`. This file is going to contain a presentational component with the same name as the filename. Using `ActivityIndicator` from `react-native` you can animate this component by using its prop called `animating`.\n\n```js\nimport React from 'react';\nimport { ActivityIndicator, StyleSheet, View } from 'react-native';\n\nconst UploadingOverlay = () => (\n  <View style={[StyleSheet.absoluteFill, styles.overlay]}>\n    <ActivityIndicator color=\"#000\" animating size=\"large\" />\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  overlay: {\n    backgroundColor: 'rgba(255,255,255,0.9)',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n\nexport default UploadingOverlay;\n```\n\nAdding `StyleSheet.absoluteFill` to the `style` prop of the `View` component which holds the spinner, you can create an overlay screen. An _overlay_ is just a screen or a `View` in terms of React Native that allows the current screen to appear on top of other screens. Using the `backgroundColor` property, you can add the `opacity` in the last after defining RBG values.\n\nFor example, when asking permission to access the Camera, a dialog box appeared on the app screen (_as shown in the previous section_). Notice how the box was position on top of the screen in the background.\n\nNow, go back to `App.js` and add this component at the bottom of the `render()` section, just before the root `View` component is ending. Do not forget to import the component.\n\n```js\nimport UploadingOverlay from './components/UploadingOverlay';\n\n// ... rest\n{\n  uploading ? <UploadingOverlay /> : null;\n}\n```\n\nThe above condition states that, if the value of `this.state.uploading` is true, it will show the overlay screen. To test it out, temporarily set the value of `uploading` in the state object to `true`.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*xcmtOrumJIUGwTIVaV8lSQ.png' />\n\nAn endless spinner will continue to appear. Set the value of `uploading` back to false before proceeding.\n\n## Access Camera and Camera Roll\n\nIn this section, you are going to add the functionality of accessing Camera and Camera Roll by defining three different handler functions in `App` component. Make sure you are inside the file `App.js`. First, import the following statement since this section is going to make use of Firebase's storage and `uuid` module to create a unique referent to each image.\n\n```js\nimport firebase from './config/Firebase';\nimport uuid from 'uuid';\n```\n\nNext, modify the initial state of the object to add the following for the final time.\n\n```js\nstate = {\n  hasGrantedCameraPermission: false,\n  hasGrantedCameraRollPermission: false,\n  uploading: false,\n  image: null,\n  googleResponse: false\n};\n```\n\nTo enable both of these functionalities in the current app, let us leverage another Expo module called `expo-image-picker`. First, import the module after the rest of the import statements.\n\n```js\nimport * as ImagePicker from 'expo-image-picker';\n```\n\nExpo documentation has the best definition of what this module is used for. Take a look.\n\n> [Image Picker] Provides access to the system's UI for selecting images and videos from the phone's library or taking a photo with the camera.\n\nThat's all you need right now. Define the first function, `takePhoto` that is going to access the phone's camera to click a photo.\n\n```js\ntakePhoto = async () => {\n  let pickerResult = await ImagePicker.launchCameraAsync({\n    allowsEditing: true,\n    aspect: [4, 3]\n  });\n\n  this.handleImagePicked(pickerResult);\n};\n```\n\nThe asynchronous method `ImagePicker.launchCameraAsync()` accepts two arguments:\n\n- `allowsEditing` shows the UI to edit the image after it is clicked. Mostly used to crop images.\n- `aspect` is an array to maintain a consistent aspect ratio if the `allowsEditing` is set to true.\n\nSimilarly, `ImagePicker.launchImageLibraryAsync()` is used with the same set of arguments to access Camera roll.\n\n```js\npickImage = async () => {\n  let pickerResult = await ImagePicker.launchImageLibraryAsync({\n    allowsEditing: true,\n    aspect: [16, 9]\n  });\n\n  this.handleImagePicked(pickerResult);\n};\n```\n\nBoth of these asynchronous functions, return the `uri` of the image selected (_among other arguments that you can view in the official docs [here](https://docs.expo.io/versions/v34.0.0/sdk/imagepicker/#returns)_). Lastly, both of these methods are calling another callback `handleImagePicked` after their job is done. This method contains the business of logic of how to handle the image after it is picked from the camera roll or clicked.\n\n```js\nhandleImagePicked = async pickerResult => {\n  try {\n    this.setState({ uploading: true });\n\n    if (!pickerResult.cancelled) {\n      uploadUrl = await uploadImageAsync(pickerResult.uri);\n      this.setState({ image: uploadUrl });\n    }\n  } catch (e) {\n    console.log(e);\n    alert('Image Upload failed');\n  } finally {\n    this.setState({ uploading: false });\n  }\n};\n```\n\nInitially, set the state of `uploading` to true. Then, if an image is selected, call the custom method `uploadImageAsync` (_which will be defined at the end of this section_) and pass the URI of the image selected. This will also set the value of the `image` from the state object to the URL of the uploaded image. Lastly, set the state of the `uploading` in the `finally` block back to false if the results are positive and the image has uploaded without any errors.\n\nThe custom method `uploadImageAsync` has to be defined outside the `App` component. It will upload the image by creating a unique image ID or blob with the help of `uuid`. It uses `xhr` to make an Ajax call to send a request to the Firebase storage to upload the image.\n\n```js\nasync function uploadImageAsync(uri) {\n  const blob = await new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.onload = function () {\n      resolve(xhr.response);\n    };\n    xhr.onerror = function (e) {\n      console.log(e);\n      reject(new TypeError('Network request failed'));\n    };\n    xhr.responseType = 'blob';\n    xhr.open('GET', uri, true);\n    xhr.send(null);\n  });\n\n  const ref = firebase.storage().ref().child(uuid.v4());\n  const snapshot = await ref.put(blob);\n\n  blob.close();\n\n  return await snapshot.ref.getDownloadURL();\n}\n```\n\n> Note that the source code for accessing and uploading an image to Firebase is taken from [this example](https://github.com/expo/firebase-storage-upload-example) of using Expo with Firebase.\n\nNow you can add both the functions, `pickImage` and `takePhoto` as the value of `onPress` props for the corresponding icons.\n\n```js\n<Header\n  statusBarProps={{ barStyle: 'light-content' }}\n  backgroundColor=\"#000\"\n  leftComponent={\n    <TouchableOpacity onPress={this.pickImage}>\n      <Icon name=\"photo-album\" color=\"#fff\" />\n    </TouchableOpacity>\n  }\n  centerComponent={{\n    text: 'Not Hotdog?',\n    style: styles.headerCenter\n  }}\n  rightComponent={\n    <TouchableOpacity onPress={this.takePhoto}>\n      <Icon name=\"camera-alt\" color=\"#fff\" />\n    </TouchableOpacity>\n  }\n/>\n```\n\nHere is an example of accessing Camera roll.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*dEcP_2OfNpFepEiWpwg3lA.gif' />\n\n## Add functionality to determine a Hotdog\n\nAs most of the app is now set up, this section is going to be an interesting one. You are going to leverage the use of Google's Vision API to analyze whether the image provided by the user is a hot dog or not.\n\nInside the `App` component, add a new method called `submitToGoogle`. It is going to send requests and communicate with the API to fetch the result when a button is pressed by the user after the image has been uploaded. Again, while analyzing and fetching results, this method is going to set the state variable `uploading` to true. Then, it will send the URI of the image from the state object's `image` as the body of the request.\n\nAlong with the URI, the type of category you want to use is also defined along with a number of results it can fetch as a response. You can change the value of `maxResults` for the `LABEL` category. Currently, the value of the is set to `7`. There are other detection categories provided by the Vision API other the one being used below, `LABEL_DETECTION`, such as a human face, logo, landmark, text, and so on.\n\n```js\nsubmitToGoogle = async () => {\n  try {\n    this.setState({ uploading: true });\n    let { image } = this.state;\n    let body = JSON.stringify({\n      requests: [\n        {\n          features: [{ type: 'LABEL_DETECTION', maxResults: 7 }],\n          image: {\n            source: {\n              imageUri: image\n            }\n          }\n        }\n      ]\n    });\n    let response = await fetch(\n      `https://vision.googleapis.com/v1/images:annotate?key=${VISION_API_KEY}`,\n      {\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: body\n      }\n    );\n    let responseJson = await response.json();\n    const getLabel = responseJson.responses[0].labelAnnotations.map(\n      obj => obj.description\n    );\n\n    let result =\n      getLabel.includes('Hot dog') ||\n      getLabel.includes('hot dog') ||\n      getLabel.includes('Hot dog bun');\n\n    this.setState({\n      googleResponse: result,\n      uploading: false\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n```\n\nIn the above snippet, the result is fetched in an array. Each array, in the current scenario, will have seven different objects. Using JavaScript's `map` let us extract the value of `description` from each object. All you need is to detect whether the description contains the word `hotdog` or not. This is done in the variable `result`. Lastly, the state of `uploading` overlay is set back to false, and the result of whether the uploaded image contains a hot dog or not is going to update `googleResponse` as boolean.\n\nOn a side note, the Vision API uses HTTP Post request as a REST API endpoint to perform data analysis on images you send in the request. This is done via the URL `https://vision.googleapis.com/v1/images:annotate`. To authenticate each request, you need the API key. The body of this POST request is in JSON format. For example:\n\n```json\n{\n  \"requests\": [\n    {\n      \"image\": {\n        \"content\": \"/9j/7QBEUGhvdG9...image contents...eYxxxzj/Coa6Bax//Z\"\n      },\n      \"features\": [\n        {\n          \"type\": \"LABEL_DETECTION\",\n          \"maxResults\": 1\n        }\n      ]\n    }\n  ]\n}\n```\n\n## Display final results\n\nUsing the boolean value from `googleResponse`, the end result is going to be output. The output will be displayed using `renderImage`.\n\n```js\nrenderImage = () => {\n  let { image, googleResponse } = this.state;\n  if (!image) {\n    return (\n      <View style={styles.renderImageContainer}>\n        <Button\n          buttonStyle={styles.button}\n          onPress={() => this.submitToGoogle()}\n          title=\"Check\"\n          titleStyle={styles.buttonTitle}\n          disabled\n        />\n        <View style={styles.imageContainer}>\n          <Text style={styles.title}>Upload an image to verify a hotdog!</Text>\n          <Text style={styles.hotdogEmoji}>🌭</Text>\n        </View>\n      </View>\n    );\n  }\n  return (\n    <View style={styles.renderImageContainer}>\n      <Button\n        buttonStyle={styles.button}\n        onPress={() => this.submitToGoogle()}\n        title=\"Check\"\n        titleStyle={styles.buttonTitle}\n      />\n\n      <View style={styles.imageContainer}>\n        <Image source={{ uri: image }} style={styles.imageDisplay} />\n      </View>\n\n      {googleResponse ? (\n        <Text style={styles.hotdogEmoji}>🌭</Text>\n      ) : (\n        <Text style={styles.hotdogEmoji}>❌</Text>\n      )}\n    </View>\n  );\n};\n```\n\nThe `Button` component used above is from `react-native-elements` library. It is going to be disabled until no image is selected. On its prop `onPress` the handle function `submitToGoogle` is called. The second view displays the image, and beneath it, an emoji is showcased whether the image has the desired result or not. Do note that by default the cross emoji will be showcased since the default value of `googleResponse` is set to false when defining the initial state. Only after clicking the button, the emoji displayed is the final result.\n\nLastly, do not forget to add `renderImage` inside `App` component's `render` method, just before the `UploadingOverlay` component.\n\n```js\n// inside the render method\n{\n  this.renderImage();\n}\n{\n  uploading ? <UploadingOverlay /> : null;\n}\n```\n\nHere is a short demo of how the app looks and works on a real android device using Expo client to run the app.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*Hg6nlnaROCavW5_YLygtEA.gif' />\n\nHere is complete source code for `StyleSheet` object.\n\n```js\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#cafafe'\n  },\n  headerCenter: {\n    color: '#fff',\n    fontSize: 20,\n    fontWeight: 'bold'\n  },\n  renderImageContainer: {\n    marginTop: 20,\n    alignItems: 'center'\n  },\n  button: {\n    backgroundColor: '#97caef',\n    borderRadius: 10,\n    width: 150,\n    height: 50\n  },\n  buttonTitle: {\n    fontWeight: '600'\n  },\n  imageContainer: {\n    margin: 25,\n    alignItems: 'center'\n  },\n  imageDisplay: {\n    width: 300,\n    height: 300\n  },\n  title: {\n    fontSize: 36\n  },\n  hotdogEmoji: {\n    marginTop: 20,\n    fontSize: 90\n  }\n});\n\nexport default App;\n```\n\nIf you visit the storage section in Firebase, you can notice that each image is stored with a name of base64 binary string.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*CIWmTd4__kyKZRBBqQG0iw.png' />\n\n## Conclusion\n\nBy integrating Firebase storage and using Google's Vision API with React Native, you have completed this tutorial. The API is amazing with endless use cases. I hope you learned a thing or two by reading this post. The complete source code for this app is available at [this Github repo](https://github.com/amandeepmittal/not-hotdog-app). Some of the resources used in this post:\n\n- [react-native-elements](https://react-native-training.github.io/) UI component library\n- [expo-image-picker](https://docs.expo.io/versions/v34.0.0/sdk/imagepicker/#returns)\n- [firebase-storage-upload-example with expo](https://github.com/expo/firebase-storage-upload-example)\n\n[Originally published at Heartbeat](https://heartbeat.fritz.ai/build-a-not-hotdog-clone-with-react-native-8f9b9eb75bd2)\n",
            "url": "https://amanhimself.dev//blog/not-hotdog-clone-react-native",
            "title": "Build a Not Hotdog clone with React Native",
            "summary": "Build a Not Hotdog clone with React Native",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/building-offline-react-native-apps-with-asyncstorage",
            "content_html": "---\ntitle: 'Building offline React Native apps with AsyncStorage'\ndate: '2019-08-18'\nslug: 'building-offline-react-native-apps-with-asyncstorage'\nthumbnail: '/thumbnails/expo.png'\ntag: 'react-native'\ncanonicalUrl: 'https://heartbeat.fritz.ai/building-offline-react-native-apps-with-asyncstorage-dcb4b0657f93'\n---\n\n![cover](https://i.imgur.com/5eoYxcI.png)\n\n> [Originally published at Heartbeat](https://heartbeat.fritz.ai/building-offline-react-native-apps-with-asyncstorage-dcb4b0657f93)\n\nAs developers, we love exploring concepts and mechanisms while working with a new framework. React Native as a cross-platform development framework has come quite far in terms of a mature framework since I started playing around with it and then using it for its purpose. Understanding the fundamentals when learning it is something very helpful, and I consider, important.\n\nThus, applying basic fundamentals of React Native knowledge, in this tutorial, I am going to walk you through how to build a todo list application using an offline storage functionality. This storage functionality is provided by a native module in React Native, called `AsyncStorage`.\n\nIn the journey of building this application, you are going to use a UI component library known as [Native Base](https://docs.nativebase.io/docs/GetStarted.html), which is one of the most popular libraries to build user interfaces among React Native developers. Out of the box, this library speeds up the development process by providing pre-defined UI components that can either be used as they are available or customize them according to our needs.\n\n## What are we building?\n\nThe outcome from following this tutorial is going to be a complete React Native application that works with realtime offline data from the storage of the device.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*FBBSWT3Xztc0G9wAGnz1yA.gif' />\n\n## Table of Contents\n\n- Prerequisites\n- Create an Expo app\n- Exploring AsyncStorage\n- Utilizing AsyncStorage API\n- Adding Navigation\n- Creating a Floating Action Button (FAB)\n- Navigating between Two Screens\n- Customize the Header Component\n- Rendering a list of items using FlatList\n- Reading Data using AsyncStorage API\n- Adding a Todolist Item\n- Deleting a Todolist Item\n- Mark an Item Check or Uncheck on completion\n- Passing Data between different screens using the navigation\n- Display each todo list item\n- Bonus Section: Adding a Segment\n- Conclusion\n\n## Prerequisites\n\nTo follow this tutorial, please make sure you have the following installed on your local development environment and have access to the services mentioned below:\n\n- [Node.js](https://nodejs.org/en/) (>=`8.x.x`) with npm/yarn installed.\n- [expo-cli](https://docs.expo.io/versions/latest/workflow/expo-cli/?) (>=`3.0.4`), previously known as create-react-native-app.\n\nIt will be best if you use the same exact versions or higher of each utility tool described above. To run and test the React Native application, all you need is an Expo client installed either on your device or an iOS simulator or an Android emulator. Please note that, throughout this tutorial, I will be using an iOS simulator to demonstrate the application.\n\n## Create an Expo app\n\nTo get started, all you require is to generate a new Expo project. This could be done by opening a terminal window, navigating to a suitable location where you develop projects and running the following commands in the order they are described.\n\n```shell\nexpo init offline-todolist-app\n\n# navigate inside the app folder\ncd offline-todolist-app\n\n# install the following dependencies\nyarn add react-navigation native-base\nexpo-font@5.0.1 lodash.values uuid\n```\n\nThe last command, as described in the above snippet installs five dependencies that the application is going to use. `yarn` is currently being used as the package manager. You can also use `npm` instead of `yarn`. The use of each dependency will be made clear as throughout this tutorial as they are used. If this is your first time building a React Native application, try not to get overwhelmed by them.\n\n## Exploring AsyncStorage\n\n`AsyncStorage` is a simple, asynchronous key-value pair used in React Native applications. It is used for a variety of scenarios but mainly to store data when your app is not using any cloud services, or you want to implement some features in your app that require data storage.\n\nIt operates globally in a React Native and comes with its own limitations. As a React Native developer, you have to know what these limitations. The first limitation of an `AsyncStorage` API is that the size of the database is set to `6MB` limit. Also, `AsyncStorage` storage is based on SQLite. Thus, it is important to keep [SQLite limitations](https://www.sqlite.org/limits.html) in mind too. Also, it is hard to store complex and nested data structures in form of key-value pairs. Knowing about these limitations, only help you to opt for the persistent solution when developing a mobile app.\n\nAccording to the [React Native's official documentation](https://facebook.github.io/react-native/docs/asyncstorage):\n\n> On iOS, AsyncStorage is backed by native code that stores small values in a serialized dictionary and larger values in separate files. On Android, AsyncStorage will use either RocksDB or SQLite based on what is available.\n\n## Utilizing AsyncStorage API\n\nBefore you dive deep in building the Todolist app, in this section, let us build a small app that saves a value to the `AsyncStorage`, fetches the value from the storage in the client-side React Native app. This will help you how to write basic operations using the storage API. Lastly, you will learn about how to clear the storage completely.\n\nOpen `App.js` file and add the following snippet. Start by importing the necessary components from React Native API. The most important one here is `AsyncStorage`. After that, define a variable named `STORAGE_KEY`. This variable will be used to store and retrieve the stored data using the `AsyncStorage` API. Think of it as an identifier for the value being stored or name of the key in the key-value pair. Since you are going to store only one value at the moment, there is only the requirement for one key.\n\n```js\nimport React from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TextInput,\n  AsyncStorage,\n  TouchableOpacity\n} from 'react-native';\n\nconst STORAGE_KEY = '@save_name';\n```\n\nNext, let us define an initial state with two empty strings. They are going to be used to save the value of the user input and then retrieve the value to display it on the app screen. After defining the initial state, there is going to be a lifecycle method that is going to load the data when the application starts for the first time or the App component renders.\n\n```js\nclass App extends React.Component {\n  state = {\n    text: '',\n    name: ''\n  };\n\n  componentDidMount() {\n    this.retrieveData();\n  }\n\n  // ...\n}\n```\n\nIn the above snippet, do note that the `App` component is actually a class component and not the default functional component that comes with boilerplate Expo app. Now, there are going to be three methods that will help to store the data, retrieve the data, and clear the app data that is stored. This is going to be done by creating three asynchronous methods. Each of the methods is going to utilize the appropriate API method from `AsyncStorage` API. Every method in the `AsyncStorage` API is a promise-based, hence, let us use `async/await` syntax to follow good practice.\n\n```js\nretrieveData = async () => {\n  try {\n    const name = await AsyncStorage.getItem(STORAGE_KEY);\n\n    if (name !== null) {\n      this.setState({ name });\n    }\n  } catch (e) {\n    alert('Failed to load name.');\n  }\n};\n```\n\nIn the above snippet, the name of the method implies what they are going to do in the app. The `retrieveData` method is what fetches the data from the storage if it exists. It uses the same identifier that you defined previously, outside the class function component. It utilises the parameter in the state object `name`. Later in the app, you are going to use this parameter to display its stored value. Note that, there is an `if` condition inside this method. This condition says that to fetch the data only when there is a value for the `name` variable exists. This method also uses `try/catch` as they are part and parcel of writing functions with modern `async/await` syntax. Lastly, this method is being invoked inside the lifecycle method.\n\nThe next function is going to save the data. In the below snippet, you will find that it uses a parameter `name` which on success, is the value that is stored. An alert message will be shown when the input data is saved.\n\n```js\nsave = async name => {\n  try {\n    await AsyncStorage.setItem(STORAGE_KEY, name);\n    alert('Data successfully saved!');\n    this.setState({ name });\n  } catch (e) {\n    alert('Failed to save name.');\n  }\n};\n```\n\nThe last method that you are going to utilize from the `AsyncStorage` API is called `clear()`. This deletes everything that is previously saved. It is not recommended to use this method directly if you want to delete only a specific item from the storage. For that, there are methods like `removeItem` or `multiRemove` available by the API. You can read more about them in the official documentation [here](https://facebook.github.io/react-native/docs/asyncstorage#clear) or later when building the Todolist application.\n\n```js\nremoveEverything = async () => {\n  try {\n    await AsyncStorage.clear();\n    alert('Storage successfully cleared!');\n  } catch (e) {\n    alert('Failed to clear the async storage.');\n  }\n};\n```\n\nThis snippet will throw an `Alert` box on the device screen when everything is cleared from the storage.\n\nThe last two methods are going to be used to create a controlled input.\n\n```js\nonChangeText = text => this.setState({ text });\n\nonSubmitEditing = () => {\n  const onSave = this.save;\n  const { text } = this.state;\n\n  if (!text) return;\n\n  onSave(text);\n  this.setState({ text: '' });\n};\n```\n\nAfter that, add the code snippet for the `render` method, followed by the styles for each UI component. Lastly, do not forget to export `App` component for it to run on the simulator or the real device.\n\n```js\nrender() {\n        const { text, name } = this.state\n        return (\n            <View style={styles.container}>\n                <TextInput\n                    style={styles.input}\n                    value={text}\n                    placeholder='Type your name, hit enter, and refresh'\n                    onChangeText={this.onChangeText}\n                    onSubmitEditing={this.onSubmitEditing}\n                />\n                <Text style={styles.text}>Hello {name}!</Text>\n                <TouchableOpacity onPress={this.removeEverything} style={styles.button}>\n                    <Text style={styles.buttonText}>Clear Storage</Text>\n                </TouchableOpacity>\n            </View>\n        )\n    }\n} // class component App ends here\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'center'\n    },\n    text: {\n        fontSize: 20,\n        padding: 10,\n        backgroundColor: '#00ADCF'\n    },\n    input: {\n        padding: 15,\n        height: 50,\n        borderBottomWidth: 1,\n        borderBottomColor: '#333',\n        margin: 10\n    },\n    button: {\n        margin: 10,\n        padding: 10,\n        backgroundColor: '#FF851B'\n    },\n    buttonText: {\n        fontSize: 14,\n        color: '#fff'\n    }\n})\n\nexport default App\n```\n\nNow to run the application, go to the terminal window and execute the command `expo start`. After that, you will see the following screen on the simulator.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*92vU3B3f_FmUCXk8xKwtSg.png' />\n\nSince there is no data stored right now, the text after the word `Hello` is empty. Use the input field to save a string or a name or anything and then press the enter key. You will get the following output. Whatever input you entered, it will be displayed next to the word `Hello`.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*twgilQew9SwvBq2YnEbIqg.png' />\n\nEven if you refresh the Expo client, the value stored does not go away. Only when pressing the button below `Hello` statement that says `Clear Storage` is the way to delete the stored value.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*6yeaeFLns1JwU0wyeqMptQ.png' />\n\nRefresh the Expo client after you clear the storage to get the following output.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*CRhOwbo1d-iTUOEb0v-MAQ.png' />\n\nThis complete the section where you learned about how to utilize `AsyncStorage` API to save and fetch the data. From the next section onwards, you will be building the Todolist application.\n\n## Organizing the application\n\nSince a React Native application was already generated in the previous step, you can continue to utilize that app by modifying everything inside the `App.js` file. Or create a new one if it serves you well.\n\nYou have already installed the necessary npm modules. This is the time to start utilizing them in order to build the offline todo list app. Before beginning with the development of the app, create the following folders and files inside them. This will give a structure to manage the app later or if you want to extend by adding new features to it.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*kg7x_WrXqP6U13af4OBJsA.png' />\n\nFrom the structure, notice that there are three new folders being created. This structure is the separation of concerns between the different aspect of a mobile app. Such as files or configuration related to navigation should be separated from the screens. The above structure is also a common pattern that many React Native developers have started to follow in their work.\n\n## Adding Navigation\n\nInside the `navigation` folder, there is an `index.js` file that is going to hold all the configuration there is to be defined. The reason `react-navigation` module is used is to create a stack navigator that allows the user to visit the two screens the following application has. The navigation mode is going to be `modal`. Yes, you can utilize `pre-defined` navigation modes or animation patterns.\n\nLet us start by importing the necessary components inside the `index.js` file.\n\n```js\nimport React from 'react';\nimport { createStackNavigator, createAppContainer } from 'react-navigation';\nimport HomeScreen from '../screens/HomeScreen';\nimport AddTaskScreen from '../screens/AddTaskScreen';\n```\n\nFrom the above snippet, notice that the `createStackNavigator` is a function that returns a React component. It takes a route configuration object. The `createAppContainer` is responsible for linking the current React Native app while maintaining the navigation state from the top-level component. The top-level component in your app is `App`.\n\nWith the help of `createAppContainer`, you are going to create a provider and wrap the `App` component inside it. This will benefit the entire application as every screen or component defined is going to have a navigation state. You will learn some of the many benefits provided by the navigation state later.\n\nLastly, in the above snippet, there are going to be a screen component. These screen components are going to hold the business logic necessary to run the todo list app. You can think of them as containers.\n\nRight now, the route configuration object is going to be as the following snippet.\n\n```js\nconst StackNav = createStackNavigator(\n  {\n    Home: {\n      screen: HomeScreen\n    },\n    AddTask: {\n      screen: AddTaskScreen\n    }\n  },\n  {\n    mode: 'modal'\n  }\n);\n```\n\nThe `mode` is important to specify here. It defines the style for rendering the next screen component. In the above case, it is `AddTask` screen. In an iOS or Android app, the default transition is always a `card`. You are changing this default transition by specifying the `mode` property and setting its value to `modal`.\n\nThe `modal` pattern Make the screens slide in from the bottom, which is a common iOS pattern. Only works on iOS but has no effect on Android.\n\nLastly, you have to export the app container that utilizes the `StackNav`. Here is the code for that.\n\n```js\nconst RootNavigator = createAppContainer(StackNav);\n\nexport default RootNavigator;\n```\n\nNow, open `App.js` file and add the following content.\n\n```js\nimport React from 'react';\nimport RootNavigator from './navigation';\n\nexport default function App() {\n  return <RootNavigator />;\n}\n```\n\nBefore running the app, make sure there is a mock component to render inside the files `HomeScreen.js` and `AddTaskScreen.js`. Otherwise, it will throw an error. You can add the dummy component for now.\n\n```js\n// HomeScreen.js\nimport React, { Component } from 'react';\nimport { Text, View } from 'react-native';\n\nexport class HomeScreen extends Component {\n  render() {\n    return (\n      <View>\n        <Text> Offline Todolist App</Text>\n      </View>\n    );\n  }\n}\n\nexport default HomeScreen;\n\n// AddTaskScreen.js\nimport React, { Component } from 'react';\nimport { Text, View } from 'react-native';\n\nexport class AddTaskScreen extends Component {\n  render() {\n    return (\n      <View>\n        <Text>Add Task Screen</Text>\n      </View>\n    );\n  }\n}\n\nexport default AddTaskScreen;\n```\n\nNow run the app using `expo start` command, and you will get the following result.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*Mz6vFfwIwz7rWNIa9o-F4Q.png' />\n\nThis completes the navigation section.\n\n## Create a Floating button\n\nInside the `components/FloatingButton.js` file, you are going to create a floating action button or in mobile development, commonly known as FABs. These type of buttons are often distinguished by a circled icon floating above the UI in a fixed position. If you are an Android user or have seen a mobile app following any material design specification, you might have noticed them.\n\nIn the current app, this `FloatingButton` is going to be responsible for navigating from the `HomeScreen` to the `AddTaskScreen`. Since it is going to be a presentation component, you should define it as a functional component that accepts only one prop. This prop `actionOnPress` is going to be a method defined inside the `HomeScreen.js` file that will contain the logic of navigating between the two screens later.\n\nOne important thing to notice in the snippet below is that the component library `native-base` is being used to create the FAB button. It saves a good amount of time and lines of code to create and style a component like below.\n\n```js\nimport React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Icon, Fab } from 'native-base';\n\nconst FloatingButton = ({ actionOnPress }) => (\n  <Fab\n    direction=\"up\"\n    style={styles.button}\n    position=\"bottomRight\"\n    onPress={actionOnPress}\n  >\n    <Icon name=\"ios-add\" />\n  </Fab>\n);\n\nconst styles = StyleSheet.create({\n  button: {\n    backgroundColor: '#5859f2'\n  }\n});\n\nexport default FloatingButton;\n```\n\n## Navigating Between Two Screens\n\nOnce you have defined it, go to the file `HomeScreen.js` and the following snippet of code.\n\n```js\nimport React, { Component } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { AppLoading } from 'expo';\nimport * as Font from 'expo-font';\nimport FloatingButton from '../components/FloatingButton';\n\nexport class HomeScreen extends Component {\n  state = {\n    isDataReady: false\n  };\n  componentDidMount = () => {\n    this.loadFonts();\n  };\n\n  loadFonts = async () => {\n    try {\n      await Font.loadAsync({\n        Roboto: require('../node_modules/native-base/Fonts/Roboto.ttf'),\n        Roboto_medium: require('../node_modules/native-base/Fonts/Roboto_medium.ttf'),\n        Ionicons: require('../node_modules/native-base/Fonts/Ionicons.ttf')\n      });\n      this.setState({ isDataReady: true });\n    } catch (err) {\n      alert('Application Error. Cannot load fonts.');\n    }\n  };\n\n  onPressFab = () => {\n    this.props.navigation.navigate('AddTask');\n  };\n\n  render() {\n    const { isDataReady } = this.state;\n\n    if (!isDataReady) {\n      return <AppLoading />;\n    }\n    return (\n      <View style={styles.container}>\n        <Text>Home Screen</Text>\n        <FloatingButton actionOnPress={this.onPressFab} />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});\n\nexport default HomeScreen;\n```\n\nIn the above snippet, the first and important thing to notice is the `loadFonts` method. This asynchronous method is a requirement to make Native Base UI library to work in any React Native, and Expo generated application. NativeBase use some custom fonts that are loaded using `Font.loadAsync` function. This function is provided by the expo module `expo-font` which allows you to use any fonts or icons in React Native components.\n\nThe `AppLoading` method is a React component that tells Expo to keep the app loading screen visible until `Font.loadAsync()` the method has run successfully. In general, this a useful method to utilize when your app is using custom fonts, logos, icons, and so on. In the current application, you are going to utilize this React component again when fetching data from `AsyncStorage` API (_that you will see in action later in this tutorial_). The `AppLoading` will only stop running when the boolean value for the state variable `isDataReady` is set to true. This boolean value is only set to true when `Font.loadAsync()` has finished running.\n\nOnce the application has loaded all necessary fonts and icons, you will get the following result.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*AJUj06CEsej1vn7YUtj-Ow.png' />\n\nFrom the above snippet, take a look at the method `onPressFab` which is being passed to the `FloatingButton` component as the prop `actionOnPress`. This function utilizes a navigation method provided called `navigation.navigate()` with the value of the screen being passed as the argument: `AddTask`. Do note that, the value of the argument being passed should be the exact name of the screen defined earlier when configuring `StackNavigator`. Click on the button, and you will be directed to the next screen.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*Zfx3sB6akHo9tEILTQbHQg.gif' />\n\nDid you notice the `back` button on the `AddTaskScreen`? This is again where `react-navigation` comes in handy. While working on a real-time React Native application, you often want to use the `react-navigation` library if it suits your requirements. It provides simple solutions out of the box.\n\n## Customize the Header Component\n\nWith Native Base components library, it is easy to customize a header component in few lines of code. Inside the file `Header.js` add the following snippet. Again, this is a functional component since it is going to enhance the UI and is not running business logic.\n\n```js\nimport React from 'react';\nimport { Header as NBHeader, Body, Title } from 'native-base';\n\nconst Header = () => {\n  return (\n    <NBHeader style={{ backgroundColor: '#5859f2' }}>\n      <Body>\n        <Title style={{ color: '#ffffff' }}>Header</Title>\n      </Body>\n    </NBHeader>\n  );\n};\n\nexport default Header;\n```\n\nThe `Header` component from the `native-base` library takes a `Body` as an input. The body can further contain the rendering logic to modify the existing default `Header` component from the native base library itself. You can use inline styles or even `StyleSheet` object from `react-native` to customize the `Header` component as above, or any other native base UI component in general. Take a look at the `backgroundColor` and the `color` to the `Title`. `Title` is where the text to be displayed on this component goes.\n\nImport this component inside the `HomeScreen.js` file. Also, import the `StatusBar` component from the `react-native`. Since the background of the `Header` component is going to be a customize blue color, it is better to change the default dark `StatusBar` style into something pleasing and light.\n\n```js\nimport { View, Text, StyleSheet, StatusBar } from 'react-native';\nimport Header from '../components/Header';\n```\n\nInside the class component, the first thing you have to do is hide the header that is being provided by the stack navigator from `react-navigation` library. The object `navigationOptions` is how to customize the default navigators that `react-navigation` renders.\n\n```js\n    static navigationOptions = {\n        header: null\n  }\n```\n\nNext, inside the `render()` method add the following before the omnipresent `Text` component.\n\n```js\n<Header />\n<StatusBar barStyle='light-content' />\n<Text>Home Screen</Text>\n```\n\nThe rest of the code inside the `HomeScreen.js` file remains unchanged. The `StatusBar` is modified by defining the a value using its pre-defined prop `barStyle`. When using a Header component from Native Base UI library, the `StatusBar` from React Native comes after you define the JSX code for the header. Notice this in the above snippet. This is how it works with Native Base library. The following screen is what you get as the result of the above snippets.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*5m9TTlsGA60IeijZz4OfzA.png' />\n\n## Rendering a list of items using FlatList\n\nIn this section, you are going to set up a List component that accepts mock or dummy data from an array defined as a property to the initial state. Open `HomeScreen.js` file and modify the state for now.\n\n```js\nstate = {\n  isDataReady: false,\n  mockItems: ['First Item', 'Second Item', 'Third Item']\n};\n```\n\n_Why dummy data?_ Later when you are going to hook `AsyncStorage` API to save and fetch the data from the database, in other words, playing around with real-time data operations, there are going to be separate methods that are going to handle each of the data operations. For now, let us hook up the business logic to display a list of items as well as the ability to add a new item using the modal screen you have set up in the previous steps.\n\nThe `FlatList` component is the ideal way to display a list of items in a React Native application.\nIt is a cross-platform component, and by default a vertical way to display a list of data items. It requires two props: `data` and `renderItem`. The `data` is the source of information for the list in the form of an array. The `renderItem` takes one item from the source, iterates over them, and returns a formatted component to render those items.\n\nStyles that can be applied to a FlatList component is done by the prop `contentContainerStyle` that accepts the value of Stylesheet object. The reason to use `FlatList` is that it is performance effective. Of course, you can use `ScrollView` but it renders items from memory, which is not a very performant effective way to display a lengthy list of items. `ScrollView` is a wrapper on the View component that provides the user interface for scrollable lists inside a React Native app.\n\nIn the file `HomeScreen.js` replace the `Text` component with following `FlatList` and do not forget to import it and custom presentational component `Item` that is going to display each item in the list.\n\n```js\n// import statements\nimport { View, FlatList, StyleSheet, StatusBar } from 'react-native';\nimport Item from '../components/Item';\n\n// in render method, replace <Text> with the following\n<FlatList\n  data={this.state.mockItems}\n  contentContainerStyle={styles.content}\n  renderItem={row => {\n    return <Item text={row.item} />;\n  }}\n  keyExtractor={item => item.id}\n/>;\n```\n\nNow open the file `components/Item.js` and add the following snippet.\n\n```js\nimport React from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  Dimensions\n} from 'react-native';\n\nconst { width } = Dimensions.get('window');\n\nconst Item = ({ text }) => {\n  return (\n    <View style={styles.container}>\n      <View style={styles.rowContainer}>\n        <Text style={styles.text}>{text}</Text>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderBottomColor: '#5859f2',\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between'\n  },\n  rowContainer: {\n    flexDirection: 'row',\n    width: width / 2,\n    alignItems: 'center'\n  },\n  text: {\n    color: '#4F50DC',\n    fontSize: 18,\n    marginVertical: 20,\n    paddingLeft: 10\n  }\n});\n\nexport default Item;\n```\n\nAnother new React Native component to notice in the above snippet is `Dimensions`. It helps to set the initial `width` and `height` of a component before the application runs. We are using its `get()` method to acquire the current device's width and height.\n\nIn the simulator, you will get the following result.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*33XlaFACBb_SE4IsyLzIfg.png' />\n\n## Reading Data using AsyncStorage API\n\nIn this section, you are going to add all methods that will contain business logic to save and fetch the data from the `AsyncStorage`. This logic will be composed of three operations:\n\n- add a todolist item\n- fetch all items to display\n- delete an item from the list\n- also, check the state of each list item whether it is marked as completed or not\n\nThese operations are going to communicate with the realtime data on the device. You are going to use objects instead of an array to store these items. `AsyncStorage` operates on key-value pairs and not arrays. Each object is going to be identified through a unique ID. In order to generate unique IDs, you are going to use a module called `uuid` which was installed earlier.\n\nThe structure of each todo item is going to be like this:\n\n```js\n45745c60-7b1a-11e8-9c9c-2d42b21b1a3e: {\n  id: 45745c60-7b1a-11e8-9c9c-2d42b21b1a3e,           // same id as the object\n  textValue: 'New item',     // name of the ToDo item\n  isCompleted: false,   // by default, mark the item unchecked\n  createdAt: Date.now()\n}\n```\n\nBut if you are going to use Objects instead of an array, how are you going to iterate over each item in the object? `FlatList` component only takes an array to iterate. Well, do you remember installing a utility package called `lodash.values`? That package is going to be really helpful in converting the object into an array.\n\nFirst, let us start by importing all components and custom components required in order to build the application inside `HomeScreen.js` file.\n\n```js\nimport React, { Component } from 'react';\nimport {\n  FlatList,\n  View,\n  StatusBar,\n  StyleSheet,\n  AsyncStorage\n} from 'react-native';\nimport uuidv1 from 'uuid/v1';\nimport _values from 'lodash.values';\nimport { Button, Text as NBText } from 'native-base';\nimport { AppLoading } from 'expo';\nimport * as Font from 'expo-font';\nimport Header from '../components/Header';\nimport Item from '../components/Item';\nimport FloatingButton from '../components/FloatingButton';\n```\n\nAfter writing these import statements, let us modify the initial state.\n\n```js\nstate = {\n  todos: {},\n  isDataReady: false\n};\n```\n\nFrom the above snippet, do take a note that the dummy array of data is replaced by the object `todos`. Next, you are going to write an asynchronous method to load the todos items from the object that is stored using `AsyncStorage` API. Also, let us merge the previous asynchronous method to load all the fonts with this method, such as the value of the initial state `isDataReady` is set to the boolean `true` only once. You will also have to modify the contents of the lifecycle method.\n\n```js\ncomponentDidMount = () => {\n  this.loadTodos();\n};\n\nloadTodos = async () => {\n  try {\n    await Font.loadAsync({\n      Roboto: require('../node_modules/native-base/Fonts/Roboto.ttf'),\n      Roboto_medium: require('../node_modules/native-base/Fonts/Roboto_medium.ttf')\n    });\n\n    const getTodos = await AsyncStorage.getItem('todos');\n    const parsedTodos = JSON.parse(getTodos);\n    this.setState({ isDataReady: true, todos: parsedTodos || {} });\n  } catch (err) {\n    alert('Application Error. Cannot load data.');\n  }\n};\n```\n\n`AsyncStorage.getItem()` reads anything saved on the device database. It is essential to parse the data incoming from the storage into JSON. If you are not parsing the data, the application is going to crash. When setting the state in the above snippet, the `todos` object is getting the default value of an empty object is there is no data from the storage. This is also an essential step to perform and keep in mind for other use cases with similar scenarios.\n\n## Adding a Todolist Item\n\nNow, let us add the second method `addTodo` that is actually going to add the new item in the storage. The method defines before `addTodo` is actually storing the items in the storage. Again, you are using `JSON.stringify()` since AsyncStorage requires the data to be a string inside the single object. So when saving the item if you are not using `JSON.stringify()` your app is going to crash.\n\nThe `AsyncStorage.setItem()`is the function from the API that is similar to any key-value paired database. It takes the first argument, `todos` in the snippet below. This argument value is going to be the name of the store.\n\nThe parameter `newTask` passed to the `addTodo` function is going to be the object. Using `if` statement, there is a check whether the todo item being entered is not empty. `this.setState` uses a callback method that has access to `prevState` object. It gives any todo item that has been previously added to the list.\n\nInside the callback, you are first creating a new ID using `uuidv1` method. Then create an object called `newTodoObject` which uses the ID as a variable for the name. This object represents each item in the todo list.\n\nFurther, create a new object called `newState` which uses the `prevState` object, and finally adds `newTodoObject` object in todoliist of items. It might sound overwhelming since a lot is going on but try implementing the code, you will understand it better.\n\n```js\nsaveTodos = newToDos => {\n  const saveTodos = AsyncStorage.setItem('todos', JSON.stringify(newToDos));\n};\n\naddTodo = newTask => {\n  const newTodoItem = newTask;\n\n  if (newTodoItem !== '') {\n    this.setState(prevState => {\n      const ID = uuidv1();\n      const newToDoObject = {\n        [ID]: {\n          id: ID,\n          isCompleted: false,\n          textValue: newTodoItem,\n          createdAt: Date.now()\n        }\n      };\n      const newState = {\n        ...prevState,\n        todos: {\n          ...prevState.todos,\n          ...newToDoObject\n        }\n      };\n      this.saveTodos(newState.todos);\n      return { ...newState };\n    });\n  }\n};\n```\n\n## Deleting a Todolist Item\n\nSimilar to the `addTodo` method, you are going to add another method called `deleteTodo`. This will take care of removing an individual item from the list on the basis of `id` of that item object. Since you are using the `id` of the object both to identify the object inside the bigger object `todos` and assign each individual object the same `id`, the following code saves a lot of time. At last, using the `saveTodos` method, the storage is being updated with a remaining number of items.\n\n```js\ndeleteTodo = id => {\n  this.setState(prevState => {\n    const todos = prevState.todos;\n    delete todos[id];\n    const newState = {\n      ...prevState,\n      ...todos\n    };\n    this.saveTodos(newState.todos);\n    return { ...newState };\n  });\n};\n```\n\n## Mark a Todo Item Check or Uncheck on completion\n\nThe last two methods that are going to take care of whether each individual item is checked or not are going to be represented by `inCompleteTodo` and `completeTodo` methods. Both of these methods are going track which items in the to-do list have been marked completed by the user or have been unmarked.\n\nThey are going to act as a toggle and only update the value of `isCompleted` instead rather updating the whole todo list item object. This is again, possible because of a unique `id` for each object. Again in the last, before each of the methods returns the new state, using the `saveTodos` method, the storage gets an update.\n\n```js\ninCompleteTodo = id => {\n  this.setState(prevState => {\n    const newState = {\n      ...prevState,\n      todos: {\n        ...prevState.todos,\n        [id]: {\n          ...prevState.todos[id],\n          isCompleted: false\n        }\n      }\n    };\n    this.saveTodos(newState.todos);\n    return { ...newState };\n  });\n};\n\ncompleteTodo = id => {\n  this.setState(prevState => {\n    const newState = {\n      ...prevState,\n      todos: {\n        ...prevState.todos,\n        [id]: {\n          ...prevState.todos[id],\n          isCompleted: true\n        }\n      }\n    };\n    this.saveTodos(newState.todos);\n    return { ...newState };\n  });\n};\n```\n\n## Passing Data between different screens using the navigation\n\nIn this section, you are going to edit each render method that is responsible for displaying the interface for the operations you defined in the previous sections, to happen in realtime. Let us start by editing `onPressFab` method inside the `HomeScreen.js`.\n\nThis method right navigates to the `AddTaskScreen`. By passing an object with to add a new item to the list (_hence, pass the method addTodo_) you are going to utilize another advantage that a sleek library `react-navigation` provides. That is, to pass data between different screens.\n\nFirst, edit the `onPressFab` method like the below snippet.\n\n```js\nonPressFab = () => {\n  this.props.navigation.navigate('AddTask', {\n    saveItem: this.addTodo\n  });\n};\n```\n\nNext, open `AddTaskScreen.js` and add the following snippet.\n\n```js\nimport React, { Component } from 'react';\nimport { View } from 'react-native';\nimport { Form, Item, Input, Button, Text as NBText } from 'native-base';\n\nexport class AddTaskScreen extends Component {\n  state = {\n    text: ''\n  };\n\n  onChangeText = event => {\n    this.setState({ task: event.nativeEvent.text });\n  };\n\n  onAddTask = () => {\n    this.props.navigation.state.params.saveItem(this.state.task);\n    this.props.navigation.goBack();\n  };\n\n  render() {\n    return (\n      <View>\n        <View style={{ marginRight: 10 }}>\n          <Form>\n            <Item>\n              <Input\n                value={this.state.task}\n                placeholder=\"Enter a new task...\"\n                autoFocus\n                clearButtonMode=\"always\"\n                autoCorrect={false}\n                onChange={this.onChangeText}\n                onSubmitEditing={this.onAddTask}\n                returnKeyType={'done'}\n              />\n            </Item>\n          </Form>\n        </View>\n        <View style={{ marginTop: 20 }}>\n          <Button\n            style={{\n              backgroundColor: '#5067FF',\n              margin: 25,\n              justifyContent: 'center'\n            }}\n            onPress={this.onAddTask}\n          >\n            <NBText style={{ fontWeight: 'bold' }}>Add Task</NBText>\n          </Button>\n        </View>\n      </View>\n    );\n  }\n}\n\nexport default AddTaskScreen;\n```\n\nThe snippet above uses the native base library to create a controlled input form to let the user add a new item to the todo list. Next, it has a button to add the item. Since the `Input` component from Native Base is based on the React Native's `TextInput`, you can use all the props that are available to `TextInput`.\n\nAlso, take a note that, to create an input field when using Native base as the UI library, the `Input` component has to be wrapped by an `Item` which is further wrapped inside `Form` element.\n\nHere is a brief overview of the props used in the above snippet.\n\n- **value**: the value of the text input. By default, it will be an empty string since we are using the local state to set it. As the state updates, the value of the text input updates.\n- **placeholder**: just like in HTML, a placeholder is to define a default message in the input field indicating as if what is expected.\n- **onChange**: is a callback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler `onChangeText`. This handler accepts the text value from `event.nativeEvent`.\n- **clearButtonMode**: a clear button should appear on the right side of the text view. The default value is `never` that you are modifying to `always` in the above component.\n- **returnKeyType**: determines how the return key on the device's keyboard should look. You can find more values or platform-specific values here. Some of the values are specific to each platform.\n- **autoCorrect**: this prop let us decide whether to show the autocorrect bar along with keyboard or not. In the current case, you have set it to false.\n- **onSubmitEditing**: contains the business the logic in the form of a callback as to what to do when the return key or input's submit button is pressed. We will be defining this callback in Main.js.\n\nLastly, take a look at the method `onAddTask` which uses navigation state to save the text value of the todo item. After use presses the button or the handler `onSubmitEditing` triggers, it is going to further run the method `addTodo` from `HomeScreen` and navigate back to the `HomeScreen` itself, using the navigation props method `goBack()`.\n\nOn Clicking the Fab button, you get the following screen.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*DZNwtEddDkxQz8ZCDwqB5w.png' />\n\n## Display each todo list item\n\nTo display each todo list item, you will have first to pass the props as shown below using the `renderItem` in the `FlatList`.\n\n```js\n<Item\n  isCompleted={row.item.isCompleted}\n  textValue={row.item.textValue}\n  id={row.item.id}\n  deleteTodo={this.deleteTodo}\n  completeTodo={this.completeTodo}\n  inCompleteTodo={this.inCompleteTodo}\n/>\n```\n\nNext, go to `Item.js` file and add the following snippet.\n\n```js\nimport React from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  Dimensions\n} from 'react-native';\nimport { Icon } from 'native-base';\n\nconst { width } = Dimensions.get('window');\n\nconst Item = ({\n  inCompleteTodo,\n  completeTodo,\n  textValue,\n  id,\n  deleteTodo,\n  isCompleted\n}) => {\n  toggleItem = () => {\n    if (isCompleted) {\n      inCompleteTodo(id);\n    } else {\n      completeTodo(id);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.rowContainer}>\n        <TouchableOpacity onPress={this.toggleItem}>\n          <Icon\n            name={isCompleted ? 'checkmark-circle' : 'radio-button-off'}\n            style={{ paddingLeft: 10, color: '#7A7AF6' }}\n          />\n        </TouchableOpacity>\n\n        <Text\n          style={[\n            styles.text,\n            {\n              opacity: isCompleted ? 0.5 : 1.0,\n              textDecorationLine: isCompleted ? 'line-through' : 'none',\n              color: isCompleted ? '#7A7AF6' : '#4F50DC'\n            }\n          ]}\n        >\n          {textValue}\n        </Text>\n      </View>\n      <TouchableOpacity onPressOut={() => deleteTodo(id)}>\n        <Icon name=\"md-trash\" style={{ color: '#ABADF9', paddingRight: 10 }} />\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderBottomColor: '#5859f2',\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between'\n  },\n  text: {\n    color: '#4F50DC',\n    fontSize: 18,\n    marginVertical: 20,\n    paddingLeft: 10\n  },\n\n  rowContainer: {\n    flexDirection: 'row',\n    width: width / 2,\n    alignItems: 'center'\n  }\n});\n\nexport default Item;\n```\n\nIn the above snippet, the key points to note are, using Native Base, you can use the `Icon` component (_since you are already loading the Ionicons library in the parent component asynchronously_). Next, the props `Item` components receive are to toggle an item's state of whether it is complete or not, display the text value of the item and lastly, a button to delete the item itself.\n\nSave the component file, hop back on the simulator file, and try adding one or many items in this list.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*dceKxEqQMGXk0h_-J75gFg.gif' />\n\nSee everything works. Even on refreshing the app, and the items do not disappear.\n\n## Bonus Section: Adding a Segment\n\nIn this section, you are going to separate the UI for managing the completed list of items and items that are pending to be done. To provide this feature, you are going to use Native Base library solely.\n\nKeeping the data source same from the storage API, let modify the state by adding one more property. Open `HomeScreen.js` file and add the following.\n\n```js\n// add \"filter\" to existing the state\nstate = {\n  todos: {},\n  isDataReady: false,\n  filter: 'Todo'\n};\n```\n\nThe value of the `filter` is going to be `Todo` by default. This means it is going to show the pending todo list items as the home screen to the user.\n\nNext, you are going to add another handler function called `filteredItems`. This method will evaluate the value of the state and filter the values from the `todos` to match the state. Again, to use JavaScript filter method, you are going to convert `todos` object using lodash method `_values`.\n\n```js\nfilteredItems = () => {\n  if (this.state.filter === 'Todo') {\n    return _values(this.state.todos).filter(i => {\n      return !i.isCompleted;\n    });\n  }\n  if (this.state.filter === 'Complete') {\n    return _values(this.state.todos).filter(i => {\n      return i.isCompleted;\n    });\n  }\n  return this.state.todos;\n};\n```\n\nNext, let us modify the render method to achieve the desired result. Inside the render method, you are going to add a new UI element from Native base called `Segment`. This is going to display two buttons, each of which can be activated when pressed. The activation of each this button depends on the value of the state property `filter`.\n\n```js\n// import Segment from Native Base\nimport { Button, Text as NBText, Segment } from 'native-base'\n\n// inside the render method...\n\nconst { isDataReady, filter } = this.state\n\n// just before flatlist add a new view\n\n    <View style={styles.contentHeader}>\n        <Segment style={{ backgroundColor: '#ffffff' }}>\n            <Button active={filter === 'Todo'} onPress={() => this.setState({ filter: 'Todo' })}>\n                <NBText>Todo</NBText>\n            </Button>\n            <Button\n                last\n                active={filter === 'Complete'}\n                onPress={() => this.setState({ filter: 'Complete' })}\n            >\n                <NBText>Complete</NBText>\n            </Button>\n        </Segment>\n    </View>\n\n// styles corresponding to the new View element\n\ncontentHeader: {\n    alignItems: 'center',\n    justifyContent: 'center'\n}\n```\n\nLastly, change the value of the `data` prop on `FlatList` and set it to the item returned from the method `filteredItems()`.\n\n```js\n<FlatList\n  data={_values(this.filteredItems())}\n  // rest remains same\n/>\n```\n\nYou will get the following result.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*FBBSWT3Xztc0G9wAGnz1yA.gif' />\n\n## Conclusion\n\n_Congratulations!_ You have just learned how to build an offline mobile application using latest tech stack and libraries like React Native, Expo, and Native Base component UI. You have learned many key points in this tutorial, and I hope you enjoyed following it, and reading it. Use the knowledge you have gained in this tutorial in a realtime application and show it to your peers. The possibilities to enhance this application or the use the knowledge is endless.\n",
            "url": "https://amanhimself.dev//blog/building-offline-react-native-apps-with-asyncstorage",
            "title": "Building offline React Native apps with AsyncStorage",
            "summary": "Building offline React Native apps with AsyncStorage",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/how-to-use-the-geolocation-api-in-a-react-native-app",
            "content_html": "---\ntitle: 'How to use the Geolocation API in a React Native app'\nslug: 'how-to-use-the-geolocation-api-in-a-react-native-app'\ndate: '2019-08-16'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://heartbeat.fritz.ai/how-to-use-the-geolocation-api-in-a-react-native-app-b5e611b00a0c'\n---\n\nGeolocation as an API has different methods that can be used in a web application. But it’s also a powerful API for mobile development. Ride share mobile apps like Uber, map app like Google Maps, and location features implemented in apps like Instagram depend on using this API. React Native takes advantage of this API and its available methods by extending the [**Geolocation Web specification**](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation).\n\nThe Geolocation API returns different methods such as `getCurrentPosition` to get the current location and `watchPosition` to subscribe to location updates. They are available in React Native as polyfill.\n\nAlong with this, you’re going to implement a real-time feature to ask **user permissions**. Permissions in `react-native-cli` can be a bit tricky, but after reading this article, it should be much easier.\n\n### What are we building?\n\nIn this tutorial, we’ll start by going to use basic methods from the Geolocation API and then build a complete app in React Native using a `react-native` command-line interface tool.\n\nThe outcome of following this tutorial is going to be a complete React Native weather application that consumes weather data from a third-party API and presents that data in a simple UI.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*PMstW38hq0Zza4T8mZr6qg.png' />\n\n### Table of Contents\n\n- Getting Started with `react-native-cli`\n- Accessing Geolocation API\n- Setting Permissions for iOS and Android\n- Building the Weather App: First Steps\n- The Loading Component\n- Weather Screen\n- Fetching the Data\n- Adding Dynamic Weather Conditions\n- Conclusion\n\n### Prerequisites\n\nTo follow this tutorial, please make sure you have the following installed on your local development environment and have access to the services mentioned below:\n\n- [Node.js](https://nodejs.org/en/) (>=`8.x.x`) with npm/yarn installed.\n- `react-native` CLI tool with a version equal to or above `2.0.1`. You can install the CLI tool with the following command.\n\n```shell\nnpm install -g react-native-cli\n```\n\n> Please note that, throughout this tutorial, I’ll be using an iOS simulator to demonstrate the application.\n\n### Getting Started\n\nTo get started, we need to initialize a new React Native project. Run the command below:\n\n```shell\nreact-native init geoWeatherApp\n```\n\nThen traverse into the newly-created directory and run the following commands to see if everything is working fine.\n\n```shell\ncd geoWeatherApp\nnpm run start\n\n## in second tab/window terminal\nreact-native run-ios\n```\n\nThe second command will run the build process for the iOS platform. You can run `react-native run-android` if you wish to you use an Android emulator. Since our application is ‘bare minimum’ right now and doesn’t contain much source code, except in the `App.js` file, you’ll see the image below when the app runs for the first time in the simulator.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*T3QXVm1-unXEjKEZhmKo7A.png' />\n\nIf you take a look at the project structure, you’ll notice that there are separate build folders such as `/android` and `/ios` for each platform to bootstrap the application.\n\n### Accessing the Geolocation API\n\nThe Geolocation API exists as a global object called navigator object in React Native, just like the web. It’s accessible through `navigator.geolocation` in our source code, and there’s no need to import it.\n\nFor our demonstration purposes, we’ll use the `getCurrentPosition` method from the Geolocation API. This method allows a mobile app to request a user's location and accepts three parameters: success callback, error callback, and a configuration object.\n\nWe’ll only modify the `App.js` file with the following code:\n\n```js\n// App.js\n\nimport React, { Component } from 'react';\nimport { Alert, StyleSheet, Text, View, TouchableOpacity } from 'react-native';\n\nexport default class App extends Component {\n\tstate = {\n\t\tlocation: null\n\t};\n\n\tfindCoordinates = () => {\n\t\tnavigator.geolocation.getCurrentPosition(\n\t\t\tposition => {\n\t\t\t\tconst location = JSON.stringify(position);\n\n\t\t\t\tthis.setState({ location });\n\t\t\t},\n\t\t\terror => Alert.alert(error.message),\n\t\t\t{ enableHighAccuracy: true, timeout: 20000, maximumAge: 1000 }\n\t\t);\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<View style={styles.container}>\n\t\t\t\t<TouchableOpacity onPress={this.findCoordinates}>\n\t\t\t\t\t<Text style={styles.welcome}>Find My Coords?</Text>\n\t\t\t\t\t<Text>Location: {this.state.location}</Text>\n\t\t\t\t</TouchableOpacity>\n\t\t\t</View>\n\t\t);\n\t}\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center',\n\t\tbackgroundColor: '#F5FCFF'\n\t},\n\twelcome: {\n\t\tfontSize: 20,\n\t\ttextAlign: 'center',\n\t\tmargin: 10\n\t}\n```\n\nObserve the function `findCoordinates`. It holds the logic of fetching a device's current location. We’re also using the local state object to store and display the returned data object provided by `position`.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*LmcWwnrsZOXkGbmagtx7Mw.png' />\n\nWhen you click the text `Find My Coords?` (it’s touchable since we’re using `TouchableOpacity`) it will first ask for permission, as shown below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*72jjzVbVBLl-mTdk_vMA7w.png' />\n\nNote that even in development mode and while running the app in a simulator, permission is only asked for once. To perform this again, you’ll have to delete the app from your simulator and re-run the command to start the Expo app. When permission is granted, it will fetch the result, store it in the app’s state, and display the returned object:\n\n<img src='https://cdn-images-1.medium.com/max/800/1*K5bwsAxiRQm0Z2qImvniaA.png' />\n\n### Setting Permissions for iOS and Android\n\nIn iOS, geolocation is enabled by default when a project is created using the `react-native-cli`. To use it, we just need to include a key in `info.plist`, which is inside the `ios/geoWeatherApp` directory.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*2be8SbVAPPukbDgPUsl29g.png' />\n\nThat field is already there if you check the file. In order to enable geolocation in the background, you need to include the `NSLocationAlwaysUsageDescription` key in `info.plist` file and add location as a background mode in the `Capabilities` tab through Xcode. Also, if you’re using CocoaPods for React Native, make sure to include the `RCTGeolocation` sub-podspec.\n\nFor Android, we need to add the following line in our `android/app/src/AndroidManifest.xml` file.\n\n```xml\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n```\n\n<img src='https://cdn-images-1.medium.com/max/800/1*lDejJzVSE6YGIRGT_Lgbjw.png' />\n\nNow if you run your application in the Android Emulator, you’ll see the same welcome screen as shown before in the iOS simulator. Click on the text `Find My Coords?` and you’ll be prompted to ask whether to allow the application to request the user’s location or not.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*gJVJOiCG4NO45iEnmwfdtA.png' />\n\nIf you press allow, you’ll see the following result.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*H9Pj8TlBfWqlrtZfmPWteQ.png' />\n\nYou can find the complete code for this part of the tutorial in the repository below.\n\n### Building the Weather App: First Steps\n\nIn this section, we’re going to take what we learned in the last section and build a complete weather application using a third party weather API provider—such as the [OpenWeatherMap API](https://openweathermap.org/api)—and our current Geolocation API knowledge.\n\nFirst, we need to gather the API key from [OpenWeatherMap](https://openweathermap.org/api). Sign in or make a new account if you don’t already have one (it’s free, no worries). Using this API, we’re going to build a simple mobile application that uses a mobile device’s geolocation. The coordinates from a user’s location will be passed to the OpenWeatherMap API which, in return, will give us a forecast for that location.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*8yiknE8jK7gnClfanEsSfw.png' />\n\nOnce you’re logged in, visit [**https://home.openweathermap.org/api_keys**](https://home.openweathermap.org/api_keys) to fetch your API key. There’s a default API key provided by OpenWeatherMap, so we’re going to use that in our project.\n\nNow, open up your `App.js` file and enter the following snippet of code to see if everything is working well:\n\n```js\n// App.js\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text>Minimalist Weather App</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n```\n\nAnd you’ll see the following output is rendered.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*mXaHYMh_TgpEeJjrKFz2ug.png' />\n\nThe next step is to install [**react-native-vector-icons**](https://oblador.github.io/react-native-vector-icons/). If you’ve already installed react-native-vector-icons, then you can skip this step. Otherwise, enter the following command in your terminal window.\n\n```shell\nnpm install -S react-native-vector-icons\n```\n\nThe last step in this process is to link our newly-installed library.\n\n```shell\nreact-native link react-native-vector-icons\n```\n\n**_Why do we have to perform this last command?_** All third-party libraries in React Native have some native dependencies that use platform-specific capabilities for iOS and/or Android. Linking these native dependencies with the `react-native link` command indicates that a library’s native dependencies are linked successfully to your iOS/Android project.\n\nWhenever you link a library, you’ll always get a prompt message informing you whether the library has been successfully linked or not. Since we’ve already added permissions to ask and access a user’s location in this project, we can skip this and continue to the next step. If you’re building this project from scratch, you can go back to the section [**Setting Permissions for iOS and Android**](#d8df) and add the necessary permissions.\n\n### The Loading Component\n\nIn this step, we’ll develop our first screen—a loading screen. Inside the `App.js` file, start by defining a local state:\n\n```js\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default class App extends React.Component {\n  state = {\n    isLoading: true\n  };\n\n  render() {\n    const { isLoading } = this.state;\n    return (\n      <View style={styles.container}>\n        {isLoading ? null : (\n          <View>\n            <Text>Minimalist Weather App</Text>\n          </View>\n        )}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n```\n\nThe code above states that when the value of local state for `isLoading` is `false`, it’s going show the name of the value of the `<Text>` component, which in this case is the name of the application. This is what we’re going to render.\n\nLater on, instead of displaying the name of the application, we’ll show the weather info here, once our API has successfully fetched the data. For now, let’s stick to this message so we can first work on the question: _What if our app is in the state of loading?_ Let's add the message text to indicate that the app is fetching the data. Change the content of `render()`:\n\n```js\nrender() {\n    const { isLoading } = this.state;\n    return (\n      <View style={styles.container}>\n        {isLoading ? (\n          <Text>Fetching The Weather</Text>\n        ) : (\n          <View>\n            <Text>Minimalist Weather App</Text>\n          </View>\n        )}\n      </View>\n    );\n}\n```\n\nRight now, if you change to value of `isLoading` to true, you’ll notice the below screen appear.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*fo8IAFglmCCWcBkSTiigLQ.png' />\n\n> Note: After testing for the above screen, make sure you set the default value of `isLoading` to false.\n\n### Weather Screen\n\nWe’ll define a new weather component at `./components/Weather.js`. The boilerplate code for every weather condition screen is going to be the same. It will be divided into two views—a header and a body. The header will show the weather condition icon and temperature, and the body will display the text associated with the weather condition.\n\nIn `Weather.js`, we start by defining two containers inside the main container: `headerContainer` and `bodyContainer`. Do note that we’re defining the `Weather` component not as a class but as a function in order to receive props and since it won’t be managing a state.\n\n```js\n// Weather.js\nimport React from 'react';\nimport { View, Text, Stylesheet } from 'react-native';\n\nconst Weather = () => {\n  return (\n    <View style={styles.container}>\n      <View style={styles.headerContainer} />\n      <View style={styles.bodyContainer} />\n    </View>\n  );\n};\n\nconst styles = StyleSheet({\n  container: {\n    flex: 1\n  },\n  headerContainer: {},\n  bodyContainer: {}\n});\n\nexport default Weather;\n```\n\nI’m going to use `MaterialCommunityIcons` to display weather icons in the app.\n\n```js\nimport React from 'react';\nimport { View, Text, Stylesheet } from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\n\nconst Weather = () => {\n  return (\n    <View style={styles.weatherContainer}>\n      <View style={styles.headerContainer}>\n        <Icon size={48} name=\"weather-sunny\" color={'#fff'} />\n        <Text style={styles.tempText}>Temperature˚</Text>\n      </View>\n      <View style={styles.bodyContainer}>\n        <Text style={styles.title}>So Sunny</Text>\n        <Text style={styles.subtitle}>It hurts my eyes!</Text>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  weatherContainer: {\n    flex: 1,\n    backgroundColor: '#f7b733'\n  },\n  headerContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  tempText: {\n    fontSize: 48,\n    color: '#fff'\n  },\n  bodyContainer: {\n    flex: 2,\n    alignItems: 'flex-start',\n    justifyContent: 'flex-end',\n    paddingLeft: 25,\n    marginBottom: 40\n  },\n  title: {\n    fontSize: 48,\n    color: '#fff'\n  },\n  subtitle: {\n    fontSize: 24,\n    color: '#fff'\n  }\n});\n\nexport default Weather;\n```\n\nTo see it in action, let’s modify `App.js`. Import the `Weather` component and then make changes to the `render()` function accordingly:\n\n```js\n// App.js\nimport Weather from './components/Weather';\n\n\n// ...\nrender() {\n\t\tconst { isLoading } = this.state;\n\t\treturn (\n\t\t\t<View style={styles.container}>\n\t\t\t\t{isLoading ? <Text>Fetching The Weather</Text> : <Weather />}\n\t\t\t</View>\n\t\t);\n  }\n```\n\n<img src='https://cdn-images-1.medium.com/max/800/1*dOKWGbyK8rLkcJb57lE8YQ.png' />\n\n### Fetching the Data\n\nTo fetch real-time weather data, I found the OpenWeatherMap API to be highly useful and consistent. To communicate with the API, you’ll need an API key (as discussed previously). To store the API key in our app, create a new file called `./utils/WeatherApiKey.js`.\n\n```js\nexport const API_KEY = '849338767c0e95025b5559533d26b7c4';\n```\n\nThe way the OpenWeatherMap API works is that we need to feed it longitude and latitude coordinates from the device’s location. It then fetches the data from its server as a JSON object. From the server, we now need two things: the temperature, and the weather condition. We should have both stored in the local state in `App.js`.\n\n```js\nstate = {\n  isLoading: false,\n  temperature: 0,\n  weatherCondition: null,\n  error: null\n};\n```\n\nWe start by importing the API key we just defined, then updating our state with `temperature`, `weatherCondition`, and `error`. We need a lifecycle method to re-render the component once the data is fetched from the API. For this purpose, `componentDidMount()` works best. Add the below snippet before the `render()` function in `App.js`:\n\n```js\ncomponentDidMount() {\n\t\tnavigator.geolocation.getCurrentPosition(\n\t\t\tposition => {\n\t\t\t\tthis.fetchWeather(position.coords.latitude, position.coords.longitude);\n\t\t\t},\n\t\t\terror => {\n\t\t\t\tthis.setState({\n\t\t\t\t\terror: 'Error Getting Weather Conditions'\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n\n\tfetchWeather(lat = 25, lon = 25) {\n\t\tfetch(\n      `http://api.openweathermap.org/data/2.5/\n      weather?lat=${lat}&lon=${lon}&APPID=${API_KEY}\n      &units=metric`\n\t\t)\n\t\t\t.then(res => res.json())\n\t\t\t.then(json => {\n\t\t\t\tthis.setState({\n\t\t\t\t\ttemperature: json.main.temp,\n\t\t\t\t\tweatherCondition: json.weather[0].main,\n\t\t\t\t\tisLoading: false\n\t\t\t\t});\n\t\t\t});\n  }\n```\n\nWe’re also using JavaScript’s `navigator` API to get the current location. (_This is where a JavaScript API will communicate with a native one using a bridge._) We pass on the values of latitude and longitude to our custom function `fetchWeather`, where the OpenWeatherMap API is called.\n\nThe result we get is in JSON format, and if you console log it, you’ll be able to see the result as a JSON object in the Expo terminal, where there are a lot of values. We need only the temperature value and weather condition. We then update our local state with the new values obtained. `&units=metric` at the end of our API call converts the temperature from Kelvin to Celsius.\n\nNow all we have to do is pass the two values of our local state as props to the `Weather` component and then update it so that it can receive those props:\n\n```js\n<Weather\n  weather={this.state.weatherCondition}\n  temperature={this.state.temperature}\n/>\n```\n\nThen, update `Weather.js` accordingly to use props:\n\n```js\nconst Weather = ({ weather, temperature }) => {\n  return (\n    <View style={styles.weatherContainer}>\n      <View style={styles.headerContainer}>\n        <MaterialCommunityIcons size={48} name=\"weather-sunny\" color={'#fff'} />\n        <Text style={styles.tempText}>{temperature}˚</Text>\n      </View>\n      <View style={styles.bodyContainer}>\n        <Text style={styles.title}>{weather}</Text>\n        <Text style={styles.subtitle}>It hurts my eyes!</Text>\n      </View>\n    </View>\n  );\n};\n```\n\nThe result will be as follows:\n\n<img src='https://cdn-images-1.medium.com/max/800/1*pIZuRJJlYJwrNkm2we-8PA.png' />\n\n### Adding Dynamic Weather Conditions\n\nSince we’ve done the hard part of fetching the real-time data, we need to make the `Weather` component behave [dynamically based on the values](https://openweathermap.org/weather-conditions) it’s getting. This entire dynamic behavior will be associated with `weatherCondition`.\n\nUsing `weatherCondition`, we can define changes in our background, title, subtitle, and weather icon. Let's start by pre-defining weather conditions in a file, `./utils/WeatherConditions.js`:\n\n```js\nexport const weatherConditions = {\n  Rain: {\n    color: '#005BEA',\n    title: 'Raining',\n    subtitle: 'Get a cup of coffee',\n    icon: 'weather-rainy'\n  },\n  Clear: {\n    color: '#f7b733',\n    title: 'So Sunny',\n    subtitle: 'It is hurting my eyes',\n    icon: 'weather-sunny'\n  },\n  Thunderstorm: {\n    color: '#616161',\n    title: 'A Storm is coming',\n    subtitle: 'Because Gods are angry',\n    icon: 'weather-lightning'\n  },\n  Clouds: {\n    color: '#1F1C2C',\n    title: 'Clouds',\n    subtitle: 'Everywhere',\n    icon: 'weather-cloudy'\n  },\n\n  Snow: {\n    color: '#00d2ff',\n    title: 'Snow',\n    subtitle: 'Get out and build a snowman for me',\n    icon: 'weather-snowy'\n  },\n  Drizzle: {\n    color: '#076585',\n    title: 'Drizzle',\n    subtitle: 'Partially raining...',\n    icon: 'weather-hail'\n  },\n  Haze: {\n    color: '#66A6FF',\n    title: 'Haze',\n    subtitle: 'Another name for Partial Raining',\n    icon: 'weather-hail'\n  },\n  Mist: {\n    color: '#3CD3AD',\n    title: 'Mist',\n    subtitle: \"Don't roam in forests!\",\n    icon: 'weather-fog'\n  }\n};\n```\n\nThese weather conditions are provided from the OpenWeatherMap API. Then, let’s import them in `Weather.js`:\n\n```js\nimport React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\n\nimport { weatherConditions } from '../utils/WeatherConditions';\n\nconst Weather = ({ weather, temperature }) => {\n  return (\n    <View\n      style={[\n        styles.weatherContainer,\n        { backgroundColor: weatherConditions[weather].color }\n      ]}\n    >\n      <View style={styles.headerContainer}>\n        <Icon size={72} name={weatherConditions[weather].icon} color={'#fff'} />\n        <Text style={styles.tempText}>{temperature}˚</Text>\n      </View>\n      <View style={styles.bodyContainer}>\n        <Text style={styles.title}>{weatherConditions[weather].title}</Text>\n        <Text style={styles.subtitle}>\n          {weatherConditions[weather].subtitle}\n        </Text>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  weatherContainer: {\n    flex: 1\n  },\n  headerContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  tempText: {\n    fontSize: 48,\n    color: '#fff'\n  },\n  bodyContainer: {\n    flex: 2,\n    alignItems: 'flex-start',\n    justifyContent: 'flex-end',\n    paddingLeft: 25,\n    marginBottom: 40\n  },\n  title: {\n    fontSize: 48,\n    color: '#fff'\n  },\n  subtitle: {\n    fontSize: 24,\n    color: '#fff'\n  }\n});\n\nexport default Weather;\n```\n\nWe’ve made some additions by using available props with weather conditions to dynamically change the background, icon, weather name, and the subtitle. You can play around with the styling to make it look more minimalistic or more exquisite — it’s up to you!\n\n<img src='https://cdn-images-1.medium.com/max/800/1*Z6Nv_m3cBRuj9w5qwiJStw.png' />\n\n### Conclusion\n\nYou’ve successfully used the knowledge of geolocation data and setting up permissions in a real-time scenario to build a weather forecast application using a third party API and React Native.\n\n[Originally published at Heartbeat](https://heartbeat.fritz.ai/how-to-use-the-geolocation-api-in-a-react-native-app-b5e611b00a0c)\n",
            "url": "https://amanhimself.dev//blog/how-to-use-the-geolocation-api-in-a-react-native-app",
            "title": "How to use the Geolocation API in a React Native app",
            "summary": "How to use the Geolocation API in a React Native app",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/how-to-build-xylophone-app-with-expo",
            "content_html": "---\ntitle: 'How to build a xylophone app with Audio API, React Native, and Expo'\ndate: '2019-07-22'\nslug: 'how-to-use-emotion-js-with-react-native'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://heartbeat.fritz.ai/how-to-build-a-xylophone-app-with-audio-api-react-native-and-expo-7d6754a0603c'\n---\n\nReact Native when used with Expo as a toolchain eases out the common pain to manage ios and android applications. After saying that, I realized that there is a delight to use this ever-growing open source mobile application framework. Expo has gained a lot of credibility as a framework to provide collective solutions to build React Native applications by lowering the time and effort of the developer using it. They are continuing to enhance it from time to time and keeping up with the latest changes in React Native community. That said, Expo SDK33 is a blast.\n\nThat being said, let us dive into one of the Expo's API. In this tutorial, you are going to build an application using Expo's Audio API. You are going to develop the following app (_a toy xylophone app_) step-by-step.\n\n<img src='https://miro.medium.com/max/350/1*YE5sb3gX_ValSM48QGT1eQ.png' />\n\n**Table of Contents**\n\n## Requirements\n\nTo follow this tutorial, please make sure you have the following installed on your local development environment and have access to the services mentioned below:\n\n- [Nodejs](https://nodejs.org/en/) (>=`8.x.x`) with npm/yarn installed.\n- [`expo-cli`](https://docs.expo.io/versions/latest/workflow/expo-cli/) (>= `2.19.4)`, previously known as create-react-native-app.\n- [`watchman`](https://facebook.github.io/watchman/) is the file change watcher for React Native projects.\n\n## Getting Started\n\nTo create a new Expo project, the only requirement is to have `expo-cli` installed. Then, execute the following command to create a new project directory.\n\n```shell\nexpo init rn-xylophone-app\n\n# navigate inside the app folder\ncd rn-xylophone-app\n\n# install the following dependency\nyarn add expo-av\n```\n\nOnce the project directory is generated, navigate inside it as shown in the above command. Then install the required dependency to add the functionality of playing an Audio file inside the React Native app. The dependency `expo-av` will help you use Audio API and its promise based asynchronous methods to play the audio files. You are going to implement this functionality later.\n\nThe last step needed is to have some sound files saved in your `assets` folder. You can, of course, use your audio files but if you want to use the same audio files used in this tutorial, you can download them at the link given below.\n\n[add assets folder download link]\n\nYou might have got the idea of what the user interface is going to look while having a glimpse at the demo in the previous section. For each button, you are going to need a different color. Hence, create a new file called `contants/Colors.js` and add the following code.\n\n```js\nexport const NoteOne = 'red';\nexport const NoteTwo = 'orange';\nexport const NoteThree = 'yellow';\nexport const NoteFour = 'green';\nexport const NoteFive = '#00FFFF    ';\nexport const NoteSix = '#000080';\nexport const NoteSeven = '#B266FF';\n```\n\nRequire this file and all the Color codes inside `App.js` file after other imports.\n\n```js\n// ...after other imports\n\nimport {\n  NoteOne,\n  NoteTwo,\n  NoteThree,\n  NoteFour,\n  NoteFive,\n  NoteSix,\n  NoteSeven\n} from './constants/Colors';\n```\n\nThe color names are specified to mark each audio file which is named and numbered similarly. To import all the sounds file needed to build the application from the `assets` folder. Add the below object before the `App` component as shown.\n\n```js\nconst xyloSounds = {\n  one: require('./assets/note1.wav'),\n  two: require('./assets/note2.wav'),\n  three: require('./assets/note3.wav'),\n  four: require('./assets/note4.wav'),\n  five: require('./assets/note5.wav'),\n  six: require('./assets/note6.wav'),\n  seven: require('./assets/note7.wav')\n};\n```\n\nThe above object `xyloSounds` consist of the path to each sound file. This will be helpful when you are writing business logic to play these audio files and have to detect which audio file to play for the specific note.\n\n## Building the first UI button\n\nIn this section, you are going to create a button using `TouchableOpacity` that is going to play the sound for the note when pressed. To start, make sure in the file `App.js` you have imported the following APIs from the react-native core.\n\n```js\nimport { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\n```\n\nThen, you have to modify the contents of the `render` function from the default, boilerplate text that any Expo application comes with. This is going to be done by creating a `View` container for each button, which will have a fixed height and margin of value `5` to add some spacing between the buttons.\n\n```js\n<View style={styles.container}>\n  <View style={styles.buttonContainer}>\n    <TouchableOpacity\n      style={[styles.button, { backgroundColor: NoteOne }]}\n      onPress={() => this.handlePlaySound('one')}\n    >\n      <Text style={styles.buttonText}>Note 1</Text>\n    </TouchableOpacity>\n  </View>\n</View>\n```\n\nNotice that each button will have its background color specified in the file `constants/Colors.js`. This is done by inline styling method. To combine multiple styles in React Native, you can use an array notation like above. The button has one `onPress` method that is going to be responsible for playing the correct sound associated with the note. You will be creating the method `handlePlaySound` in the next section. However, do note that the value `one` being passed to this method is coming from the path you specified earlier for each audio file. Lastly, the button is going to have a text to display the correct audio file number.\n\nThe above snippet is followed by the styles that are created using `StyleSheet.create()` method.\n\n```js\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    marginTop: 50\n  },\n  buttonContainer: {\n    height: 40,\n    margin: 5\n  },\n  button: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  buttonText: {\n    color: '#fff',\n    fontSize: 18\n  }\n});\n```\n\nTo see the current state of the application in action, go back to the terminal window and run the command `yarn start` or `expo start` if you do not have yarn installed. In the simulator screen, you are going to be welcomed, as shown in the below image.\n\n<img src='https://miro.medium.com/max/350/1*jzwOoqsEJkTUSMMEKCwOPg.png' />\n\n## Adding the Audio functionality\n\nTo play a sound in an Expo application, you are required to first the API for the `Audio` from `expo-av`. So at the top of the `App.js` file and after other imports, you can add the following line.\n\n```js\nimport { Audio } from 'expo-av';\n```\n\nNext, you have to add the method `handlePlaySound` inside the `App` function and before the `render()` method. Inside this function, create a new sound object. Whenever you are required to play sound using `expo-av` library, you have to create a new object. This object is going to represent the instance of the class `Audio.sound`.\n\n```js\nhandlePlaySound = async note => {\n  const soundObject = new Audio.Sound();\n\n  try {\n    let source = require('./assets/note1.wav');\n    await soundObject.loadAsync(source);\n    await soundObject\n      .playAsync()\n      .then(async playbackStatus => {\n        setTimeout(() => {\n          soundObject.unloadAsync();\n        }, playbackStatus.playableDurationMillis);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  } catch (error) {\n    console.log(error);\n  }\n};\n```\n\nIn the above snippet, you can notice that the method `handlePlaySound` is going to accept one parameter. This parameter is going to be the note's number, hence the name of the parameter being passed in the above snippet is called `note`. Inside that, the first line creates the instance of the class `Audio.Sound()`.\n\nSince JavaScript syntax of `async/await` is being used, it is better to create a `try/catch` block such that this Expo app does not give us any error when running the application. Inside this block, the first method `loadAsync` is used to create and load the sound from the source. Hence, the variable `source` defined explicitly is passed and contains the path of the first audio file from the `assets` folder.\n\nTo play the sound, `playAsync()` method is used. This method is, however, further extends using a promise that takes one object called `playbackStatus` object. This object uses `playableDurationMillis` to identify the position until the audio file should run from the memory. Once the audio file is played, the `soundObject` calls the method `unloadAsync()` which unloads the media file from memory. This allows the media file to be played again and again. The `setTimeout` function's value depends on the duration of the media file being played from memory.\n\nGo back to the simulator or the device the current app is running and try to press the first button. You will hear the sound of the first note.\n\n## Finishing the App\n\nTo complete building the application, you have to read the path of each file from the object `xyloSounds.` Edit the the value of `source` inside the method `handlePlaySound()`.\nAlso, add the button for each note and do not forget to pass the correct source value inside the `onPress()` method. For your reference, here is the complete code of the file `App.js`.\n\n```js\nimport React from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\nimport { Audio } from 'expo-av';\n\nimport {\n  NoteOne,\n  NoteTwo,\n  NoteThree,\n  NoteFour,\n  NoteFive,\n  NoteSix,\n  NoteSeven\n} from './constants/Colors';\n\nconst xyloSounds = {\n  one: require('./assets/note1.wav'),\n  two: require('./assets/note2.wav'),\n  three: require('./assets/note3.wav'),\n  four: require('./assets/note4.wav'),\n  five: require('./assets/note5.wav'),\n  six: require('./assets/note6.wav'),\n  seven: require('./assets/note7.wav')\n};\n\nexport default function App() {\n  handlePlaySound = async note => {\n    const soundObject = new Audio.Sound();\n\n    try {\n      let source = xyloSounds[note];\n      // let source = require('./assets/note1.wav')\n      await soundObject.loadAsync(source);\n      await soundObject\n        .playAsync()\n        .then(async playbackStatus => {\n          setTimeout(() => {\n            soundObject.unloadAsync();\n          }, playbackStatus.playableDurationMillis);\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity\n          style={[styles.button, { backgroundColor: NoteOne }]}\n          onPress={() => this.handlePlaySound('one')}\n        >\n          <Text style={styles.buttonText}>Note 1</Text>\n        </TouchableOpacity>\n      </View>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity\n          style={[styles.button, { backgroundColor: NoteTwo }]}\n          onPress={() => this.handlePlaySound('two')}\n        >\n          <Text style={styles.buttonText}>Note 2</Text>\n        </TouchableOpacity>\n      </View>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity\n          style={[styles.button, { backgroundColor: NoteThree }]}\n          onPress={() => this.handlePlaySound('three')}\n        >\n          <Text style={styles.buttonText}>Note 3</Text>\n        </TouchableOpacity>\n      </View>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity\n          style={[styles.button, { backgroundColor: NoteFour }]}\n          onPress={() => this.handlePlaySound('four')}\n        >\n          <Text style={styles.buttonText}>Note 4</Text>\n        </TouchableOpacity>\n      </View>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity\n          style={[styles.button, { backgroundColor: NoteFive }]}\n          onPress={() => this.handlePlaySound('five')}\n        >\n          <Text style={styles.buttonText}>Note 5</Text>\n        </TouchableOpacity>\n      </View>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity\n          style={[styles.button, { backgroundColor: NoteSix }]}\n          onPress={() => this.handlePlaySound('six')}\n        >\n          <Text style={styles.buttonText}>Note 6</Text>\n        </TouchableOpacity>\n      </View>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity\n          style={[styles.button, { backgroundColor: NoteSeven }]}\n          onPress={() => this.handlePlaySound('seven')}\n        >\n          <Text style={styles.buttonText}>Note 7</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    marginTop: 50\n  },\n  buttonContainer: {\n    height: 40,\n    margin: 5\n  },\n  button: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  buttonText: {\n    color: '#fff',\n    fontSize: 18\n  }\n});\n```\n\nNow run the application in the simulator, and you will get the following screen.\n\n<img src='https://miro.medium.com/max/350/1*YE5sb3gX_ValSM48QGT1eQ.png' />\n\n## Conlusion\n\nYou have reached the end of this tutorial. I hope you have learned how to integrate the `expo-av` library to use `Audio` class to create functionality in your cross-platform applications and play audio media files. Important things to notice in this demo application is how to use available methods like `loadAsync()`, `unloadAsync()` and leverage the duration of the playing media using the object `playplaybackStatus`.\n\n[Originally published at Heartbeat](https://heartbeat.fritz.ai/how-to-build-a-xylophone-app-with-audio-api-react-native-and-expo-7d6754a0603c)\n",
            "url": "https://amanhimself.dev//blog/how-to-build-xylophone-app-with-expo",
            "title": "How to build a xylophone app with Audio API, React Native, and Expo",
            "summary": "How to build a xylophone app with Audio API, React Native, and Expo",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/build-chatbot-dialogflow-nodejs-webhooks",
            "content_html": "---\ntitle: 'How to Create a Chatbot with Dialogflow, NodeJS, and Webhooks'\ndate: '2019-07-19'\nslug: 'build-chatbot-dialogflow-nodejs-webhooks'\nthumbnail: '/thumbnails/node.png'\ntag: 'nodejs'\ncanonicalUrl: 'https://crowdbotics.ghost.io/build-chatbot-dialogflow-nodejs-webhooks/'\n---\n\n![cover_image](https://i.imgur.com/cOAePoA.jpg)\n\n> [Originally published at Crowdbotics](https://crowdbotics.ghost.io/build-chatbot-dialogflow-nodejs-webhooks/)\n\nChatbots are the hottest things in the modern digital world. Every day, organizations and individuals are powering their digital products such as websites or messenger apps to provide conversational experiences for their users. Each conversational experience depends on the implementation of the chatbot to either be a good or poor experience for the user. The modern day world is living in the technology wave of Artificial Intelligence, and chatbots are a massive part of it.\n\nIn this tutorial, you are going to be introduced to an easy to use tool for such uses cases known as [Dialogflow](https://dialogflow.com/). Formerly known as API.AI, it can be customized to provide information such as weather in your user's city or information about a movie they like to see. This customization, however, can only be applied using a third party API that is consistent in delivering results for the specific search term.\n\nBy providing a step by step on setting up and running the chatbot and how to use a third party API with Dialogflow. You are going to create a custom webhook using Nodejs, deploy it as a service, and then use it with your Dialogflow setups to develop agents and intents. _What are webhooks, you ask?_\n\nA Webhook is a simple HTTP callback that gets triggered based on some event. These events are defined by the user, for example, publishing a comment to blog post, or publishing a new tweet on your Twitter app.\n\nYou are going to build a movie chatbot that provides information about a movie using [The Open Movie Database API](http://www.omdbapi.com). The webhooks will be used to fetch the details of a film.\n\n**Table of Contents**\n\n- Requirements\n- Create a Node Server\n- Fetching the Movie\n- Deploy the Webhook on Heroku\n- Setup Dialogflow\n- Create Training Phrases\n- Enable the Webhook\n- Conclusion\n\n## Requirements\n\nTo follow this tutorial, you need the following:\n\n- Nodejs v8.x.x or higher installed along with npm/yarn as the package manager\n- Github Account\n- Crowdbotics App builder Platform account (preferably log in with your valid Github ID)\n- Dialogflow account (_you can use your Google ID_)\n- [OMDb API API Key](https://developers.themoviedb.org/3/getting-started/introduction): make sure when you register the account, you request for an API key. It is very to get one, register an account.\n- Heroku or some similar service to deploy the webhook\n\n## Create a Node Server\n\nThe following steps have to perform inside the project directory you have set up to create the Nodejs server. Once you are inside the server folder, make sure you run the following commands sequentially using a terminal window. The first command will initialize the server directory as a node server and generate a package.json file. The second command will let you install all the required dependencies.\n\n```shell\n# to initialize\nnpm init --yes\n\n# to install dependencies\nnpm install -save express dotenv\n```\n\nOnce all the dependencies are installed, let us bootstrap a small server and see if everything is working or not. Create a new file `index.js` and add the following snippet to it.\n\n```js\nconst express = require('express');\n// will use this later to send requests\nconst http = require('http');\n// import env variables\nrequire('dotenv').config();\n\nconst app = express();\nconst port = process.env.PORT || 3000;\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\napp.get('/', (req, res) => {\n  res.status(200).send('Server is working.');\n});\n\napp.listen(port, () => {\n  console.log(`🌏 Server is running at http://localhost:${port}`);\n});\n```\n\nThe above server is simple as it can be with only one `/` home route for now. This route is created now only to test whether the server being bootstrapped in this section is going to work or not. Sometimes small errors are time wasters, so it is better to check out. The module `dotenv` enable the file to read environment variables and their values from the file `.env`. Here is how the `.env` the file looks like.\n\n```shell\nAPI_KEY=XXXX\n```\n\nThe Xs are going to be the value of the API key that you have got from registering an account at OMDB API. Replace the value of these Xs with that key. Now, go to the terminal window and execute the command `node index.js`. This will prompt with the message you have defined in the above snippet. Visit the URL `http://localhost:3000` from the browser window, and you will get the following result.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/07/ss3-1.png' />\n\n## Fetching the Movie\n\nIn this section, you are going to create a route called `/getmovie`. It is going to be a post request. This request is going to search for the movie specified on the user's input. If that movie exists, it will return the user with the details of the movie such as the name itself, the year it was released, a summarised plot, and so on.\n\nOpen `index.js` file and the following after you have defined middleware functions.\n\n```js\napp.post('/getmovie', (req, res) => {\n  const movieToSearch =\n    req.body.queryResult &&\n    req.body.queryResult.parameters &&\n    req.body.queryResult.parameters.movie\n      ? req.body.result.parameters.movie\n      : '';\n\n  const reqUrl = encodeURI(\n    `http://www.omdbapi.com/?t=${movieToSearch}&apikey=${process.env.API_KEY}`\n  );\n  http.get(\n    reqUrl,\n    responseFromAPI => {\n      let completeResponse = '';\n      responseFromAPI.on('data', chunk => {\n        completeResponse += chunk;\n      });\n      responseFromAPI.on('end', () => {\n        const movie = JSON.parse(completeResponse);\n\n        let dataToSend = movieToSearch;\n        dataToSend = `${movie.Title} was released \n        in the year ${movie.Year}. It is directed \n        by ${movie.Director} and stars ${movie.Actors}.\\n Here some glimpse of the plot: $\n        {movie.Plot}.\n                }`;\n\n        return res.json({\n          fulfillmentText: dataToSend,\n          source: 'getmovie'\n        });\n      });\n    },\n    error => {\n      return res.json({\n        fulfillmentText: 'Could not get results at this time',\n        source: 'getmovie'\n      });\n    }\n  );\n});\n```\n\nThe `http` module is from Nodejs core. It is going to send the request which is the variable `reqUrl` and a callback function `responseFromAPI`. This function is going to trigger two events: `data` and `end`. The event `data` is going to return the information about the movie from API in chunks.\n\nThe `completeResponse` holds the data is parsed into JSON when the response from the API is ended. The customized response that is being returned in the above route's snippet should contain the field `fulfillmentText` and `error` response for cases that might now work at all.\n\nOn a side note, here is how an object for a specific movie data in JSON looks like from the OMDB API.\n\n```json\n{\n  \"Title\": \"Flashbacks of a Fool\",\n  \"Year\": \"2008\",\n  \"Rated\": \"R\",\n  \"Released\": \"17 Oct 2008\",\n  \"Runtime\": \"109 min\",\n  \"Genre\": \"Drama\",\n  \"Director\": \"Baillie Walsh\",\n  \"Writer\": \"Baillie Walsh\",\n  \"Actors\": \"Emile Robert, Scoutt Lowe, Daniel Craig, Julie Ordon\",\n  \"Plot\": \"A fading Hollywood star looks back at\n  the days of his youth as he returns home from his\n  best friend's funeral.\",\n  \"Language\": \"English\",\n  \"Country\": \"UK\",\n  \"Awards\": \"N/A\",\n  \"Poster\": \"https://m.media-amazon.com/images/M/\n  MV5BMTIzMDk0MDc3OV5BMl5BanBnXkFtZTcwODMwODY5MQ@@.\n  _V1_SX300.jpg\",\n  \"Ratings\": [\n    { \"Source\": \"Internet Movie Database\", \"Value\": \"6.8/10\" },\n    { \"Source\": \"Rotten Tomatoes\", \"Value\": \"38%\" }\n  ],\n  \"Metascore\": \"N/A\",\n  \"imdbRating\": \"6.8\",\n  \"imdbVotes\": \"11,348\",\n  \"imdbID\": \"tt1037218\",\n  \"Type\": \"movie\",\n  \"DVD\": \"22 Sep 2008\",\n  \"BoxOffice\": \"N/A\",\n  \"Production\": \"Anchor Bay Entertainment\",\n  \"Website\": \"http://www.thefilmfactory.co.uk/flashbacks/\",\n  \"Response\": \"True\"\n}\n```\n\nFrom this considerable object, you are only using some amount of information described in the previous snippet. To test that the result is being fetched from the OMDB API, start the server by going to the terminal window. Execute command `node index.js`.\n\nOpen your favorite rest clients such as Postman or Insomnia. Enter the URL `http://localhost:3000/getmovie` and even though it is POST request, and you will have to enter the `parameters` as shown below. Let us test out if the API is returning the details of the movie name entered or not. In the below image, you can verify that the information related to the data is being replaced.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/07/SS4.png' />\n\n## Deploy the Webhook on Heroku\n\nSince the route `/getmovie` is working, it is time to deploy the webhook you successfully build in the previous step. [Login](https://id.heroku.com/login) to your Heroku account or if you do not have one, create an account. You can upload up to five web applications that can run for free to some number of hours (_called as dynos_).\n\nBefore you proceed with any of the steps below, in the `package.json` file, make sure the `start` script exists as specified below.\n\n```json\n\"scripts\": {\n        \"start\": \"node index.js\",\n        \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n}\n```\n\nOnce you log in, you will be welcomed by the screen known as Dashboard. Create on the button **New** on the top right corner and then create choose **Create new app**.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/07/ss5-1.png' />\n\nFill in the name of the application. Once you have entered the details, click the button **Create app**.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/07/ss6-1.png' />\n\nNow, you will be welcomed by the following page that has instructions to deploy your current Node app. If you are using Github, go ahead and choose the **Connect to Github** deployment method. I am going to use [heroku-cli](https://devcenter.heroku.com/articles/heroku-cli).\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/07/ss7-1.png' />\n\nTo proceed with the following set of instructions, also as mentioned in the above screen under the section **Deploy using Heroku Git**. What this means is that the instance of your complete Node application is going to be deployed from the local development environment where the application is currently located. Once you have installed the Heroku CLI, enter the following command to proceed. Also, if you are using the Crowdbotics platform to generate the current demo app or have initialized the directory, you are working using the command `git init`, ignore the section **Clone the repository** in the above image.\n\n```shell\n# login\nheroku login\n\n# to deploy\n$ git add .\n$ git commit -am \"deploy\"\n$ git push heroku master\n```\n\nThe only thing to notice here is that you are not going to `git push` to the `origin` but `heroku`. Once the deployment is done, you will get a message like below in the terminal window.\n\n```shell\nremote:        https://getmoviehook.herokuapp.com/ deployed to Heroku\nremote:\nremote: Verifying deploy... done.\nTo https://git.heroku.com/getmoviehook.git\n * [new branch]      master -> master\n```\n\nYou will get the URL `https://getmoviehook.herokuapp.com/` from the above deployment procedure. To test it out, you cannot merely send a GET request by visiting the URL `https://getmoviehook.herokuapp.com/getmovie` from a browser window. You can again use a REST client like Postman. Just replace the `localhost` URL with deployed one that is previously mentioned.\n\nYou will get successful results.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/07/ss8-1.png' />\n\n## Setup Dialogflow\n\nDialogflow is a Natural Language Processing (NLP) service from Google. It has many integrations, SDKs for programming languages and some prebuilt agents. It works very straightforward with Google Assistant. Visit the [Dialogflow website](https://dialogflow.com/) and create a new account or log-in with your existing Google ID.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/07/ss9-2.png' />\n\nOnce you are logged in, you will be welcomed by a screen that consists of different **Agents**.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/07/ss10.png' />\n\nClick on the Create Agent button to make one for yourself. Name it something similar to `OMDBbot`. Fill in the details like below.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/07/ss11.png' />\n\nAfter filling out the details, click on the button **Create**.\n\nGenerally, for small applications, you will have one agent. In Dialogflow, the basic flow of conversation involves these steps:\n\n- The user giving input in the form of a query\n- Your Dialogflow agent parses the input from the training phrases\n- Your agent returns a response back to the user\n\nThese agents understand the varied nuances of human language. They can translate that to standard and structured meaning that chatbot applications and services can understand. Each agent contains different **intents**. The intent is the action taken based on the user's input. It can be the response sent back to the user in a chatbot application. It can contain different types of responses or actions. The next step in the process is to create your first intent.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/07/ss12.png' />\n\nClick on the button **Create intent** and fill in the name `getmovie`. You can name your intent anything.\n\nIntent can be a simple text response that is displayed back to the user or a set of trained phrases. There are also actions and parameters that extract information from user queries. Examples of this kind of information include dates, times, names, places, and more.\n\n## Create Training Phrases\n\nLet us create new training phrases in this section. To create a new phrase, go to the section **Training phrases** and a unique user expression as shows below.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/07/ss13.png' />\n\nFor the movie chatbot, each user expression is going to contain the name of the movie. The Dialogflow agent is not smart enough to extract the name of the movie out of the user's expression. You have to provide an entity that can highlight the name of the movie every time a new training phrase is introduced to the bot.\n\nFrom the sidebar menu, go to the entity section and click on the button **Create Entity**. Fill in the name of your entity as `movie` because this is what is being passed inside the webhook's request body. From the server, remember the following line:\n\n```js\nreq.body.queryResult.parameters.movie;\n```\n\nOnce you have saved your entity, go back to the intent.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/07/ss14.png' />\n\n## Enable the Webhook\n\nTo test out that everything is working, let us use the default response provided by the Dialogflow intent. As shown below, on the right-hand side of the screen, you can test out by entering a user expression. The movie chatbot will return the default response.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/07/ss15.png' />\n\nThis is okay and verifies that the intent has been created successfully. Now, to use the real-time data from the OMDB API, you are going to enable the webhook. From the sidebar menu, go to the **Fulfillment** section. You will be welcomed by the following screen.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/07/ss16.png' />\n\nEnable the **Webhook** and then enter the **URL** of the deployed endpoint.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/07/ss17.png' />\n\nOnce that is done, go back to the **Intents** section, and scroll down to the bottom of the web page. There is a **Fulfillment** section. Toggle the button to **Enable webhook call for this intent**.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/07/ss18.png' />\n\nOnce that is done, go to the right side of the screen to test it out. Fill in the user expression similar to a training phrase you have provided earlier. The agent will get a response back with the details of the movie.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/07/ss19.png' />\n\n## Conclusion\n\nYou have successfully created, deployed, and tested a Nodejs Webhook for Dialogflow chatbot application. By the end of this tutorial, we are sure you have learned how easy it is to create a new chatbot agent using Dialogflow. The possibilities of using a powerful API such as Dialogflow are endless. In no time, you can build up your own chatbot interface for front-end clients using Reactjs, Angular, and even mobile cross-platform framework like React Native. We hope this tutorial provided you an easy walkthrough to grab the concepts and build something of your own.\n",
            "url": "https://amanhimself.dev//blog/build-chatbot-dialogflow-nodejs-webhooks",
            "title": "How to Create a Chatbot with Dialogflow, NodeJS, and Webhooks",
            "summary": "How to Create a Chatbot with Dialogflow, NodeJS, and Webhooks",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/introduction-to-react-router-v4-with-reactjs",
            "content_html": "---\ntitle: 'Using React Router to Optimize Single Page Applications (SPAs)'\ndate: '2019-07-11'\nslug: 'introduction-to-react-router-v4-with-reactjs'\nthumbnail: '/thumbnails/react.png'\ntag: 'react'\ncanonicalUrl: 'https://blog.crowdbotics.com/introduction-to-react-router-v4-with-reactjs/'\n---\n\nReact is often used for building single page applications (SPAs). SPAs tend to have multiple page views. When navigating from one-page view to another, reloading the entire page view is a tedious and not so efficient task. In fact, it diminishes the benefits of a SPA. To work as it should, a SPA must render parts of views when required instead of reloading the entire page.\n\nRouting comes into the picture when navigating from one page to another in a SPA app. Routing can be categorized in two ways. Static and dynamic. SPAs follow a dynamic approach. In this tutorial, we will discuss a popular routing library used with React applications known as [React Router](https://reacttraining.com/react-router/web/guides/quick-start).\n\n**Table of Contents**\n\n- Requirements\n- Getting Started\n- First Route with React Router\n- What is BrowserRouter?\n- The Link Component\n- Active Links with NavLink\n- Adding Parameters to the Routes\n- Conclusion\n\n**Requirements**\n\n- NodeJS `v8.x.x` or higher installed along with npm/yarn\n- `create-react-app` installed globally to on your local dev machine generates a new React project\n\n_Bonus_: You can also, use `npx` to generate a new React project without installing `create-react-app`.\n\n## Getting Started\n\nTo create a new React project run the following command at the desired location on your local machine.\n\n```shell\ncreate-react-app react-router-v4-demo\n```\n\nOnce the project is generated, traverse inside the newly created directory. This strategy is the default way to generate a new React app.\n\n[React Router](https://reacttraining.com/react-router/web/guides/quick-start) as a library contains three different npm packages.\n\n- react-router\n- react-router-dom\n- react-router-native\n\nEach of the packages has a different use case. The first one, `react-router` is the core package and is used with the next two packages listed above. The `react-router-dom` has to be used when building a web application. This is what we are going to use in this tutorial. The last one, `react-router-native` tends to be used in a [React Native](https://hackernoon.com/getting-started-with-react-native-in-2019-build-your-first-app-a41ebc0617e2) application.\n\nTo add React Router in the React app, execute the following command from a terminal window.\n\n```shell\nyarn add react-router-dom\n```\n\nPlease note that, for the rest of the tutorial, we will be using `yarn` as the JavaScript package manager to add or remove dependencies. If you wish to use `npm`, there is no one stopping you.\n\nTo run the React app, go to the terminal window and execute the command npm start. This will start the development server. You will be welcomed by the default boilerplate project screen in a web browser window on URL `http://localhost:3000/`.\n\n![ss1](https://crowdbotics.ghost.io/content/images/2019/05/ss1-1.png)\n\n## First Route with React Router\n\nTo create the first route in the React app, let us import `BrowserRouter` from `react-router-dom` library.\n\n```js\nimport React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n```\n\nTo create a route, we use `<Route>` from the `react-router-dom`. This is where the logic of routing is placed. It renders the UI of a component. A `<Route>` has a prop called `path` which is always matched with the current location of the app. On the basis of this prop, the desired component gets rendered. When the component is not getting rendered, `Route` returns null. The component name is also passed as a prop `component`. Look at the below snippet.\n\n```js\nfunction App() {\n  return (\n    <Router>\n      <Route path=\"/\" component={Home} />\n    </Router>\n  );\n}\n```\n\nThere is the functional `App` component that returns a `BrowserRouter` which holds the very first `Route` component. The `path` is currently pointing towards the `Home` component which has the following UI logic.\n\n```js\nfunction Home() {\n  return (\n    <div>\n      <h1>Home Component</h1>\n    </div>\n  );\n}\n```\n\nNow, visit the URL on port `3000` and you will see the `Home` component being rendered right now.\n\n![ss2](https://crowdbotics.ghost.io/content/images/2019/05/ss2.png)\n\nThis is a bare minimum example. Now let us add another route with the same props as the `Home`. Call this route `About` with a similar rendering logic as `Home`.\n\n```js\nfunction About() {\n  return (\n    <div>\n      <h1>About Component</h1>\n    </div>\n  );\n}\n```\n\nNow add this functional component as the second route, below the `Home` route. Also, add both routes inside a `div` element. A router component can hold a single child element and adding a `div` solves this problem and allows the router component to have as many children as we want.\n\n```js\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Route path=\"/\" component={Home} />\n        <Route path=\"/about\" component={About} />\n      </div>\n    </Router>\n  );\n}\n```\n\nTry visiting the URL `http://localhost:3000/about`. You will notice that both the components are being rendered right now on the path `/about`.\n\n![ss3](https://crowdbotics.ghost.io/content/images/2019/05/ss3-1.png)\n\nThe reason for this is that regular expression engine that React Router uses internally considers both the routes that are being started with a forward slash `/` equal. To solve this issue, we can use another essential prop on the Home route called `exact`.\n\n```js\n<Router>\n  <div>\n    <Route path=\"/\" exact component={Home} />\n    <Route path=\"/about\" component={About} />\n  </div>\n</Router>\n```\n\nThis exact is also known as a qualifier which states that the path must match the exactly the `/` and nothing after it, such as `/about`. Now, if you visit the browser window at the URL `http://localhost:3000/about` you will notice that only the about component is getting rendered this time.\n\n![ss4](https://crowdbotics.ghost.io/content/images/2019/05/ss4.png)\n\n## What is BrowserRouter?\n\nDo you remember reading earlier about that `react-router-dom` is used only in case of web applications? Well, `react-router-dom` library holds two types of routers API for a React application to use. One is called `BrowserRouter` that you have seen in action in the previous section. The other one is called `HashRouter`.\n\nA `BrowserRouter` will always listen to URLs like `http://localhost:3000/about` whereas a `HashRouter` will have `http://localhost:3000/#/about`, as the name suggests, uses a hash `#` in between. So why did we use the `BrowserRouter`?\n\n`BrowserRouter` is a popular choice among modern day web applications. The main reason behind is that it uses HTML5 History API to keep track of the router history of your React app. The `HashRouter` has a use case for legacy browsers where `window.location.hash` is still being used to keep a track of routes in a SPA.\n\n## DIY Exercise 👇\n\nHere is a small task for you. Modify directory structure like below screenshot and separate the two functional components `Home` and `about` in their own component files such that, in future, if they grow with more JSX to render.\n\n![ss5](https://crowdbotics.ghost.io/content/images/2019/05/ss5.png)\n\nYou can totally skip this if you want and move on to the next section. But performing this small task will benefit you to have an understanding of the above concepts.\n\n## The Link Component\n\nTo navigate between to web pages in HTML, there is an `<a href=\"\"></a>` anchor tag available. However, using this traditional approach will lead to a browser refresh. In order to overcome this, React Router API offers a `Link` component that can be used to navigate to a particular URL or a component.\n\nLet us try to create a navigation menu with this new knowledge. Import Link from `react-router-dom` in `App.js` file. Here is the modified snippet of App component.\n\n```js\n// App.js\n\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nimport Home from './components/Home';\nimport About from './components/About';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <nav style={{ margin: 10 }}>\n          <Link to=\"/\" style={{ padding: 10 }}>\n            Home\n          </Link>\n\n          <Link to=\"/about\" style={{ padding: 10 }}>\n            About\n          </Link>\n        </nav>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/about\" component={About} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n```\n\nIn the above snippet, notice that all the Links are being added before all the Route components. The styling attributes inside `style` are optional for now. Start the development server and visit the browser window and you will notice a navigation menu pops up at the top. Try clicking links to navigate between different components.\n\n![ss5](https://crowdbotics.ghost.io/content/images/2019/05/ss6-1.gif)\n\nWherever a `Link` is rendered in a React project, an anchor `<a>` will be rendered in the application’s HTML.\n\n## Active Links with NavLink\n\nIn React Router API, `NavLink` is the extended version of the `Link` component. You can say that is a special type of the `Link` that can style itself as to represent the active state when matches the current route.\n\nTo demonstrate this, first, let us replace all the `Link` tags with `NavLink` in `App.js` file.\n\n```js\n// App.js\nimport React from 'react';\nimport { BrowserRouter as Router, Route, NavLink } from 'react-router-dom';\n\nimport Home from './components/Home';\nimport About from './components/About';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <nav style={{ margin: 10 }}>\n          <NavLink to=\"/\" style={{ padding: 10 }}>\n            Home\n          </NavLink>\n\n          <NavLink to=\"/about\" style={{ padding: 10 }}>\n            About\n          </NavLink>\n        </nav>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/about\" component={About} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n```\n\nAt this point, each `NavLink` link is going to behave like an ordinary `Link` component which means there is no change so far. To make a link active, add an `activeClassName` prop to that. Such as below.\n\n```js\n<NavLink to='/' style={{ padding: 10 }} activeClassName='active'>\n```\n\nTo set up the corresponding CSS for this to work, open `App.css` file and add the below.\n\n```css\na {\n  padding: 10px;\n}\n\na,\na:visited {\n  color: blue;\n}\n\na.active {\n  color: red;\n}\n```\n\nDo not forget to import this file inside `App.js`. Also, modify the `about` route to have an `activeClassName`.\n\n```js\nimport \"./App.css\"\n\n// ...\n\nreturn (\n  {/* */}\n  <nav style={{ margin: 10 }}>\n      <NavLink to='/' activeClassName='active'>\n          Home\n      </NavLink>\n\n      <NavLink to='/about' activeClassName='active'>\n          About\n      </NavLink>\n  </nav>\n\n {/* */}\n)\n```\n\nGo back to the browser, open develop tools like below and you will notice, at first, the `Home` route has a class name `active`.\n\n![ss7](https://crowdbotics.ghost.io/content/images/2019/05/ss7.png)\n\nTry navigating to the `About` route and see what happens.\n\n![ss8](https://crowdbotics.ghost.io/content/images/2019/05/ss8.gif)\n\nOn navigating to `About` route did you notice that the active class name is also added to the corresponding route? However, the `Home` route still has the active class even though the URL matches the `/about`. Why?\n\nThe way `NavLink` works is almost similar to Route component in React Router API. To make sure that only one route has the class active state, try modifying the home route in the navigation menu, as below.\n\n```js\n// App.js\n\n<NavLink to=\"/\" exact activeClassName=\"active\">\n  Home\n</NavLink>\n```\n\nYou will get the desired output this time.\n\n![ss9](https://crowdbotics.ghost.io/content/images/2019/05/ss9.gif)\n\n## Adding Parameters to the Routes\n\nIn this section, you will learn how to create and manage dynamic routes based on a query parameter such as `:id`. We start by creating a static array in the `App.js` file that will serve as the mock data.\n\nThe idea is to demonstrate a route as `/posts` which displays all the posts that are coming from the array. However, each post in the array will be having an id or a unique identifier. Using that unique identifier, you will be approaching the concept of dynamic content rendering by writing the logic for URLs such as `/posts/:id` where `:id` will be represented by the specific id of a post.\n\nTo start, let us add a bunch of mock posts in the state inside a new component file called `components/posts.js`.\n\n```js\n// Posts.js\nimport React from 'react';\nimport '../App.css';\n\nclass Posts extends React.Component {\n  state = {\n    posts: [\n      { id: 1, title: 'Hello Blog World!' },\n      { id: 2, title: 'My second post' },\n      { id: 3, title: 'What is React Router?' }\n    ]\n  };\n\n  render() {\n    return (\n      <div className=\"posts\">\n        <h1>Posts List</h1>\n      </div>\n    );\n  }\n}\n\nexport default Posts;\n```\n\nThe corresponding styles to the above are added in `App.css` file for brevity.\n\n```css\n.posts ul {\n  list-style: none;\n  margin: 0;\n  margin-bottom: 20px;\n  padding: 0;\n}\n\n.posts ul li {\n  padding: 10px;\n}\n\n.posts a {\n  text-decoration: none;\n}\n```\n\nNow, import the newly created component inside `App.js` where other routes already exist.\n\n```js\n//App.js\n// ...\nimport Posts from './components/Posts';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <nav style={{ margin: 10 }}>\n          <NavLink to=\"/\" exact activeClassName=\"active\">\n            Home\n          </NavLink>\n          <NavLink to=\"/about\" activeClassName=\"active\">\n            About\n          </NavLink>\n          <NavLink to=\"/posts\" activeClassName=\"active\">\n            Posts\n          </NavLink>\n        </nav>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/posts\" component={Posts} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n```\n\nThe existing navigation menu has a new route and its called Posts.\n\n![ss10](https://crowdbotics.ghost.io/content/images/2019/05/ss10.png)\n\nOpen `Posts.js` to render the list of Posts and display them as a list whenever the current location in the web browser matches `/posts`.\n\n```js\nimport React from 'react';\nimport { Link, Route } from 'react-router-dom';\nimport '../App.css';\n\nfunction Child({ match }) {\n  return (\n    <div>\n      <h3>ID: {match.params.id}</h3>\n    </div>\n  );\n}\n\nclass Posts extends React.Component {\n  state = {\n    posts: [\n      {\n        id: 1,\n        title: 'Hello Blog World!'\n      },\n      {\n        id: 2,\n        title: 'My second post'\n      },\n      {\n        id: 3,\n        title: 'What is React Router?'\n      }\n    ]\n  };\n\n  render() {\n    const { posts } = this.state;\n    return (\n      <div className=\"posts\">\n        <h1>Posts List</h1>\n        <ul>\n          {posts.map(post => (\n            <li key={post.id}>\n              <Link to={`/posts/${post.id}`}>{post.title}</Link>\n            </li>\n          ))}\n        </ul>\n        <Route path=\"/posts/:id\" component={Child} />\n      </div>\n    );\n  }\n}\n\nexport default Posts;\n```\n\nAlso, the `Child` component reads anything coming from the URL parameters, such as, in the above case, the `id` of each post. A `match` object contains information about how a `<Route path>` matched the URL, thus, in our case, the id of each post.\n\n![ss11](https://crowdbotics.ghost.io/content/images/2019/05/ss11.png)\n\n## Conclusion\n\nHopefully, by now, you are familiar with the basic concepts of how React Router library works. It is a powerful library that helps you build better React apps. If you want to learn more about React Router visit its official documentation [here](https://reacttraining.com/react-router/).\n\n[Originally published at Crowdbotics](https://crowdbotics.ghost.io/introduction-to-react-router-v4-with-reactjs/)\n",
            "url": "https://amanhimself.dev//blog/introduction-to-react-router-v4-with-reactjs",
            "title": "Using React Router to Optimize Single Page Applications (SPAs)",
            "summary": "Using React Router to Optimize Single Page Applications (SPAs)",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/to-travel-a-tech-conference-and-one-million-views-a-recap",
            "content_html": "---\ntitle: 'To Travel, A Tech Conference and One Million views - a Recap'\ndate: '2019-07-02'\nslug: 'to-travel-a-tech-conference-and-one-million-views-a-recap'\nthumbnail: '/thumbnails/writing.png'\ntag: 'writing'\ncanonicalUrl: 'https://medium.com/hackernoon/to-travel-a-tech-conference-and-one-million-views-a-recap-22e135a598c3'\n---\n\nThe year 2019 started for me a bit unusual than the previous ones. I never expected to get so much attraction on my blog posts that are mostly published here. Had only one trip planned, ended up doing two. Did end up attending a tech conference too. Something when I started my career as a developer I hadn’t thought of.\n\nSix months are already gone, hence, if you are on Twitter, you might be seeing the following tweet at least once a day.\n\nThis year so far has been a roller coaster ride. Similar to one I had in [January](https://www.instagram.com/p/BtK7sa3BOG3/) but a bit slow.\n\n### Achievements 🎉\n\nThis year, I set out some personal goals to achieve. Some came along the way unexpectedly or surprises. For some, I did sweat a lot. Some took more than the usual amount of coffee cups.\n\nHere is a list of goals that I had mind when 2019 came along that I have achieved so far while some of them are still a work in progress and few of them are literally surprises.\n\n✅ Reach 500 subs on the weekly newsletter\n\n🚧 Reach 5k followers on Twitter\n\n✅ Revamp Personal Website\n\n✅ Receive a Patron on [Patreon.com](https://patreon.com/amanhimself) _(surprise)_\n\n✅ 1 Million blog post views\n\n✅ Under 30 days, receive more than 100k views on blog posts*(surprise)*\n\n✅ Reach 1k followers on Instagram\n\n✅ Travel abroad to at least one country, ended up traveling to 5\n\n🚧 Write 50 articles/tutorials on React Native _(published 19 so far)_\n\nMost of these goals were to be achieved over the span of 6 months and few of them are still work in progress. For me, having personal goals as such, help to move forward in the direction I am ambitious for, that is, to spend a healthy amount of time creating content on development, teaching fellow developers when in need, using the set of technologies or frameworks that I am familiar and work with.\n\nI have made some bad decisions along the way. Some good ones too. Accepting opportunities that I wasn’t ready for did make me see things from a different perspective and helped me grow as a human being.\n\n### Attend a Tech conference 👩‍💻\n\nIf your world revolves around software development in general, my suggestion is to attend at least one tech conference in your lifetime. Heck, attend 10 if you want!\n\nThe reason I am stating that is again come from a recent and dear personal experience. In the month of April 2019, I attended [**App.js Conf**](https://appjs.co/)**.** A one of its kind. A tech conference for Expo and React Native developers held for the first time in Krakow, Poland. It was my first time.\n\nTwitter is quite famous in the dev world. Many thrive to make connections, many achieve that too. You can get to know almost any new framework being released, and learn it as well through Twitter. You might also be able to make good connections. Get to know people from an unconditional point of view for a long period of time. Open a new website or business. All that is good in my honest opinion.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*7SYuZvH2pZnM0H79V4ttPg.jpeg' />\n\nBut attending a tech conference in person is a bit intentional. It will help you reach people on a personal level. I would say, if you are lucky enough to have awesome meetups or a conference happening in your area or city you live in, try attending a few. You never know what lies behind that door.\n\nAs I was telling about the conference I attended. I personally met some awesome human beings, who made me realize that there are good and modest human beings on this planet who are willing to help a total stranger or give them company and share moments. I met those whom I admire in the dev world and learned a great number of new things. Also, I never expected someone to recognize me from my Twitter handle. I still don’t believe that, but it happened.\n\n😱\n\n_That was my reaction._\n\nI am planning to attend one more either the latter half of this year or early next year.\n\n### Writing ✍️\n\nFor the majority of the last year, I had stopped writing. I did run a blog for five years writing book reviews, interviewing some well-known authors and manage to be awarded twice as the [Best Book Blogs in India](http://readingbooks.blog). But in the end, I lost much of my interest as I felt there wasn’t much left to do. I slowly moved my passion for writing in the tech world and boy did it open doors for me that I never know existed.\n\nAlong the way, I did learn a thing or two on how to promote content without hurting anyone’s feelings, using the internet. I never expected to reach 1 million views on a platform that I have for a little over two years.\n\nI have written for various blogs, magazines, Medium publications. To manage and keep them in one place, I started maintaining a Github repository. You will find all the links 👇\n\n[**amandeepmittal/tech-writing**](https://github.com/amandeepmittal/tech-writing)\n\nThe lesson I learned from this is that if you are passionate about something, can’t stay away from it for a while, and are consistently taking action in that area, you will achieve _heights_. Passion does help you drive through that prolonged path.\n\n### Travel ✈️\n\n_Why? Why not save all the 💲for your future self? Why travel at all?_\n\nMany of my acquaintances did not know this but since my teenage days, I had been eager to travel. I have been shut until I had to force myself a little to make it happen.\n\n_Now, I am in love with it._\n\nWe all have our own reasons related to the word “Travel”. Mine is to learn new things, meet new people, have brief moments with a few, or make some connections, visit places that I think are astonishing, manage everything from planning to expenses, food, accommodation and so on, and be myself. Finally, I did manage to travel to five countries including one of the most lavish cities in the middle east and four beautiful European countries that I am still amazed by their beauty and the calmness they possess.\n\nTraveling to different places do have a deep impact on me. There are some important things I learned about myself and especially how I want to take the approach in my career and life in general. And other things that are essential to the places I visited or the people I met along the way.\n\nI do have some future plans for traveling. I want to experiment with it this time, and not just take a vacation, but try to stay longer in one place. It might end up being a fulfilled personal goal that you get to hear about at the end of this year.\n\n[Originally published at Hackernoon](https://medium.com/hackernoon/to-travel-a-tech-conference-and-one-million-views-a-recap-22e135a598c3)\n",
            "url": "https://amanhimself.dev//blog/to-travel-a-tech-conference-and-one-million-views-a-recap",
            "title": "To Travel, A Tech Conference and One Million views - a Recap",
            "summary": "To Travel, A Tech Conference and One Million views - a Recap",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/how-to-integrate-firebase-firestore-react-and-crowdbotics-platform",
            "content_html": "---\ntitle: 'How to integrate Firebase and Firestore cloud database with a React application'\ndate: '2019-06-20'\nslug: 'how-to-integrate-firebase-firestore-react-and-crowdbotics-platform'\nthumbnail: '/thumbnails/firebase.png'\ntag: 'firebase'\ncanonicalUrl: 'https://blog.crowdbotics.com//how-to-integrate-firebase-firestore-react-and-crowdbotics-platform/'\n---\n\nFirebase is a Backend as a Service (BaaS) that gives an advantage to web developers who use ReactJS for developing web applications. It is a platform that got acquired by Google and has a healthy and active community. Most users in this community are web and mobile developers. It includes services like mobile analytics, push notification, crash reporting and out of the box provides email as well as social authentication. As a web developer, by using Firebase you can start building an MVP (minimum viable product) by keeping the costs low and utilizing your time and effort in building the application quite faster than adopting a traditional approach by building your own custom backend solution.\n\n**In this tutorial, we will be learning how to get started by integrating the Firebase and Firestore cloud database with a React application.** We will also create a bare minimum demo application from scratch with the help of Firebase & React Native to see how they work together.\n\n**TLDR;**\n\n- Requirements\n- Getting started: New Firebase Project\n- Connecting Firebase with React App\n- Creating a Firestore Database\n\n## Requirements\n\nIn order to gain everything by reading this tutorial, make sure you have:\n\n- a Firebase account (_free tier_)\n- NodeJS `v8.x.x` or higher installed along with `npm/yarn`\n- `create-react-app` global module to scaffold a React project\n\n## Getting Started: New Firebase Project\n\nTo get started you need a Firebase account. To sign-up or log-in for one, visit [console.firebase.com](https://console.firebase.google.com). Once you are logged in, you will be welcomed by a screen below.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/05/ss1-2.png' />\n\nClick on the button **Add Project**. This leads to another screen which contains a form to be fulfilled in order to create a new Firebase project.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/05/ss2-1.png' />\n\nFill the name of the project, check both the boxes for now and click on the button `Create project`. This will take some moments. Once the Firebase project is created, you will be welcomed by the home screen like below.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/05/ss3-2.png' />\n\nTake a look at the side menu bar on the left. This is the main navigation in any Firebase project. That's it for now. It is that simple to create a new Firebase project via the official console.\n\n## Create React App\n\nTo create a new react app, first, we need to install `create-react-app` by running the below command in a terminal window.\n\n```shell\nnpm install -g create-react-app\n\n# Check for the current version\n\ncreate-react-app --version\n\n# Output: 3.0.0\n```\n\nThe second execution is to check the semantic version of `create-react-app` module. Make sure you are on the same version (_which is latest at the time of writing this post_) or higher than this.\n\nTo generate a new project run `create-react-app react-firebase-demo`. This will take some time to generate a new project and install dependencies that required to kick-start the default React app. Do note that, React by default uses `yarn` instead of `npm` as the JavaScript package manager to install dependencies.\n\n## Connecting Firebase with React App\n\nTo connect Firebase with a React app, you need API key and store in the client side app somewhere (_probably as environmental variables when deploying the app_). Click on the settings ⚙️ in the sidebar menu and go to **Project settings**. There you will see under **Your apps** section all the platforms available such as iOS, and web. Click on the **Web** as shown below.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/05/ss4-1.png' />\n\nNext, copy only the `config` variable in a new file called `firebase.js` inside the `src` directory of the React project. Initially, the file might look like below snippet.\n\n```js\n//firebase.js\nconst config = {\n  apiKey: 'XXXX',\n  authDomain: 'XXXX',\n  databaseURL: 'XXXX',\n  projectId: 'XXXX',\n  storageBucket: 'XXXX',\n  messagingSenderId: 'XXXX'\n};\n\nfirebase.initializeApp(config);\n```\n\nWhere all the `XXXX`s are the key values. In order to continue, React app needs FirebaseSDK installed as an npm dependency. Open terminal window, make sure you are traversed inside the project directory and execute the following command.\n\n```shell\nyarn add firebase\n```\n\nOnce the dependency is installed go back to `firebase.js` file and import firebase like below and it to the top of the file.\n\n```js\n//firebase.js\nimport firebase from 'firebase/app';\n\n// ...\n\nexport default firebase;\n```\n\nYou could have imported firebase from just `firebase`. The reason in the above file we are using `firebase/app` is that `/app` only adds the core of the firebase services. Right now, to integrate Firebase with our React app, we only need `initializeApp()` method to pass all the keys required to configure from the firebase.\n\nWhile importing, if you use just `firebase`, it will include the whole bunch of services like auth, database, storage, functions, messaging, firestore, and so on. Most of them, we might not even need this demo application. This also increases the size of your bundle when deploying the application. Lastly, do not forget to export the instance configured firebase object that you will be using in the React app later.\n\n## Creating a Firestore Database\n\nThere are two types of cloud-based database services provided by Firebase. One is called Cloud Firestore and the other one is a Real-time Database. This does not mean that Cloud Firestore cannot be used for real-time applications. Also, note that both of them are NoSQL databases.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/05/ss5-2.png' />\n\nReal-time database stores data as one large JSON tree. Complex and scalable data is hard to organize in it. Firestore follows proper NoSQL terminology when it comes to storing data. It stores data in documents and each document can have sub-collections thus making it suitable for scalable and complex data scenarios.\n\nAlso, Realtime database only offers offline support for the mobile development using iOS and Android whereas Firestore supports both mobile platforms as well as web clients too. To read more about their differences you can visit the official documentation [here](https://firebase.google.com/docs/database/rtdb-vs-firestore).\n\nIn the Database section, choose the cloud Firestore and go to the second tab called **Rules**. If you are enabling Firestore for the first time, chances are you need to set the database security rules to test mode. This is where the firebase SDK will allow anyone (_one who has access to the config keys_) to read and write to the database. That said, this section should look like below.\n\n```js\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /{document=**} {\n      allow read, write;\n    }\n  }\n}\n```\n\nOpen `firebase.js` and import firestore instance.\n\n```js\n// firebase.js\n// ... after other imports\nimport 'firebase/firestore';\n\n// ... before export default statement\nexport const firestore = firebase.firestore();\n```\n\nAlso, exporting the firestore instance will let you use it to query the database.\n\nNow, go back to the Firebase console and go to the **Data** tab under Firestore.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/05/ss6.png' />\n\nYou will notice that there is currently no data inside the database. The **Add Collection** button represents the column that will contain the name of each collection that you might have in the database. Let us add some data using Firebase console interface such that we can query and display it in the next section. Click on the button **Add Collection** and enter the name of the collection as shown below.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/05/ss7-1.png' />\n\nClick **Next** and enter two fields. One for the title of the book and the other one for the author's name. By default, the ID for each document will be auto-generated if the above option `Auto-id` is selected or remained untouched. Note that both of these fields represent one document as a whole.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/05/ss8.png' />\n\nNotice that, we have not defined value for both the fields. Also, both the fields are of data type `string`. Of course, there are [other data types available and supported by Firestore](https://firebase.google.com/docs/firestore/manage-data/data-types). At last, click on the **Save** button to save the first, though the empty, entry in the Firestore database.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/05/ss9.png' />\n\n_Did you notice how the ID for the document is generated on its own in the above image?_\n\n## Creating the UI form\n\nIn this section, let us wire the React app to have a simple form that can be further used to send data and store it in the cloud. Currently, the React app is bare-minimum or default that is generated by the scaffolding tool `create-react-app`. To run it in its current state, from the terminal window execute `npm start`. This will start the development server, and open a new browser window in your default browser at the URL: `http://localhost:3000/`. If you do not have any errors (_which you won't_) you will see the following screen.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/05/ss10-1.png' />\n\nThe code that is being rendered in the above screen comes from the only component we have so far in our React app, inside `App.js` file. Open this file and then define the following state. Right now, the `App` component is a functional component.\n\n```js\n// App.js\nclass App extends React.Component {\n  state = {\n    title: '',\n    author: ''\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n```\n\nNotice that, for the `App` component to have stated, we converted it to a class component. Next, inside the render function, add the following form that contains two input fields.\n\n```js\n// App.js\nrender() {\n        const { title, author } = this.state\n\n        return (\n            <div className='App'>\n                <form onSubmit={this.addBook}>\n                    <input\n                        type='text'\n                        placeholder='Title of the Book?'\n                        name='title'\n                        onChange={this.updateInput}\n                        value={title}\n          />\n          <br />\n                    <input\n                        type='text'\n                        placeholder='Author of the Book?'\n                        name='author'\n                        onChange={this.updateInput}\n                        value={author}\n          />\n          <br />\n                    <button type='submit'>Submit</button>\n                </form>\n            </div>\n        )\n  }\n```\n\nThis creates a not so awesome looking form but does serve the purpose of learning about Firestore.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/05/ss11-1.png' />\n\nBoth the input fields have a `value` attribute to specify which field is a target from the state object. Also, both the fields call a custom method `updateInput` to update the component's the state corresponding to the book's data from the input field. Let us right the business logic behind it before the render function in the above snippet.\n\n```js\n// App.js\nupdateInput = event => {\n  this.setState({ [event.target.name]: event.target.value });\n};\n```\n\n## Add data to the Firestore\n\nIn this section, you are going to write the logic behind how to add data from the React form to the Firestore. In the previous section, did you notice that the form has submitted button and an `onSubmit` event that leads to the function `addBook`. Define this function just before the `render()` method as below.\n\n```js\n// import this at the top of your file\nimport { firestore } from './firebase';\n\n// App.js\naddBook = event => {\n  event.preventDefault();\n\n  firestore.collection('books').add({\n    title: this.state.title,\n    author: this.state.author\n  });\n\n  this.setState({ title: '', author: '' });\n};\n```\n\nIn the above snippet, let us start by import an instance of the firestore from `firebase.js` that we previously defined. The `addBook` function takes an event as an argument. The first line inside the function stops the web page from refreshing after submitting the form. Refreshing a web page after clicking the submit button is the default behavior and we need to avoid.\n\nNext, using the `firestore.collection(\"books\")` points to the correct database collection where the data will be added on submitting the form. The collection name here is `books`. The `.add()` method submits the data from the updated to the firestore. Try adding one. Make sure `npm start` is running.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/05/ss12.png' />\n\nAfter adding filling up the form as above, click on the submit button. After you add a book's title and its author, both the input field is set to the empty string, which is the default state and is a necessary step to add more data. Now, go back to the firebase console, to the books' collection and you will notice, as shown below, a new object with a random but unique ID and corresponding data in it.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/05/ss13.png' />\n\n## Conclusion\n\nYou have now successfully integrated and added data to the Firebase store. The method discussed in this tutorial to access Firestore is not the only way, but yet a simple one. For more information or to dive deep, take a look at the Firestore documentation **[here](https://cloud.google.com/firestore/docs/)**.\n\n[Originally published at Crowdbotics](https://crowdbotics.ghost.io/how-to-integrate-firebase-firestore-react-and-crowdbotics-platform/)\n",
            "url": "https://amanhimself.dev//blog/how-to-integrate-firebase-firestore-react-and-crowdbotics-platform",
            "title": "How to integrate Firebase and Firestore cloud database with a React application",
            "summary": "How to integrate Firebase and Firestore cloud database with a React application",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/setup-a-react-app-with-typescript-storybook",
            "content_html": "---\ntitle: 'How to Setup a React App with TypeScript, Storybook'\nslug: 'setup-a-react-app-with-typescript-storybook'\ndate: '2019-06-14'\nthumbnail: '/thumbnails/react.png'\ntag: 'react'\ncanonicalUrl: 'https://blog.crowdbotics.com/setup-a-react-app-with-typescript-storybook-and-crowdbotics/'\n---\n\nIf you are building web applications with ReactJS, you might have heard or used TypeScript. They say TypeScript is the missing part from JavaScript's ecosystem. I must say, I did not enjoy writing React apps in TypeScript at first. But over time, I have learned this valuable lesson that if you want to continue a project that has a focused development process, TypeScript should be the way to go. Including types and structures like interfaces as an extension of JavaScript help to make the development process more predictable and safer. TypeScript offers other benefits in the form of code suggestions in a workspace and highlights errors as early as possible too.\n\n**In this tutorial, we are going to take a look at how to setup a React app that uses TypeScript along with Storybook.** It is targeted towards\ndevelopers who are want to learn these two important tools of ReactJS development. It can be a bit of a hassle to setup a TypeScript and Storybook together in one project but this tutorial will walk you through a smooth process and will showcase you that it is not a hassle at all.\n\n**Tld;**\n\n- Requirements\n- Creating a new React app\n- Adding Storybook\n- Adding Storybook configuration\n- First Storybook Component\n- Connecting Crowdbotics support to Your Github Repo\n- Conclusion\n\n## Requirements\n\nIn order to follow this tutorial, you must have:\n\n- NodeJS `v8.x.x` or higher installed along with npm/yarn\n- `create-react-app` installed globally to on your local dev machine generate a new React project\n\nBonus: You can also, use `npx` to generate a new React project without installing `create-react-app`.\n\n## Creating a new React app\n\nTo get started with a React project, generate one by running the below command in a terminal window\n\n```shell\ncreate-react-app hello-tsx-storybook\n--scripts-version=react-scripts-ts\n```\n\nThis command will take a few moments to execute completely. Once the React + TypeScript project is generated you will get the following file structure. Notice how there some of the files in the root directory are TypeScript's configuration files and in `src` directory, where the magic happens, has component files (such as `App.tsx`) with an extension of `tsx` at the end of file name rather a `.js`. This indicates that the component file now supports TypeScript.\n\n![](https://crowdbotics.ghost.io/content/images/2019/05/ss1-3.png)\n\nTo run the app in the current state, open command line interface, traverse inside the project root and run `npm start`. Once the webpack dev server starts, you will be directed to the URL `http://localhost:3000/` in a default web browser window with the following screen like below.\n\n![](https://crowdbotics.ghost.io/content/images/2019/05/ss2-2.png)\n\n## Adding Storybook\n\n**[Storybook](https://storybook.js.org/docs/basics/introduction/)** is a user interface development environment for UI components. If you are building a UI and you want to showcase all or some of the functionalities of the individual components but totally isolated from the current app's lifecycle and dependencies.\n\nStorybook is available for many front-end frameworks and libraries such as [ReactJS](https://medium.com/crowdbotics/building-a-mern-stack-app-with-material-ui-33ff8ca4da01), [Angular](https://medium.com/crowdbotics/learn-to-build-a-simple-progressive-web-app-pwa-with-angular-and-lighthouse-hacker-news-clone-51aca763032f), and [React Native](https://medium.com/crowdbotics/how-to-build-a-real-time-logo-detection-app-with-react-native-google-vision-api-and-crowdbotics-9ed65fbcd15).\n\nTo install Storybook as dev dependency for React, run the following command.\n\n```shell\nyarn add --dev @storybook/react @types/storybook__react\n```\n\nWhy install it as `devDependency`? We won't require storybook and its use in the production build, ever. So it is better to stick with it in the development environment only. One this dependency is installed, you have to install some of the peer dependencies that are required. Two of them are `react` and `react-dom` which we already have installed. The rest of them can be installed using the below command.\n\n```shell\nyarn add --dev babel-loader @babel/core\n```\n\nLastly, there three more dependencies that are required just to compile TypeScript.\n\n```shell\nyarn add --dev awesome-typescript-loader react-docgen-typescript-loader react-docgen-typescript-webpack-plugin\n```\n\n## Adding Storybook configuration\n\nBefore we can make Storybook work, we need to add a few more things. Let us start by creating a new directory `.storybook` in the root directory.\n\n```shell\nmkdir .storybook\n```\n\nInside this folder, there are several files that are required to be created.\n\n```shell\ncd .storybook\n\ntouch addons.js config.js tsconfig.json webpack.config.js\n```\n\nThe output of the above command is going to be:\n\n![](https://crowdbotics.ghost.io/content/images/2019/05/ss3-3.png)\n\nFor a basic Storybook configuration, the only thing you need to do is tell Storybook where to find stories and include the path inside `.storybook/config.js`. In our current scenario, we are going to stories inside the `src/components` directory (_just a personal preference_).\n\n```js\nimport { configure } from '@storybook/react';\n\nconst req = require.context('../src/components', true, /.stories.tsx$/);\nfunction loadStories() {\n  req.keys().forEach(req);\n}\n\nconfigure(loadStories, module);\n```\n\nNote, that, prior to this step, `components` directory inside `src` did not exist. You will have to create that manually. The above snippet of code is to create a pattern such that all the stories match a particular glob. code is Next file that needs to be configured is `tsconfig.json` inside the storybook directory. This file is going to be responsible to compile stories from TypeScript to JavaScript. Add the following to this file.\n\n```json\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"allowSyntheticDefaultImports\": true,\n    \"module\": \"es2015\",\n    \"target\": \"es5\",\n    \"lib\": [\"es6\", \"dom\"],\n    \"sourceMap\": true,\n    \"allowJs\": false,\n    \"jsx\": \"react\",\n    \"moduleResolution\": \"node\",\n    \"rootDir\": \"../\",\n    \"outDir\": \"dist\",\n    \"noImplicitReturns\": true,\n    \"noImplicitThis\": true,\n    \"noImplicitAny\": true,\n    \"strictNullChecks\": true,\n    \"declaration\": true\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\n    \"node_modules\",\n    \"build\",\n    \"dist\",\n    \"scripts\",\n    \"acceptance-tests\",\n    \"webpack\",\n    \"jest\",\n    \"src/setupTests.ts\",\n    \"**/*/*.test.ts\",\n    \"examples\"\n  ]\n}\n```\n\nLastly, add the following code inside the file `.storybook/webpack.config.js`.\n\n```js\nmodule.exports = ({ config }) => {\n  config.module.rules.push({\n    test: /\\.(ts|tsx)$/,\n    use: [\n      {\n        loader: require.resolve('awesome-typescript-loader'),\n        options: {\n          presets: [['react-app', { flow: false, typescript: true }]],\n          configFileName: './.storybook/tsconfig.json'\n        }\n      },\n      {\n        loader: require.resolve('react-docgen-typescript-loader')\n      }\n    ]\n  });\n  config.resolve.extensions.push('.ts', '.tsx');\n  return config;\n};\n```\n\nTo complete the setup, open `package.json` file and add the script to run the storybook interface.\n\n```json\n\"storybook\": \"start-storybook -p 4000 -c .storybook\"\n```\n\n## First Storybook Component\n\nIn order to proceed and test our current setup to work as expected, let us write a new component and its story. Create a new file called `Button.tsx` inside `components` directory with the following code for the component itself.\n\n```tsx\nimport * as React from 'react';\n\nexport interface IButtonProps {\n  children?: React.ReactNode;\n  onClick?: (e: any) => void;\n}\n\nconst styles = {\n  border: '1px solid #eee',\n  borderRadius: 3,\n  backgroundColor: '#FFFFFF',\n  cursor: 'pointer',\n  fontSize: 15,\n  padding: '3px 10px',\n  margin: 10\n};\n\nconst Button: React.SFC<IButtonProps> = props => (\n  <button onClick={props.onClick} style={styles} type=\"button\">\n    {props.children}\n  </button>\n);\n\nButton.defaultProps = {\n  children: null,\n  onClick: () => {}\n};\nexport default Button;\n```\n\nThe above component is a stateless component (_aka functional component_). Now, while being inside the same directory, create another file `button.stories.tsx` with the following snippet of code.\n\n```tsx\nimport * as React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport Button from './Button';\n\nstoriesOf('Button', module)\n  .add('with text', () => <Button>Hello Button</Button>)\n  .add('with some emoji', () => <Button>😀 😎 👍 💯</Button>);\n```\n\nGo to the terminal window and run the script `yarn run storybook`. This will open a new window in your default web browser at URL: `http://localhost:4000/?path=/story/button--with-text` with the following result.\n\n![](https://crowdbotics.ghost.io/content/images/2019/05/ss4-2.png)\n\n![](https://crowdbotics.ghost.io/content/images/2019/05/ss5-3.png)\n\n## Conclusion\n\nKudos to you if have reached so far. You have configured Storybook work with TypeScript and wrote a story for a custom `Button` component using the TypeScript. This tutorial was just an introduction. To dive deep inside the world of storybooks, I would recommend you to go through their official docs [here](https://storybook.js.org/docs/guides/guide-react/).\n\n[Originally published at Crowdbotics](https://crowdbotics.ghost.io/setup-a-react-app-with-typescript-storybook-and-crowdbotics/)\n",
            "url": "https://amanhimself.dev//blog/setup-a-react-app-with-typescript-storybook",
            "title": "How to Setup a React App with TypeScript, Storybook",
            "summary": "How to Setup a React App with TypeScript, Storybook",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/build-a-custom-modal-with-the-animated-api-in-react-native",
            "content_html": "---\ntitle: 'Build a Custom Modal with the Animated API in React Native'\ndate: '2019-06-13'\nslug: 'build-a-custom-modal-with-the-animated-api-in-react-native'\nthumbnail: '/thumbnails/expo.png'\ntag: 'react-native'\ncanonicalUrl: 'https://heartbeat.fritz.ai/build-a-custom-modal-with-the-animated-api-in-react-native-abf4b650622'\n---\n\n![cover_image](https://i.imgur.com/0bXMoSY.png)\n\n> [Originally published at Heartbeat](https://heartbeat.fritz.ai/build-a-custom-modal-with-the-animated-api-in-react-native-abf4b650622)\n\nCreating a better user experience is one of the most important aspects of any application. This is where animations in mobile applications come into play. Animations are an important part of your mobile application.\n\nFortunately, for React Native developers, there is recommended a way to create desirable user experiences. It can be achieved through [Animated API](https://facebook.github.io/react-native/docs/animated.html). For most use cases Animated API provides the best use case to design and create fluid animations.\n\nIn this tutorial, you are going to take dive deep in creating a custom modal and animated it on a button click. This is the final result we looking to achieve in a React Native application.\n\n<img src='https://miro.medium.com/max/367/1*F9LUoINWB7uRjTYX5FCDdg.gif' />\n\n### Table of Contents\n\n- Prerequisites\n- Setup up Screens\n- Setting up Redux\n- Creating an animated Custom Modal\n- Integrating Custom Modal to HomeScreen\n- Animating HomeScreen\n- Conclusion\n\n## Prerequisites\n\nHere is a complete list of plugins, packages, and tools that you’re going to need in order to follow along.\n\n- Nodejs >= `v8.x.x` installed along with npm/yarn.\n- `watchman`, the file change watcher for React Native projects.\n- [Expo CLI](https://docs.expo.io/versions/latest/workflow/expo-cli/) >= `v2.19.4`.\n\nTo get started create a new project using `expo-cli` toolchain with the following set of commands. The first command will create a new project directory. Make sure you are inside the project when running the application in a simulator environment or a real device.\n\n```shell\n# create a new bare project\nexpo-cli init rn-animations\n\n# navigate inside the directory\ncd rn-animations\n\n# to start the project\nyarn start\n```\n\nWe are using `yarn` to kickstart the app but you are most welcome to use npm or npm scrips or use Expo CLI tool command: `expo start`. This way you can verify that the project has been created successfully.\n\nNext step is to install different dependencies or libraries that our little demo project is going to depend. Run the below command from a terminal window.\n\n```shell\nyarn add redux react-redux styled-components @expo/vector-icons\n```\n\nAfter installing these dependencies, this is how `package.json` file looks like.\n\n```json\n{\n  \"main\": \"node_modules/expo/AppEntry.js\",\n  \"scripts\": {\n    \"start\": \"expo start\",\n    \"android\": \"expo start --android\",\n    \"ios\": \"expo start --ios\",\n    \"web\": \"expo start --web\",\n    \"eject\": \"expo eject\"\n  },\n  \"dependencies\": {\n    \"@expo/vector-icons\": \"^10.0.2\",\n    \"expo\": \"^33.0.0\",\n    \"react\": \"16.8.3\",\n    \"react-dom\": \"^16.8.6\",\n    \"react-native\": \"https://github.com/expo/react-native/archive/sdk-33.0.0.tar.gz\",\n    \"react-native-web\": \"^0.11.4\",\n    \"react-redux\": \"^7.0.3\",\n    \"redux\": \"^4.0.1\",\n    \"styled-components\": \"^4.3.1\"\n  },\n  \"devDependencies\": {\n    \"babel-preset-expo\": \"^5.1.1\"\n  },\n  \"private\": true\n}\n```\n\n## Setup up Screens\n\nCreate two screens inside a new directory called `screens/`. One is going to be the home screen for the app and the main UI point. The second screen is going to be a normal screen but will behave like a custom modal in terms of UI behavior. You can name them whatever you like but make sure to remember those names.\n\nHere is the initial snippet of `screens/HomeScreen.js`.\n\n```js\nimport React from 'react';\nimport styled from 'styled-components';\n\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <Container>\n        <ButtonText>Open Modal</ButtonText>\n      </Container>\n    );\n  }\n}\n\nconst Container = styled.View`\n  flex: 1;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst ButtonText = styled.Text`\n  font-size: 20px;\n  font-weight: 600;\n`;\n\nexport default HomeScreen;\n```\n\nThe above snippet is using `styled-components` to define new UI elements using React Native API. For more information on to read on how to integrate `styled-components` and its advantage in a React Native app, please go through this [link](https://medium.com/swlh/using-styled-components-with-react-native-de645fcf4787).\n\nFor `CustomModal.js`:\n\n```js\nimport React from 'react';\nimport styled from 'styled-components';\n\nclass CustomModal extends React.Component {\n  render() {\n    return (\n      <Container>\n        <Text>CustomModal</Text>\n      </Container>\n    );\n  }\n}\n\nconst Container = styled.View`\n  flex: 1;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Text = styled.Text`\n  font-size: 20px;\n  font-weight: 600;\n`;\n\nexport default CustomModal;\n```\n\nNow, let us import the `HomeScreen` component inside `App.js`. This component is going to be the entry point of our app.\n\n```js\nimport React from 'react';\n\nimport HomeScreen from './screens/HomeScreen';\n\nexport default function App() {\n  return <HomeScreen />;\n}\n```\n\nOn running the application using `yarn start` you will get the following result. The header has a breakthrough line indicates that the stack navigator has been integrated into our app.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*VRSKOFVSI-C0KEaTlyW_Pw.png' />\n\n## Setting up Redux\n\nIn this section, let us create a simple reducer for Redux state management library. It might be that redux as a library is overkill for the purpose of this tutorial, so if you don't want to use it, please find a way that works for you. Also, I am not going to get into details of how you should manage reducers and actions right now. That said, first create a reducer inside a new file called `reducers/index.js` with an initial state.\n\n```js\nconst initialState = {\n  action: ''\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'OPEN_MODAL':\n      return { ...state, action: 'openModal' };\n    case 'CLOSE_MODAL':\n      return { ...state, action: 'closeModal' };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n```\n\nSince the `redux` and `react-redux` dependencies are already installed, open `App.js` file and inside write the code to hook a store provider for redux to manage global state in the app.\n\n```js\nimport React from 'react';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport HomeScreen from './screens/HomeScreen';\nimport reducer from './reducers';\n\nconst store = createStore(reducer);\n\nconst App = () => (\n  <Provider store={store}>\n    <HomeScreen />\n  </Provider>\n);\n\nexport default App;\n```\n\nThe redux setup is complete. Let us move on to the next section where the real thing starts.\n\n## Creating an animated Custom Modal\n\nEven though we are creating this custom modal as a screen, you can always use this as a re-usable component. Open `CustomModel.js` file and add the following snippet of code.\n\n```js\nimport React from 'react';\nimport styled from 'styled-components';\n\nclass CustomModal extends React.Component {\n  render() {\n    return (\n      <Container>\n        <Header />\n        <Body />\n      </Container>\n    );\n  }\n}\n\nconst Container = styled.View`\n  position: absolute;\n  background: white;\n  width: 100%;\n  height: 100%;\n  z-index: 100;\n`;\n\nconst Header = styled.View`\n  background: #333;\n  height: 150px;\n`;\n\nconst Body = styled.View`\n  background: #eaeaea;\n  height: 900px;\n`;\n\nexport default CustomModal;\n```\n\nThe above component is simple. It contains three react native views. On the `Container` we are using the CSS property `position: absolute`. The `z-index` will allow the modal to appear on the top of the `HomeScreen` component. The `Header` and the `Body` are subviews with fixed `height`.\n\nIn order to see this in action, open `HomeScreen.js` and import it.\n\n```js\n// ...\nimport CustomModal from './CustomModal';\n\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <Container>\n        <CustomModal />\n        <ButtonText>Open Modal</ButtonText>\n      </Container>\n    );\n  }\n}\n\n// ...\n```\n\nYou will get the following result in your simulator.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*rIrz_kLxluX_9Pll7tj-Vg.png' />\n\nGreat! Now that we can see the Custom Model on the screen, let us start applying some animations. To apply animations in this demo application, we will be using `Animated` API from React Native. You do not have to install anything rather than import the API from React Native core. Open `CustomModel.js` and modify it. In the below snippet, also define an initial state.\n\nThis initial state value defines an Animated `top` value to push model up and down.\n\n```js\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Animated } from 'react-native';\n\nclass CustomModal extends React.Component {\n  state = {\n    top: new Animated.Value(900)\n  };\n  render() {\n    return (\n      <AnimatedContainer style={{ top: this.state.top }}>\n        <Header />\n        <Body />\n      </AnimatedContainer>\n    );\n  }\n}\n\nconst Container = styled.View`\n  position: absolute;\n  background: white;\n  width: 100%;\n  height: 100%;\n  z-index: 100;\n`;\n\nconst AnimatedContainer = Animated.createAnimatedComponent(Container);\n\nconst Header = styled.View`\n  background: #333;\n  height: 150px;\n`;\n\nconst Body = styled.View`\n  background: #eaeaea;\n  height: 900px;\n`;\n\nexport default CustomModal;\n```\n\nRight now, the initial top value is receiving an Animated value of `900`. The syntax `Animated.Value()` is used to bind style properties such as we are using with `AnimatedContainer`. In order to perform animations, the component or the `View` has to be Animated, thus, you can `Animated.createAnimatedComponent()` to transform a basic `View` an Animated one.\n\nNext, define a custom method called `toggleModal` before the render function. This function will handle the animations to open and close the modal. So far, it is:\n\n```js\ncomponentDidMount() {\n        this.toggleModal()\n    }\n\ntoggleModal = () => {\n    Animated.spring(this.state.top, {\n        toValue: 174\n    }).start()\n}\n```\n\nIn the above snippet, we are using spring animations using `Animated.spring()` method. This is used to configure animations based on the analytical values to create a simple spring model based on physics. To read more about this method, take a look at this [link](https://facebook.github.io/react-native/docs/animated#spring) in official React Native documentation. The `toValue` is passed as the second parameter. Lastly, to start an animation, you need to call the method `.start()`.\n\nTo trigger this animation on the first render of the component `CustomModal`, we are using React's lifecycle method `componentDidMount()`.\n\nYou will get the following result.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*Nl3yw5Rgy4Wo3NnBGpvSbg.gif' />\n\nWe need to add a button to close the modal. Let us add the styles and view for the close button on the modal. Create a `CloseView` component with `styled-components` library inside a `TouchableOpacity` button. Also, for the close icon, we are going to use `@expo/vector-icons` library.\n\n```js\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Animated, TouchableOpacity, Dimensions } from 'react-native';\nimport * as Icon from '@expo/vector-icons';\n\nconst screenHeight = Dimensions.get('window').height;\n\nclass CustomModal extends React.Component {\n  state = {\n    top: new Animated.Value(screenHeight)\n  };\n\n  componentDidMount() {\n    this.toggleModal();\n  }\n\n  toggleModal = () => {\n    Animated.spring(this.state.top, {\n      toValue: 174\n    }).start();\n  };\n\n  closeModal = () => {\n    Animated.spring(this.state.top, {\n      toValue: screenHeight\n    }).start();\n  };\n\n  render() {\n    return (\n      <AnimatedContainer style={{ top: this.state.top }}>\n        <Header />\n        <TouchableOpacity\n          onPress={this.closeModal}\n          style={{\n            position: 'absolute',\n            top: 120,\n            left: '50%',\n            marginLeft: -22,\n            zIndex: 1\n          }}\n        >\n          <CloseView style={{ elevation: 10 }}>\n            <Icon.Ionicons name=\"ios-close\" size={44} color=\"blue\" />\n          </CloseView>\n        </TouchableOpacity>\n        <Body />\n      </AnimatedContainer>\n    );\n  }\n}\n\nconst Container = styled.View`\n  position: absolute;\n  background: white;\n  width: 100%;\n  height: 100%;\n  z-index: 100;\n`;\n\nconst AnimatedContainer = Animated.createAnimatedComponent(Container);\n\nconst Header = styled.View`\n  background: #333;\n  height: 150px;\n`;\n\nconst Body = styled.View`\n  background: #eaeaea;\n  height: ${screenHeight};\n`;\n\nconst CloseView = styled.View`\n  width: 44px;\n  height: 44px;\n  border-radius: 22px;\n  background: white;\n  justify-content: center;\n  align-items: center;\n  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.5);\n`;\n\nexport default CustomModal;\n```\n\nTo calculate the height of a screen's device, in the above snippet, start by importing `Dimensions` API. React Native uses Dots Per Inch (DPI) to measure the size (_width and height_) of a device's screen. `Dimensions.get(\"window\").height` allows to gather the screen height. We then use this `screenHeight` variable in three places. First, the initial state which was before had a static value of `900` is now able to adapt for different devices.\n\nSecond, to close the modal or inside `closeModal()` method. In the `toggleModal` function we are setting a custom to value of `174` which leaves a partial view of the `HomeScreen` in the background. If you set this value to `0`, the custom modal will cover the whole screen. To close the modal is setting this value to default screen's height. The `TouchableOpacity` that wraps the close button invokes the method `closeModal`.\n\nThe third place where the variable `screenHeight` are the styles of the view container: `Body`. Please note that box-shadow will not work on Android devices. If you still want to give the close button a shadow, use `elevation` property as inline styles to `CloseView`.\n\nYou will get the following result in your simulator device.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*ZCOwR-WWqOjoE1gkuKkArQ.gif' />\n\n## Integrating Redux to Modal\n\nIn this section, you are going to use Redux to manage the state of opening and closing the modal. We have already defined the reducers and actions to serve this purpose. Open `CustomModal.js` and import the `connect` Hight Order Function `react-redux` library. After that, create two new functions that are somewhat boilerplate code when using a redux in any React or React Native application. These functions are called: `mapStateToProps()` and `mapDispatchToProps()`.\n\n```js\n// ...\nimport { connect } from 'react-redux';\n\nfunction mapStateToProps(state) {\n  return { action: state.action };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    closeModal: () =>\n      dispatch({\n        type: 'CLOSE_MODAL'\n      })\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomModal);\n```\n\nNext, let us merge the business logic to trigger animations for opening and closing the modal inside the same `toggleModal` function. The below snippet uses `if` statements to track the right action coming from the global state.\n\n```js\ntoggleModal = () => {\n  if (this.props.action === 'openModal') {\n    Animated.spring(this.state.top, {\n      toValue: 174\n    }).start();\n  }\n  if (this.props.action === 'closeModal') {\n    Animated.spring(this.state.top, {\n      toValue: screenHeight\n    }).start();\n  }\n};\n```\n\nAlso, change the value for `onPress` attribute at the `TouchableOpacity` to `onPress={this.props.closeMenu}`. Lastly, `componentDidMount()` method is going to call `toggleModal()` only on the initial render which means it is going to be called only once. To resolve this, let us use `componentDidUpdate()`. This lifecycle method triggers every time there is a new state or change in props.\n\n```js\ncomponentDidUpdate() {\n        this.toggleModal()\n    }\n```\n\n## Integrating Custom Modal to HomeScreen\n\nSince the initial state at the application level right now is empty, you are not going to see the modal trigger, by itself, when you refresh the Expo app. This serves the purpose of keeping the default behavior of the modal to be closed. But top open this custom modal, we are going to add a button on the `HomeScreen` to activate it.\n\nOpen `HomeScreen.js` and connect it to the redux state like below.\n\n```js\nimport React from 'react';\nimport { TouchableOpacity } from 'react-native';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport CustomModal from './CustomModal';\n\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <Container>\n        <CustomModal />\n        <TouchableOpacity onPress={this.props.openModal}>\n          <ButtonText>Open Modal</ButtonText>\n        </TouchableOpacity>\n      </Container>\n    );\n  }\n}\n\nconst Container = styled.View`\n  flex: 1;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst ButtonText = styled.Text`\n  font-size: 20px;\n  font-weight: 600;\n`;\n\nfunction mapStateToProps(state) {\n  return { action: state.action };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    openModal: () =>\n      dispatch({\n        type: 'OPEN_MODAL'\n      })\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeScreen);\n```\n\nClick the button `Open Modal` on the UI screen and you will get similar results as follows.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*4RgkT_Rmn2gqO-6Q99wXHA.gif' />\n\n_Congratulations! You have just created a custom model that is animated and integrated it from another screen_. You can end this tutorial right here if it serves the purpose or the as the title suggests. Though, if you want to continue, let us add some animations to the HomeScreen to create a pleasing UI in the next section.\n\n## Animating HomeScreen\n\nIn the `HomeScreen` component we are going to import quite a few APIs from React Native. The result we are trying to achieve is as follows. It will be easier for you to view what we want to happen to understand the code in this section.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*F9LUoINWB7uRjTYX5FCDdg.gif' />\n\nNow that you have seen that let us first go through what are we going to import from `react-native`.\n\n```js\n// ...\nimport {\n  TouchableOpacity,\n  StatusBar,\n  Animated,\n  Easing,\n  Platform\n} from 'react-native';\n```\n\nIn the above demo, we are switching between status bar's color from dark to light when the modal opens, we are going to use `StatusBar` inside `componentDidMount()`.\n\n```js\n    componentDidMount() {\n        StatusBar.setBarStyle(\"dark-content\", true)\n\n        if (Platform.OS == \"android\") {\n            StatusBar.setBarStyle(\"light-content\", true)\n        }\n    }\n```\n\nNext, we define an initial state to manage Animations with two properties, `scale` and `opacity`.\n\n```js\nstate = {\n  scale: new Animated.Value(1),\n  opacity: new Animated.Value(1)\n};\n```\n\nThe create a `toggleModal` method where most of the things are happening. It gets triggered by `componentDidUpdate()` lifecycle method just like in the `CustomModal` component.\n\n```js\ncomponentDidUpdate() {\n        this.toggleModal()\n    }\n\n    toggleModal = () => {\n        if (this.props.action === \"openModal\") {\n            Animated.timing(this.state.scale, {\n                toValue: 0.9,\n                duration: 300,\n                easing: Easing.in()\n            }).start()\n            Animated.spring(this.state.opacity, {\n                toValue: 0.5\n            }).start()\n\n            StatusBar.setBarStyle(\"light-content\", true)\n        }\n\n        if (this.props.action === \"closeModal\") {\n            Animated.timing(this.state.scale, {\n                toValue: 1,\n                duration: 300,\n                easing: Easing.in()\n            }).start()\n            Animated.spring(this.state.opacity, {\n                toValue: 1\n            }).start()\n\n            StatusBar.setBarStyle(\"dark-content\", true)\n        }\n    }\n```\n\nTo trigger the effect `HomeScreen` shrinking in the background when the modal opens, is achieved by using `Animated.timing()`. This method maps time range to an `easing` value. This `easing` value triggers the `Easing` module from react native core. This module implements common visualization motions such as bounce, elastic, in (_which we are using_) and out, cubic, sin, back, ease, linear, quad, inout and many more. To get complete information about Easing, please refer to the docs [here](https://facebook.github.io/react-native/docs/easing).\n\nThe `Animated.timing()` has a default value of `500` milliseconds. We are changing it to `300`.\n\nTo create partial opacity when the home screen shrinks in the background, we are again using spring animations. Depending on whether the modal is being opened or closed, the style of the `StatusBar` is being changed by calling the `StatusBar.setBarStyle()` method.\n\nHere is the complete code for `HomeScreen.js` file.\n\n```js\nimport React from 'react';\nimport {\n  TouchableOpacity,\n  StatusBar,\n  Animated,\n  Easing,\n  Platform\n} from 'react-native';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport CustomModal from './CustomModal';\n\nclass HomeScreen extends React.Component {\n  state = {\n    scale: new Animated.Value(1),\n    opacity: new Animated.Value(1)\n  };\n\n  componentDidMount() {\n    StatusBar.setBarStyle('dark-content', true);\n\n    if (Platform.OS == 'android') {\n      StatusBar.setBarStyle('light-content', true);\n    }\n  }\n\n  componentDidUpdate() {\n    this.toggleModal();\n  }\n\n  toggleModal = () => {\n    if (this.props.action === 'openModal') {\n      Animated.timing(this.state.scale, {\n        toValue: 0.9,\n        duration: 300,\n        easing: Easing.in()\n      }).start();\n      Animated.spring(this.state.opacity, {\n        toValue: 0.5\n      }).start();\n\n      StatusBar.setBarStyle('light-content', true);\n    }\n\n    if (this.props.action === 'closeModal') {\n      Animated.timing(this.state.scale, {\n        toValue: 1,\n        duration: 300,\n        easing: Easing.in()\n      }).start();\n      Animated.spring(this.state.opacity, {\n        toValue: 1\n      }).start();\n      StatusBar.setBarStyle('dark-content', true);\n    }\n  };\n\n  render() {\n    return (\n      <RootView>\n        <CustomModal />\n        <AnimatedContainer\n          style={{\n            transform: [{ scale: this.state.scale }],\n            opacity: this.state.opacity\n          }}\n        >\n          <TouchableOpacity onPress={this.props.openModal}>\n            <ButtonText>Open Modal</ButtonText>\n          </TouchableOpacity>\n        </AnimatedContainer>\n      </RootView>\n    );\n  }\n}\n\nconst RootView = styled.View`\n  flex: 1;\n  background: black;\n`;\n\nconst Container = styled.View`\n  flex: 1;\n  background: white;\n  border-top-left-radius: 10px;\n  border-top-right-radius: 10px;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst AnimatedContainer = Animated.createAnimatedComponent(Container);\n\nconst ButtonText = styled.Text`\n  font-size: 20px;\n  font-weight: 600;\n`;\n\nfunction mapStateToProps(state) {\n  return { action: state.action };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    openModal: () =>\n      dispatch({\n        type: 'OPEN_MODAL'\n      })\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeScreen);\n```\n\nIn the above snippet, do take note of `RootView`. We are also converting the good old `Container` into an Animated view.\n\n## Conclusion\n\nThis completes this tutorial about creating animated custom modal to provide a pleasant user experience in your react native application. You learned how to use the animated library and some of its methods such as `spring`, `timing` along with `Easing` module. With the help of redux to manage state, you created a custom modal UI.\n",
            "url": "https://amanhimself.dev//blog/build-a-custom-modal-with-the-animated-api-in-react-native",
            "title": "Build a Custom Modal with the Animated API in React Native",
            "summary": "Build a Custom Modal with the Animated API in React Native",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/build-a-twitter-clone-server-with-apollo-graphql-nodejs",
            "content_html": "---\ntitle: 'Build a Twitter Clone Server with Apollo, GraphQL, Nodejs, and Crowdbotics'\ndate: '2019-06-13'\nslug: 'build-a-twitter-clone-server-with-apollo-graphql-nodejs'\nthumbnail: '/thumbnails/node.png'\ntag: 'nodejs'\ncanonicalUrl: 'https://crowdbotics.ghost.io/build-a-twitter-clone-server-with-apollo-graphql-nodejs-and-crowdbotics/'\n---\n\n![cover_image](https://i.imgur.com/Cg4Xsqq.jpg)\n\n> [Originally published at Crowdbotics](https://crowdbotics.ghost.io/build-a-twitter-clone-server-with-apollo-graphql-nodejs-and-crowdbotics/)\n\nIn the last few years, GraphQL becomes a popular choice to build an API. It serves a great alternative to the REST APIs approach. Not only it is an open source application-layer query language, in comparison to REST, GraphQL fulfills the approach that a client request's only the desired set of information from the server in a single request.\n\nIn this tutorial, you will be building a server using Node.js, Express and Apollo server library. You will learn how to efficiently build a server from scratch that implements GraphQL as the query language to create the API. We will be using MongoDB to create a local instance of the database and store the application data.\n\nTo learn more about the basics of GraphQL, how it differs from REST, its building blocks like schema, resolvers, queries, and mutations, please refer to the previous post **[Creating a GraphQL Server with Nodejs](https://medium.com/crowdbotics/creating-a-graphql-server-with-nodejs-ef9814a7e0e6)**. If you have an idea of what they are, you can continue to read this tutorial.\n\nTLDR;\n\n- Requirements\n- Getting Started\n- Running your first GraphQL server\n- Adding a Mongoose Schema\n- How to define GraphQL Types, Queries and Mutations\n- Real-time Database Updates with GraphQL API\n- Conclusion\n\n## Requirements\n\nIn order to follow this tutorial, you are required to have installed the following on your local machine:\n\n- Nodejs `v8.x.x` or higher installed along with `npm/yarn` as the package manager\n\n## Getting Started\n\nCreate a new empty directory and initialize it with a `package.json` file by running the following commands from a terminal window.\n\n```shell\n# create new directory\nmkdir twitter-clone-apollo-server\n\n# traverse inside the directory\ncd twitter-clone-apollo-server\n\n# initialize the package.json file\nnpm init  --yes\n```\n\nThe last command will create a `package.json` file. We are going to build an integrated server using [Expressjs](https://expressjs.com/) and Apollo server.\n\n> **Wait, what is an Apollo Server?**\n\nThe Apollo Server is the server part of GraphQL where you manage and define a GraphQL API and handle responses that are sent back to the client in response to a network request.\n\nWhen it comes to building a GraphQL API using Apollo on the server, there are two ways you can do that. One is called _standalone_ which is irrespective of the server-side web framework (_such as Express, Koa, Hapi and so on_) using the `apollo-server` library. This package is kept library-agnostic, so it is possible to connect it with a lot of third-party libraries in client and server applications.\n\nAnother way is to use the community maintained packages such as `apollo-server-express`. Most popular HTTP Node.js frameworks are having their own community packages that you can check [here](https://github.com/apollographql/apollo-server/tree/master/packages). We are going to leverage this approach.\n\nRun the following command to install the dependencies.\n\n```shell\nnpm install --save express apollo-server-express graphql\n```\n\nTo verify if these dependencies are installed, open `package.json` file in your favorite code editor and you will get a similar result like below.\n\n```json\n{\n  \"name\": \"twitter-clone-apollo-server\",\n  \"version\": \"0.0.1\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"Aman Mittal <amandeepmittal@live.com> (www.amanhimself.dev)\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"apollo-server-express\": \"^2.5.0\",\n    \"express\": \"^4.17.0\",\n    \"graphql\": \"^14.3.0\"\n  }\n}\n```\n\n## Running your first GraphQL server\n\nTo understand how Apollo Server works, let us create a small bare minimum GraphQL server with the Express framework. Please note that, if you already know how to integrate Apollo server with express and create a hello world example, you are free to skip this section and move on to the next one.\n\nAt the root of your project, create a new file: `index.js` with the following code. We start by requiring the required dependencies in order to create this server and make it work.\n\n```js\nconst express = require('express');\nconst { ApolloServer, gql } = require('apollo-server-express');\n```\n\nThen define some constants such as for an instance of the Express application, `app` and a port number where the local instance of the server is going to run. Note that, the `port` is currently using an environment value plus the default value of `5000` as the local port number if there is not environment value provided via `process.env.PORT`.\n\n```js\nconst app = express();\nconst port = process.env.PORT || 5000;\n```\n\nThe `process.env`global variable is injected by the Node at runtime for your application to use and it represents the state of the system environment your application is in when it starts.\n\nNext, we define a basic schema. A **schema** in GraphQL is defined at the server in the form of objects. Each object corresponds to data types such that they can be queried upon. This object type has a name and fields. Like the below snippet, there is `Query` called `hello` which is of type string.\n\n```js\nconst typeDefs = gql`\n  type Query {\n    hello: String\n  }\n`;\n```\n\nThere are pre-defined scalar types in GraphQL like the string in the above snippet. Visit this **[link](https://graphql.org/learn/schema/)** to read more about them. **Queries** are what you use to make a request to a GraphQL API.\n\nIn order to execute this query, you need a resolver. Resolvers are the link between the schema and the data. They are the functions that contain the logic behind a query or mutation. They are used to retrieve data and return it on the relevant client request.\n\n```js\nconst resolvers = {\n  Query: {\n    hello: () => 'Hello world!'\n  }\n};\n```\n\nIn the above snippet, we are defining a resolver that will return the string `Hello World` on querying the server. If you have built servers before using Express, you can think of a resolver as a controller where each controller is built for a specific route.\n\nLastly, we need to use a middleware function from the Apollo Server Express library to instantiate the GraphQL API.\n\n```js\nconst server = new ApolloServer({ typeDefs, resolvers });\n\nserver.applyMiddleware({ app });\n```\n\nHere is the complete code for `index.js` file.\n\n```js\nconst express = require('express');\nconst { ApolloServer, gql } = require('apollo-server-express');\n\nconst app = express();\nconst port = process.env.PORT || 5000;\n\nconst typeDefs = gql`\n  type Query {\n    hello: String\n  }\n`;\n\nconst resolvers = {\n  Query: {\n    hello: () => 'Hello world!'\n  }\n};\n\nconst server = new ApolloServer({ typeDefs, resolvers });\n\nserver.applyMiddleware({ app });\n\napp.listen(port, () =>\n  console.log(\n    `🚀 Server ready at http://localhost:${port}${server.graphqlPath}`\n  )\n);\n```\n\nNow, go back to the terminal window and run `node index.js` command to trigger the server up and running. Visit `http://localhost:5000/graphql` in a browser window to see that API endpoint in action. Apollo comes with a default playground in order to test the API.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/05/ss1-4.png' />\n\n## Adding a Mongoose Schema\n\nLet us mongoose to create a MongoDB based database model inside the Express server app. To proceed, you will have to install the dependency first. Go to your terminal window, terminate the `node index.js` command first and then run the following.\n\n```shell\nnpm install -S mongoose\n```\n\nOnce this dependency is installed, create a new folder called `models`. Inside it, create a new file called `TweetModel.js`. This will be responsible for holding the mongoose schema. For those of who do not know what mongoose, well, it is an ORM (object relation mapper) that helps the server app written in Node.js/Expressjs to communicate with the MongoDB database.\n\nMongoose allows you to define objects with a strongly typed schema that is mapped as a MongoDB collection. This schema architecture allows us to provide an organized shape to the document inside the MongoDB collection where the data is stored.\n\nStart by importing the dependency at the top of the file and then connect the ORM to a local instance of the MongoDB database in the form of a URI: `mongodb://localhost:27017/twitter`. The port `27017` is the default port number where MongoDB runs on your local dev machine irrespective of the operating system you are using. The `/twitter` in the end is just the name of the database instance. You can name it anything. `mongoose.connect()` the function takes this URI as the first argument.\n\n_To learn more about how to create and use MongoDB in the cloud using MongoDB atlas, read our earlier post [here](https://medium.com/crowdbotics/how-to-build-a-serverless-backend-with-aws-lambda-and-nodejs-e0d1257086b4)._\n\nOpen `TweetModel.js` file and add the following.\n\n```js\nconst mongoose = require('mongoose');\n\nmongoose.Promise = global.Promise;\nmongoose.connect('mongodb://localhost:27017/twitter', {\n  useNewUrlParser: true\n});\n\nconst Schema = mongoose.Schema;\n\nconst tweetSchema = new Schema({\n  tweet: String,\n  author: String\n});\n\nconst TweetModel = mongoose.model('Tweet', tweetSchema);\n```\n\nNotice the `tweetSchema` object. It only contains three fields at the moment. The whole `tweet` as a string, and the name of the author who tweets. It is important to take notice of this schema, later, when you are going to create GraphQL queries, this is the same schema pattern you will have to follow.\n\nNow, let us define the CRUD operations that this current Tweet model is going to perform on the MongoDB instance. Add the below snippet of code to `TweetModel.js` after you have defined the `TweetModel` itself.\n\n```js\nexport default {\n  getTweets: () => TweetModel.find().sort({ _id: -1 }),\n  getTweet: _id => TweetModel.findOne({ _id }),\n  createTweet: args => TweetModel(args).save(),\n  deleteTweet: args => {\n    const { _id } = args;\n\n    TweetModel.remove({ _id }, error => {\n      if (error) {\n        console.log('Error Removing: ', error);\n      }\n    });\n\n    return args;\n  },\n  updateTweet: args => {\n    const { _id, tweet } = args;\n\n    TweetModel.update(\n      { _id },\n      {\n        $set: { tweet }\n      },\n      { upsert: true },\n      error => {\n        if (error) {\n          console.log('Error Updating: ', error);\n        }\n      }\n    );\n\n    args.author = 'User123'; // temporary user\n\n    return args;\n  }\n};\n```\n\nUsing these functions that are defined in the above code snippet, it will be possible to perform CRUD operations with the MongoDB database. These functions perform all sort of functions like getting a tweet by its `id`, getting all tweets, creating a new tweet, and updating and deleting a specific tweet. The `id` to each tweet document is going to be generated automatically by the MongoDB database. Each of these function is taking an argument by default and that is the name of the author of the tweet. To keep this demo approachable and bare minimum, the author name right now is hard coded.\n\n## How to define GraphQL Types, Queries and Mutations\n\nTo define queries, mutations, and resolvers, create a new folder called `api`. Inside this folder create two new files: `Types.js` and `Resolvers.js`.\n\nOpen `Types.js` file and add the following snippet to add the type of the individual tweet based on the mongoose schema and our first mutation to create a new tweet.\n\n```js\nconst { gql } = require('apollo-server-express');\n\nconst typeDefs = gql`\n  # Type(s)\n\n  type Tweet {\n    _id: String\n    tweet: String\n    author: String\n  }\n\n  # Query(ies)\n  type Query {\n    getTweet(_id: String): Tweet\n    getTweets: [Tweet]\n  }\n\n  # Mutation(s)\n\n  type Mutation {\n    createTweet(tweet: String, author: String): Tweet\n\n    deleteTweet(_id: String): Tweet\n\n    updateTweet(_id: String!, tweet: String!): Tweet\n  }\n`;\n\nmodule.exports = typeDefs;\n```\n\nIn the above snippet, we define the type of the `Tweet` that will be used in every query and mutation. We are using `gql` for the graphql template literal. You can comment inside the GraphQL template literal using a hash `#`. Now open up the `Resolvers.js` file and add the following.\n\n```js\nconst TweetModel = require('../models/TweetModel');\n\nconst resolvers = {\n  Query: {\n    getTweet: _id => TweetModel.getTweet(_id),\n\n    getTweets: () => TweetModel.getTweets()\n  },\n\n  Mutation: {\n    createTweet: (_, args) => TweetModel.createTweet(args),\n\n    deleteTweet: (_, args) => TweetModel.deleteTweet(args),\n\n    updateTweet: (_, args) => TweetModel.updateTweet(args)\n  }\n};\n\nmodule.exports = resolvers;\n```\n\nIn the above file, start by importing the `TweetModel` since it will be used to extend GraphQL queries and mutations (_defined above_) to communicate with the MongoDB database in real time.\n\nCurrently, the `index.js` file contains the `typeDefs` and resolver from the previous hello world example. Let us import these two files from the `api/` directory to replace them.\n\n```js\nconst express = require('express');\nconst { ApolloServer } = require('apollo-server-express');\n\nconst typeDefs = require('./api/Types');\nconst resolvers = require('./api/Resolvers');\n\nconst app = express();\nconst port = process.env.PORT || 5000;\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers\n});\n\nserver.applyMiddleware({ app });\n\napp.listen(port, () =>\n  console.log(\n    `🚀 Server ready at http://localhost:${port}${server.graphqlPath}`\n  )\n);\n```\n\nNow, go to the terminal window and run `node index.js` command. If you get zero errors, that means your server is running successfully. Also, make sure if you are using the local instance of MongoDB database, make sure to run the command `mongod` to kickstart the MongoDB service.\n\n## Real-time Database Updates with GraphQL API\n\nOnce the server is running, visit the Apollo playground URL `http://localhost:5000/graphql` and run the following mutation.\n\n```graphql\nmutation {\n  createTweet(tweet: \"👋 Hello\", author: \"User12\") {\n    _id\n    tweet\n    author\n  }\n}\n```\n\nOn running this mutation you will get the following result.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/05/ss2-3.png' />\n\nAdd a bunch of more tweets by running the above mutation again. Now, let us run a query to fetch all the tweets from the database.\n\n```graphql\nquery {\n  getTweets {\n    _id\n    tweet\n    author\n  }\n}\n```\n\nWriting the keyword `query` is an option only in the case of running a query. This is not possible in the case of running a mutation operation. You have to specify the keyword `mutation`. The above query fetches the unique identifier of each tweet in the database as well as the tweet and the name of the author itself. See the result below.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/05/ss3-4.png' />\n\nTo delete a tweet from the database, all you have to provide is the `_id` of the tweet and provide sub-fields. Providing at least sub-field is necessary for the delete mutation to run, otherwise, it will throw an error.\n\n```graphql\nmutation {\n  deleteTweet(_id: \"5ce1a2f4f1ef7153d0fc7776\") {\n    tweet\n    author\n  }\n}\n```\n\nYou will get the following result.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/05/ss4-3.png' />\n\nRun the query to fetch all the tweets to see how many tweets are left.\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/05/ss5-4.png' />\n\nThe last operation is to update a tweet. Again, it is a mutation. All you to provide is the updated tweet in the form of a string and `_id` of the tweet you want to update.\n\n```graphql\nmutation {\n  updateTweet(\n    _id: \"5cd7cb5f19c9b4673f860600\"\n    tweet: \"This could be my last tweet...\"\n  ) {\n    _id\n    tweet\n    author\n  }\n}\n```\n\nThe output you get:\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/05/ss6-1.png' />\n\nBy fetching all the tweets you can verify that the updating mutation worked!\n\n<img src='https://crowdbotics.ghost.io/content/images/2019/05/ss7-2.png' />\n\n## Conclusion\n\nIf you completed this tutorial, **Congratulations!🎉**\n\nNot only did you learn how to configure and integrate an Express web server with the Apollo server library and MongoDB database. You ended up building complete CRUD functionality.\n\nApollo Server is an open source project and is one the most stable solution to create GraphQL APIs for full-stack applications. It also supports client-side out of the box for React, Vue, Angular, Meteor, and Ember as well as Native mobile development with Swift and Java.\n\nYou can find the complete code for the tutorial in this **[Github repository](https://github.com/amandeepmittal/twitter-clone-apollo-server)**.\n",
            "url": "https://amanhimself.dev//blog/build-a-twitter-clone-server-with-apollo-graphql-nodejs",
            "title": "Build a Twitter Clone Server with Apollo, GraphQL, Nodejs, and Crowdbotics",
            "summary": "Build a Twitter Clone Server with Apollo, GraphQL, Nodejs, and Crowdbotics",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/use-emotion-js-with-react-native",
            "content_html": "---\ntitle: 'Building Stylistic UIs with Emotion-JS for React Native'\ndate: '2019-06-04'\nslug: 'use-emotion-js-with-react-native'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://heartbeat.fritz.ai/how-to-use-emotion-js-with-react-native-fccac9c78779'\n---\n\nStyling is an important aspect of any mobile application. You cannot put enough emphasis on how important it is for a mobile app to have a pleasing design and good use of colors for the app users to use it in the long term.\n\nIf you are into React Native development, by now, you may know that there are different ways to style a React Native application. Methods such as by using `StyleSheet` object to create to styles for each component screen, or [encapsulating all of your styles](https://hackernoon.com/styling-the-react-native-way-3cc6d3ef52d0) in one file for the whole application.\n\nUsing third-party libraries for styling is another way that can save you a lot of time to develop your React Native application. Some CSS-in-JS libraries such as styled components and emotion-js are already a common practice among web developers. This tutorial is going to discuss and showcase how you can use [Emotion-JS](https://github.com/emotion-js/emotion) in a React Native application.\n\n## What is Emotion-JS 👩‍🎤?\n\nEmotion is a flexible _CSS-in-JS_ library that somehow enforces developers to write each component with their own styles and has both of them in one place. This enforcement has lead to some happy times for some happy developers resulting in optimizing their experience and output. It has predictable composition to avoid specificity issues with CSS.\n\nReact Native tends to follow a certain convention when it comes to styling your app. Such as all CSS property names should be in camelCase such as for background-color in React Native is:\n\n```css\nbackground-color: 'papayawhip';\n```\n\nDevelopers coming from a web background, do get uncomfortable by these conventions. Using a third party library like emotion-js can give help you. You do not have to switch between the context of conventions, apart from the properties and React Native’s own `flexbox` rules.\n\n## Installing Emotion\n\nTo get started, you need a new React Native project. To quickly scaffold one, let us use the power of Expo. Run the following command to install expo cli and create a new React Native project using the same cli.\n\n```shell\n# To install expo-cli\n\nnpm install -S expo-cli\n\n# Generate a project\n\nexpo init rn-emotion-demo\n```\n\nWhen running the last command, the command line prompt will you a few questions. First one is, Choose a template, where I chose `expo-template-blank`, then enter display name of your app and then either use `npm` or `yarn` to install dependencies. I am going with `yarn`.\n\nOnce all the dependencies installed, you can open this project in your favorite code editor. Next step is to install the latest version of emotion library.\n\n```shell\nyarn add prop-types @emotion/core @emotion/native\n```\n\nGuidelines in [emotion](https://www.npmjs.com/package/@emotion/native) package instructs that you need `prop-types` as the package installed with your project since Emotion as the package itself depends on it. Next two packages in the above command are necessary to use the library itself. Also, make sure, when you install these dependencies, you are inside the React Native project directory.\n\n## Writing your first Emotion Style\n\nTo start the application in a simulator, run `expo start`. On successfully starting the application, you will be prompted with the default Expo app. Modify the `App.js` file like below to get started. Make changes to the component’s render function like below. Replace both `View` and `Text` with `Container` and `Title`. These new elements are going to be custom using semantics from emotion.\n\n```js\nexport default class App extends React.Component {\n  render() {\n    return (\n      <Container>\n        <Title>React Native with 👩‍🎤 Emotion</Title>\n      </Container>\n    );\n  }\n}\n```\n\nEmotion-JS utilizes tagged template literals to style your components using back-ticks. When creating a component in React or React Native using this styling library, each component is going to have styles attached to it. Define the below styles in the same file after the `App` component.\n\n```js\nconst Container = styled.View`\n  flex: 1;\n  background-color: papayawhip;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Title = styled.Text`\n  font-size: 20px;\n  font-weight: 500;\n  color: palevioletred;\n`;\n```\n\nNotice the `Container` is a React Native `View` and has styling attached to it. Similarly, `Title` is utilizing `Text` component from React Native. You will get the following result.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*f74HA6IWnJM-cE_BNE9CTQ.png' />\n\nHere is the complete code for `App.js` file.\n\n```js\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport styled, { css } from '@emotion/native';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <Container>\n        <Title>React Native with 👩‍🎤 Emotion</Title>\n      </Container>\n    );\n  }\n}\n\nconst Container = styled.View`\n  flex: 1;\n  background-color: papayawhip;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Title = styled.Text`\n  font-size: 24px;\n  font-weight: 500;\n  color: palevioletred;\n`;\n```\n\nIn the above snippet, do take a note that we are not importing a React Native core components such as `View`, `Text` or `StyleSheet` object. It is that simple. It uses the same `flexbox` model that React Native Layouts use. The advantage here is that you get to apply almost similar context and understandable syntax that you have been using in Web Development to style a React Native application.\n\n## Using Props in Emotion-JS\n\nOften you will find yourself creating custom components for your apps. This does give you the advantage to stay DRY. Leveraging emotion-js is no different. You can use this programming pattern by building custom components that require their parent components. `props` are commonly known as additional properties to a specific component. To demonstrate this, create a new file called `CustomButton.js`.\n\nInside this file, we are going to create a custom button that requires props such as `backgroundColor`, `textColor` and the `text` itself for the title of the button. You are going to use `TouchableOpacity` and `Text` to create this custom button but without importing `react-native` library and create a functional component `CustomButton`.\n\n```js\nimport React from 'react';\nimport styled, { css } from '@emotion/native';\n\nconst CustomButton = props => (\n  <ButtonContainer\n    onPress={() => alert('You are using Emotion-JS!')}\n    backgroundColor={props.backgroundColor}\n  >\n    <ButtonText textColor={props.textColor}>{props.text}</ButtonText>\n  </ButtonContainer>\n);\n\nexport default CustomButton;\n\nconst ButtonContainer = styled.TouchableOpacity`\n  margin: 15px;\n    width: 100px;\n    height: 40px\n    padding: 12px;\n    border-radius: 10px;    \n    background-color: ${props => props.backgroundColor};\n`;\n\nconst ButtonText = styled.Text`\n  font-size: 15px;\n  color: ${props => props.textColor};\n  text-align: center;\n`;\n```\n\nThe important thing to notice in the above snippet is you can pass an interpolated function `${props => props...}` to an emotion-js template literal to extend it the component's style and keep the component re-usable.\n\nTo see this custom button in action, import it to the `App.js` file as below.\n\n```js\n// ... other imports\nimport CustomButton from './components/CustomButton';\n\n// ...\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <Container>\n        <Title>React Native with 👩‍🎤 Emotion</Title>\n        <CustomButton\n          text=\"Click Me\"\n          textColor=\"#01d1e5\"\n          backgroundColor=\"lavenderblush\"\n        />\n      </Container>\n    );\n  }\n}\n```\n\nOn running the simulator, you will get the following result.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*Cy1MdQqq5Uw4i6uNtXFTbQ.png' />\n\n## Inline Styling\n\nAs React Native developer, you have used inline styling and you know how beneficial they can be, especially in the prototypal stage of an application.\n\nTo leverage this technique using Emotion-js, open `CustomButton.js` file and add an inline style like below. Do note that, we are not modifying the existing styles defined previously.\n\n```js\nconst CustomButton = props => (\n    <ButtonContainer\n        onPress={() => alert(\"You are using Emotion-JS!\")}\n        backgroundColor={props.backgroundColor}\n        style={css`\n            border-width: 1px;\n        `}\n    >\n        <ButtonText textColor={props.textColor}>{props.text}</ButtonText>\n    </ButtonContainer>\n```\n\nThe `style` tag in the above snippet uses `css` prop from `@emotion/native` library to allow us to add inline styles.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*WYeeuL0Xoq6gHDWOnW0P7w.png' />\n\n## Building the Grocery UI\n\nOnwards this section, you are going to use what you have just learned about Emotion-js by building a better UI in terms of complexity than a simple test and a button.\n\nOpen up App.js. Declare a new `ContainerView` using styled prop from emotion-js. Inside the backticks, you can put pure CSS code there with the exact same syntax. The View element is like a div in HTML or web programming in general. Also, create another view called `Titlebar` inside `Container`.\n\nInside `Titlebar`, it will contain three new elements. One is going to be an image `Avatar` and the other two are text: `Title` and `Name`.\n\n```js\nimport React from 'react';\nimport styled, { css } from '@emotion/native';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <Container>\n        <Titlebar>\n          <Avatar />\n          <Title>Welcome back,</Title>\n          <Name>Aman</Name>\n        </Titlebar>\n      </Container>\n    );\n  }\n}\n\nconst Container = styled.View`\n  flex: 1;\n  background-color: white;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Titlebar = styled.View`\n  width: 100%;\n  margin-top: 50px;\n  padding-left: 80px;\n`;\n\nconst Avatar = styled.Image``;\n\nconst Title = styled.Text`\n  font-size: 20px;\n  font-weight: 500;\n  color: #b8bece;\n`;\n\nconst Name = styled.Text`\n  font-size: 20px;\n  color: #333333;\n  font-weight: bold;\n`;\n```\n\nYou will get the following result in the simulator.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*NOix_tBDR5Ya7U9vxKBWkA.png' />\n\nRight now, everything is how in the middle of the screen. We need the `Titlebar` and its contents at the top of the mobile screen. So styles for `Container` can be modified as below.\n\n```js\nconst Container = styled.View`\n  flex: 1;\n  background-color: white;\n`;\n```\n\nYou will get the following result.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*_y_4hWxNgScpmXjtJQngXQ.png' />\n\n## Adding the user avatar image\n\nI am going to use an image that is stored in the assets folder in the root of our project. If are free to use your own image but you can also download the assets for this project below.\n\n- [rn-emotion-demo](https://github.com/amandeepmittal/rn-emotion-demo/tree/master/assets)\n\nTo create an image even with emotion-js, you need the `Image` component from React Native core. You can use the source props to reference the image based on where it is located.\n\n```js\n<Titlebar>\n  <Avatar source={require('./assets/avatar.jpg')} />\n  <Title>Welcome back,</Title>\n  <Name>Aman</Name>\n</Titlebar>\n```\n\nThe styling for Avatar will begin with a width and a height each of `44` pixels.\n\n```js\nconst Avatar = styled.Image`\n  width: 44px;\n  height: 44px;\n`;\n```\n\nYou will get the following result.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*86D8gQeBHwo42NwJ2bKbkA.png' />\n\n## Absolute Positioning in React Native\n\nNow notice that the avatar image and the text are piling up. They are taking the same space on the screen. To avoid this, you are going to use `position: absolute` CSS property.\n\nCSS properties such as `padding` and `margin` are used to add space between UI elements in relation to one another. This is the default layout position. However, you are currently in a scenario where it will be beneficial to use absolute positioning of UI elements and place the desired UI element at the exact position you want.\n\nIn React Native and CSS in general, if `position` property is set to `absolute`, then the element is laid out relative to its parent. CSS has other values for `position` but React Native only supports `absolute`.\n\nModify `Avatar` styles as below.\n\n```js\nconst Avatar = styled.Image`\n  width: 44px;\n  height: 44px;\n  margin-left: 20px;\n  position: absolute;\n  top: 0;\n  left: 0;\n`;\n```\n\nUsually, with position absolute property, you are going to use a combination of the following properties:\n\n- top\n- left\n- right\n- bottom\n\nIn the case above, we use `top` and `left` and both are set to `0` pixels. You will get the following output.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*VyDbIWkN4io9aMFw9-Jucg.png' />\n\n## Mapping through a list of categories\n\nInside `components/` folder create a new file called `Categories.js`. This file is going to render a list of category items for the Grocery UI app.\n\n```js\nimport React from 'react';\nimport styled, { css } from '@emotion/native';\n\nconst Categories = props => (\n  <Container>\n    <Name>Fruits</Name>\n    <Name>Bread</Name>\n    <Name>Drinks</Name>\n    <Name>Veggies</Name>\n  </Container>\n);\n\nexport default Categories;\n\nconst Container = styled.View``;\n\nconst Name = styled.Text`\n  font-size: 28px;\n  font-weight: 600;\n  margin-left: 15px;\n  color: #bcbece;\n`;\n```\n\nAll the data is static right now. Import this component in `App.js` and place it after `Titlebar`.\n\n```js\n<Container>\n  <Titlebar>\n    <Avatar source={require('./assets/avatar.jpg')} />\n    <Title>Welcome back,</Title>\n    <Name>Aman</Name>\n  </Titlebar>\n  <Categories />\n</Container>\n```\n\nYou will get the following result.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*UzOFxbJegk5DgdnWIIDFAA.png' />\n\nThere can be a number of categories. To make the names of categories dynamic, we can send it through `App.js` file.\n\n```js\nconst items = [\n  { text: 'Fruits' },\n  { text: 'Bread' },\n  { text: 'Drinks' },\n  { text: 'Veggies' },\n  { text: 'Meat' },\n  { text: 'Paper Goods' }\n];\n\n// ...\n\n// Inside the render function replace <Categories /> with\n\n{\n  items.map((category, index) => (\n    <Categories name={category.text} key={index} />\n  ));\n}\n```\n\nIn the above snippet, you are using `map` function from JavaScript to iterate through an array render a list of items, in this category names. Adding a `key` prop is required. To make this work, also modify `Categories.js`.\n\n```js\nimport React from 'react';\nimport styled, { css } from '@emotion/native';\n\nconst Categories = props => <Name>{props.name}</Name>;\n\nexport default Categories;\n\nconst Name = styled.Text`\n  font-size: 28px;\n  font-weight: 600;\n  margin-left: 15px;\n  color: #bcbece;\n`;\n```\n\nThere is no change in the UI.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*97cGkaf4B-iuoBqtaU_82g.png' />\n\n## Adding Horizontal ScrollView\n\nThis list is right now not scrollable. To make it scrollable, let us place it inside a `ScrollView`. Open up `App.js` file place the categories inside a `ScrollView`, but first, import it from React Native core.\n\n```js\nimport { ScrollView } from 'react-native';\n\n//...\n<ScrollView>\n  {items.map((category, index) => (\n    <Categories name={category.text} key={index} />\n  ))}\n</ScrollView>;\n```\n\nYou will notice not a single change in the UI. By default, scrollable lists in React Native using `ScrollView` are `vertical`. Make this horizontal by adding the prop `horizontal`.\n\n```js\n<ScrollView horizontal={true} showsHorizontalScrollIndicator={false}>\n  {items.map((category, index) => (\n    <Categories name={category.text} key={index} />\n  ))}\n</ScrollView>\n```\n\nIt works.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*Ca8deMUYzKMefqll-U8d2w.gif' />\n\nTo make it appear better, add some inline styling using `css` prop.\n\n```js\n<ScrollView\n    horizontal={true}\n    showsHorizontalScrollIndicator={false}\n    style={css`\n    margin: 20px;\n    margin-left: 12px;\n    `}\n>\n```\n\nNow it looks better.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*Wv5LHX6N-LNKYFBLnzZZjw.gif' />\n\n## Adding a vertical ScrollView\n\nNext step is to add a `ScrollView` that acts as a wrapper inside the `Container` view such that the whole area becomes scrollable vertically. There is a reason to do this. You are now going to add items separated into two columns as images with texts related to a particular category.\n\nModify `App.js` file.\n\n```js\nreturn (\n  <Container>\n    <ScrollView>\n      <Titlebar>{/* and its contents */}</Titlebar>\n      <ScrollView horizontal={true}>\n        {/* Categories being rendered */}\n      </ScrollView>\n      <Subtitle>Items</Subtitle>\n    </ScrollView>\n  </Container>\n);\n```\n\nNotice that we are adding another emotion component called `Subtitle` which is nothing but a text.\n\nIt renders like below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*pm3WO-qUP4JhE3yagUo93A.png' />\n\n## Building a card component\n\nIn this section, we are going to create a card component that will hold an item’s image, the name of the item and the price as text. Each card component is going to have curved borders and box shadow. This is how it is going to look like.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*LACepyEU54zhnt028sfh5g.png' />\n\nCreate a new component file called `Card.js` inside the `components` directory. The structure of the Card component is going to be.\n\n```js\nimport React from 'react';\nimport styled, { css } from '@emotion/native';\n\nconst Card = props => (\n  <Container>\n    <Cover>\n      <Image source={require('../assets/pepper.jpg')} />\n    </Cover>\n    <Content>\n      <Title>Pepper</Title>\n      <PriceCaption>$ 2.99 each</PriceCaption>\n    </Content>\n  </Container>\n);\n\nexport default Card;\n```\n\nCurrently, it has static data, such as the image, title, and content. Let us add the styles for each styled UI elements in this file.\n\n```js\nconst Container = styled.View`\n  background: #fff;\n  height: 200px;\n  width: 150px;\n  border-radius: 14px;\n  margin: 18px;\n  margin-top: 20px;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.15);\n`;\n\nconst Cover = styled.View`\n  width: 100%;\n  height: 120px;\n  border-top-left-radius: 14px;\n  border-top-right-radius: 14px;\n  overflow: hidden;\n`;\n\nconst Image = styled.Image`\n  width: 100%;\n  height: 100%;\n`;\n\nconst Content = styled.View`\n  padding-top: 10px;\n  flex-direction: column;\n  align-items: center;\n  height: 60px;\n`;\n\nconst Title = styled.Text`\n  color: #3c4560;\n  font-size: 20px;\n  font-weight: 600;\n`;\n\nconst PriceCaption = styled.Text`\n  color: #b8b3c3;\n  font-size: 15px;\n  font-weight: 600;\n  margin-top: 4px;\n`;\n```\n\nThe `Container` view has a default background of white color. This is useful in scenarios where you are fetching images from a third party APIs. Also, it provides a background to the text area below the image.\n\nInside the `Container` view, add an `Image` and wrap it inside a `Cover` view. In React Native there two ways you can fetch an image.\n\nIf you are getting an image from the static resource as in our case, you use `source` prop with the keyword `require` that contains the relative path to the image asset stored in the project folder. In case of networking images or getting an image from an API, you use the same prop with a different keyword called `uri`. Here is an example of an image being fetched from an API.\n\n```js\n<Image\n  source={{\n    uri: 'https://facebook.github.io/react-native/docs/assets/favicon.png'\n  }}\n/>\n```\n\nThe `Cover` view uses rounded corners with `overflow` property. This is done to reflect the rounded corners. iOS clips the images if coming from a child component. In our case, the image is coming from a `Card` component which is a child to the `App` component.\n\nThe `Image` component takes the width and height of the entire `Cover` view.\n\nNow let us import this component inside App.js file, after the `Subtitle` and let us see what results do we get.\n\n```js\nrender() {\n    return (\n    <Container>\n        <ScrollView>\n        {/* ... */}\n        <Subtitle>Items</Subtitle>\n            <ItemsLayout>\n                <ColumnOne>\n                    <Card />\n                </ColumnOne>\n                <ColumnTwo>\n                    <Card />\n                </ColumnTwo>\n            </ItemsLayout>\n        </ScrollView>\n    </Container>\n    )\n}\n\n// ...\n\nconst ItemsLayout = styled.View`\n    flex-direction: row;\n    flex: 1;\n`;\n\nconst ColumnOne = styled.View``;\n\nconst ColumnTwo = styled.View``;\n```\n\nAfter `Subtitle` adds a new view called `ItemsLayout`. This is going to be a layout that allows different cards to be divided between two columns in each row. This can be done by giving this view a `flex-direction` property of value `row`. `ColumnOne` and `ColumnTwo` are two empty views.\n\nOn rendering the final result, it looks like below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*1buKFeJ-C7yzw41ezKTv6g.png' />\n\n## Conclusion\n\nYou have completed the tutorial for creating UIs with Emotion-JS and integrate it into a React Native and Expo application. Now go ahead and create those beautiful UIs for your applications.\n\n[Originally published at Heartbeat](https://heartbeat.fritz.ai/how-to-use-emotion-js-with-react-native-fccac9c78779)\n",
            "url": "https://amanhimself.dev//blog/use-emotion-js-with-react-native",
            "title": "Building Stylistic UIs with Emotion-JS for React Native",
            "summary": "Building Stylistic UIs with Emotion-JS for React Native",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/user-authentication-with-amplify-in-a-react-native-and-expo-app",
            "content_html": "---\ntitle: 'User Authentication with Amplify in a React Native and Expo app'\nslug: 'user-authentication-with-amplify-in-a-react-native-and-expo-app'\ndate: '2019-05-22'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://heartbeat.fritz.ai/user-authentication-with-amplify-in-a-react-native-and-expo-app-d00cdaf1ac28'\n---\n\nAWS Amplify is a fantastic framework that helps you develop your web or mobile applications quickly. Not only it enhances your current tech stack but actually has many features in-built that you don't have to worry about especially when your app is in the development process.\n\nFeatures such as:\n\n- authentication\n- GraphQL and REST API support\n- storage\n- S3 uploads\n- a way to manage user pool\n- hosting\n- notifications\n- interactions\n- analytics\n- compatibility to work with AWS Lambda functions\n\nNot only that. Amplify can be integrated with most popular frontend frameworks like React, Vue, Angular, Ionic, React Native or just go vanilla JavaScript if you want to.\n\nIn this tutorial, we are going to take a look at one of the most important feature of an application and that is **authentication**. You know the scenarios where you need store some amount of user information (credentials) for them to get back and re-use the application rather creating a new account.\n\nAmplify helps us integrate its authentication component _out of the box_. Do not hate me for saying this. Now, if you have developed an application with a proper authentication flow, you know what pain it gives when it comes to writing that amount of code. With Amplify you will see how easy it is to integrate things like new user's email verification.\n\nEnough with the introduction, let us start. However, if this is your first time reading about Amplify framework and want to learn more about what it is or how to integrate it with a React Native or Expo application, [read my previous post](https://heartbeat.fritz.ai/building-a-react-native-mobile-app-with-aws-amplify-and-expo-fcab6ee0555e).\n\nIt will walk you through from basics such as [What is Amplify?](https://heartbeat.fritz.ai/building-a-react-native-mobile-app-with-aws-amplify-and-expo-fcab6ee0555e#a083), [How to create a new AWS IAM user](https://heartbeat.fritz.ai/building-a-react-native-mobile-app-with-aws-amplify-and-expo-fcab6ee0555e#b8c6), and [creating a GraphQL API](https://heartbeat.fritz.ai/building-a-react-native-mobile-app-with-aws-amplify-and-expo-fcab6ee0555e#cfaa) and so on.\n\n### Table of Contents\n\n- Requirements\n- Creating a new React Native App\n- Create a new AWS IAM user\n- Initializing & Integrating Amplify SDK\n- Enable Amplify Auth Resource\n- `withAuthenticator`: Adding a High Order Component\n- Testing the default Amplify auth flow\n\n## Requirements\n\nHere is a complete list of plugins, packages, and services you’re going to need in order to gain something from this tutorial:\n\n- Nodejs `v8.x.x` or higher installed along with npm/yarn\n- `watchman`: The file change watcher for React Native projects\n- AWS account\n- [Amplify CLI](https://aws-amplify.github.io/docs/cli/)\n- [Expo CLI](https://www.npmjs.com/package/expo-cli) (_previously known as create-react-native-app_)\n\n_Note:_ To use any Amplify service and to follow the rest of this tutorial, you need an AWS account (which is free). If you don’t have one, please consider signing up for one here for the free tier.\n\n## Creating a new React Native App\n\nTo get started, make sure you have already installed [`expo-cli`](https://www.npmjs.com/package/expo-cli). Now, open up a terminal window at a desired directory or location where you keep your demo projects and type the following and then press enter to execute.\n\n```shell\nexpo init customize-amplify-auth-ui\n```\n\nThis command will create a new directory called `customize-amplify-auth-ui`. You can name it whatever you want. Inside this directory you will find a complete react native + expo SDK generated.\n\nOn running the above command, you will be asked by the CLI to make some choices by prompting some questions. I will be leaving the them default.\n\nExpo CLI is a command line utility to create React Native apps with no build configuration. The reason we are relying on it, is that, first it is awesome tool for such use cases. Next, it will help us build this React Native app/project much faster for any of the mobile platform (_iOS_ or _android_) than a traditional React Native project generated with `react-native-cli`. This will save us time for now but you can go ahead with `react-native-cli` if you want to but remember to run `react native link` when integrating Amplify with React Native app.\n\n## Create a new AWS IAM user\n\nOnce you are signed-in to AWS console (_remember_, I told you to create a free AWS account and sign-in. If you haven't done so already, go ahead do it. Otherwise, you might not enjoy and at the same time, be able to follow the rest of the tutorial).\n\nNow, from your terminal window, execute the following command.\n\n```shell\namplify configure\n```\n\nThis will open up the AWS console dashboard. Go back to terminal and press enter to continue. This will lead you through a bunch of questions in order to configure a user account to use Amplify with the React Native application. Lastly, it will provide you with a **secret** key and an **access** key. Go back to terminal and enter those keys.\n\nHere is a summary of questions prompted by AWS Amplify CLI.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*amSKLCe6467xU_wJ5Kgr0g.png' />\n\nThis process is easy, but if you are going through it for the first time, I'd recommend you to give the below link a visit and only in few minutes you will realise how easy it is to setup a new IAM user for AWS services.\n\nhttps://heartbeat.fritz.ai/building-a-react-native-mobile-app-with-aws-amplify-and-expo-fcab6ee0555e#b8c6\n\n## Initializing & Integrating Amplify SDK\n\nTo integrate AWS Amplify with the React Native app run the following command that in return prompts you for some more questions. Later, in this section, we will install dependencies in the React Native app to complete this process.\n\n_Note:_ For a complete step by step process, please refer to [**this link here**](https://heartbeat.fritz.ai/building-a-react-native-mobile-app-with-aws-amplify-and-expo-fcab6ee0555e#d79c). Do not worry, most of these configuration settings are going to be default at the moment. I am only going to walk you through essentials here.\n\nTo start, execute the following command. Make sure you are inside your React Native project directory and that too at the root of your project. This is required as this command will add some configuration files.\n\n```shell\namplify init\n```\n\nOnce you run this command, you will be prompted for the following questions.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*d1aVKZuIFzZN1Mgo86cAfQ.png' />\n\nAfter the Amplify SDK initialization process is complete, notice there are some new file changes inside the project directory. A new directory `amplify/` which stores any local or cloud changes are made to configuration files. Also, a new file called `aws-exports.js` appears at the root that doesn't require to be committed over your Github account (_always remember_).\n\nMake sure that `.gitignore` file is up to date. Amplify CLI is so good that it will update this file for you and take care of what to commit or not from the configuration part.\n\nThis is just the initialization part. We need to integrate amplify SDK now to tell our React Native app that we are going to use Amplify configuration and components in the app. To make this happen, install the following dependencies.\n\n```shell\nyarn add aws-amplify aws-amplify-react-native\n```\n\nBoth of these packages are required. The package `aws-amplify` allows you to make requests to the auth and API services provided by AWS. The other one is framework specific which contains ready-to-use UI components. After these dependencies are installed, open `App.js` file and add the following.\n\n```js\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\n// --- This is the part to add\n\nimport Amplify from 'aws-amplify';\nimport config from './aws-exports';\n\nAmplify.configure(config);\n\n// ---\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text>React Native + Amplify = 💛</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n```\n\nTo verify that everything is on order and the app works fine, you can go ahead and run `npm start` command. Then select which mobile platform you want to run. If there no errors, you will get to see the following result.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*3CQuczlaCMHVnFBojLqhVQ.png' />\n\n## Enable Amplify Auth Resource\n\nTo include authentication experiences in your React Native app, amplify uses Amazon Cognito that is a fully featured user directory to handle user registration, login, and account recovery. Amplify interfaces with Cognito User Pools to store the user information, including social providers like Facebook, Google and so on.\n\nAmplify gives you the superpower to generate an authentication flow by executing a command from the terminal window.\n\n```shell\namplify add auth\n```\n\nOn running the above command, you will be prompted with the first question like below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*br7DyESd83gE1fz2gWV5Lg.png' />\n\nThis option is to choose the default authentication and security configuration. The second option to include a social provider like Facebook. Another option to look out for is Manual configuration about which you can read more at the [official amplify docs](https://aws-amplify.github.io/docs/js/react).\n\n<img src='https://cdn-images-1.medium.com/max/800/1*w9im1GzV1CjKGdPpVR-DLg.png' />\n\nNext, it will prompt you to choose the default sign in method. Choose `Username`.\n\nAmplify’s command line interface is so interactive and in detail that it prompts you to provide input fields and select them from your terminal. Look at below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*IIw8O4dwLrkyGoi9x5Y4iA.png' />\n\nChoose `Email`. Now run the following command to publish all the local changes to the AWS in order to create a user pool.\n\n```shell\namplify push\n```\n\nYou will get the following screen after you execute the above command.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*14ONUYoXLzlwlVcSKLzWtQ.png' />\n\nThis shows the details of the current working environment (_which we manually entered at the time of configuring AWS IAM user_) and displays the status of the resource we are currently using ,that is `Auth`.\n\nExecuting this command will take some time to update the resources in order to enable and create a user pool for your React Native app. So go ahead, pause here, drink a cup of coffee. The user authentication setup is complete for now.\n\n## withAuthenticator: Adding a High Order Component\n\nEnough with the configuration part. Let us work with some app code. For React Native apps, the simplest way to add authentication flow into the app is to use `withAuthenticator` [High Order Component](https://reactjs.org/docs/higher-order-components.html).\n\nOpen up the file `App.js` and the following.\n\n```js\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport Amplify from 'aws-amplify';\nimport config from './aws-exports';\n\n// New ----\nimport { withAuthenticator } from 'aws-amplify-react-native';\n\nAmplify.configure(config);\n\nclass App extends React.Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text>React Native + Amplify = 💛</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n\n// New ----\nexport default withAuthenticator(App, true);\n```\n\nThis HOC wraps the `App` component. It automatically detects the authentication state and updates to the UI.\n`withAuthenticator` component renders the `App` component after a successful user signed in, and it prevents non-sign-in users to interact with your app. The second argument passed in this HOC is a boolean value that tells whether to enable the Sign Out button (once the user is successfully logged-in) or not. You will see this in action later once we have created the user.\n\nBy default, on running `npm` start, you will get the Sign In screen like below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*cNDW73k-43-FiHndSZ8YKw.png)' />\n\nDo notice that right now in the above screen, the Sign In button is disabled since there the input fields are empty. This a too good to for the default flow. If you enter a username followed by a password, it even throws an error like below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*33BkYtrQA_9NfumRr6ebWA.png' />\n\nBy clicking on Sign up button, you will go to the registration screen.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*jw2fK8IJ0xjL1MR4iBK2QA.png' />\n\nOn clicking Forgot Password, will take you to another screen where it will ask you for the registered username.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*mccJmsNibLlxIKtJ11USjw.png' />\n\nIf the user is signed in, the underlying component (_in current scenario, the `App` component_) is displayed otherwise signin/signup controls are displayed. Also, did you notice that just by adding two lines of code you have authentication flow that looks pretty decent? In the next section, let us see if it works or not.\n\n_Bonus:_ If you love design, UI, UX, or want your apps to look good, at this link you can view the color palettes Amplify uses.\n\nhttps://aws-amplify.github.io/media/ui_library\n\n## Testing the default Amplify auth flow\n\nCurrently, there no user’s registered to our app. So let us register one. Create the button `Sign Up` and enter the details asked. Do note that, enter a valid email address for the AWS cloud service will send you an email to verify your account.\n\nOnce you are done, click the `SIGN UP` button at the end of the registration form. You will get the following screen asking for the confirmation/verification code.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*fY2whWIX4Unwhrekjqleiw.png' />\n\nEnter the verification code and click the confirm button. If it is confirmed, you will be directed back to the Sign in screen. Enter the credentials to login inside the app. You will be successfully logged in if you enter the correct credentials.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*8Xa9uKiLOikHO-A786fpJw.png' />\n\nNotice how the sign-out button is appearing at top right corner next to the username. Yes, amplify greets the user and has the code for it integrated already at `withAuthenticator` HOC. Do take note in the above screen that the `App` component is getting rendered now.\n\n## Conclusion\n\nYou have now successfully to add an authentication flow with Amplify and use it in a React Native app. Try using the federation or social login flow and gather the similarities or differences between the two.\n\nYou can find the complete code for this post in this [Github repository](https://github.com/amandeepmittal/expo-amplify-demo).\n\n[Originally published at Heartbeat](https://heartbeat.fritz.ai/user-authentication-with-amplify-in-a-react-native-and-expo-app-d00cdaf1ac28)\n",
            "url": "https://amanhimself.dev//blog/user-authentication-with-amplify-in-a-react-native-and-expo-app",
            "title": "User Authentication with Amplify in a React Native and Expo app",
            "summary": "User Authentication with Amplify in a React Native and Expo app",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/building-a-react-native-mobile-app-with-aws-amplify-and-expo",
            "content_html": "---\ntitle: 'Building a React Native Mobile App with AWS Amplify and Expo'\ndate: '2019-05-09'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://heartbeat.fritz.ai/building-a-react-native-mobile-app-with-aws-amplify-and-expo-fcab6ee0555e'\n---\n\n![cover](https://i.imgur.com/G1PqZSM.png)\n\nThere is a joke going in dev community about serverless tech stacks using servers?! Some of the trolls even take that this an offensive way. What are they missing out is the advantages Serverless computing has to offer. Advantages like reduced development time and operation costs are some of the factors that could not be overlooked. Spending time and energy writing and wiring your application is worth rather than continuously managing resources and then worry about them at the time of scaling. This might sound too hot to some but serverless is a pragmatic solution in some use cases.\n\nIn this tutorial, you will be learning how to integrate a serverless computing service called AWS Amplify in a mobile app using React Native. AWS Amplify has a complete set of toolchain with authentication, a choice between wiring and managing GraphQL or REST API, data storage, push notification and analytics.\n\n### TLDR\n\n- What is AWS Amplify?\n- Requirements\n- Getting Started\n- Configure Amplify User\n- Initialize AWS Amplify\n- Add a GraphQL API\n- Publish API to AWS Cloud\n- Integrating Expo app with Amplify SDK\n- Adding a Todo Input Field\n- Adding a Mutation using Graphql API\n- Run Query to fetch data\n- Conclusion\n\n## What is AWS Amplify?\n\nAmazon Web Service is a well-known technology that provides cloud services. Since its launch in 2017, Amplify has come a long way in terms of providing a definitive toolchain. The first attraction for me personally is that it is open source. Next, are the CLI plugins and services that you can enable with one click when integrating it in a framework like React Native (_or any other_). Services such as support for GraphQL and REST APIs, basic UI components to get you started, authentication HOCs, storage, hosting and many more are available in its toolchain.\n\n## Requirements\n\nHere is a complete list of plugins, packages, services you are going to need in order to gain something from this tutorial.\n\n- [NodeJS](https://nodejs.org) `v8.x.x` or higher installed along with `npm/yarn`\n- [`watchman`](https://facebook.github.io/watchman/docs/install.html) the file change watcher for React Native project\n- AWS account\n- Amplify CLI plugin\n- Expo CLI (\\_earlier known as `create-react-native-app`)\n\n_Note_: To use any Amplify service and to follow the rest of this tutorial, you need an AWS account (_which is free_). If you do not have one, please consider signing up for one [here](https://portal.aws.amazon.com/billing/signup?redirect_url=https%3A%2F%2Faws.amazon.com%2Fregistration-confirmation) for the free tier.\n\n## Getting Started\n\nAfter you have the first three requirements from the previous section let us install the last two. Both of them are command line plugins to scaffold and configure our React Native + AWS Amplify project. Open a terminal window and execute the following command.\n\n```shell\nnpm install -g @aws-amplify/cli expo-cli\n```\n\nOnce both of the CLIs are installed, make sure you are on the same version (_at least the major one_) as we are.\n\n```shell\namplify --version\n# Output\n1.6.6\n\nexpo-cli --version\n# Output\n2.15.4\n```\n\nNext, let us create a new React Native project using Expo CLI.\n\n```shell\nexpo-cli init expo-amplify-demo\n```\n\nIt will then prompt for a few questions. The first and most important one is choosing a workflow. Choose the default option, that is `blank`. Then it will prompt you to enter the name of your app, you can leave it to default or enter a name. You can use `yarn` to install dependencies by pressing `Y`. After a few moments, a new project directory will appear on the desired location. Traverse inside it before we proceed to the next step.\n\n## Configure Amplify User\n\nOnce you are signed-in to AWS console, open up a terminal window and run the following command.\n\n```shell\namplify configure\n```\n\nThis will open up the AWS console dashboard. Go back to terminal and press enter to continue.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*MdFM6jQ1y-AAONd9OFJ4dA.png' />\n\nNext, are going to be a bunch of questions in order to configure a user account to use Amplify with your React Native application. These questions are as following:\n\n- **Choose a region:** us-east-2\n- **Specify the username of the new IAM user:** expo-amplify-demo\n\nOn entering the username, press enter and it will open AWS console again in a browser window for you to add a user.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*61bLl2uI4m4r6liLVWUFPQ.png' />\n\nIn the above screen, make sure that **Programmatic access** is checked. It allows adding the newly created user to have access to create resources in the form of different APIs and tools by providing you with an access key and secret key. Then click on button **Next: Permissions**.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*25jaknfbqMWRnqiR_EvQ8A.png' />\n\nIn the above screen, you will notice that a policy has been selected by default. Let it be. This provides you the full access to AWS services by enabling the aws user (_the current user you are creating_) to be an administrator. Then, click on **Next: Tags**.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*Ust7wTI9lbNMvrXzPnsiHA.png' />\n\nLeave this one blank, and click on **Next: Review**.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*uJEWxsCGDpGOYomhqrlrzw.png' />\n\nClick on **Create user** on the next page and you will be directed to a new page where you will find **Access Key** and **Secret Key**. Do not close this window yet.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*74JJCqo-N-uYRTRC24d-pg.png' />\n\nGo to your terminal window, press the Enter key and it will ask you for the Access Key and the Secret Key. Enter both of them sequentially. Lastly, it will ask you about the profile name. You can enter the project name or user name here. Pressing enter for the last time will create a new AWS user. This section is complete.\n\n## Initialize AWS Amplify\n\nTo integrate AWS Amplify with the React Native app run the following command and be ready to answer a few more questions 😄. _I know, I know_. But imagine, not having these questions. The amount of setup being performed right now just by answering a few questions and pressing enters' a few times adds a lot of value by saving developer time.\n\nOpen a terminal window, and make sure you are inside the React Native/Expo directory.\n\n```shell\namplify init\n```\n\nThis command will help you setup amplify SDK inside the React Native app. First, a few sets of questions that are prompted can be seen below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*9azNVPxkeEVPZ_Nsg7YP5w.png' />\n\nNext, you will be prompted with a question on whether to use an AWS profile or not. You have to choose `Yes` and then on to the next question, choose the user name that you created in the previous steps when configuring amplify. If you are setting up for the time, you are probably going to have only one username in the list, unlike below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*KEorokAmLOGIaeOFfdu2SQ.png' />\n\nAfter the amplify SDK initialization process is complete, notice there are some new file changes inside the project directory. A new directory `amplify/` and a new file `aws-exports.js`\n\n<img src='https://cdn-images-1.medium.com/max/800/1*LA_uIoKTDhVgT-tqogeOhA.png' />\n\nThe `amplify` directory takes care of configuration files that required in order to setup and makes amplify SDK work with the current React Native app. These configuration files are further divided into two parts. One set of files are just for your local machine and another is for aws cloud. Please remember, whenever you make changes related to amplify SDK in your app, they are, by default, modifications made to the local part or development part. When you are done making modifications and are ready to deploy your changes to the cloud, you use special amplify commands such as `push`. After running this `push` command, only the changes are written in aws cloud.\n\nThe file `aws-exports.js` contains details related to amplify cloud service and credentials for the SDK to be imported inside the React Native app. You will be using this file later on.\n\n```js\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n  aws_project_region: 'us-east-2'\n};\n\nexport default awsmobile;\n```\n\n## Add a GraphQL API\n\nThe idea of this section is that in your React Native app, you will be having an API that performs CRUD operations. CRUD stands for _Create, Read, Update and Delete_. Amplify toolchain makes this process easier using its own backend and data storing capabilities. Amplify supports HTTP requests to REST and GraphQL endpoints. Using AWS AppSync, you can easily build data-driven applications in real-time with offline capabilities.\n\nTo set up an entire API for the app all you have to do is execute the below command.\n\n```shell\namplify add api\n```\n\nThis CLI execution automatically creates a fully functional GraphQL API including data sources, resolvers with basic schema structure for queries, mutations, and subscriptions, downloads client-side code and configuration files that are required in order to run these operations by sending requests. The above command will prompt you to choose between what type of API you want to write in. Choose **GraphQL**, and enter a **profile API name**.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*0A5e8OUG9xZr7JkOgAG32g.png' />\n\nNext, it will again, give you two options to choose as to how you want to authenticate your AWS AppSync API. In a real-time application, you will have different users accessing the database and making requests to it. For that, you will always go with **Amazon Cognito User Pool**. This is more of a pragmatic approach. That step needs authentication process and we will be covering that in a future post. For the current demo, choose the option **API Key**.\n\nDo note that this option is only for brief prototype sessions or development process. Any AppSync API key expires after seven days lifecycle. For the next question **Do you have an annotated GraphQL schema?** the answer is `N` or no. Amplify comes with pre-defined schemas that can be changed later. Press `Y` for the next question: **Do you want a guided schema creation?**\n\n<img src='https://cdn-images-1.medium.com/max/800/1*szS_04apcvVgkUjeMPLrVg.png' />\n\nSelect `single object with fields`. Next, it will ask if you want to edit the GraphQL Schema. Say yes to that for now. This will open up a new file called `schema.graphql` which contains a schema of type `Todo` with a different set of fields. This step does create a new folder inside `amplify/backend/api/` that further contains the metadata information related to GraphQL API.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*3E2yW1nN6T4E_d_c_vU3XA.png' />\n\nHere is the model inside `schema.graphql` file.\n\n```graphql\ntype Todo @model {\n  id: ID!\n  name: String!\n  description: String\n}\n```\n\nIf you are not familiar to GraphQL models and its types here is brief information about them. A `type` in a GraphQL schema is that piece of data that is stored in the database. Each `type` can have a different set of fields. You can think of a `type` as an object coming from the JavaScript background. For example, in the above schema for `Todo` model is the `type` that has three fields: `id`, `name` and `description`. Also, `@model` is used for storing types in Amazon DynamoDB. This is the database is used by Amazon when storing our app data.\n\nEvery `type` in a database generates a unique identity to each piece of information stored to further identify and persist in CRUD operations through HTTP requests. The `id` in this case is generated by Amplify and has a value of a built-in type of `ID` which, in GraphQL terminology, is known as a scalar type. You can read more about the different types identified in a GraphQL schema [here](https://graphql.org/graphql-js/basic-types/).\n\nThe exclamation mark `!` signifies that the field is required when storing the data and it must have value. In the above schema, there are two required fields: `id` and `name` for the `Todo` type.\n\nSave this file, go back to the terminal window and press enter. You will be prompted with a success message (_probably, in green_). All the changes you have just made are now saved locally.\n\n## Publish API to AWS Cloud\n\nTo publish all the changes you have made (or left it default) in the local environment to AWS Cloud, run the command `amplify push`.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*6gTwOhKVRGSzjZzP48WUTA.png' />\n\nOn running the command, as a prompt, you get a table in return with information about resources that you have used and modified or enabled. The name of these resources is described in the Category section. The **Resource name** in the above table is the API name you choose in the previous section. Next column is the type of operation for the API to be sent, that is currently, **Create**. The provider plugin column signifies that these resources are now being published to the cloud. Press `Y` to continue.\n\nAmplify CLI interface will now check for the schema and then compile it for any errors before publishing final changes to the cloud.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*pA5KjvyCwGgTDKeR8W3IyA.png' />\n\nIn the next step, it prompts whether you want to generate code for your newly created GraphQL API? Press `Y`. Then choose javascript as the code generation language. If you are using `TypeScript` or `flow`, now is the time to pick one. In the above image, for the last question, press `Y`. This will create a new folder inside the src directory which contains GraphQL schema, query, mutations, subscriptions as JavaScript files. On operating the API, these files can be accessible for different operations later.\n\nPress `Y` to the next question that asks you to update all GraphQL related operations. Also, let maximum statement depth be the default value of `2`. It will take a few moments to update the resources on the aws cloud and will prompt with a success message when done.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*QIYXuBoTZFvbSPiTyDG8tA.png' />\n\nAt the end of the success message you will get a GraphQL API endpoint and a GraphQL API Key (_which we learned previously that it expires on the 7th day_). You do not have to save it somewhere on your desktop and panic. This information is added to `aws-exports.js` file automatically for you now.\n\n## Integrating Expo app with Amplify SDK\n\nTo make use of amplify SDK in the React Native app, install the following dependencies.\n\n```shell\nyarn add aws-amplify aws-amplify-react-native\n```\n\nThe package `aws-amplify` allows making requests to auth and API services provided AWS. The other package `aws-amplify-react-native` is specific to React Native as a library that contains useful components to be used in a project. You can verify that both of these packages were installed by peeking into `package.json` file > `dependencies`.\n\n```json\n\"dependencies\": {\n    \"aws-amplify\": \"^1.1.26\",\n    \"aws-amplify-react-native\": \"^2.1.10\",\n    \"expo\": \"^32.0.0\",\n    \"react\": \"16.5.0\",\n    \"react-native\": \"https://github.com/expo/react-native/archive/sdk-32.0.0.tar.gz\"\n  },\n```\n\nOpen `App.js` and add the configuration keys from `aws-exports-.js` and make amplify SDK aware of them.\n\n```js\n// App.js\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\n// ---------This is the part to add\nimport Amplify from 'aws-amplify';\nimport config from './aws-exports';\n\nAmplify.configure(config);\n\n// -----------------------------\n```\n\nThat's it for the integration part. Now let us write some GraphQL interactions and make sure it works with our React Native app in real-time.\n\n## Adding a Todo Input Field\n\nTo capture the user input, we are going to use a component state as follows. Add the below before the render method inside the `App` component.\n\n```js\n//App.js\nstate = {\n  name: '',\n  todos: []\n};\n```\n\nIn the above state, there is a `name` field of the todo item and an array called `todos` that will be used to fetch all the todo items from the GraphQL API and display on the UI. Note that, there is another field called `description` in the GraphQL schema but since it isn't required, we are not going to use it here.\n\nNext, import `TextInput` and `TouchableOpacity` to create an input field and native button. Here is the complete code for `App.js`.\n\n```js\nimport React from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TextInput,\n  TouchableOpacity\n} from 'react-native';\n\nimport Amplify from 'aws-amplify';\nimport config from './aws-exports';\n\nAmplify.configure(config);\n\nexport default class App extends React.Component {\n  state = {\n    name: '',\n    todos: []\n  };\n\n  onChangeText = (key, val) => {\n    this.setState({ [key]: val });\n  };\n\n  addTodo = () => {};\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <TextInput\n          style={styles.input}\n          value={this.state.name}\n          onChangeText={val => this.onChangeText('name', val)}\n          placeholder=\"Add a Todo\"\n        />\n        <TouchableOpacity onPress={this.addTodo} style={styles.buttonContainer}>\n          <Text style={styles.buttonText}>Add +</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingHorizontal: 10,\n    paddingTop: 50\n  },\n  input: {\n    height: 50,\n    borderBottomWidth: 2,\n    borderBottomColor: 'blue',\n    marginVertical: 10\n  },\n  buttonContainer: {\n    backgroundColor: '#34495e',\n    marginTop: 10,\n    marginBottom: 10,\n    padding: 10,\n    borderRadius: 5,\n    alignItems: 'center'\n  },\n  buttonText: {\n    color: '#fff',\n    fontSize: 24\n  }\n});\n```\n\nGo to the terminal window and run the command `npm start` to view this either in an iOS simulator or an android emulator. You will get the following result.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*gj26-fBY1i3hRAmTm8Jj8A.png' />\n\n## Adding a Mutation using Graphql API\n\nA _mutation_ in GraphQL is all about handling operations like adding, deleting or modifying data. Currently, the React Native application is basic but it serves the purpose of making you familiar with amplify as a toolchain and its integration with the cross-platform framework. To add a todo item and to retrieve the same you need some business logic to communicate with GraphQL backend. Let us start with a mutation.\n\nIn the file `App.js`, import `API` and `graphqlOperation` from `aws-amplify`. Here, `API` is the category for AWS resource and the later is the method to run either a mutation or the query. Inside the `src/graphql/mutation.js` file you will find some mutation functions that we can make use of to create, delete, or update a note in the database. Also import `createTodo` from this file.\n\n```js\n//App.js\n\n// ...\nimport Amplify, { API, graphqlOperation } from 'aws-amplify';\nimport config from './aws-exports';\nimport { createTodo } from './src/graphql/mutations';\n// ...\n```\n\nAdd a function `addTodo` before the `render` method which uses `API.graphqlOperation()` the method from amplify SDK. This method will intake the mutation as the first argument and whatever input user enters inside the app UI, as the second argument.\n\n```js\n// App.js\n\naddNote = async event => {\n  const { name, todos } = this.state;\n\n  event.preventDefault();\n\n  const input = {\n    name\n  };\n\n  const result = await API.graphql(graphqlOperation(createTodo, { input }));\n\n  const newTodo = result.data.createTodo;\n  const updatedTodo = [newTodo, ...todos];\n  this.setState({ todos: updatedTodo, name: '' });\n};\n```\n\nThe above function takes `name` as the input where `name` is the text of a todo item. Also, notice the use of `async/await`. This helps to fetch the result from the mutation and update the `todos` array in the state with the latest todo item and previous or existing data in that array. After updating the state, clear the value of the input field `name`, and display in the UI by setting it back to an empty string.\n\nI urge you to add at least one list of item. You would not get any confirmation right now from the API whether the data field has been added to the GraphQL backend or not.\n\n## Run Query to fetch data\n\nIf you want to read data (_and render it in the UI of the app_), the process is known as a _query_. To fetch all the data from GraphQL API and display it on the device's screen, let us use the query from amplify GraphQL pre-generated file inside `src/graphql/queries.js` (_just like we did with mutation_).\n\n```js\n// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const getTodo = `query GetTodo($id: ID!) {\n  getTodo(id: $id) {\n    id\n    name\n    description\n  }\n}\n`;\nexport const listTodos = `query ListTodos(\n  $filter: ModelTodoFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listTodos(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      name\n      description\n    }\n    nextToken\n  }\n}\n`;\n```\n\nImport `listTodos` inside `App.js` from the above file.\n\n```js\n//App.js\nimport { listTodos } from './src/graphql/queries';\n```\n\nWe need to fetch the data at the time where the component gets rendered. For this, let us a lifecycle method called `componentDidMount`. Since this is going to be an asynchronous operation `async/await` is being used here too. Just after the state is defined in the `App` component, add the following snippet of code.\n\n```js\n// App.js\nasync componentDidMount() {\n        try {\n            const todos = await API.graphql(graphqlOperation(listTodos))\n            console.log(\"todos: \", todos)\n            this.setState({ todos: todos.data.listTodos.items })\n        } catch (err) {\n            console.log(\"error: \", err)\n        }\n    }\n```\n\nRefresh the app by saving the file you will notice that on UI screen nothing happens. That's because we haven't added the rendering logic to display this list of items. However, you can verify that data is being fetched using `console` statement and by looking quickly at the Expo CLI.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*jY4FwniW2IJtfpGxoXxNgQ.png' />\n\nDuring the previous step, I did add an item to the list. That's the proof of that. Now let us display this item on the device's screen. Inside the render method, add this after the `TouchableOpacity` component. We are going to use JavaScript's `map` function to traverse the `todos` array.\n\n```js\n// App.js\n\n    {this.state.todos.map((todo, index) => (\n                    <View key={index} style={styles.todo}>\n                        <Text style={styles.name}>{todo.name}</Text>\n                    </View>\n                ))}\n\n// Corresponding styles for above jsx\n\ntodo: {\n        borderBottomWidth: 1,\n        borderBottomColor: \"#ddd\",\n        paddingVertical: 10\n    },\n    name: { fontSize: 16 }\n```\n\nOn running `npm start` (_or if it is already running, just the save the App.js file_) you will get the following output.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*uOotu-Fbfy7FnfDRwQXNOw.png' />\n\n## Conclusion\n\nThis tutorial is complete. I am sure by now you have gained enough knowledge to build your own React Native app with AWS Amplify and AppAsync. Also, did you notice the amount of code written inside `App.js`? It is far less than a traditional app that uses self-backend techniques. This bare minimum demo can serve you a lot better.\n\nYou can find the complete code for this post in this [Github repository](https://github.com/amandeepmittal/expo-amplify-demo).\n\n[Originally published at Heartbeat](https://heartbeat.fritz.ai/building-a-react-native-mobile-app-with-aws-amplify-and-expo-fcab6ee0555e)\n",
            "url": "https://amanhimself.dev//blog/building-a-react-native-mobile-app-with-aws-amplify-and-expo",
            "title": "Building a React Native Mobile App with AWS Amplify and Expo",
            "summary": "Building a React Native Mobile App with AWS Amplify and Expo",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/how-i-configure-vscode-for-everything",
            "content_html": "---\ntitle: 'How I Configure VSCode for Everything'\nslug: 'how-i-configure-vscode-for-everything'\ndate: '2019-04-22'\nthumbnail: '/thumbnails/vscode.png'\ntag: 'tools'\ncanonicalUrl: 'https://medium.com/better-programming/how-i-configure-vscode-for-everything-7df65a316a52'\n---\n\n![cover](https://i.imgur.com/hJ7W51N.jpg)\n\n[**I made updates to this post here**](https://amanhimself.dev/blog/setup-macbook-m1/) **with additions to setup a new Macbook Pro based on M1 chip in 2021!**\n\nRecently, I was at the Boryspil Airport in Ukraine, working on a blog article, when suddenly my VS Code stopped working. It actually crashed! Not once, but twice in less than 30 minutes. Some of the content was autosaved, but some of it was gone forever.\n\nI was frustrated at first as to why it had to crash at that moment. After re-opening the editor, I was angry with myself because I had to write some of the stuff that didn’t get saved again.\n\nBefore this experience, it did at times feel that I had too many extensions that I wasn’t using, as I stopped working with some of the frameworks in recent months (Angular, for example).\n\nWhat did I do? The emotions weren’t helping; I had to find a better way. So, I re-installed [VS Code](https://code.visualstudio.com/).\n\nVS Code uses [Electron](https://electronjs.org/) as its base which enables it to be cross-platform and work on macOS, Windows, and Linux. It is built using [Node.js](https://nodejs.org/) and has complete support for any JavaScript developer.\n\nNow, that’s what I call win-win. It’s fast compared to the previous editors ([Atom](https://atom.io/)) and IDE’s ([Webstorm](https://www.jetbrains.com/webstorm/)) I have used.\n\n## Themes\n\nThe first thing I did was install themes that I see all day. I like my editor to be charming and appealing. Thus, I used the following themes for different purposes.\n\n- fairyFloss (most of the time, because I love purple backgrounds).\n- Dracula Official (I used this with my [iTerm](https://www.iterm2.com/) setup and switch between it and fairyFloss).\n- Night Owl (just to try something new).\n- Material-Icon-Theme (for file icons).\n\n<img src='https://cdn-images-1.medium.com/max/800/1*7utI1vJayaK97t7lYhrv_A.jpeg' />\n\n## Configuring VS Code\n\nNext, I changed a few things that I remembered from my previous settings.\n\n- Set `Tab` size to two spaces.\n- Enabled [Emmet](https://emmet.io/) for HTML and JavaScript.\n- Enabled `autoSave` with a delay of 5 seconds.\n- Used OS’s terminal setup and shell ([Zsh](https://ohmyz.sh/)).\n- Enabled formatting of files on save and pasting snippets from elsewhere.\n- Disabled Minimap as I like to save space and we write modular functions modules these days.\n- Also, enabled `wordwrap`.\n\n### Extensions\n\nNext step for me is to make this editor work like a charm with the help of some well maintained and free extensions.\n\n- [emojisense](https://marketplace.visualstudio.com/items?itemName=bierner.emojisense):\n- [Bracket Pair Colorizer](https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer)\n- [Code Spell Checker](https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker) (I write a lot of blog posts in VS Code.)\n- [Code::Stats](https://codestats.net/) (a small stats tool, for fun.)\n- [ESLint](https://eslint.org/)\n- [Indent 4-to-2](https://marketplace.visualstudio.com/items?itemName=Compulim.indent4to2) (converts tab indentation from four spaces to two.)\n- [Express.js](https://expressjs.com/) (a snippets package written by me.)\n- [markdownlint](https://github.com/markdownlint/markdownlint) (I sometimes write more Markdown in a day than JavaScript code.)\n- [GitHub pull requests](https://help.github.com/en/articles/about-pull-requests).\n- [GraphQL](https://graphql.org/) (published by Prisma.)\n- [Import Cost](https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost)\n- [npm Intellisense](https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense)\n- [Path Intellisense](https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense)\n- [Pug](https://marketplace.visualstudio.com/items?itemName=amandeepmittal.pug) (another snippet by me for Jade and Pug template languages, for some old projects.)\n- [IntelliSense for CSS class names](https://marketplace.visualstudio.com/items?itemName=Zignd.html-css-class-completion)\n- [React Native Tools](https://marketplace.visualstudio.com/items?itemName=msjsdiag.vscode-react-native)\n- [Todo Tree](https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree)\n- [Version Lens](https://marketplace.visualstudio.com/items?itemName=pflannery.vscode-versionlens)\n- [Settings Sync](https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync) (one of the most important extensions I have mentioned here)\n- [Word Count](https://marketplace.visualstudio.com/items?itemName=ms-vscode.wordcount)\n- [Prettier](https://prettier.io/) (Code formatter I can’t live without.)\n\nWith Prettier, I like to use my own set of configurations, as described below.\n\n```json\n{\n  \"prettier.jsxSingleQuote\": true,\n  \"prettier.printWidth\": 100,\n  \"prettier.semi\": false,\n  \"prettier.useTabs\": true,\n  \"prettier.tabWidth\": 2\n}\n```\n\n## Conclusion\n\nThat’s the setup I now use for my JavaScript, Node.js, [React](https://reactjs.org/) and React Native work. What type of VS Code configuration do you use? What does it look like? I hope you enjoyed reading this post.\n\nHappy Coding!\n\n[Originally published at Better Programming](https://medium.com/better-programming/how-i-configure-vscode-for-everything-7df65a316a52)\n",
            "url": "https://amanhimself.dev//blog/how-i-configure-vscode-for-everything",
            "title": "How I Configure VSCode for Everything",
            "summary": "How I Configure VSCode for Everything",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/build-a-react-native-app-with-react-hooks",
            "content_html": "---\ntitle: 'React Hooks Basics — Building a React Native App with React Hooks'\ndate: '2019-04-19'\nslug: 'build-a-react-native-app-with-react-hooks'\nthumbnail: '/thumbnails/expo.png'\ntag: 'react-native'\ncanonicalUrl: 'https://medium.com/crowdbotics/build-a-react-native-app-with-react-hooks-5498e1d5fdf6'\n---\n\n![cover_image](https://i.imgur.com/5QMLIPd.png)\n\n> [Originally published at Crowdbotics](https://medium.com/crowdbotics/build-a-react-native-app-with-react-hooks-5498e1d5fdf6)\n\nReact `16.8` welcomed the dawn of Hooks. This new addition is both a new concept and pragmatic approach that helps you use state and lifecycle methods behavior in functional React components, that is, without writing a class. The intention to implement this new feature in React ecosystem is to benefit all the community.\n\nWhether you are a developer with a front-end role or write mobile apps using React Native, chances are that you are going to come across Hooks often enough in your working environment. Of course, you do not have to use them. You can still write class components, they are not going anywhere yet. However, I personally like to think it is an important part of being a developer and using something like React in our work/day-job/side-hustle projects by keeping up to date with these new features.\n\nFollowing the footsteps of ReactJS, React Native community recently announced that they will be adding support for hooks shortly in the upcoming version `0.59`. I have been waiting for them to officially make this announcement before I publish this tutorial, only to spike up your interest in Hooks.\n\nIn this tutorial, I will walk you through the steps on using Hooks in a React Native application by building a small demo app and understand the most common Hooks in detail before that. Moreover, I am going to briefly introduce you to the concept of `flexbox` and how is it significantly different in React Native than the web.\n\n#### Tldr;\n\n- Requirements\n- Setting up Crowdbotics Project\n- Setup a React Native app\n- What are Hooks?\n- Implementing Hooks in react native\n- Building a Todo List App\n- What is `flexbox`?\n- Adding Hooks to the Todo List App\n- Rendering the list\n- Completing and Deleting an Item\n- Conclusion\n\n### Requirements\n\nIn order to follow this tutorial, you are required to have the following installed on your dev machine:\n\n- NodeJS above `8.x.x` installed on your local machine\n- Know, how to run simple npm commands\n- JavaScript/ES6 basics\n- `watchman` the file watcher installed\n- `react-native-cli` installed through npm\n\nFor a complete walkthrough on how you can set up a development environment for React Native, you can go through [official documentation here](https://facebook.github.io/react-native/docs/getting-started).\n\n### Setting up a Crowdbotics Project\n\nIn this section, you will be setting up a Crowdbotics project that has React Native pre-defined template with stable and latest dependencies for you to leverage. However, at the time of writing this tutorial, the template does not use React Native version `0.59`. So instead of going into too much hassle about upgrading this React Native app, I will be walking you through creating a new React Native project in the next section.\n\nTo follow along, setting up a new project using Crowdbotics app builder service is easy. Visit [app.crowdbotics.com](http://app.crowdbotics.com) dashboard. Once you are logged in, choose `Create a new application`.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*9gollubzgEx8AyxPs_TjFw.png' />\n\nOn `Create an Application page`, choose `React Native` template under Mobile App. Lastly, choose the name of your template at the bottom of this page and then click the button `Create by app!` After a few moments, your Crowdbotics project will be created. Upon creation, it will redirect you to the app dashboard, where you can see a link to GitHub, Heroku, and Slack. Once your project is created, you will get an invitation from Crowdbotics to download your project or clone the repository from Github either on them email you logged in or as a notification if you chose Github authentication.\n\n### Setup a React Native App\n\nOnce you installed \\`react-native-cli\\` you can begin by generating a React Native project. Run the below command to initialize a new React Native project. Also, note that you can name your React Native app anything.\n\n`react-native init RNHooksTODOAPP`\n\nUsing this command, a new project folder will be generated, traverse inside it and you will be welcome by a slightly different file system (a new file that you might not have seen before is `metro.config.js`, which you can ignore it for now).\n\n<img src='https://cdn-images-1.medium.com/max/800/1*vk2tjcthKq5R5CI4CoSYhg.png' />\n\nAlso, note that `RNHooksTODOAPP` is the project and directory name, so in its place, you can enter anything. For more information on the current release candidate of React Native, you can visit their Github project.\n\n[facebook/react-native  \n\\_A framework for building native apps with React. Contribute to facebook/react-native development by creating an account…\\_github.com](https://github.com/facebook/react-native/releases 'https://github.com/facebook/react-native/releases')[](https://github.com/facebook/react-native/releases)\n\nTo run the mobile application in an iOS/Android simulator you can run the same old CLI commands like `react-native run-ios` or `run-android`.\n\n### What are Hooks?\n\nHooks in React have been available since the version `16.7.0-alpha`. They are functions that allow you to use React state and a component's lifecycle methods in a functional component. Hooks do not work with classes. If you are familiar with React, you know that the functional component has been called as a functional stateless component. Not any more.\n\nSince previously, only a class component allowed you to have a local state. Using Hooks, you do not have to refactor a class component when using React or React Native into a functional component only because you want to introduce local state or lifecycle methods in that component. In other words, Hooks allow us to write apps in React with function components.\n\nReact provides a few built-in Hooks like `useState` and `useEffect`. You can also create your own Hooks to re-use the stateful behavior between different components.\n\n### Implementing Hooks in React Native\n\nIn the example below, let us take a look at how you will manage the local state of a component by using Hooks. Open up `App.js` file and paste this code.\n\n```js\nimport React, { useState } from 'react';\nimport { StyleSheet, Text, View, Button } from 'react-native';\n\nexport default function App() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <View style={styles.container}>\n      <Text>You clicked {count} times.</Text>\n      <Button\n        onPress={() => setCount(count + 1)}\n        title=\"Click me\"\n        color=\"red\"\n        accessibilityLabel=\"Click this button to increase count\"\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF'\n  },\n  welcome: {\n    fontSize: 20,\n    textAlign: 'center',\n    margin: 10\n  },\n  instructions: {\n    textAlign: 'center',\n    color: '#333333',\n    marginBottom: 5\n  }\n});\n```\n\nWe will start by writing a basic old-fashioned counter example to understand the concept of using Hooks. In the above code snippet, you are starting by importing the usual along with `useState` from `react` library. This built-in hook allows you to add a local state to functional components. Notice that we are writing a functional component: `export default function App()`, instead of traditionally writing a class component we are defining a normal function.\n\nThis `App` function has state in the form of `const [count, setCount] = useState(0)`. React preserves this state between all the re-rendering happening. `useState` here returns a pair of values. The first one being the `count` which is the current value and the second one is a function that lets you update the _current_ value. You can call `setCount` function from an event handler or from somewhere else. It is similar to `this.setState` in a class component. In above, we are using the function inside the button component: `setCount(count + 1)`\n\n`useState(0)` hook also takes a single argument that represents the initial state. We are defining the initial state as `0`. This is the value from which our counter will start.\n\nTo see this in action, open two terminal windows after traversing inside the project directory.\n\n```shell\n# first terminal window, run\nnpm start\n\n# second window, run\nreact-native run-ios\n```\n\nOnce the build files are created, the simulator will show you a similar result like below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*_Ecf_sv3Sx1UyzlYHFHIbw.png' />\n\nIf you play around a bit and hit the button `Click me`, you will see the counter's value is increased.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*GKTkcgsmsqdrIMoNWKAyhg.gif' />\n\nAs you know by now, that the `App` component is nothing but a function that has state. You can even refactor it like below by introducing another function to handle `Button` click event and it will still work.\n\n```js\nexport default function App() {\n  const [count, setCount] = useState(0);\n\n  function buttonClickHandler() {\n    setCount(count + 1);\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text>You clicked {count} times.</Text>\n      <Button\n        onPress={buttonClickHandler}\n        title=\"Click me\"\n        color=\"red\"\n        accessibilityLabel=\"Click this button to increase count\"\n      />\n    </View>\n  );\n}\n```\n\n### Building a Todo List app with Hooks\n\nIn this section, you are going to build a Todo List application using React Native framework and Hooks. I personally love building Todo list applications when getting hands-on experience over a new programming concept or approach.\n\nWe have already created a new project in the last section when we learned about Hooks. Let us continue from there. Open up `App.js` and modify it with the following code.\n\n```js\nimport React from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput\n} from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.header}>Todo List</Text>\n      <View style={styles.textInputContainer}>\n        <TextInput\n          style={styles.textInput}\n          multiline={true}\n          placeholder=\"What do you want to do today?\"\n          placeholderTextColor=\"#abbabb\"\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF'\n  },\n  header: {\n    marginTop: '15%',\n    fontSize: 20,\n    color: 'red',\n    paddingBottom: 10\n  },\n  textInputContainer: {\n    flexDirection: 'row',\n    alignItems: 'baseline',\n    borderColor: 'black',\n    borderBottomWidth: 1,\n    paddingRight: 10,\n    paddingBottom: 10\n  },\n  textInput: {\n    flex: 1,\n    height: 20,\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: 'black',\n    paddingLeft: 10,\n    minHeight: '3%'\n  }\n});\n```\n\nWe need a text input field to add items to our list. For that, `TextInput` is imported from `react-native`. For demonstration purposes, I am keeping styles simple, especially the background color. If you want to make the UI look good, go ahead. In the above code, there is a header called `Todo List` which has corresponding `header` styles defined using `StyleSheet.create` object. Also, take notice of the `View` which uses `justifyContent` with a value of `flex-start`.\n\n### What is flexbox?\n\nCreating a UI in a React Native app heavily depends on styling with `flexbox`. Even if you decide to use a third party library kit such as `nativebase` or `react-native-elements`, their styling is based on `flexbox` too.\n\nThe `flexbox` layout starts by creating a flex container with an element of `display:flex`. If you are using `flexbox` for the web you will have to define this `display` property. In react native, it is automatically defined for you. The flex container can have its own children across two axes. The main axis and cross axis. They both are perpendicular to each other.\n\nThese axes can be changed as a result of property `flexDirection`. In the web, by default, it is a row. In React Native, by default, it is a column.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*t9nPsrpaOMDMv-FIPzdc3g.png' />\n\nTo align an element along the horizontal axis or the cross axis in React Native you have to specify in the `StyleSheet` object with the property of `flexDirection: 'row'`. We have done the same in the above code for the `View` that contains `TextInput` field.\n\nFlexbox is an algorithm that is designed to provide a consistent layout on different screen sizes. You will normally use a combination of `flexDirection`, `alignItems`, and `justifyContent` to achieve the right layout. Adding `justifyContent` to a component's style determines the distribution of children elements along the main axis. `alignItems` determine the distribution of children elements along the cross axis.\n\nBack to our app. Right now, if you run it in a simulator, it will look like below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*yq7SnNuaSIdCyn7FehC6xg.png' />\n\nLet us add an icon to represent a button to add items to the todo list. Go to the terminal window right now and install `react-native-vector-icons`.\n\n```shell\nnpm install -S react-native-vector-icons\n\n# Also link it\nreact-native link react-native-vector-icons\n```\n\nNow go back to `App.js` file. We have already imported `TouchableOpacity` from `react-native` core. Now let us import `Icon` from `react-native-vector-icons`.\n\n```js\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput\n} from 'react-native';\n\nimport Icon from 'react-native-vector-icons/Feather';\n```\n\nNext step is to add the `Icon` element inside `TouchableOpacity` next to the `TextInput`. This means the _plus_ to add an item to the list must be on the same line or axis as the text input field. `TouchableOpacity` makes the icon clickable and can have an event listener function (_which we will add later_) to run the business logic for adding an item to the list.\n\n```js\n<View style={styles.textInputContainer}>\n  <TextInput\n    style={styles.textInput}\n    multiline={true}\n    placeholder=\"What do you want to do today?\"\n    placeholderTextColor=\"#abbabb\"\n  />\n  <TouchableOpacity>\n    <Icon name=\"plus\" size={30} color=\"blue\" style={{ marginLeft: 15 }} />\n  </TouchableOpacity>\n</View>\n```\n\nNow if you go back to the simulator you will have the following screen.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*Tt5Dqz4LZvxdFu8D5rd3wA.png' />\n\n### Adding Hooks to the App\n\nIn this section, you are going to add a local state to the component using Hooks. We will start by initializing the local state for the App component with the new hooks syntax. For that, you have to require `useState` from `react` core. Also, note that the initial state passed below is passed as an argument to the `useState()` function.\n\n```js\nimport React, { useState } from 'react';\n\n// ...\nexport default function App() {\n  const [value, setValue] = useState('');\n  const [todos, setTodos] = useState([]);\n\n  addTodo = () => {\n    if (value.length > 0) {\n      setTodos([...todos, { text: value, key: Date.now(), checked: false }]);\n      setValue('');\n    }\n  };\n\n  // ...\n}\n```\n\nThe first `value` is the value of `TextInput` and it is initially passed as an empty string. In the next line, `todos` are declared as an empty array that will later contain multiple values. The `setValue` is responsible for changing the value of `value` on `TextInput` and then initializing the empty value when the `value` from the state is assigned as an item to `todos` array. `setTodos` is responsible for updating the state.\n\nThe `addTodo` function we define is a handler function that will check if the `TextInput` field is not empty and the user clicks the plus icon, it will add the `value` from state to the `todos` and generate a unique key at the same time to retrieve each todo item record from `todos` array to display as a list. The initial value for `checked` is false since no todo item can be marked as completed by default, that is when adding it to the list.\n\nHere is the complete code for `App.js` after adding state through Hooks.\n\n```js\nimport React, { useState } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput\n} from 'react-native';\n\nimport Icon from 'react-native-vector-icons/Feather';\n\nexport default function App() {\n  const [value, setValue] = useState('');\n  const [todos, setTodos] = useState([]);\n\n  addTodo = () => {\n    if (value.length > 0) {\n      setTodos([...todos, { text: value, key: Date.now(), checked: false }]);\n      setValue('');\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.header}>Todo List</Text>\n      <View style={styles.textInputContainer}>\n        <TextInput\n          style={styles.textInput}\n          multiline={true}\n          placeholder=\"What do you want to do today?\"\n          placeholderTextColor=\"#abbabb\"\n          value={value}\n          onChangeText={value => setValue(value)}\n        />\n        <TouchableOpacity onPress={() => handleAddTodo()}>\n          >\n          <Icon name=\"plus\" size={30} color=\"blue\" style={{ marginLeft: 15 }} />\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF'\n  },\n  header: {\n    marginTop: '15%',\n    fontSize: 20,\n    color: 'red',\n    paddingBottom: 10\n  },\n  textInputContainer: {\n    flexDirection: 'row',\n    alignItems: 'baseline',\n    borderColor: 'black',\n    borderBottomWidth: 1,\n    paddingRight: 10,\n    paddingBottom: 10\n  },\n  textInput: {\n    flex: 1,\n    height: 20,\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: 'black',\n    paddingLeft: 10,\n    minHeight: '3%'\n  }\n});\n```\n\n### Rendering the List\n\nYou are going to create a new component that will be responsible for displaying each task that a user adds. Create a new file called `TodoList.js` and add the following code to the file.\n\n```js\nimport React from 'react';\nimport { StyleSheet, TouchableOpacity, View, Text } from 'react-native';\nimport Icon from 'react-native-vector-icons/Feather';\n\nexport default function TodoList(props) {\n  return (\n    <View style={styles.listContainer}>\n      <Icon name=\"square\" size={30} color=\"black\" style={{ marginLeft: 15 }} />\n      <Text style={styles.listItem}>{props.text}</Text>\n      <Icon\n        name=\"trash-2\"\n        size={30}\n        color=\"red\"\n        style={{ marginLeft: 'auto' }}\n        onPress={props.deleteTodo}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  listContainer: {\n    marginTop: '5%',\n    flexDirection: 'row',\n    borderColor: '#aaaaaa',\n    borderBottomWidth: 1.5,\n    width: '100%',\n    alignItems: 'stretch',\n    minHeight: 40\n  },\n  listItem: {\n    paddingBottom: 20,\n    paddingLeft: 10,\n    marginTop: 6,\n    borderColor: 'green',\n    borderBottomWidth: 1,\n    fontSize: 17,\n    fontWeight: 'bold',\n    color: 'white'\n  }\n});\n```\n\nNow let us import this component in `App.js` to render todo items when we add them by clicking the plus sign button. Also, you are now required to import `ScrollView` in App component from react native core.\n\n```js\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  ScrollView\n} from 'react-native';\n\n// ...\n\nimport TodoList from './TodoList';\n\n// ...\nreturn (\n  <View style={styles.container}>\n    {/* ... */}\n    <ScrollView style={{ width: '100%' }}>\n      {todos.map(item => (\n        <TodoList text={item.text} key={item.key} />\n      ))}\n    </ScrollView>\n  </View>\n);\n```\n\nThe `ScrollView` is a component that renders all its child at once. A good case to use when you are not rendering a large amount of data or data coming from a third party API. Now, enter a new task (_like below_) and try adding it to the todo list.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*yQ1-JAtWzgF8paZLnBbxxg.gif' />\n\n### Completing and Deleting an Item\n\nThis is the last section to complete our application. We need two handler functions to implement functionalities of checking a todo list item mark and deleting a todo list item.\n\nDefine two functions like below after `addTodo`.\n\n```js\ncheckTodo = id => {\n  setTodos(\n    todos.map(todo => {\n      if (todo.key === id) todo.checked = !todo.checked;\n      return todo;\n    })\n  );\n};\n\ndeleteTodo = id => {\n  setTodos(\n    todos.filter(todo => {\n      if (todo.key !== id) return true;\n    })\n  );\n};\n```\n\nThe first function `checkTodo` uses `map` function to traverse the complete todos array, and then check only that item that has been toggled by the user using its icon on the mobile app by matching its `key` (look at the `addTodo` function, we defined a key when adding an item to the todo list). The `deleteTodo` function uses `filter` to remove an item from the list.\n\nTo make it work, we need to pass both of these functions to `TodoList` component.\n\n```js\n// App.js\n<ScrollView style={{ width: '100%' }}>\n  {todos.map(item => (\n    <TodoList\n      text={item.text}\n      key={item.key}\n      checked={item.checked}\n      setChecked={() => checkTodo(item.key)}\n      deleteTodo={() => deleteTodo(item.key)}\n    />\n  ))}\n</ScrollView>\n```\n\nNow open, `TodoList.js` and these new props.\n\n```js\nimport React from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport Icon from 'react-native-vector-icons/Feather';\n\nexport default function TodoList(props) {\n  return (\n    <View style={styles.listContainer}>\n      <Icon\n        name={props.checked ? 'check' : 'square'}\n        size={30}\n        color=\"black\"\n        style={{ marginLeft: 15 }}\n        onPress={props.setChecked}\n      />\n      <View>\n        {props.checked && <View style={styles.verticalLine} />}\n        <Text style={styles.listItem}>{props.text}</Text>\n      </View>\n      <Icon\n        name=\"trash-2\"\n        size={30}\n        color=\"red\"\n        style={{ marginLeft: 'auto' }}\n        onPress={props.deleteTodo}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  listContainer: {\n    marginTop: '5%',\n    flexDirection: 'row',\n    borderColor: '#aaaaaa',\n    borderBottomWidth: 1.5,\n    width: '100%',\n    alignItems: 'stretch',\n    minHeight: 40\n  },\n  listItem: {\n    paddingBottom: 20,\n    paddingLeft: 10,\n    marginTop: 6,\n    borderColor: 'green',\n    borderBottomWidth: 1,\n    fontSize: 17,\n    fontWeight: 'bold',\n    color: 'black'\n  },\n  verticalLine: {\n    borderBottomColor: 'green',\n    borderBottomWidth: 4,\n    marginLeft: 10,\n    width: '100%',\n    position: 'absolute',\n    marginTop: 15,\n    fontWeight: 'bold'\n  }\n});\n```\n\nNow run the app and see it in action.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*wKSEa-PSOHjNXNbMQ-5WvQ.gif' />\n\n### Conclusion\n\nThis completes our tutorial. I hope this tutorial helps you understand the basics of React Hooks and then implement them with your favorite mobile app development framework, React Native.\n\nYou can extend this demo application by adding `AsyncStorage` or a cloud database provider and making this application real time. Also, do not forget to enhance the UI to your liking.\n\n_To read more about React Hooks check out the_ [_official Overview page here_](https://reactjs.org/docs/hooks-state.html)_._\n\n_The complete code for this tutorial is available in the Github repository below._\n\n[amandeepmittal/RNHooksTODOAPP](https://github.com/amandeepmittal/RNHooksTODOAPP)\n",
            "url": "https://amanhimself.dev//blog/build-a-react-native-app-with-react-hooks",
            "title": "React Hooks Basics — Building a React Native App with React Hooks",
            "summary": "React Hooks Basics — Building a React Native App with React Hooks",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/how-to-build-your-first-vr-app-with-viroreact-react-native-and-crowdbotics",
            "content_html": "---\ntitle: 'How To Build Your First VR App with ViroReact, React Native, and Crowdbotics'\ndate: '2019-03-28'\nslug: 'how-to-build-your-first-vr-app-with-viroreact-react-native-and-crowdbotics'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://medium.com/crowdbotics/how-to-build-your-first-vr-app-with-viroreact-react-native-and-crowdboticsp-a376b49e1e1d'\n---\n\nVirtual Reality (VR) is an immersive technology that has intentions to improve the experience by providing a three-dimensional realistic environment rendered for the individual to feel real. The applications of this technology are boundless. You will find totally immersive and entertaining gaming applications as well as examples of healthcare simulations used to save lives.\n\nFor React Native developers, this technology is made accessible by a third party platform called [ViroReact](https://docs.viromedia.com/docs/viro-platform-overview). This platform allows React Native developers to rapidly build cross-platform AR/VR applications. ViroReact currently supports ARKit, ARCore, VR Cardboard, Gear VR and Daydream. [Viro Media](https://medium.com/u/25ec8f1004a4)\n\nIn this tutorial, we will be helping you go through the installation and setup process along with that create a small VR app and understand the basics behind it.\n\n### Overview\n\n- Getting Started: Setup and Installation\n- What is ViroReact?\n- Building the app\n- Scenes and Text in a VR App\n- Adding a 3D effect to the Text\n- Adding a 360 PhotoSphere\n- Conclusion\n\n### Getting Started: Setup and Installation\n\nTo get started, we will be using a React Native project generated by [**Crowdbotics App Builder**](https://www.crowdbotics.com/app-builder). All you need to generate a project with Crowdbotics is login access either using your personal email or through your Github profile (_recommended_).\n\nOnce logged in, on the `Create Application` page, choose `React Native` template under `Mobile App`.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*AOJYgjJldsH0HPMvY5qb1w.png' />\n\nLastly, choose the name of your template at the bottom of this page and then click the button, Create my app!. After a few moments, your project will be generated. If you decided to access through Github, you will receive an invitation to the Github repository generated by the Crowdbotics service. Clone the repository at your dev machine for now.\n\nTo proceed further, you need to have the following already installed on your dev machine.\n\n- Node.js\n- watchman (OSX/Linux only)\n- Python2, JDK (windows only)\n- [ngrok package](https://www.npmjs.com/package/ngrok) installed as a global module\n- react-native-cli\n- react-viro-cli\n\nTo install both the command line tools, open up a terminal window and run the following command.\n\n```shell\nnpm install -g react-native-cli react-viro-cli\n```\n\nAfter the installation, make sure you have the latest version of `react-viro-cli` which is `2.13.0` at the time of writing this tutorial. To check the version installed, run `react-viro-cli --version`.\n\nTraverse inside the cloned Github repository. When inside, delete all the contents except, the following files.\n\n- `.git` directory\n- `.gitattributes`\n- `.gitignore`\n\nThe reason behind this is that integrating an already existing React Native app with Viro React does not work quite as well as it is intended too. So, we are going to take a different approach. After deleting the files, use the react-viro cli to create a new project that has integration support by default.\n\n```shell\nreact-viro init [PROJECT_NAME] --verbose\n```\n\nBy default, `react-viro-cli` uses `yarn` to install project dependencies. After this step, you will have your project directory structure similar to the following.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*DbX1Fo44I0P0dDbmcyzdiQ.png' />\n\n### What is ViroReact?\n\nViroReact is a platform that helps you build AR (_Augmented Reality_) and VR (_Virtual Reality_) application experiences. It uses ARKit and ARCore to implement the developer platform for specific mobile platforms such as iOS and Android. Other than React Native there is a development option for both native platforms provided by ViroCore.\n\nViroReact API comes with a number of custom React components to render different scenes and objects in a three-dimensional environment. A good thing about ViroReact is that it is open source so you do not have to worry about paying the licensing fees. However, do note that, due to the limitation of supported devices by ARKit and ARCore, you cannot use an extremely old OS version for either iOS or Android.\n\n### Setting up Viro API and Testbed App\n\nViro provides you a testbed application that can be installed on a real device and test the application you build along with the way. It also contains a few samples of testbed applications that are build using ViroReact core.\n\nTo install on the Viro Media App iOS devices, go the [app store here](https://itunes.apple.com/us/app/viro-media/id1163100576?mt=8) and for Android, there is an app on the [Play store here](https://play.google.com/store/apps/details?id=com.viromedia.viromedia). Note that it is a required step in order to proceed further.\n\nTo access Viro React core you need an API key. Login or create a new account at [viromedia.com](https://gist.github.com/amandeepmittal/www.viromedia.com) and you will get an API key on the registered email.\n\nOnce that is done, let us run the default sample testbed app that comes with every Viro project using its CLI tool. First, you are required to add the API key inside `App.js` file.\n\n```js\nvar sharedProps = {\n  apiKey: 'API_KEY_HERE'\n};\n```\n\nAfter that, open up a terminal window and a run `npm start`.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*nqMq5cNU8OR-Flke9Vw3-g.png' />\n\nWhen you run a Viro project, you will always notice in the terminal window that apart from getting `react-native-cli`interface that runs Metro bundler and loads the dependency graph, `react-viro-cli` uses ngrok packager service that provides an endpoint for you to run on the Viro Media app on a real device. You can see the endpoint reflected in the above screenshot.\n\nWhen you open the application you are welcomed by the below screen.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*IpoaZjN-fS62-bF3bIXRng.jpeg' />\n\nNext, click on the icon on the top left to access the menu bar.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*sgKQuwtK_c0T_A31FoALDw.jpeg' />\n\nOn the menu bar, click on `Enter Testbed`. Then, enter the ngrok endpoint generated in the terminal on running `npm start`.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*xJS5lJwedqRUSq7FLtEeEA.jpeg' />\n\nOnce that is done, click the button `Go` and you will be prompted to choose an environment like below. Click on `VR`.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*fHwBN1yhZLrOtSRzTMb7Vw.jpeg' />\n\nYou will see the pre-installed application like below in action on your device.\n\n### Building the app\n\nAs everything is in order, you can now move ahead and continue working on your VR app. You have already experienced a Hello World application that comes pre-built with ViroReact CLI tool. In this section, we are going to edit it and customize it in our way to accomplish the desired result.\n\nFirst, we are going to eliminate the screen where it prompts about choosing a rendering environment for either an AR or a VR test application. Since we are only working on a VR app, let us update the `render()` function inside `App.js` file as below.\n\n```js\nrender() {\n\t\treturn this._getVRNavigator();\n  }\n```\n\nThe method `_getVRNavigator()` renders the scene navigator for the VR experience. The scene navigator is the entry point of any Viro application. For AR you will find, `ViroARSceneNavigator` and for VR you will find, `ViroVRSceneNavigator`. For any scene to render there are two required props by this component are the `apiKey` and an `initialScene`. In the file, `App.js` you will the currently rendered scene like below. The `sharedProps` part is the `apiKey`.\n\n```js\n<ViroVRSceneNavigator\n  {...this.state.sharedProps}\n  initialScene={{ scene: InitialVRScene }}\n  onExitViro={this._exitViro}\n/>\n```\n\nThe `initialScene` props have a value of `InitialVRScene`. This value is actually a component that gets displayed initially by the scene navigator. In our case, it is the component `HelloWorldScene` for now.\n\n```js\nvar InitialVRScene = require('./js/HelloWorldScene');\n```\n\n### Scenes and Text in a VR App\n\nApplications in Viro React consists of scenes that are represented by `ViroScene` component. Each scene is an equivalent of the `Views`. To create a basic scene all you have to do is modify the`<ViroScene>` component. Open `HelloWorldScene.js`. You will notice that `ViroScene` is being already imported.\n\n```js\nimport { ViroScene, ViroText, Viro360Image } from 'react-viro';\n```\n\nNext, let us modify the `render` function. Create a text-based scene of our own.\n\n```js\n<ViroText>\n  <ViroText\n    fontSize={40}\n    text='Hi, from Crowdbotics'\n    width={2}\n    height={2}\n    position={[0, 0, -2]}\n    textAlign='center'\n    textAlignVertical='center'\n    color='#ffffff'\n  />\n</ViroScene>\n```\n\n`ViroText` is a component that provides two-dimensional text functionality. It uses props such as the `text` itself, the `textAlign`, `fontSize`, `witdh`, `position`, and so on. The styling of the text can be done using a `fontFamily` but do note that not all platforms support all font families. You can also use styling object created using `StyleSheet` from React Native core. The size of the text can be increased or decreased using `fontSize` property. See the result of the above snippet of code as below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*eeKdtwtZur54KOQMB3serQ.gif' />\n\nTo enable 3D text, there is a prop called `extrusionDepth` which is given a value greater than zero, enables 3D text. Let us add this property in `ViroText` component.\n\n```js\n<ViroText\n  fontSize={40}\n  text=\"Hi, from Crowdbotics\"\n  width={2}\n  height={2}\n  position={[0, 0, -2]}\n  textAlign=\"center\"\n  textAlignVertical=\"center\"\n  color=\"#ffffff\"\n  extrusionDepth={8}\n  materials={['frontMaterial', 'backMaterial', 'sideMaterial']}\n/>\n```\n\n### Adding a 3D effect to the Text\n\nIf the value of `extrusionDepth` is greater than zero, you can apply three materials to the text: `frontMaterial`, `backMaterial` and `sideMaterial`. Let us add different colors to these materials to see the effect. You will have to import `ViroMaterials` from `react-viro` in order to proceed.\n\n```js\n// import\nimport { ViroScene, ViroText, ViroMaterials } from 'react-viro';\n\n// add props\n<ViroText\n\t\t\t\t\t{/*...*/}\n\t\t\t\t\textrusionDepth={8}\n\t\t\t\t\tmaterials={['frontMaterial', 'backMaterial', 'sideMaterial']}\n\t\t\t\t/>\n\n// add materials\nViroMaterials.createMaterials({\n\tfrontMaterial: {\n\t\tdiffuseColor: '#FFFFFF'\n\t},\n\tbackMaterial: {\n\t\tdiffuseColor: '#FF0000'\n\t},\n\tsideMaterial: {\n\t\tdiffuseColor: '#0000FF'\n\t}\n});\n```\n\n`Materials` are the set of shading attributes that define the appearance of a geometry’s surfaces when rendered. To see this in action, take a look below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*D-9x9fS2r0zLiCexmjlktA.gif' />\n\n### Adding a 360 PhotoSphere\n\nYou may have noticed in the testbed app that we tested earlier, it had a background image that acted like a 360 sphere. You often find these 360 images in VR applications. To add one in our application right now, download any asset from this [link](https://docs.viromedia.com/docs/assets) and paste the file inside the `projectname/js/res/` directory. These assets are free to use.\n\nTo add such an image, there is a component in Viro React API called `Viro360Image`. You can import it from `react-viro`.\n\n```js\n// import\nimport { ViroScene, ViroText, Viro360Image, ViroMaterials } from 'react-viro';\n```\n\nThis component uses a device’s gyroscope to display a 360 degrees view. Add the component inside `ViroScene` as below and before `ViroText`.\n\n```js\n<ViroScene>\n  <Viro360Image source={require('./res/360_space.jpg')} />\n  <ViroText {/*...*/} />\n</ViroScene>\n```\n\nThe initial load of the image might take a few seconds but it will appear in the path is correct. See the results below.\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*BI-MBJH-vqu5GmNyBgDH2Q.jpeg' />\n\n### Conclusion\n\nViroReact provides a great set of API components that you can use to extend your VR application. Did you notice, we never had to re-start the ngrok bundler after making changes in the app component? This is where the advantage of ViroReact lies. I hope you enjoyed this tutorial.\n\nThe complete code for this tutorial is available in the Github repository below.\n\n[**crowdbotics-apps/rnvrdemo-1546**](https://github.com/crowdbotics-apps/rnvrdemo-1546/tree/master/vrappdemo)\n\n[Originally published at Crowdbotics](https://medium.com/crowdbotics/how-to-build-your-first-vr-app-with-viroreact-react-native-and-crowdboticsp-a376b49e1e1d)\n",
            "url": "https://amanhimself.dev//blog/how-to-build-your-first-vr-app-with-viroreact-react-native-and-crowdbotics",
            "title": "How To Build Your First VR App with ViroReact, React Native, and Crowdbotics",
            "summary": "How To Build Your First VR App with ViroReact, React Native, and Crowdbotics",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/build-a-chatbot-with-dialogflow-and-react-native",
            "content_html": "---\ntitle: 'Build a Chatbot with Dialogflow and React Native'\ndate: '2019-03-26'\nslug: 'build-a-chatbot-with-dialogflow-and-react-native'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://blog.jscrambler.com/build-a-chatbot-with-dialogflow-and-react-native/'\n---\n\n![cover_image](https://i.imgur.com/SUVqOZ5.jpg)\n\nChatbots are a powerful way to provide conversational experiences for any software product. Each conversational experience depends on the implementation of the chatbot to either be a good or poor experience for the end user. The modern day world is living in the technology wave of Artificial Intelligence and bots are a huge part of it.\n\nIn this tutorial, we are going to build a chatbot application from scratch using [Dialogflow](https://dialogflow.com/) and React Native. The main reason to use Google's Dialogflow for this tutorial is that you do not have to go through a hefty signup process by providing your card details, unlike other bot frameworks or similar service providers.\n\n_What are we going to build?_ Let us build a chatbot that returns the current date when asked in different ways.\n\nThe complete code for this tutorial can be found inside this [Github repository](https://github.com/amandeepmittal/RNDialogflowChatbot).\n\n## Requirements\n\nIn order to follow this tutorial, you will need:\n\n- `react-native-cli` version `2.0.1` or above available via `npm`\n- Knowledge of React, React Native and JavaScript\n- A Google account\n- `react-native-gifted-chat`, which provides a customizable and complete chat UI interface\n- `react-native-dialogflow`, which will help us bridge our app with Google Dialogflow’s SDK\n\n## Getting Started\n\nIn order to get started, the first requirement to use `react-native-cli` and create a new project directory. Run the following command from your terminal.\n\n```shell\nreact-native init RNDiagflowChatbot\n\n# traverse inside the directory\ncd RNDiagflowChatbot\n```\n\nAlso, make sure that you are now inside the project directory in your terminal window. This step is required since we are going to add two npm packages that are going to help us build our Chatbot app.\n\n```shell\nnpm install --save react-native-gifted-chat react-native-dialogflow react-native-voice\n```\n\nNote that we are not going to use `react-native-voice` directly but you are required to install and link to the React Native project. The reason is `react-native-dialogflow` requires `react-native-voice` as a peer dependency. The next step is to link the Dialogflow SDK library to the React Native project.\n\n```shell\nreact-native link react-native-dialogflow\nreact-native link react-native voice\n```\n\nYou will get a success message when the linking process is complete. Also, to prevent the application from crashing later when we are running it, you have to add some permissions for iOS inside the file `iOS/RNDiagflowChatbot/Info.plist`, inside the root `<dict>` tag.\n\n```xml\n// Info.plist\n\n  <key>NSSpeechRecognitionUsageDescription</key>\n  <string>Your usage description here</string>\n  <key>NSMicrophoneUsageDescription</key>\n  <string>Your usage description here</string>\n  <key>UIRequiredDeviceCapabilities</key>\n```\n\nNow, let us move on to create the first chat component. We will be using the `App` component inside the `App.js` file but you are most welcome to refactor your code later.\n\n```js\n// App.js\nimport React, { Component } from 'react';\nimport { StyleSheet, Text, View, Image } from 'react-native';\nimport { GiftedChat } from 'react-native-gifted-chat';\n\nclass App extends Component {\n  state = {\n    messages: [\n      {\n        _id: 1,\n        text: `Hi! I am the FAQ bot 🤖 from Jscrambler.\\n\\nHow may I help you with today?`,\n        createdAt: new Date(),\n        user: {\n          _id: 2,\n          name: 'FAQ Bot',\n          avatar: 'https://i.imgur.com/7k12EPD.png'\n        }\n      }\n    ]\n  };\n\n  onSend(messages = []) {\n    this.setState(previousState => ({\n      messages: GiftedChat.append(previousState.messages, messages)\n    }));\n  }\n\n  render() {\n    return (\n      <View style={{ flex: 1, backgroundColor: '#fff' }}>\n        <GiftedChat\n          messages={this.state.messages}\n          onSend={messages => this.onSend(messages)}\n          user={{\n            _id: 1\n          }}\n        />\n      </View>\n    );\n  }\n}\n\nexport default App;\n```\n\nWe start by requiring necessary components, including `GiftedChat` from the `react-native-gifted-chat` package. In the component's state, you will find one static or welcome message whenever the component gets rendered initially.\n\nThe `createdAt` time will display the current time and date in the chat UI. The `user` object is the user sending messages — in our case, the bot. It is defined with properties like username, its unique ID, and an avatar. The `react-native-gifted-chat` automatically adds a circle avatar in the UI.\n\nThe line `<View style={{ flex: 1, backgroundColor: '#fff' }}>` in the render function shows that you can add your own custom styling along using Gifted Chat's components. The `GiftedChat` component can take props like `messages` from our component's initial state, an `onSend` prop that is a callback function used when sending the message, and the user ID of the message.\n\nThis is how easy to implement a chat interface in a React Native app. To run your app in an iOS simulator, run the command `react-native run-ios`. For Android users, run the command `react-native run-android` and do make sure you have the Android emulator (or commonly known as Android Virtual Device) running the background.\n\nSee the current state of our application in action below.\n\n![](https://i.imgur.com/tBiBSef.png)\n\n## Google's Dialogflow Setup\n\nDialogflow is an NLP service from Google. It has many integrations, SDKs for many languages and prebuilt agents. It works very straightforward with Google Assistant. Visit [the Dialogflow website](https://dialogflow.com/) and create a new account or log-in with your existing Google ID. Once you are logged in, you will be welcomed by a screen that consists of different **Agents**.\n\n![](https://i.imgur.com/50uiOOR.png)\n\nClick on the `Create Agent` button to make one. We are going to name our agent: **faq-bot**. Fill in the details like below.\n\n![](https://i.imgur.com/HDhFKLS.png)\n\nAfter filling out the details, click on the button `Create`.\n\nGenerally, for small applications you will have one agent. In Dialogflow, the basic flow of conversation involves these steps:\n\n- The user giving input\n- Your Dialogflow agent parsing that input\n- Your agent returning a response to the user\n\nThese _agents_ can understand the vast and varied nuances of human language and translate that to standard and structured meaning that your apps and services can understand. Each agent contains different **intents**.\n\nAn intent is the action or the response sent back to the user in the chatbot application. An intent can contain different types of responses or actions. The next step in the process is to create your first intent.\n\n![](https://i.imgur.com/8xUJ1vt.png)\n\nAn intent can be a simple text response that is displayed back to the user or trained phrases to match a specific intent. There are also actions and parameters that extract parameters or information from user queries. Examples of this kind of information include dates, times, names, places, and more.\n\nRight now, we do not have any intent created of our own. Let us create one in the next section.\n\n## First Dialogflow Intent\n\nLet us add our first intent which we are going to call `date.current`. The purpose of this intent is to return the current date back to the user when asked. We can add pre-defined common training phrases to identify what the user is asking to our bot. Take a look below at the following training phrases.\n\n![](https://i.imgur.com/xf0iubV.png)\n\nSince “date” as a keyword is available in Dialogflow's API, it is automatically considered to be a parameter to take action on.\n\n![](https://i.imgur.com/oViXxwC.png)\n\nThe Last step in this process is to add a text response for the user to receive.\n\n![](https://i.imgur.com/CO4Suon.png)\n\nDo not forget to click the `Save` button at the top.\n\n## Connecting Dialogflow with React Native\n\nWe need a few keys to use Dialogflow's npm package with our app. Right now, from the console window, go to Settings (it is an icon next to the agent's name).\n\n![](https://i.imgur.com/Gkm6tVn.png)\n\nThen click on the value next to `Service Account`.\n\n![](https://i.imgur.com/L8vIgwg.png)\n\nOnce in the service account, find the account that named `Dialogflow Integrations`, and scroll to the right until you see the three dots. Click on this menu, and click `Create Key`.\n\n![](https://i.imgur.com/pf9AQaP.png\n\nDownload it as JSON file, and open that file in an editor. You will find the following content in this file.\n\n```json\n{\n  \"type\": \"service_account\",\n  \"project_id\": \"faq-bot-XXXX\",\n  \"private_key_id\": \"XXXX\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----XXXX\\n-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"XXXX\",\n  \"client_id\": \"XXXX\",\n  \"auth_uri\": \"XXXX\",\n  \"token_uri\": \"XXXX\",\n  \"auth_provider_x509_cert_url\": \"XXXX\",\n  \"client_x509_cert_url\": \"XXXX\"\n}\n```\n\nEvery key in the JSON file will have its value (in place of `XXXX`) some of them are sensitive.\n\n## Building the Chatbot\n\nNow, create a new file called `env.js` and inside place the same values as above.\n\n```js\n// env.js\n\nexport const dialogflowConfig = {\n  type: 'service_account',\n  project_id: 'faq-bot-XXXX',\n  private_key_id: 'XXXX',\n  private_key: '-----BEGIN PRIVATE KEY-----XXXX\\n-----END PRIVATE KEY-----\\n',\n  client_email: 'XXXX',\n  client_id: 'XXXX',\n  auth_uri: 'XXXX',\n  token_uri: 'XXXX',\n  auth_provider_x509_cert_url: 'XXXX',\n  client_x509_cert_url: 'XXXX'\n};\n```\n\nNext, export the configuration object. You will be requiring it among other things in the `App.js` file.\n\n```js\nimport { Dialogflow_V2 } from 'react-native-dialogflow';\n\nimport { dialogflowConfig } from './env';\n```\n\nAlso, we are refactoring the user object by separating it from the state like below.\n\n```js\nconst BOT_USER = {\n  _id: 2,\n  name: 'FAQ Bot',\n  avatar: 'https://i.imgur.com/7k12EPD.png'\n};\n```\n\nThe state now looks like below.\n\n```js\nstate = {\n  messages: [\n    {\n      _id: 1,\n      text: `Hi! I am the FAQ bot 🤖 from Jscrambler.\\n\\nHow may I help you with today?`,\n      createdAt: new Date(),\n      user: BOT_USER // <= note this\n    }\n  ]\n};\n```\n\nLet us now use a lifecycle method `componendDidMount` to apply Dialogflow's configuration.\n\n```js\ncomponentDidMount() {\n    Dialogflow_V2.setConfiguration(\n      dialogflowConfig.client_email,\n      dialogflowConfig.private_key,\n      Dialogflow_V2.LANG_ENGLISH_US,\n      dialogflowConfig.project_id\n    );\n  }\n```\n\nAll the values inside `Dialogflow_V2.setConfiguration()` are coming from the `env.js` file. In the `onSend` function, you have to make sure that it sends the text of the message to the Dialogflow agent. Refactor it like below.\n\n```js\nonSend(messages = []) {\n    this.setState(previousState => ({\n      messages: GiftedChat.append(previousState.messages, messages)\n    }));\n\n    let message = messages[0].text;\n    Dialogflow_V2.requestQuery(\n      message,\n      result => this.handleGoogleResponse(result),\n      error => console.log(error)\n    );\n  }\n```\n\nThe method `Dialogflow_V2.requestQuery` is used to send a text request to the agent. It contains three parameters:\n\n- the text itself as the first parameter; in our case `message`\n- the `result` and `error` callback functions\n\nThe function `handleGoogleResponse(result)` handles the response coming back and further calls the `sendBotResponse()` function.\n\n```js\nhandleGoogleResponse(result) {\n    let text = result.queryResult.fulfillmentMessages[0].text.text[0];\n    this.sendBotResponse(text);\n}\n\nsendBotResponse(text) {\n    let msg = {\n      _id: this.state.messages.length + 1,\n      text,\n      createdAt: new Date(),\n      user: BOT_USER\n    };\n\n    this.setState(previousState => ({\n      messages: GiftedChat.append(previousState.messages, [msg])\n    }));\n  }\n```\n\nThe `sendBotResponse` function then updates the state of the `App` component and display whatever response back to the user in the chat interface. See the application in action below.\n\n![](https://i.imgur.com/jeaZoRY.gif\n\nYou can find the complete code for `App.js` below.\n\n```js\n// App.js\n\nimport React, { Component } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { GiftedChat } from 'react-native-gifted-chat';\nimport { Dialogflow_V2 } from 'react-native-dialogflow';\n\nimport { dialogflowConfig } from './env';\n\nconst BOT_USER = {\n  _id: 2,\n  name: 'FAQ Bot',\n  avatar: 'https://i.imgur.com/7k12EPD.png'\n};\n\nclass App extends Component {\n  state = {\n    messages: [\n      {\n        _id: 1,\n        text: `Hi! I am the FAQ bot 🤖 from Jscrambler.\\n\\nHow may I help you with today?`,\n        createdAt: new Date(),\n        user: BOT_USER\n      }\n    ]\n  };\n\n  componentDidMount() {\n    Dialogflow_V2.setConfiguration(\n      dialogflowConfig.client_email,\n      dialogflowConfig.private_key,\n      Dialogflow_V2.LANG_ENGLISH_US,\n      dialogflowConfig.project_id\n    );\n  }\n\n  handleGoogleResponse(result) {\n    let text = result.queryResult.fulfillmentMessages[0].text.text[0];\n    this.sendBotResponse(text);\n  }\n\n  onSend(messages = []) {\n    this.setState(previousState => ({\n      messages: GiftedChat.append(previousState.messages, messages)\n    }));\n\n    let message = messages[0].text;\n    Dialogflow_V2.requestQuery(\n      message,\n      result => this.handleGoogleResponse(result),\n      error => console.log(error)\n    );\n  }\n\n  sendBotResponse(text) {\n    let msg = {\n      _id: this.state.messages.length + 1,\n      text,\n      createdAt: new Date(),\n      user: BOT_USER\n    };\n\n    this.setState(previousState => ({\n      messages: GiftedChat.append(previousState.messages, [msg])\n    }));\n  }\n\n  render() {\n    return (\n      <View style={{ flex: 1, backgroundColor: '#fff' }}>\n        <GiftedChat\n          messages={this.state.messages}\n          onSend={messages => this.onSend(messages)}\n          user={{\n            _id: 1\n          }}\n        />\n      </View>\n    );\n  }\n}\n\nexport default App;\n```\n\n## Conclusion\n\nThe possibilities of using a powerful API such as Dialogflow are endless. In no time, you can build up your own chatbot interface inside a React Native application as a valuable support or marketing tool.\n\n[Originally published at Jscrambler](https://blog.jscrambler.com/build-a-chatbot-with-dialogflow-and-react-native/)\n",
            "url": "https://amanhimself.dev//blog/build-a-chatbot-with-dialogflow-and-react-native",
            "title": "Build a Chatbot with Dialogflow and React Native",
            "summary": "Build a Chatbot with Dialogflow and React Native",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/how-to-build-a-real-time-logo-detection-app-with-react-native-google-vision-api-and-crowdbotics",
            "content_html": "---\ntitle: 'How to Build a Real Time Logo Detection App with React Native & Google Vision API'\nslug: 'how-to-build-a-real-time-logo-detection-app-with-react-native-google-vision-api-and-crowdbotics'\ndate: '2019-03-20'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://medium.com/crowdbotics/how-to-build-a-real-time-logo-detection-app-with-react-native-google-vision-api-and-crowdbotics-9ed65fbcd15'\n---\n\nGoogle Vision API is a great way to add image recognition capabilities to your app. It does a great job detecting a variety of categories such as labels, popular logos, faces, landmarks, and text. You can think of Google Vision API as a Google Image Search offered as an API interface that you can incorporate into your applications.\n\n**In this tutorial, you are going to build a React Native application that can identify a picture provided and detect the logo using Google’s Vision API in real time.**\n\nYou are going to learn how to connect Google Vision API with React Native and Expo. React Native and Expo will be quickly set up using a predefined scaffold from Crowdbotics. We setup Google Vision API from scratch, and use Firebase cloud storage to store an image that a user uploads. That image is then analyzed before the output is generated.\n\n### Tldr\n\n- Setting up Crowdbotics Project\n- Installing dependencies\n- Setting up Firebase\n- Set up Google Cloud Vision API Key\n- Logo Detection App\n- Uploading Image to Firebase\n- Image picker from Expo\n- Analyzing the Logo\n- Conclusion\n\n### Setting up Crowdbotics Project\n\nIn this section, you will be setting up a Crowdbotics project that has React Native plus Expo pre-defined template with stable and latest dependencies for you to leverage. Setting up a new project using Crowdbotics app builder service is easy. Visit [app.crowdbotics.com](https://app.crowdbotics.com/vue-dashboard) dashboard. Once you are logged in, choose `Create a new application`.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*DK_PfPhWHLI4FQVQMzPGbQ.png' />\n\nOn the `Create Application` page, choose `React Native Expo` template under `Mobile App`.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*109DBQGNLHmC8lel8OOYmg.png' />\n\nLastly, choose the name of your template at the bottom of this page and then click the button `Create by app!`. After a few moments, you will get a similar window like below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*RSZ9UeCX-ZHM6etmnY5Yuw.png' />\n\nThis will take you to the app dashboard, where you can see a link to GitHub, Heroku, and Slack. Once your project is created, you will get an invitation from Crowdbotics to download your project or clone the repository from [**Github**](https://github.com/crowdbotics-apps/rngooglevisionapi-1400) either on them email you logged in or as a notification if you chose Github authentication.\n\n### Installing dependencies\n\nOnce you have cloned or downloaded the repository from Github, traverse inside it using command `cd` or similar from your terminal and install dependencies.\n\n```shell\ncd rngooglevisionapi-1400\n\ncd frontend\n\n# Install depenedencies\n\nnpm install\n```\n\nInstalling dependencies might take a few minutes. Once the step is done — depending on the operating system you have — you can run the React Native application and verify if everything is working properly using either an iOS simulator or an Android emulator.\n\n```shell\n# for iOS\nnpm run ios\n\n# for android\nnpm run android\n```\n\nAndroid users, note that you must have an Android virtual device already running in order to run the above command successfully.\n\n### Setting up Firebase\n\nUsing the Firebase project has a lot of advantages over a traditional server API model. It provides the database and the backend service and such that we do not have to write our own backend and host it. Visit [Firebase.com](http://www.console.firebase.com) and sign-in with your Google ID. Once logged in, click on a new project and enter a project name. Lastly, hit the **Create Project** button.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*BDhg-K1-ekeYg4D2AAir3A.jpeg' />\n\nMake sure you set up Firebase real-time database rules to allow the app user to upload image files into the database. To change this setting a newly generated Firebase project, from the sidebar menu in the Firebase console, open Database tab and then choose Rules and modify them as below.\n\n```js\nservice cloud.firestore {\n match /databases/{database}/documents {\n   match /{document=**} {\n     allow read, write;\n   }\n }\n}\n```\n\nNext step is to install the Firebase SDK in the project.\n\n```shell\nnpm install --save firebase\n```\n\nTo make sure that the required dependency is installed correctly, open `package.json` file. In the `dependencies` object you will find many other dependencies related to react, react native navigation, native-base UI kit, redux and so on. These libraries are helpful if you are working on a React Native project that requires feature like a custom and expandable UI kit, state management, navigation.\n\n```json\n\"dependencies\": {\n    \"@expo/vector-icons\": \"^9.0.0\",\n    \"expo\": \"^32.0.0\",\n    \"expokit\": \"^32.0.3\",\n    \"firebase\": \"^5.9.0\",\n    \"lodash\": \"^4.17.11\",\n    \"native-base\": \"^2.10.0\",\n    \"prop-types\": \"^15.6.2\",\n    \"react\": \"16.5.0\",\n    \"react-native\": \"https://github.com/expo/react-native/archive/sdk-32.0.0.tar.gz\",\n    \"react-navigation\": \"^3.0.9\",\n    \"react-navigation-redux-helpers\": \"^2.0.9\",\n    \"react-redux\": \"^6.0.0\",\n    \"react-style-proptype\": \"^3.2.2\",\n    \"redux\": \"^4.0.1\",\n    \"redux-thunk\": \"^2.3.0\"\n  }\n```\n\nYou are not going to use the majority of them in this tutorial, but the advantage of [Crowdbotics App Builder](https://crowbotics.com/app-builder) is that it provides a pre-configured and hosted, optimum framework for React Native projects. The unwanted packages can be removed if you do not wish to use them.\n\nAfter installing the Firebase SDK, create a folder called `config` and inside `frontend/src`, and then create a new file called `environment.js`. This file will contain all the keys required to bootstrap and hook Firebase SDK within our application.\n\n```js\nvar environments = {\n  staging: {\n    FIREBASE_API_KEY: 'XXXX',\n    FIREBASE_AUTH_DOMAIN: 'XXXX',\n    FIREBASE_DATABASE_URL: 'XXXX',\n    FIREBASE_PROJECT_ID: 'XXXX',\n    FIREBASE_STORAGE_BUCKET: 'XXXX',\n    FIREBASE_MESSAGING_SENDER_ID: 'XXXX',\n    GOOGLE_CLOUD_VISION_API_KEY: 'XXXX'\n  },\n  production: {\n    // Warning: This file still gets included in\n    // your native binary and is not a secure way\n    // to store secrets if you build for the app stores.\n    // Details: https://github.com/expo/expo/issues/83\n  }\n};\n\nfunction getReleaseChannel() {\n  let releaseChannel = Expo.Constants.manifest.releaseChannel;\n  if (releaseChannel === undefined) {\n    return 'staging';\n  } else if (releaseChannel === 'staging') {\n    return 'staging';\n  } else {\n    return 'staging';\n  }\n}\nfunction getEnvironment(env) {\n  console.log('Release Channel: ', getReleaseChannel());\n  return environments[env];\n}\nvar Environment = getEnvironment(getReleaseChannel());\nexport default Environment;\n```\n\nThe `Xs` are the values of each key you have to fill in. Ignore the value for Key `GOOGLE_CLOUD_VISION_API_KEY` for now. Other values for their corresponding keys can be attained from the Firebase console. Visit the Firebase console and then click the gear icon next to Project Overview in the sidebar menu and lastly go to `Project settings` section.\n\nThen create another file called `firebase.js` inside the config directory. You are going to use this file in the main application later to send requests to upload an image to the Firebase cloud storage. Import `environment.js`in it to access Firebase keys. That's it for this section.\n\n### Set up Google Cloud Vision API Key\n\nYou need a Gmail account to access the API key for any cloud service provided by Google. Go to [cloud.google.com](https://cloud.google.com/vision/). After you are signed in visit [Google Cloud Console](https://console.cloud.google.com/) and create a new project.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*564hjsW_Z7yQ1QPV5IaJDw.png' />\n\nFrom the dropdown menu center, select a project. You can click the button `New Project` in the screen below but since we have already generated a Firebase project, select that from the list available.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*BVoAY6JXgqfbBRj0JSpJpg.png' />\n\nOnce the project is created or selected, it will appear at the dropdown menu. Next step is to get the Vision API key. Right now you are at the screen called `Dashboard` inside the console. From the top left, click on the menu button and a sidebar menu will pop up. Select `APIs & Services` > `Dashboard`.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*wqh5sg1lkr8mqVZqVbPEUQ.png' />\n\nAt the Dashboard, select the button Enable APIs and Services.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*3SaO3iHEzg8sstWl4lL4og.jpeg' />\n\nThen type `vision` in the search bar as shown below and then click Vision API.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*0Wq-izllTVH_jO17AmSQqg.jpeg' />\n\nThen, click the button `Enable` to enable the API. _Note that_ in order to complete this step of getting the API key, you are required to add billing information to your Google Cloud Platform account.\n\nThe URL, in your case, on the dashboard will be similar to `https://console.cloud.google.com/apis/dashboard?project=FIREBASE-PROJECT-ID&folder&organizationId`. Click on the `Credentials` section from the left sidebar to create a new API key.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*2WuMEpijqOASZQqUW_mkIQ.jpeg' />\n\nClick the button `Create Credentials`. Once you have created the API key, it is time to add it in the file `environment.js` in place of the key `GOOGLE_CLOUD_VISION_API_KEY`.\n\nThe setup is complete. Let us move to the next section and start building the application.\n\n### Logo Detection App\n\nIn order to continue building the app, there is another npm module it requires. Run the below command to install it.\n\n```shell\nnpm install --save uuid\n```\n\nThis package will help you create a blob for every image that is going to be used for analyzing in the app. A _blob_ is a binary large object stored as a single entity in a database. It is common to use blob for multimedia objects such as an image or a video.\n\nLet us start by importing the necessary libraries that we are going to use in our App component. Open `App.js` file and import the following.\n\n```js\nimport React, { Component } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  ActivityIndicator,\n  Button,\n  FlatList,\n  Clipboard\n} from 'react-native';\nimport { ImagePicker, Permissions } from 'expo';\nimport uuid from 'uuid';\n\nimport Environment from './src/config/environment';\nimport firebase from './src/config/firebase';\n```\n\nNext, inside the class component, define an initial state with three properties.\n\n```js\nclass App extends Component {\n\n\tstate = {\n\t\timage: null,\n\t\tuploading: false,\n\t\tgoogleResponse: null\n  };\n```\n\nEach property defined above in the state object has an important role in the app. For instance, `image` is initialized with a value of `null` since when the app starts, there isn't any image URI available by default. The image will be later uploaded to the cloud service. The `uploading` is used when an image is being uploaded to the cloud service along with `ActivityIndicator` from React Native core. The last property, `googleResponse` is going to handle the response object coming back from the Google Vision API when analyzing the data.\n\nIt is important to ask for user permissions. Any app functionality that implements features around sensitive information such as location, sending push notifications, taking a picture from the device’s camera, it needs to ask for permissions. Luckily, when using Expo, it is easier to implement this functionality. After you have initialized the state, use a lifecycle method `componentDidMount()` to ask for permission's to use a device's camera and camera roll (or _gallery_ in case of Android).\n\n```js\nasync componentDidMount() {\n\t\tawait Permissions.askAsync(Permissions.CAMERA_ROLL);\n\t\tawait Permissions.askAsync(Permissions.CAMERA);\n  }\n```\n\nFor more information on Permissions with Expo, you should take a look at the [official docs](https://docs.expo.io/versions/latest/sdk/permissions/#__next).\n\nOn iOS, asking permissions alert will look like below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*1IWny3GcKb4iZLQd9MyW0g.png' />\n\nOn Android:\n\n<img src='https://cdn-images-1.medium.com/max/600/1*u9r_6MpkNUovKzGnRxbh1w.jpeg' />\n\n<img src='https://cdn-images-1.medium.com/max/600/1*OZYu6KqBNfmAn5soM0JqYA.jpeg' />\n\n### Uploading Images to Firebase\n\nTo upload file on Firebase cloud storage, you have to create a function outside the class called `uploadImageAsync`. This function will handle sending and receiving AJAX requests to the Cloud Storage server. This function is going to be asynchronous.\n\n```js\nasync function uploadImageAsync(uri) {\n  const blob = await new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.onload = function () {\n      resolve(xhr.response);\n    };\n    xhr.onerror = function (e) {\n      console.log(e);\n      reject(new TypeError('Network request failed'));\n    };\n    xhr.responseType = 'blob';\n    xhr.open('GET', uri, true);\n    xhr.send(null);\n  });\n\n  const ref = firebase.storage().ref().child(uuid.v4());\n  const snapshot = await ref.put(blob);\n\n  blob.close();\n\n  return await snapshot.ref.getDownloadURL();\n}\n```\n\nThis asynchronous function `uploadImageAsync` uploads the image by creating a unique image ID or blob with the help of `uuid` module. It also uses `xhr` to send a request to the Firebase Cloud storage to upload the image. It also takes the URI of the image that is going to be uploaded. In the next section, you will learn more about uploading the image.\n\n### Image picker from Expo\n\nTo access a device’s UI for selecting an image either from the mobile’s gallery or take a new picture with the camera, we need an interface for that. Some ready-made, configurable API that allows us to add it as functionality in the app. For this scenario, `ImagePicker` is available by Expo.\n\nTo use this API, `Permissions.CAMERA_ROLL` is required. Take a look below, how you are going to use it in `App.js` file.\n\n```js\n_takePhoto = async () => {\n  let pickerResult = await ImagePicker.launchCameraAsync({\n    allowsEditing: true,\n    aspect: [4, 3]\n  });\n\n  this._handleImagePicked(pickerResult);\n};\n\n_pickImage = async () => {\n  let pickerResult = await ImagePicker.launchImageLibraryAsync({\n    allowsEditing: true,\n    aspect: [4, 3]\n  });\n\n  this._handleImagePicked(pickerResult);\n};\n\n_handleImagePicked = async pickerResult => {\n  try {\n    this.setState({ uploading: true });\n\n    if (!pickerResult.cancelled) {\n      uploadUrl = await uploadImageAsync(pickerResult.uri);\n      this.setState({ image: uploadUrl });\n    }\n  } catch (e) {\n    console.log(e);\n    alert('Upload failed, sorry :(');\n  } finally {\n    this.setState({ uploading: false });\n  }\n};\n```\n\nFrom the above snippet, notice that there are two separate functions to either pick the image from the device’s file system: `_pickImage` and for taking a photo from the camera: `_takePhoto`. Whichever function runs, `_handleImagePicked` is invoked to upload the file to cloud storage by further calling the asynchronous `uploadImageAsync` function with the URI of the image as the only argument to that function.\n\nInside the `render` function you will add the two buttons calling their own separate methods when pressed.\n\n```js\n<View style={{ margin: 20 }}>\n\t<Button\n\t\tonPress={this._pickImage}\n\t\ttitle=\"Pick an image from camera roll\"\n\t\tcolor=\"#3b5998\"\n\t/>\n</View>\n<Button\nonPress={this._takePhoto}\ntitle=\"Click a photo\"\ncolor=\"#1985bc\"\n/>\n```\n\n### Analyzing the Logo\n\nAfter the image has either been selected from the file system or clicked from the camera, it needs to be shared with Google’s Vision API SDK in order to fetch the result. This is done with the help of a `Button` component from React Native core in the `render()` method inside `App.js`.\n\n```js\n<Button\n  style={{ marginBottom: 10 }}\n  onPress={() => this.submitToGoogle()}\n  title=\"Analyze!\"\n/>\n```\n\nThis `Button` publishes the image to Google's Cloud Vision API. On pressing this button, it calls a separate function `submitToGoogle()` where most of the business logic happens in sending a request and fetching the desired response from the Vision API.\n\n```js\nsubmitToGoogle = async () => {\n  try {\n    this.setState({ uploading: true });\n    let { image } = this.state;\n    let body = JSON.stringify({\n      requests: [\n        {\n          features: [\n            { type: 'LABEL_DETECTION', maxResults: 10 },\n            { type: 'LANDMARK_DETECTION', maxResults: 5 },\n            { type: 'FACE_DETECTION', maxResults: 5 },\n            { type: 'LOGO_DETECTION', maxResults: 5 },\n            { type: 'TEXT_DETECTION', maxResults: 5 },\n            { type: 'DOCUMENT_TEXT_DETECTION', maxResults: 5 },\n            { type: 'SAFE_SEARCH_DETECTION', maxResults: 5 },\n            { type: 'IMAGE_PROPERTIES', maxResults: 5 },\n            { type: 'CROP_HINTS', maxResults: 5 },\n            { type: 'WEB_DETECTION', maxResults: 5 }\n          ],\n          image: {\n            source: {\n              imageUri: image\n            }\n          }\n        }\n      ]\n    });\n    let response = await fetch(\n      'https://vision.googleapis.com/v1/images:annotate?key=' +\n        Environment['GOOGLE_CLOUD_VISION_API_KEY'],\n      {\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: body\n      }\n    );\n    let responseJson = await response.json();\n    console.log(responseJson);\n    this.setState({\n      googleResponse: responseJson,\n      uploading: false\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n```\n\nThe Vision API uses an HTTP Post request as a REST API endpoint. It performs data analysis on the image URI send with the request. This is done via the URL `https://vision.googleapis.com/v1/images:annotate?key=[API_KEY]`. To authenticate each request, we need the API key. The body of this POST request is in JSON format. This JSON request tells the Google Vision API which image to parse and which of its detection features to enable.\n\nAn example a POST body response in JSON format from the API is going to be similar like below.\n\n```json\n\"logoAnnotations\": Array [\n         Object {\n           \"boundingPoly\": Object {\n             \"vertices\": Array [\n               Object {\n                 \"x\": 993,\n                 \"y\": 639,\n               },\n               Object {\n                 \"x\": 1737,\n                 \"y\": 639,\n               },\n               Object {\n                 \"x\": 1737,\n                 \"y\": 1362,\n               },\n               Object {\n                 \"x\": 993,\n                 \"y\": 1362,\n               },\n             ],\n           },\n           \"description\": \"spotify\",\n           \"mid\": \"/m/04yhd6c\",\n           \"score\": 0.9259,\n         },\n      ],\n```\n\nNotice that it gives us back the complete object with a description of the logo’s name searched for. This can be viewed in the terminal window from the logs generated while the Expo CLI command is active.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*EJ5MRzjxoBFElHT_1EHbXA.png' />\n\nSee the application in working below. A real android device was used to demonstrate this. If you want to test yourself one a real device, just download the Expo client for your mobile OS, scan the QR code generated after starting expo CLI command and then click the button Take a photo while the application is running.\n\nIf you visit the storage section in Firebase, you can notice that each image is stored with a name of base64 binary string.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*jWeopMWFwK7KAoaNPL3dDw.jpeg' />\n\n### Conclusion\n\nThe possibilities of using Google’s Vision API are endless. As you can see above in the `features` array, it works with a variety of categories such as logos, landmarks, labels, documents, human faces and so on.\n\nI hope you enjoyed this tutorial. Let me know if you have any questions.\n\nYou can find the complete code in the **Github repository** below.\n\n[**crowdbotics-apps/rngooglevisionapi-1400**](https://github.com/crowdbotics-apps/rngooglevisionapi-1400)\n\n[Originally published at Crowdbotics](https://medium.com/crowdbotics/how-to-build-a-real-time-logo-detection-app-with-react-native-google-vision-api-and-crowdbotics-9ed65fbcd15)\n",
            "url": "https://amanhimself.dev//blog/how-to-build-a-real-time-logo-detection-app-with-react-native-google-vision-api-and-crowdbotics",
            "title": "How to Build a Real Time Logo Detection App with React Native & Google Vision API",
            "summary": "How to Build a Real Time Logo Detection App with React Native & Google Vision API",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/using-styled-components-with-react-native",
            "content_html": "---\ntitle: 'Using Styled Components with React Native'\ndate: '2019-03-19'\nslug: 'using-styled-components-with-react-native'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://levelup.gitconnected.com/using-styled-components-with-react-native-de645fcf4787'\n---\n\n## Tldr\n\n- Introduction\n- About styled-components\n- Installing styled-components\n- Using styled-components\n- `props` in styled-components\n- Building the app — “Grocery UI”\n- Adding user avatar image\n- Absolute Positioning in React Native\n- Adding icons in a React Native\n- Adding horizontal `ScrollView`\n- Adding a vertical `ScrollView`\n- Building a card component\n- Conclusion\n\n### Introduction\n\nWhether you are a web developer or mobile app developer, you know that without the proper styling of your application, the UI would probably suck. Styling an application is important. I cannot put enough emphasis on how important it is for a mobile app to have a pleasing design and good use of colors.\n\nIf you are getting into React Native or have already dipped your toes, you know that there are different ways you can style a React Native app. I have already discussed the basics and some of the different ways to style your React Native components in the article below. Such as, to create a new style object you use `**StyleSheet.create()**` method and encapsulating them. Go check it out 👇\n\nThis tutorial is going to be about styling your React Native apps using [💅 Styled Components](https://www.styled-components.com/docs/basics 'https://www.styled-components.com/docs/basics'). Yes, styled-components is a third party library. Using it is a matter of choice, but also another way to add styling to your app, and many might find it easy to use, especially if you have used this library before with other frameworks. One common use case is web apps built with React.\n\n### What are Styled Components?\n\nStyled Components is a _CSS-in-JS_ library that enables developers to write each component with their own styles and allows the code to be in a single location. By coupling your styles with the components, it results in optimizing developer experience and output.\n\nIn React Native, the styling of components is already done by creating JavaScript objects and if you do not [**encapsulate them**](https://levelup.gitconnected.com/styling-the-react-native-way-3cc6d3ef52d0), in most cases, your components and their styling are going to end up in one place.\n\nReact Native tends to follow a certain convention when it comes to styling your app. Such as all CSS property names should be in `camelCase` such as for `background-color` in React Native is:\n\n```css\nbackgroundcolor: 'blue';\n```\n\nOccasionally, web developers get uncomfortable by these conventions. Using a third party library like styled components can give you wings. You do not have to switch between the context of conventions much, apart from the properties and React Native’s own Flexbox rules.\n\nBehind the scenes, styled components just converts the CSS text into a React Native stylesheet object. You can check how it does that [**here**](https://github.com/styled-components/css-to-react-native 'https://github.com/styled-components/css-to-react-native')**.**\n\n_Enough with story, let’s get to work!_\n\n### Installing Styled Components\n\nTo install the `styled-components` library in a React Native project, we will first initialize the app. To get started quickly, I am going to use the awesome **Expo** library. Make sure you have `expo-cli` installed.\n\n```shell\n# To install expo-cli\n\nnpm install -S expo-cli\n\n# Generate a project\n\nexpo init [YourApp-Name]\n```\n\nWhen running the last command, the command line prompt will you a few questions. First one is, `Choose a template`, where I chose `expo-template-blank`, then enter display name of your app and then either use `npm` or `yarn` to install dependencies. I am using `npm`.\n\nOnce all the dependencies are installed, you can open this project in your favorite code editor. The next step is to install the latest version of `styled-components` library.\n\n```shell\nnpm install -S styled-components\n```\n\nThat’s it for installation.\n\n### Using Styled Components\n\nOpen up `App.js` file and make some modifications.\n\n```js\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text>Open up App.js to start working on your app!</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n```\n\nFrom your terminal, run the command: `npm run ios` if you are on macOS. For Linux and Windows users the command is `npm run android`, but make sure you have an Android virtual device running in the background. Our code currently looks like below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*FJYy0ggO0KlAjamE81Z19w.png' />\n\nLet’s make some changes to it and use our newly installed library. To get started, import the library like below.\n\n```js\nimport styled from 'styled-components';\n```\n\nMake changes to the component’s render function like below. Replace both `View` and `Text` with `Container` and `Title`. These new elements are going to be custom using semantics from `styled-components`.\n\n```js\nexport default class App extends React.Component {\n  render() {\n    return (\n      <Container>\n        <Title>React Native with 💅 Styled Components</Title>\n      </Container>\n    );\n  }\n}\n```\n\n`styled-components` utilizes tagged template literals to style your components using backticks. When creating a component in React or React Native using `styled-components`, each component is going to have styles attached to it.\n\nNotice the Container is a React Native `View` and has styling attached to it.\n\n```js\nconst Container = styled.View`\n  flex: 1;\n  background-color: papayawhip;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Title = styled.Text`\n  font-size: 20px;\n  font-weight: 500;\n  color: palevioletred;\n`;\n```\n\n<img src='https://cdn-images-1.medium.com/max/800/1*FJYy0ggO0KlAjamE81Z19w.png' />\n\nThe complete code for `App.js` file after changes.\n\n```js\nimport React from 'react';\nimport styled from 'styled-components';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <Container>\n        <Title>React Native with 💅 Styled Components</Title>\n      </Container>\n    );\n  }\n}\n\nconst Container = styled.View`\n  flex: 1;\n  background-color: papayawhip;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Title = styled.Text`\n  font-size: 24px;\n  font-weight: 500;\n  color: palevioletred;\n`;\n```\n\nIn the above snippet, do take a note that we are not importing a React Native core components such as `View`, `Text`, or the `StyleSheet` object. It is that simple. It uses the same `flexbox` model that React Native Layouts. The advantage here is that you get the advantage of using the same understandable syntax that you have been using in web development and standard CSS.\n\n### Using Props in Styled Components\n\nOften you will find yourself creating custom components for your apps. This does give you the advantage to stay DRY. Using `styled-components` is no different. You can leverage this programming pattern by building custom components that require their parent components. `props` are commonly known as additional properties to a specific component. To demonstrate this, create a new file called `CustomButton.js`.\n\nInside this file, we are going to create a custom button that requires props such as `backgroundColor`, `textColor` and the text itself for the button. You are going to use `TouchableOpacity` and `Text` to create this custom button but without importing `react-native` library using a functional component `CustomButton`.\n\n```js\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst CustomButton = props => (\n  <ButtonContainer\n    onPress={() => alert('Hi!')}\n    backgroundColor={props.backgroundColor}\n  >\n    <ButtonText textColor={props.textColor}>{props.text}</ButtonText>\n  </ButtonContainer>\n);\n\nexport default CustomButton;\n\nconst ButtonContainer = styled.TouchableOpacity`\n\twidth: 100px;\n\theight: 40px\n\tpadding: 12px;\n\tborder-radius: 10px;\t\n\tbackground-color: ${props => props.backgroundColor};\n`;\n\nconst ButtonText = styled.Text`\n  font-size: 15px;\n  color: ${props => props.textColor};\n  text-align: center;\n`;\n```\n\nBy passing an interpolated function `${props => props...}` to a styled component's template literal you can extend its styles. Now add this button to `App.js` file.\n\n```js\n\nrender() {\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<Title>React Native with 💅 Styled Components</Title>\n\t\t\t\t<CustomButton text=\"Click Me\" textColor=\"#01d1e5\" backgroundColor=\"lavenderblush\" />\n\t\t\t</Container>\n\t\t);\n  }\n```\n\nOn running the simulator, you will get the following result.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*NtpTxTjtBxNl_IR4W-W7lA.png' />\n\n### Building the app — Grocery UI\n\nIn this section we are building a UI screen for an app that would be used for a grocery store. You are going to build the home screen that looks like the one below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*qRd6EyuiB_nvs3jolhOCeA.png' />\n\nWe will be using our knowledge of `styled-components` so let's get started! Open up `App.js`. Declare a new `Container` `View` using `styled`. Inside the backticks, you can put pure CSS code there with the exact same syntax. The `View` element is like a `div` in HTML or web programming in general. Also, create another view called `Titlebar` inside `Container`.\n\nInside `Titlebar`, it will contain three new elements. One is going to be an image `Avatar` and the other two are text: `Title`and `Name`.\n\n```js\nimport React from 'react';\nimport styled from 'styled-components';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <Container>\n        <Titlebar>\n          <Avatar />\n          <Title>Welcome back,</Title>\n          <Name>Aman</Name>\n        </Titlebar>\n      </Container>\n    );\n  }\n}\n\nconst Container = styled.View`\n  flex: 1;\n  background-color: white;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Titlebar = styled.View`\n  width: 100%;\n  margin-top: 50px;\n  padding-left: 80px;\n`;\n\nconst Avatar = styled.Image``;\n\nconst Title = styled.Text`\n  font-size: 20px;\n  font-weight: 500;\n  color: #b8bece;\n`;\n\nconst Name = styled.Text`\n  font-size: 20px;\n  color: #3c4560;\n  font-weight: bold;\n`;\n```\n\nRun `npm run ios` and see it in action.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*QWsjF7juUsD8wHsuD_4M-A.png' />\n\nRight now, the content is in the middle of the screen. We need the `Titlebar` and its contents at the top of the mobile screen. So styles for `Container` will be as below.\n\n```js\nconst Container = styled.View`\n  flex: 1;\n  background-color: white;\n`;\n```\n\n### Adding user avatar image\n\nI am going to use an image that is stored in `assets` folder in the root of our project. You are free to use your own image but you can also download the assets for this project below.\n\n[**amandeepmittal/react-native-workspace**\n\\_⚛️ + 📱 React Native Things. Contribute to amandeepmittal/react-native-workspace development by creating an account on…\\_github.com](https://github.com/amandeepmittal/react-native-workspace/tree/master/03-RNgrocery-ui/assets 'https://github.com/amandeepmittal/react-native-workspace/tree/master/03-RNgrocery-ui/assets')[](https://github.com/amandeepmittal/react-native-workspace/tree/master/03-RNgrocery-ui/assets)\n\nTo create an image with `styled-components`, you need the `Image` component. You can use the `source` props to reference the image based on where it is located.\n\n```js\n<Titlebar>\n  <Avatar source={require('./assets/avatar.jpg')} />\n  <Title>Welcome back,</Title>\n  <Name>Aman</Name>\n</Titlebar>\n```\n\nThe styling for `Avatar` will begin with a width and height of `44` pixels. Having a `border-radius` exactly half the value of width and height, which makes the image a circle. `border-radius` is the property that you will be using frequently to create rounded corners.\n\n```js\nconst Avatar = styled.Image`\n  width: 44px;\n  height: 44px;\n  background: black;\n  border-radius: 22px;\n  margin-left: 20px;\n`;\n```\n\nYou will get the following result.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*AR9C05E4OOHGmWVkrnxjVQ.png' />\n\nNow notice that the avatar image and the text are piling up. They are taking the same space on the screen. To avoid this, you are going to use `position: absolute` CSS property.\n\n### Absolute Positioning in React Native\n\nCSS properties such as `padding` and `margin` are used to add space between UI elements in relation to one another. This is the default layout position. However, you are currently in a scenario where it will be beneficial to use absolute positioning of UI elements and place the desired UI element at the exact position you want.\n\nIn React Native and CSS in general, if `position` property is set to `absolute`, then the element is laid out relative to its parent. CSS has other values for `position` but React Native only supports `absolute`.\n\nModify `Avatar` styles as below.\n\n```js\nconst Avatar = styled.Image`\n  width: 44px;\n  height: 44px;\n  background: black;\n  border-radius: 22px;\n  margin-left: 20px;\n  position: absolute;\n  top: 0;\n  left: 0;\n`;\n```\n\nUsually, with position absolute property, you are going to use a combination of the following properties:\n\n- top\n- left\n- right\n- bottom\n\nIn our case above, we use `top` and `left` both set to `0` pixels. You will get the following output.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*xuQEJUyE0rGBNCuzz14ajw.png' />\n\n### Adding icons in a React Native\n\nExpo boilerplate comes with a set of different icon libraries such as Ionicons, FontAwesome, Glyphicons, Material icons and many more. The complete list of icons you can find [**here**](https://expo.github.io/vector-icons/), a searchable website.\n\nTo use the library, all you have to do is write the import statement.\n\n```js\nimport { Ionicons } from '@expo/vector-icons';\n```\n\nInside the `Titlebar` view, add the icon.\n\n```js\n<Titlebar>\n  {/* ... */}\n  <Ionicons name=\"md-cart\" size={32} color=\"red\" />\n</Titlebar>\n```\n\nEach icon needs props for the name that you can choose, size and color. Right now, if you look at the simulator, you will notice the same problem we had when adding the avatar image. There is no space between the icon and other UI elements inside the title bar.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*k0ongnUA5ZLGzvK-QBDvXQ.png' />\n\nTo solve this, let us use the absolute positioning property as an inline style to `<Ionicons />`.\n\n```js\n<Ionicons\n  name=\"md-cart\"\n  size={32}\n  color=\"red\"\n  style={{ position: 'absolute', right: 20, top: 5 }}\n/>\n```\n\nWhy an inline style? Because `Ionicons` is not generated using styled-components.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*EjxFzga9cQWUDNXesQ5KkA.png' />\n\n### Mapping through a List\n\nInside `components/` folder create a new file called `Categories.js`. This file is going to render a list of category items for the Grocery UI app.\n\n```js\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst Categories = props => (\n  <Container>\n    <Name>Fruits</Name>\n    <Name>Bread</Name>\n    <Name>Drinks</Name>\n    <Name>Veggies</Name>\n  </Container>\n);\n\nexport default Categories;\n\nconst Container = styled.View``;\n\nconst Name = styled.Text`\n  font-size: 32px;\n  font-weight: 600;\n  margin-left: 15px;\n  color: #bcbece;\n`;\n```\n\nAll the data is static right now. Import this component in `App.js` and place it after `Titlebar`.\n\n```js\nimport Categories from './components/Categories';\n\n// ...\n\nreturn (\n  <Container>\n    <Titlebar>{/* ... */}</Titlebar>\n    <Categories />\n  </Container>\n);\n```\n\nYou will get the following output.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*kkLH38JDwcNg6gNCBFs-eA.png' />\n\nThere can be a number of categories. To make the names of categories dynamic, we can send it through `App.js`file.\n\n```js\nconst Items = [\n  { text: 'Fruits' },\n  { text: 'Bread' },\n  { text: 'Drinks' },\n  { text: 'Veggies' },\n  { text: 'Meat' },\n  { text: 'Paper Goods' }\n];\n\n// Inside the render function replace <Categories /> with\n\n{\n  items.map((category, index) => (\n    <Categories name={category.text} key={index} />\n  ));\n}\n```\n\nIn the above snippet, you are using the `map` function from JavaScript to iterate through an array render a list of items, in this category names. Adding a `key` prop is required. To make this work, also modify `Categories.js`.\n\n```js\nconst Categories = props => <Name>{props.name}</Name>;\n```\n\n### Adding Horizontal ScrollView\n\nThis list is right now not scrollable. To make it scrollable, let us place it inside a `ScrollView`. Open up `App.js` file place the categories inside a `ScrollView`, but first, import it from React Native core.\n\n```js\nimport { ScrollView } from 'react-native';\n\n// ...\n<ScrollView>\n  {items.map((category, index) => (\n    <Categories name={category.text} key={index} />\n  ))}\n</ScrollView>;\n```\n\nYou will notice not a single change in the UI. By default scrollable lists in React Native using `ScrollView` are vertical. Make this horizontal by adding the prop `horizontal`.\n\n```js\n<ScrollView horizontal={true}>\n  {items.map((category, index) => (\n    <Categories name={category.text} key={index} />\n  ))}\n</ScrollView>\n```\n\nIt works but does not looks good.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*ynb8YhFnnn56-nLYqSPThg.gif' />\n\nLet us add some inline styles to the `ScrollView`.\n\n```js\n<ScrollView\n  horizontal={true}\n  style={{\n    padding: 20,\n    paddingLeft: 12,\n    paddingTop: 30,\n    flexDirection: 'row'\n  }}\n  showsHorizontalScrollIndicator={false}\n>\n  {items.map((category, index) => (\n    <Categories name={category.text} key={index} />\n  ))}\n</ScrollView>\n```\n\nNow it looks better. The prop `showsHorizontalScrollIndicator` hides the horizontal scroll bar that by default appears beneath the name of the categories.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*IYqopJpgJkPAyif2slhVEw.png' />\n\n### Adding a vertical ScrollView\n\nNext step is to add a `ScrollView` that acts as a wrapper inside the `Container` view such that the whole area becomes scrollable vertically. There is a reason to do this. You are now going to have items separated into two columns as images with texts related to a particular category.\n\nModify `App.js` file.\n\n```js\nreturn (\n  <Container>\n    <ScrollView>\n      <Titlebar>{/* and its contents */}</Titlebar>\n      <ScrollView horizontal={true}>\n        {/* Categories being rendered */}\n      </ScrollView>\n      <Subtitle>Items</Subtitle>\n    </ScrollView>\n  </Container>\n);\n```\n\nNotice that we are adding another styled component called `Subtitle` which is nothing but a text.\n\n```js\nconst Subtitle = styled.Text`\n  font-size: 20px;\n  color: #3c4560;\n  font-weight: 500;\n  margin-top: 10px;\n  margin-left: 25px;\n  text-transform: uppercase;\n`;\n```\n\nIt renders like below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*X9Db80WNDFSLRVGC1sdkWw.png' />\n\n### Building a card component\n\nIn this section, we are going to create a card component that will hold an item’s image, the name of the item and the price as text. Each card component is going to have curved borders and box shadow. This is how it is going to look like.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*bNCJQ4koGEZVKtbGu6EeqA.png' />\n\nCreate a new component file called `Card.js` inside `components` directory. The structure of the `Card` component is going to be.\n\n```js\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst Card = props => (\n  <Container>\n    <Cover>\n      <Image source={require('../assets/pepper.jpg')} />\n    </Cover>\n    <Content>\n      <Title>Pepper</Title>\n      <PriceCaption>$ 2.99 each</PriceCaption>\n    </Content>\n  </Container>\n);\n\nexport default Card;\n```\n\nCurrently, it has static data, such as the image, title, and content. Let us add the styles for each styled UI elements in this file.\n\n```js\nconst Container = styled.View`\n  background: #fff;\n  height: 200px;\n  width: 150px;\n  border-radius: 14px;\n  margin: 18px;\n  margin-top: 20px;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.15);\n`;\n\nconst Cover = styled.View`\n  width: 100%;\n  height: 120px;\n  border-top-left-radius: 14px;\n  border-top-right-radius: 14px;\n  overflow: hidden;\n`;\n\nconst Image = styled.Image`\n  width: 100%;\n  height: 100%;\n`;\n\nconst Content = styled.View`\n  padding-top: 10px;\n  flex-direction: column;\n  align-items: center;\n  height: 60px;\n`;\n\nconst Title = styled.Text`\n  color: #3c4560;\n  font-size: 20px;\n  font-weight: 600;\n`;\n\nconst PriceCaption = styled.Text`\n  color: #b8b3c3;\n  font-size: 15px;\n  font-weight: 600;\n  margin-top: 4px;\n`;\n```\n\nThe `Container` view has a default background of white color. This is useful in scenarios where you are fetching images from a third party APIs. Also, it provides a background to the text area below the image.\n\nInside the `Container` view, add an `Image` and wrap it inside a `Cover` view. In React Native there two ways you can fetch an image\n\nIf you are getting an image from the static resource as in our case, you use `source` prop with keyword `require` that contains the relative path to the image asset stored in the project folder. In case of networking images or getting an image from an API, you use the same prop with a different keyword called `uri`. Here is an example of an image being fetched from an API.\n\n```js\n<Image\n  source={{\n    uri: 'https://facebook.github.io/react-native/docs/assets/favicon.png'\n  }}\n/>\n```\n\nThe `Cover` view uses rounded corners with `overflow` property. This is done to reflect the rounded corners. iOS clips the images if coming from a child component. In our case, the image is coming from a `Card` component which is a child to `App` component.\n\nThe `Image` component takes the width and height of the entire `Cover` view.\n\nNow let us import this component inside `App.js` file, after the `Subtitle` and let us see what results do we get.\n\n```js\nrender() {\n\treturn (\n\t<Container>\n\t\t<ScrollView>\n\t\t{/* ... */}\n\t\t<Subtitle>Items</Subtitle>\n\t\t\t<ItemsLayout>\n\t\t\t\t<ColumnOne>\n\t\t\t\t\t<Card />\n\t\t\t\t</ColumnOne>\n\t\t\t\t<ColumnTwo>\n\t\t\t\t\t<Card />\n\t\t\t\t</ColumnTwo>\n\t\t\t</ItemsLayout>\n\t\t</ScrollView>\n\t</Container>\n\t)\n}\n\n// ...\n\nconst ItemsLayout = styled.View`\n\tflex-direction: row;\n\tflex: 1;\n`;\n\nconst ColumnOne = styled.View``;\n\nconst ColumnTwo = styled.View``;\n```\n\nAfter `Subtitle`add a new view called `ItemsLayout`. This is going to be a layout that allows different cards to be divided between two columns in each row. This can be done by giving this view a `flex-direction` property of value `row`. `ColumnOne` and `ColumnTwo` are two empty views.\n\nOn rendering the screen of the simulator, looks like below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*qRd6EyuiB_nvs3jolhOCeA.png' />\n\n### Conclusion\n\nHave you tried styled-components with React Native before? If not, are you going to try it now in your next project? Do comment below if you do or do not find `styled-components` a comfortable way to use in your React Native applications. _You can extend this application too! Let your imagination wander._ You are welcome to submit a PR if you decide to do so.\n\nYou can find the complete code for this article in the Github repo 👇\n\n[**amandeepmittal/react-native-workspace**](https://github.com/amandeepmittal/react-native-workspace/tree/master/03-RNgrocery-ui)\n\n[Originally published at Level up coding](https://levelup.gitconnected.com/using-styled-components-with-react-native-de645fcf4787)\n",
            "url": "https://amanhimself.dev//blog/using-styled-components-with-react-native",
            "title": "Using Styled Components with React Native",
            "summary": "Using Styled Components with React Native",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/google-vision-api-firebase-react-native",
            "content_html": "---\ntitle: 'Create a React Native Image Recognition App with Google Vision API'\ndate: '2019-02-13'\nslug: 'google-vision-api-firebase-react-native'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://blog.jscrambler.com/create-a-react-native-image-recognition-app-with-google-vision-api/'\n---\n\n![cover](https://i.imgur.com/UIZsVjh.jpg)\n\n> [Originally published at Jscrambler](https://blog.jscrambler.com/create-a-react-native-image-recognition-app-with-google-vision-api/)\n\nGoogle Cloud Vision API is a machine learning tool that can classify details from an image provided as an input into thousands of different categories with pre-trained API models. It offers these pre-trained models through an API and the categories are detected as individual objects within the image. In this tutorial, you are going to learn how to integrate Google Cloud Vision API in a React Native application and make use of real time APIs.\n\n## Installing Expo\n\nIf you are not familiar with Expo, this tutorial can be a good start. Basically, Expo provides a set of tools to create and publish React Native applications with minimal effort. Earlier, React Native had something called `create-react-native-app` which is now merged with Expo-Cli and is an official way to build a React Native app. To create your React Native app, you need to install Expo as a global npm module.\n\n```shell\nnpm install -g expo-cli\n```\n\nOnce the command line interface for Expo is installed in your local development environment, you must run the following command in order to generate a project.\n\n```shell\nexpo-cli init google-vision-rn-demo\n```\n\nIt will ask you for which template to use; choose the option **blank template** rather than tabs template. We only need a single screen in our application for the demonstration purposes. In the last step, you will be prompted to write the name of the project - simply type it and hit enter. Then, it will start installing dependencies. Once the project is created, traverse into the project directory. If you need any help with this setup, refer to the [Expo documentation](https://docs.expo.io/versions/v32.0.0/workflow/configuration/).\n\n## Setting Up Firebase\n\nIn this section, we are going to set up a new Firebase project. It will provide us the database and backend service and we do not have to write our own backend for this tutorial, hence saving time and focusing on what we need to learn. For simplicity, I am going to make the Firebase project data public for demonstration purposes.\n\nVisit [Firebase](https://console.firebase.google.com/) and sign-in with your Google ID. Once signed-in, click on a new project and enter a name. Lastly, hit the **Create Project** button.\n\n![ss1](https://i.imgur.com/aQYciDd.png)\n\nThe next step is to make sure we set up Firebase database rules to allow us to upload image files through the app. From the left-hand side menu in the Firebase console, open `Database` tab and then choose `Rules` and modify them as follows.\n\n```js\nservice cloud.firestore {\n match /databases/{database}/documents {\n   match /{document=**} {\n     allow read, write;\n   }\n }\n}\n```\n\nWe need to install the Firebase SDK in our React Native app. Run the following command from your terminal.\n\n```shell\nnpm install -S firebase\n```\n\nNow, create a folder called `config` and inside it, create a new file called `environment.js`. This file will contain all keys needed to bootstrap and hook Firebase with our application.\n\n```js\n//environment.js\nvar environments = {\n  staging: {\n    FIREBASE_API_KEY: 'XXXX',\n    FIREBASE_AUTH_DOMAIN: 'XXXX',\n    FIREBASE_DATABASE_URL: 'XXXX',\n    FIREBASE_PROJECT_ID: 'XXXX',\n    FIREBASE_STORAGE_BUCKET: 'XXXX',\n    FIREBASE_MESSAGING_SENDER_ID: 'XXXX',\n    GOOGLE_CLOUD_VISION_API_KEY: 'XXXX'\n  },\n  production: {\n    // Warning: This file still gets included in\n    // your native binary and is not a secure way to\n    // store secrets if you build for the app stores.\n    // Details: https://github.com/expo/expo/issues/83\n  }\n};\n\nfunction getReleaseChannel() {\n  let releaseChannel = Expo.Constants.manifest.releaseChannel;\n  if (releaseChannel === undefined) {\n    return 'staging';\n  } else if (releaseChannel === 'staging') {\n    return 'staging';\n  } else {\n    return 'staging';\n  }\n}\nfunction getEnvironment(env) {\n  console.log('Release Channel: ', getReleaseChannel());\n  return environments[env];\n}\nvar Environment = getEnvironment(getReleaseChannel());\nexport default Environment;\n```\n\nThe `X`s are values of each key you have to fill in. Ignore the value for Key `GOOGLE_CLOUD_VISION_API_KEY` right now as we will get back to it in the next section. Other values for their corresponding keys can be attained at the Firebase console. You can get these values by visiting Firebase console and then click the gear icon next to `Project Overview` in the left-hand side menu bar and lastly go to `Project settings` section. There are ways in Expo where you do not have to publish your secret keys when deploying the app or uploading the codebase on a site like Github. The initial step I would recommend is to add this file inside `.gitignore`.\n\nThen create another file called `firebase.js` inside the `config` directory. We will be using this file in the main application to send requests to upload an image to the Firebase storage. Also note that we are importing `environment.js` in it to access Firebase keys.\n\n```js\n// firebase.js\nimport * as firebase from 'firebase';\n\nfirebase.initializeApp({\n  apiKey: Environment['FIREBASE_API_KEY'],\n  authDomain: Environment['FIREBASE_AUTH_DOMAIN'],\n  databaseURL: Environment['FIREBASE_DATABASE_URL'],\n  projectId: Environment['FIREBASE_PROJECT_ID'],\n  storageBucket: Environment['FIREBASE_STORAGE_BUCKET'],\n  messagingSenderId: Environment['FIREBASE_MESSAGING_SENDER_ID']\n});\n\nexport default firebase;\n```\n\n## Getting Google Cloud Vision API Key\n\nTo use a Google Cloud Platform service, you need a Gmail account. Once you are signed-in from your Gmail ID, you can visit the [Google Cloud Console](https://console.cloud.google.com/). The next step is to create a new project.\n\n![ss6](https://i.imgur.com/29hfyJ7.png)\n\nClick `select a project` from the drop-down menu and then `click new project`. Enter the name of your project and then click `Create`. Once you’ve created the project, we are placed back into the main console page again and then need to select our newly created project.\n\nThe next step in this process is to get your API key. This you can get by clicking on the console and moving over to `Dashboard` section and under that choose `Enable APIs and Services`.\n\n![ss7](https://i.imgur.com/hlCljun.png)\n\nThen type **vision** in the search on the page as shown below.\n\n![ss8](https://i.imgur.com/LuLN3o0g.png)\n\nAnd then click `Vision API`.\n\n![ss9](https://i.imgur.com/8folZ3J.png)\n\nLastly, click `Enable` like below\n\n![ss10](https://i.imgur.com/087P0go.png)\n\nIn order to complete this process of enabling Vision API services, you are required to add billing information (if you haven't done already) to your Google Cloud Platform account.\n\nYour URL in the dashboard will look like this: `https://console.cloud.google.com/apis/dashboard?project=FIREBASE-PROJECT-ID&folder&organizationId`. Once you are at the below screen, click on the `Credentials` section from the left-hand side menu and create a new API key if there isn't any by clicking on the button `Create Credentials` and then `API Key`.\n\n![ss2](https://i.imgur.com/y36eTeJ.png)\n\nOnce you have created your API key, it is time to add it in the file `environment.js` for the key `GOOGLE_CLOUD_VISION_API_KEY`.\n\nThat's it. Setting up the APIs is complete. We can now move on to work on the app itself.\n\n## Building The App\n\nTo get started, we need to install an npm package called `uuid` to create a unique blob for the image that is going to upload on the Firebase storage service. Run the command `npm install --save uuid`. Next, open `App.js` and paste the following code.\n\n```js\nimport React from 'react';\nimport {\n  ActivityIndicator,\n  Button,\n  Clipboard,\n  FlatList,\n  Image,\n  Share,\n  StyleSheet,\n  Text,\n  ScrollView,\n  View\n} from 'react-native';\nimport { ImagePicker, Permissions } from 'expo';\nimport uuid from 'uuid';\nimport Environment from './config/environment';\nimport firebase from './config/firebase';\n\nexport default class App extends React.Component {\n  state = {\n    image: null,\n    uploading: false,\n    googleResponse: null\n  };\n\n  async componentDidMount() {\n    await Permissions.askAsync(Permissions.CAMERA_ROLL);\n    await Permissions.askAsync(Permissions.CAMERA);\n  }\n\n  render() {\n    let { image } = this.state;\n\n    return (\n      <View style={styles.container}>\n        <ScrollView\n          style={styles.container}\n          contentContainerStyle={styles.contentContainer}\n        >\n          <View style={styles.getStartedContainer}>\n            {image ? null : (\n              <Text style={styles.getStartedText}>Google Cloud Vision</Text>\n            )}\n          </View>\n\n          <View style={styles.helpContainer}>\n            <Button\n              onPress={this._pickImage}\n              title=\"Pick an image from camera roll\"\n            />\n\n            <Button onPress={this._takePhoto} title=\"Take a photo\" />\n            {this.state.googleResponse && (\n              <FlatList\n                data={this.state.googleResponse.responses[0].labelAnnotations}\n                extraData={this.state}\n                keyExtractor={this._keyExtractor}\n                renderItem={({ item }) => <Text>Item: {item.description}</Text>}\n              />\n            )}\n            {this._maybeRenderImage()}\n            {this._maybeRenderUploadingOverlay()}\n          </View>\n        </ScrollView>\n      </View>\n    );\n  }\n\n  organize = array => {\n    return array.map(function (item, i) {\n      return (\n        <View key={i}>\n          <Text>{item}</Text>\n        </View>\n      );\n    });\n  };\n\n  _maybeRenderUploadingOverlay = () => {\n    if (this.state.uploading) {\n      return (\n        <View\n          style={[\n            StyleSheet.absoluteFill,\n            {\n              backgroundColor: 'rgba(0,0,0,0.4)',\n              alignItems: 'center',\n              justifyContent: 'center'\n            }\n          ]}\n        >\n          <ActivityIndicator color=\"#fff\" animating size=\"large\" />\n        </View>\n      );\n    }\n  };\n\n  _maybeRenderImage = () => {\n    let { image, googleResponse } = this.state;\n    if (!image) {\n      return;\n    }\n\n    return (\n      <View\n        style={{\n          marginTop: 20,\n          width: 250,\n          borderRadius: 3,\n          elevation: 2\n        }}\n      >\n        <Button\n          style={{ marginBottom: 10 }}\n          onPress={() => this.submitToGoogle()}\n          title=\"Analyze!\"\n        />\n\n        <View\n          style={{\n            borderTopRightRadius: 3,\n            borderTopLeftRadius: 3,\n            shadowColor: 'rgba(0,0,0,1)',\n            shadowOpacity: 0.2,\n            shadowOffset: { width: 4, height: 4 },\n            shadowRadius: 5,\n            overflow: 'hidden'\n          }}\n        >\n          <Image source={{ uri: image }} style={{ width: 250, height: 250 }} />\n        </View>\n        <Text\n          onPress={this._copyToClipboard}\n          onLongPress={this._share}\n          style={{ paddingVertical: 10, paddingHorizontal: 10 }}\n        />\n\n        <Text>Raw JSON:</Text>\n\n        {googleResponse && (\n          <Text\n            onPress={this._copyToClipboard}\n            onLongPress={this._share}\n            style={{ paddingVertical: 10, paddingHorizontal: 10 }}\n          >\n            JSON.stringify(googleResponse.responses)}\n          </Text>\n        )}\n      </View>\n    );\n  };\n\n  _keyExtractor = (item, index) => item.id;\n\n  _renderItem = item => {\n    <Text>response: {JSON.stringify(item)}</Text>;\n  };\n\n  _share = () => {\n    Share.share({\n      message: JSON.stringify(this.state.googleResponse.responses),\n      title: 'Check it out',\n      url: this.state.image\n    });\n  };\n\n  _copyToClipboard = () => {\n    Clipboard.setString(this.state.image);\n    alert('Copied to clipboard');\n  };\n\n  _takePhoto = async () => {\n    let pickerResult = await ImagePicker.launchCameraAsync({\n      allowsEditing: true,\n      aspect: [4, 3]\n    });\n\n    this._handleImagePicked(pickerResult);\n  };\n\n  _pickImage = async () => {\n    let pickerResult = await ImagePicker.launchImageLibraryAsync({\n      allowsEditing: true,\n      aspect: [4, 3]\n    });\n\n    this._handleImagePicked(pickerResult);\n  };\n\n  _handleImagePicked = async pickerResult => {\n    try {\n      this.setState({ uploading: true });\n\n      if (!pickerResult.cancelled) {\n        uploadUrl = await uploadImageAsync(pickerResult.uri);\n        this.setState({ image: uploadUrl });\n      }\n    } catch (e) {\n      console.log(e);\n      alert('Upload failed, sorry :(');\n    } finally {\n      this.setState({ uploading: false });\n    }\n  };\n\n  submitToGoogle = async () => {\n    try {\n      this.setState({ uploading: true });\n      let { image } = this.state;\n      let body = JSON.stringify({\n        requests: [\n          {\n            features: [\n              { type: 'LABEL_DETECTION', maxResults: 10 },\n              { type: 'LANDMARK_DETECTION', maxResults: 5 },\n              { type: 'FACE_DETECTION', maxResults: 5 },\n              { type: 'LOGO_DETECTION', maxResults: 5 },\n              { type: 'TEXT_DETECTION', maxResults: 5 },\n              { type: 'DOCUMENT_TEXT_DETECTION', maxResults: 5 },\n              { type: 'SAFE_SEARCH_DETECTION', maxResults: 5 },\n              { type: 'IMAGE_PROPERTIES', maxResults: 5 },\n              { type: 'CROP_HINTS', maxResults: 5 },\n              { type: 'WEB_DETECTION', maxResults: 5 }\n            ],\n            image: {\n              source: {\n                imageUri: image\n              }\n            }\n          }\n        ]\n      });\n      let response = await fetch(\n        'https://vision.googleapis.com/v1/images:annotate?key=' +\n          Environment['GOOGLE_CLOUD_VISION_API_KEY'],\n        {\n          headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n          },\n          method: 'POST',\n          body: body\n        }\n      );\n      let responseJson = await response.json();\n      console.log(responseJson);\n      this.setState({\n        googleResponse: responseJson,\n        uploading: false\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}\n\nasync function uploadImageAsync(uri) {\n  const blob = await new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.onload = function () {\n      resolve(xhr.response);\n    };\n    xhr.onerror = function (e) {\n      console.log(e);\n      reject(new TypeError('Network request failed'));\n    };\n    xhr.responseType = 'blob';\n    xhr.open('GET', uri, true);\n    xhr.send(null);\n  });\n\n  const ref = firebase.storage().ref().child(uuid.v4());\n  const snapshot = await ref.put(blob);\n\n  blob.close();\n\n  return await snapshot.ref.getDownloadURL();\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingBottom: 10\n  },\n  developmentModeText: {\n    marginBottom: 20,\n    color: 'rgba(0,0,0,0.4)',\n    fontSize: 14,\n    lineHeight: 19,\n    textAlign: 'center'\n  },\n  contentContainer: {\n    paddingTop: 30\n  },\n\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50\n  },\n\n  getStartedText: {\n    fontSize: 17,\n    color: 'rgba(96,100,109, 1)',\n    lineHeight: 24,\n    textAlign: 'center'\n  },\n\n  helpContainer: {\n    marginTop: 15,\n    alignItems: 'center'\n  }\n});\n```\n\nNote that, most of the source code for accessing and uploading to Firebase is taken from an example of using Expo with Firebase [here](https://github.com/expo/firebase-storage-upload-example). I am going to explain below the bits that are essential to connect and run Firebase. First, let us start by understanding what `uploadImageAsync` is doing.\n\n```js\nasync function uploadImageAsync(uri) {\n  const blob = await new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.onload = function () {\n      resolve(xhr.response);\n    };\n    xhr.onerror = function (e) {\n      console.log(e);\n      reject(new TypeError('Network request failed'));\n    };\n    xhr.responseType = 'blob';\n    xhr.open('GET', uri, true);\n    xhr.send(null);\n  });\n\n  const ref = firebase.storage().ref().child(uuid.v4());\n  const snapshot = await ref.put(blob);\n\n  blob.close();\n\n  return await snapshot.ref.getDownloadURL();\n}\n```\n\nAs shown in the above snippet, the `uploadImageAsync` function uploads the image by creating a unique image ID or blob with the help of `uuid`. It also uses `xhr` to send a request to the Firebase storage to upload the image. We are also defining a default state in the `App` component and asking for User Permissions for both using the camera roll or gallery or take a photo from the device's camera as shown in the code snippet below.\n\n```js\nstate = {\n    image: null,\n    uploading: false,\n    googleResponse: null\n  };\n\n  async componentDidMount() {\n    await Permissions.askAsync(Permissions.CAMERA_ROLL);\n    await Permissions.askAsync(Permissions.CAMERA);\n }\n```\n\nThe `Button` in our `App component` publishes the image to Google's Cloud Vision API.\n\n```js\n<Button\n  style={{ marginBottom: 10 }}\n  onPress={() => this.submitToGoogle()}\n  title=\"Analyze!\"\n/>\n```\n\nThe `submitToGoogle` method is what sends requests and communicates with the API to fetch the result when the button `Analyze` is pressed by the user.\n\n```js\nsubmitToGoogle = async () => {\n   try {\n     this.setState({ uploading: true });\n     let { image } = this.state;\n     let body = JSON.stringify({\n       requests: [\n         {\n           features: [\n             { type: \"LABEL_DETECTION\", maxResults: 10 },\n             { type: \"LANDMARK_DETECTION\", maxResults: 5 },\n             { type: \"FACE_DETECTION\", maxResults: 5 },\n             { type: \"LOGO_DETECTION\", maxResults: 5 },\n             { type: \"TEXT_DETECTION\", maxResults: 5 },\n             { type: \"DOCUMENT_TEXT_DETECTION\", maxResults: 5 },\n             { type: \"SAFE_SEARCH_DETECTION\", maxResults: 5 },\n             { type: \"IMAGE_PROPERTIES\", maxResults: 5 },\n             { type: \"CROP_HINTS\", maxResults: 5 },\n             { type: \"WEB_DETECTION\", maxResults: 5 }\n           ],\n           image: {\n             source: {\n               imageUri: image\n             }\n           }\n         }\n       ]\n     });\n     let response = await fetch(\n       \"https://vision.googleapis.com/v1/images:annotate?key=\" +\n         Environment[\"GOOGLE_CLOUD_VISION_API_KEY\"],\n       {\n         headers: {\n           Accept: \"application/json\",\n           \"Content-Type\": \"application/json\"\n         },\n         method: \"POST\",\n         body: body\n       }\n     );\n     let responseJson = await response.json();\n     console.log(responseJson);\n     this.setState({\n       googleResponse: responseJson,\n       uploading: false\n     });\n   } catch (error) {\n     console.log(error);\n   }\n };\n}\n```\n\nThe Vision API uses HTTP Post request as a REST API endpoint to perform data analysis on images you send in the request. This is done via the URL `https://vision.googleapis.com/v1/images:annotate`. To authenticate each request, we need the API key. The body of this POST request is in JSON format. For example:\n\n```json\n{\n  \"requests\": [\n    {\n      \"image\": {\n        \"content\": \"/9j/7QBEUGhvdG9...image contents...eYxxxzj/Coa6Bax//Z\"\n      },\n      \"features\": [\n        {\n          \"type\": \"LABEL_DETECTION\",\n          \"maxResults\": 1\n        }\n      ]\n    }\n  ]\n}\n```\n\nYou can change the value of `maxResults` for every category. The response from the Vision API is also in JSON format.\n\n```json\n\"labelAnnotations\": Array [\n Object {\n   \"description\": \"water\",\n   \"mid\": \"/m/0838f\",\n   \"score\": 0.97380537,\n   \"topicality\": 0.97380537,\n },\n Object {\n   \"description\": \"waterfall\",\n   \"mid\": \"/m/0j2kx\",\n   \"score\": 0.97099465,\n   \"topicality\": 0.97099465,\n },\n Object {\n   \"description\": \"nature\",\n   \"mid\": \"/m/05h0n\",\n   \"score\": 0.9594912,\n   \"topicality\": 0.9594912,\n }\n]\n```\n\nThe above result can be viewed in the terminal from Expo logs. You can see how the application works with a short demo done on iOS simulator below.\n\n![demo](https://i.imgur.com/z0i8Tpi.gif)\n\nIf you visit the storage section in Firebase, you can notice that each image is stored with a name of base64 binary string.\n\n![ss5](https://i.imgur.com/lPrHrQUg.png)\n\nIf you have a real device, just download the Expo client, scan the QR code and then you can try the `Take a photo` feature inside the application.\n\n## Conclusion\n\nIn this tutorial, we’ve shown you how to integrate Firebase storage services and use a machine learning API such as Google's Vision API with a React Native and Expo application.\n\nYou can find the complete code inside [this Github repo](https://github.com/amandeepmittal/google-vision-rn-demo).\n",
            "url": "https://amanhimself.dev//blog/google-vision-api-firebase-react-native",
            "title": "Create a React Native Image Recognition App with Google Vision API",
            "summary": "Create a React Native Image Recognition App with Google Vision API",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/how-to-build-a-news-reader-app-with-react-native-and-newsapi",
            "content_html": "---\ntitle: 'How To Build a News Reader App with React Native and NewsAPI'\ndate: '2019-02-12'\nslug: 'how-to-build-a-news-reader-app-with-react-native-and-newsapi'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://medium.com/crowdbotics/29-useful-open-source-libraries-for-nodejs-4cefe08f7205'\n---\n\nReact Native is a great platform to build cross-platform mobile applications for iOs and Android. While there are few other framework options available in the mobile app development space to build cross-platform applications, coming from JavaScript or web development background makes learning and using React Native as a framework easier.\n\nIn this tutorial, I am going to walk you through the process of building a React Native application from scratch. Along with that, we are going to cover many topics such as installing and using a third party library for fetching real-time data, using a `Flatlist` component (_something you are going to use a lot in React Native_), using a third party UI library for React Native and implement a feature like _pull down to refresh content_.\n\nThe content in this article is as followed:\n\n- Getting Started with Requirements\n- Getting NEWS API Key\n- Fetching data from News API\n- The Article Component\n- Learn about [react-native-elements](https://react-native-training.github.io/react-native-elements/) in detail\n- Writing the News Component\n- FlatList Component in Detail\n- Conclusion\n\n> [**Also, try out the Crowdbotics App Builder to instantly scaffold and deploy a React Native application.**](https://app.crowdbotics.com/dashboard/?utm_campaign=cb-medium&utm_source=blog-post&utm_medium=Medium&utm_content=react-native)\n\n### Getting Started with Requirements\n\nTo continue reading this tutorial, you need a basic understanding of JavaScript as a programming language. If you have some experience working your way with Reactjs, you will have no problem following this tutorial. If you are a newbie to JavaScript or React ecosystem, I want to halt right here and go through [this awesome resource](http://www.react.express/) that can help you with understanding the basic concepts in this tutorial. (_Don’t spend too much time if you’re not interested in building web applications using Reactjs; just go through the main concepts._)\n\nPlease note that React Native is not a hybrid mobile app framework like others available. It uses a bridge between Javascript and native APIs of a specific platform. Do take a look at [React Native Official Docs](https://facebook.github.io/react-native/docs/getting-started.html) to read more about this.\n\nOther requirements required in order to follow this tutorial:\n\n- Nodejs above `8.x.x` installed on your local machine\n- Know, how to run simple `npm` commands\n- JavaScript/ES6 basics\n- `watchman` the file watcher installed\n- `react-native-cli` installed through npm\n\nFor a complete walkthrough on how you can set up a development environment for React Native, you can go through [official documentation here](https://facebook.github.io/react-native/docs/getting-started).\n\nOnce you installed `react-native-cli` you can begin by generating a React Native project. Run the below command to initialize a new React Native project. Also, note that you can name your React Native app anything. For demonstration purposes, I am going to call it `newsApiDemo`.\n\n```shell\nreact-native init newsApiDemo\n```\n\nOnce the project directory is generated, you can traverse inside it. Then, in two separate terminal windows or tabs, run two different commands to start your project.\n\n```shell\ncd newsApiDemo\n\n# first terminal window\nnpm start\n\n#second terminal window\nreact-native run-ios\n```\n\n_Note_ that I am going to use iOS simulator for demonstrating this tutorial. You are on a Windows or a Linux machine, go ahead and replace `run-ios` in react native command with `run-android`. Android developers, also make sure that the Android Virtual Device has bootstrapped before running the previous command.\n\nThat’s all. Let us get going with the development process.\n\n### Getting News API Key\n\n[NewsAPI.org](https://newsapi.org/) is simple and easy to use data API that returns JSON metadata for headlines and articles from the internet. It uses over 30,000 sources to fetch data from the web.\n\nYou are going to use NewsApi for this tutorial. So it is better to get the API key in the start before you start developing your application. To get the API key, proceed to [**newsapi.org**](https://newsapi.org/) and sign in with your email id. After logging in, you will receive an API key when you click the button `Get API key`.\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*KPz9LFthqxokfaoNeZpBxQ.png' />\n\nTo save this API key, create a new folder called `src` and inside create another new directory called `config`. Inside `config` create a new file called `env.js` and save the API key as below.\n\n```js\nexport const API_KEY = 'XXXXXXXXX';\n```\n\nThis `API_KEY` is going to help us authenticate as a user of NewsAPI and use the free plan.\n\n### Fetching data from News API\n\nTo fetch data from the news API using our recently you are going to use JavaScript’s `fetch` API. Let us write a function that will handle this process. Create a new file inside `src/utils/fetchNews.js` and then add the following snippet.\n\n```js\nimport { API_KEY } from '../config/env';\n\nconst url = `https://newsapi.org/v2/top-headlines?\ncountry=us&apiKey=${API_KEY}`;\n\nexport async function getUSANews() {\n  let result = await fetch(url).then((response = response.json()));\n\n  return result.articles;\n}\n```\n\nIn the above file, we start by importing the `API_KEY`. Then we take the URL as a constant with the same name. It contains all the data we need. To verify that the URL is correct, visit the URL itself and replace of `${API_KEY}` with your own API key. You will get similar results in form of articles.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*FIkn5xklfPK7D-G6pbVbAw.png' />\n\nThis is a data representation of what we are getting from hitting the API URL.\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*NLk6XCk71Px7dpBhhEGx2g.png' />\n\nThe function `getUSANews()` is returning only the array `articles` from above. We will consume this array by traversing it and displaying each article along with the headline, its image URL.\n\n_To get more information on the different data sources you can visit_ [**newsapi documentation**](https://newsapi.org/docs)**.**\n\n### Adding a Third Party UI Kit\n\nBefore we begin developing our UI components and display news articles, we are going to install a third party UI library that will provide us a lot of styling and pre-defined components, that with very little tweaks, we can make use of these components. You can think of this as a CSS framework (_such as Bootstrap or Semantics or any other_) in terms of Front-End Web Development.\n\nMove ahead, stop the `npm run` command if it is still running the and in the same run the following set of commands to install `[react-native-elements](https://react-native-training.github.io/react-native-elements/docs/getting_started.html)` and `react-native-vector-icons`.\n\n```shell\nnpm i -S react-native-elements\n\n# then\nnpm i --save react-native-vector-icons\n\n# then, last command: link it\nreact-native link react-native-vector-icons\n```\n\nTo verify that dependencies have installed and their installed version of each dependency, you can always visit `package.json` file.\n\n```json\n\"dependencies\": {\n    \"react\": \"16.6.3\",\n    \"react-native\": \"0.58.4\",\n    \"react-native-elements\": \"^1.0.0\",\n    \"react-native-vector-icons\": \"^6.2.0\"\n\t},\n```\n\n**What about the** `**react-native link**` **command?** Why did we have to run it and what does it do? Read the next short section if you do not know what is linking of libraries in React Native means. You can skip it if you already know about it and move onto the next section.\n\n**Side-note**: You are also going to _momentJS_ library to display each article’s published date and time. To install just run `npm i -S moment`, no linking required for this.\n\n### Link Libraries React Native\n\nAll third-party libraries in React Native have some native dependencies that use specific platform capabilities of iOS and Android. Linking these native dependencies with react-native link command indicates that a libraries’ native dependencies are linked successfully to your iOS/Android project.\n\nWhenever you link a library, you will always get a prompt message informing you whether the library has been successfully linked or not like below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*SPv563AHWRByVg_aQqCmeA.png' />\n\n### The Article Component\n\nTo display the data we need a React Native component. Create a new file inside `src/components/Article.js`. You start by requiring dependencies in order to build this component. Then, also save one article data object from the news API URL we visited earlier. For now, we are going to show hard-coded data. Also, the `Article` component is going to represent one single article, so it will satisfy our need for now. Here is the code for the complete component as of now.\n\n```js\nimport React, { Component } from 'react';\nimport { View, TouchableHighlight } from 'react-native';\nimport { Text, Card, Divider } from 'react-native-elements';\nimport moment from 'moment';\n\nconst defaultJSONData = {\n  source: {\n    id: 'fox-news',\n    name: 'Fox News'\n  },\n  author: null,\n  title:\n    \"Jeff Bezos' investigator believes 'government\n    entity' may have obtained texts: WashPo\n    reporter - Fox News\",\n  description:\n    'A security consultant for Amazon founder and\n    Washington Post owner Jeff Bezos believes the\n    CEO’s lurid intimate photos may have been\n    acquired by a \"government entity,\" a reporter\n    at the paper said Thursday.',\n  url:\n    'https://www.foxnews.com/tech/\n    jeff-bezos-investigator-believes-government-enti\n    ty-obtained-texts-wapo-reporter',\n  urlToImage:\n    'https://media2.foxnews.com/BrightCove/\n    694940094001/2019/02/08/\n    694940094001_5999770984001_5999767526001-vs.jpg',\n  publishedAt: '2019-02-08T07:52:57Z',\n  content:\n    'A security consultant for Amazon founder and\n    Washington Post owner Jeff Bezos believes the\n    CEO’s lurid intimate photos may have been\n    acquired by a \"government entity,\" a reporter\n    at the paper said Thursday. Manuel\n    Roig-Franzia, the reporter, told MSNBC that w… [+1410 chars]'\n};\n\nclass Article extends Component {\n  render() {\n    const time = moment(defaultJSONData.publishedAt || moment.now()).fromNow();\n\n    return (\n      <TouchableHighlight>\n        <Card\n          featuredTitle={defaultJSONData.title}\n          featuredTitleStyle={{\n            marginHorizontal: 5,\n            textShadowColor: '#00000f',\n            textShadowOffset: { width: 3, height: 3 },\n            textShadowRadius: 3\n          }}\n          image={{\n            uri:\n              'https://media2.foxnews.com/\n              BrightCove/694940094001/2019/02/08/\n              694940094001_5999770984001_59997675260\n              01-vs.jpg'\n          }}\n        >\n          <Text style={{ marginBottom: 10 }}>\n            {defaultJSONData.description || 'Read more...'}\n          </Text>\n          <Divider style={{ backgroundColor: '#dfe6e9' }} />\n          <View\n            style={{ flexDirection: 'row', justifyContent: 'space-between' }}\n          >\n            <Text\n              style={{\n                margin: 5,\n                fontStyle: 'italic',\n                color: '#b2bec3',\n                fontSize: 10\n              }}\n            >\n              {defaultJSONData.source.name.toUpperCase()}\n            </Text>\n            <Text\n              style={{\n                margin: 5,\n                fontStyle: 'italic',\n                color: '#b2bec3',\n                fontSize: 10\n              }}\n            >\n              {time}\n            </Text>\n          </View>\n        </Card>\n      </TouchableHighlight>\n    );\n  }\n}\n\nexport default Article;\n```\n\nThe `defaultJSONData` is going to be the source of the data until we successfully display one article in the form of a card element on the device's screen. Later on, we are going to fetch all the articles inside another component that will be using the `Article` component to display each article. The data to the `Article` component then, will be provided through props.\n\nInside the `render` method, we are using a combination of elements from both `react-native` and third party UI kit library, `react-native-elements`.\n\nThe `TouchableHiglight` component from react native is going to be useful to us. It is a wrapper that makes a normal view in React Native respond to touches properly on a mobile device.\n\nThese are the three UI elements from **react-native-elements**. A `Card` is helping us to display news article information. It contains content in the form of\n\n- a news article’s headline: `defaultJSONData.title`\n- the description: `defaultJSONData.description`\n- the name source or the news provider: `defaultJSONData.source.name`\n- the time article was published from the current time: `defaultJSONData.publishedAt`\n- and the image of the article from the source: `defaultJSONData.urlToImage`\n\nThe `Card` has some special props. Like when you want to use to display the content on the image (_like we are doing_), you can use a combination of props such as `featuredTitle` and `image`. The `featuredTitleStyle` is just used to provide some extra weight to the text on the image.\n\nI am sure, you are not getting much of this. So let us first find a way to display this card and then talk about it in detail. Open up `App.js` and add the following.\n\n```js\nimport React, { Component } from 'react';\nimport { View, StyleSheet } from 'react-native';\n\nimport Article from './src/components/Article';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <Article />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#fff'\n  }\n});\n```\n\nWe are importing the `Article` class component from its file inside `/components/`. If you refresh the iOS/android simulator, you will get the following result.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*ZxFndMVOWSZsgJ-uYAe_eQ.png' />\n\nNow, you get it. Take a look at the whole `Card`. It adds the outer most border on its own. Inside the card, notice how the `featuredTitle` is working its charm over the `image` prop. If you had used the simple `title`, you won't be getting similar result like above.\n\nAlso notice closely, the `Divider` between the description of the news article, and the source and the published time of the article. Below the `Divider` , we have a `View` that contains the source name and the time the article was published. We are using the divider element from `react-native-elements` and providing our own background color as the style. The news source provider has its own name converted to uppercase letters using JavaScript utility function `toUpperCase()`.\n\n```js\n<Text style={{ marginBottom: 10 }}>\n  {defaultJSONData.description || 'Read more...'}\n</Text>\n```\n\nIn the description part, as in the above snippet, you will notice a default text `Read more...`. This is a placeholder text that will appear only in the scenario when the source in the API fails to provide a description for a news article.\n\n### News Component\n\nIn this section, we are going to learn how to use display multiple articles from the API as a list. Do note that, this list is going to be a scrollable list. Create a new file inside `components/News.js` with the following code.\n\n```js\nimport React, { Component } from 'react';\nimport { FlatList } from 'react-native';\n\nimport { getUSANews } from '../utils/fetchNews';\nimport Article from './Article';\n\nclass News extends Component {\n  state = {\n    articles: [],\n    refreshing: true\n  };\n\n  componentDidMount = () => {\n    this.fetchNews();\n  };\n\n  fetchNews = () => {\n    getUSANews()\n      .then(articles => {\n        this.setState({ articles, refreshing: false });\n      })\n      .catch(() => this.setState({ refreshing: false }));\n  };\n\n  handleRefresh = () => {\n    this.setState({ refreshing: true }, () => this.fetchNews());\n  };\n\n  render() {\n    return (\n      <FlatList\n        data={this.state.articles}\n        renderItem={({ item }) => <Article article={item} />}\n        keyExtractor={item => item.url}\n        refreshing={this.state.refreshing}\n        onRefresh={this.handleRefresh}\n      />\n    );\n  }\n}\n\nexport default News;\n```\n\nWe start by importing the usual React boilerplate code. From React Native, we are only going to use `FlatList` to render a list of news articles. We define an initial state object which has an array `articles` that will store all the articles after they are fetched from the API. The second property of the state is `refreshing`. This will be used with `FlatList` as props and accepts boolean value. This value when `true` triggers a refresh (_spinner_) animation. This animation is also visible at the starting of the application since the default value for `refreshing` is `true`.\n\nYou will notice the use of a lifecycle method called `componentDidMount()`. This gets invoked immediately after the `News` component is mounted. It further triggers the calling of another function called `fetchNews`.\n\nThe `fetchNews` calls the API function from the `utils` directory we created earlier in this tutorial. It returns a promise which further takes `articles` as an argument. If the data is fetched, we update the state object accordingly.\n\nThe last method is `handleRefresh`. It starts the spinner animation and invokes the `fetchNews()` method immediately after we update the component's state.\n\n### FlatList\n\nTo render a list of items in React Native such that the user can scroll through them on their devices can be done through either using a FlatList, ScrollView or SectionList component. In this tutorial, we made use of `FlatList` component.\n\n```js\n<FlatList\n  data={this.state.articles}\n  renderItem={({ item }) => <Article article={item} />}\n  keyExtractor={item => item.url}\n  refreshing={this.state.refreshing}\n  onRefresh={this.handleRefresh}\n/>\n```\n\nA FlatList component takes two primary props whenever you want to make scrollable list our of data available to you. They are `data` and `renderItem`. `data` is the array that is used to create a list of item and `renderItem` is the function that takes an individual element of data from the array and renders it.\n\nIn the code above, notice how we implement `FlatList` in the `News.js`.\n\nThe `data` is coming from the initial state object and an object of each item is getting passed through `renderItem` which is further send as props to `Article` component. Apart from `data` and `renderItem`, we are using three other props.\n\n`keyExtractor` is another important and required prop when using FlatList. It should always contain the value that is unique to each object in the data array. For example, from the news API source, we are using the URL of each news article since it is always going to be unique as each article is going to have a unique URL on the Web.\n\nThe `onRefresh` prop provides the functionality of _\"Pull to Refresh\"_. It also requires the prop `refreshing` as we did in the `News.js` and always accepts a boolean value.\n\n### Rendering Articles List\n\nTo display its content on the screen, you have to modify `App.js` accordingly.\n\n```js\nimport React, { Component } from 'react';\n\nimport News from './src/components/News';\n\nexport default class App extends Component {\n  render() {\n    return <News />;\n  }\n}\n```\n\nIn the `App.js` file, all we have to do is import `News` component to render its content. Check out the image below of how the data renders on the screen.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*mmO4jSlXr3WUOwK8fWJ5xg.png' />\n\nIf you pull the list down, the spinner animation will appear and if there is new data, it will update the list on the mobile screen.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*LJIVaD-W1YFfHw4zhpfRQQ.gif' />\n\n### Conclusion\n\nI hope you enjoyed reading this tutorial and hopefully, you learned something new out of it such as using third party API, using a UI toolkit and core React Native concepts such as `react-native link`, rendering a list using `FlatList` and implementing _Pull To Refresh_ functionality with it.\n\nIf you have any questions, you can reach out to me on [**Twitter**](https://www.twitter.com/amanhimself) and you can find the complete code for this tutorial in the **Github Repository** 👇.\n\n[**amandeepmittal/newsApiDemo**](https://github.com/amandeepmittal/newsApiDemo)\n\n[Originally published at Crowdbotics](https://medium.com/crowdbotics/29-useful-open-source-libraries-for-nodejs-4cefe08f7205)\n",
            "url": "https://amanhimself.dev//blog/how-to-build-a-news-reader-app-with-react-native-and-newsapi",
            "title": "How To Build a News Reader App with React Native and NewsAPI",
            "summary": "How To Build a News Reader App with React Native and NewsAPI",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/29-useful-open-source-libraries-for-nodejs",
            "content_html": "---\ntitle: 'Top open source libraries for Node.js'\nslug: '29-useful-open-source-libraries-for-nodejs'\ndate: '2019-01-31'\nthumbnail: '/thumbnails/node.png'\ntag: 'nodejs'\ncanonicalUrl: 'https://medium.com/crowdbotics/29-useful-open-source-libraries-for-nodejs-4cefe08f7205'\n---\n\n![cover_image](https://i.imgur.com/Yv3yfrm.png)\n\n> [Originally published at Crowdbotics](https://medium.com/crowdbotics/29-useful-open-source-libraries-for-nodejs-4cefe08f7205)\n\n[**Node.js**](https://nodejs.org) has become more and more popular as a framework because provides quick and efficient solutions for back-end development and integrates well with front-end platforms.\n\nCreated by Ryan Dahl in 2009, Node.js is actively maintained by a large community as an open source project. It enables software and app developers to build fast and scalable web applications using just a few lines of code. [Node.js Foundation](https://medium.com/u/96cd9a1fb56)\n\nThe world of custom software development constantly evolves with new trends, techniques, and languages. But, with Node.js, app development is significantly simplified.\n\nIn this article, I collated a list of the useful open source libraries that you can use in your upcoming Node.js project.\n\n> [**Also, try out the Crowdbotics App Builder to instantly scaffold and deploy a NodeJS app.**](https://app.crowdbotics.com/create/?utm_campaign=cb-medium&utm_content=node-js)\n\n### ExpressJS\n\nExpress.js is a go-to, minimalist framework for Node.js web applications. In recent years, it has been a go to framework to write server side code for the applications that want to use and leverage Node.js.\n\nIt is actively maintained by a great community, now supports almost all ES6 features and is used by both big companies and startups. There is no shortage of web frameworks when it comes to Nodejs and Express has survived the popularity phase so far.\n\n[**expressjs**](https://github.com/expressjs)\n\n### AdonisJS\n\nIt is a complete MVC Nodejs framework (_other than Sails_) that runs on all major operating systems without a problem. . It offers a stable ecosystem to write server-side web applications so you can focus on business needs over finalizing which package to choose or not.\n\nIt differs from other Nodejs web frameworks such as Express and Koa in manner that those frameworks are mostly routing libraries with thin layer of middleware on top\n\nAdonisJS is combination of multiple packages that work together gracefully integrate with the application. For example, it provides a built-in ORM that is works well with SQL databases such as Postgres and MySQL. It helps to create efficient SQL- queries and is based on active record idea. Its query builder is easy to learn and allows us to build simple queries quickly.\n\n[**adonisjs/adonis-framework**](https://github.com/adonisjs/adonis-framework)\n\n### MomentJS\n\nThe standard JavaScript API already comes with the Date object for working with dates and times. However, this object is not very user-friendly when it comes to printing and formatting dates.\n\nIn recent years, MomentJS has become a go to module to use with NodeJS applications to parse, validate, manipulate and format date when building APIs and storing them as data in a preferred database. It is lightweight library and now supports ECMAScript 6.\n\n[**moment/moment**](https://github.com/moment/moment)\n\n### gm\n\nGraphicsMagick and ImageMagick are two popular tools for creating, editing, composing and converting images. With module `gm` you can use both tools directly from within your JavaScript code in a NodeJS application. The module supports all the typical required to operate on an image:\n\n- resizing\n- clipping\n- encoding\n\n```js\nvar fs = require('fs'),\n  gm = require('gm').subClass({ imageMagick: true });\n\n// resize and remove EXIF profile data\ngm('/path/to/my/img.jpg').resize(240, 240);\n```\n\n[**aheckmann/gm**](https://github.com/aheckmann/gm)\n\n### sharp\n\nWith over 11k+ stars on its Github repository, `sharp` is a high performance Node.js image processing, the fastest module to resize JPEG, PNG, WebP and TIFF images.\n\nThe typical use case for this high speed Node.js module is to convert large images in common formats to smaller, web-friendly images with different dimensions. Resizing an image is typically 4x-5x faster than using the quickest ImageMagick and GraphicsMagick settings.\n\n```js\nsharp('input.jpg')\n  .rotate()\n  .resize(200)\n  .toBuffer()\n  .then( data => ... )\n  .catch( err => ... );\n```\n\n[**lovell/sharp**](https://github.com/lovell/sharp)\n\n### node-csv\n\nThe CSV (comma-separated values) format is often used when interchanging table-based data. For example, Microsoft Excel allows you to export or import your data in that format. `node-csv` simplifies the process of working with CSV data in a server side application.\n\nnode-sv provides functionalities for generating, parsing, transforming and stringifying CSV and uses streams API for that. It also comes with a callback API, a stream API and a synchronous API to fullfil your needs.\n\n[**adaltas/node-csv**](https://github.com/adaltas/node-csv)\n\n### Passport\n\nPassport is an ExpressJS compatible authentication middleware for Node.js. Its sole purpose is to authenticate requests which is done through an extensible set of plugins known as strategies. Passport does not mount routes or assume any particular database schema, which maximizes flexibility and allows application-level decisions to be made by the developer.\n\nThe API is simple and requires you to provide a request to authenticate, and Passport provides hooks for controlling what occurs when authentication succeeds or fails.\n\n```js\npassport.serializeUser(function (user, done) {\n  done(null, user.id);\n});\n\npassport.deserializeUser(function (id, done) {\n  User.findById(id, function (err, user) {\n    done(err, user);\n  });\n});\n```\n\n[**jaredhanson/passport**](https://github.com/jaredhanson/passport)\n\n### Nodemailer\n\nAn open source package, nodemailer lets you send emails just by using it inside a NodeJS app. It is a single module with zero dependencies so you can use it freely without worrying much about sensitive data leaking.\n\nIt also secures email delivery using TLS/STARTTLS and you can attach deliverables with your message. The standard Node.js API does not offer such a feature, but fortunately the module Nodemailer fills this gap.\n\n[**nodemailer/nodemailer**](https://github.com/nodemailer/nodemailer)\n\n### ndb\n\n`ndb` is an improved debugging experience for Node.js, developed and enabled by the team behind Google's Chrome web browser. Currently, it is recommended to use Node `v10.x.x` but if you are considering using this package to debug your Node apps, you are required a minimum version of `8.x.x`. ndb has some powerful features exclusively for Node.js:\n\n- Child processes are detected and attached\n- You can place breakpoints before the modules are required\n- You can edit your files within the UI\n- By default, `ndb` blackboxes all scripts outside current working directory to improve focus. This includes node internal libraries (like `_stream_wrap.js`, `async_hooks.js`, `fs.js`)\n- supports memory profiler, JS sampling profiler, breakpoint debugging, async stacks and so on\n\n[**GoogleChromeLabs/ndb**](https://github.com/GoogleChromeLabs/ndb)\n\n### lodash\n\nThis is a utility library that provides extra functionalities such as iteration, manipulation of values, testing values, and creating composite functions that work with arrays, objects, numbers, strings and so on. It is one of the most popular open source library in Nodejs ecosystem.\n\n```js\n// Load the full build.\nconst _ = require('lodash');\n\n// Load the core build.\nconst _ = require('lodash/core');\n\n// Load the FP build for immutable auto-curried iteratee-first data-last methods.\nconst fp = require('lodash/fp');\n```\n\n[**lodash/lodash**](https://github.com/lodash/lodash)\n\n### axios\n\nA promise based HTTP client that provide extra features over `fetch` from native JavaScript API, axios is a popular utility tool among both front-end JavaScript developers and NodeJS. It has following features:\n\n- Make XMLHttpRequests from the browser\n- Make http requests from node.js\n- Supports the Promise API\n- Intercept request and response\n- Transform request and response data\n- Cancel requests\n- Automatic transforms for JSON data\n- Client side support for protecting against XSRF\n\nMost of the above enlisted features have ae absent from native `fetch` JavaScript API and adds to the advantage of using `axios`. Check out the example below in which `axios` is being used with `async/await` syntax.\n\n```js\nasync function getUser() {\n  try {\n    const response = await axios.get('/user?ID=54321');\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n```\n\n### Socket.io\n\nThis is a library that enables a bi-directional communication in real-time by using WebSockets. It provides reliability for handling proxies and load balancers, personal firewalls and antivirus softwares, and supports binary streaming.\n\nOther features include auto-connection support where unless instructed otherwise a disconnected client will try to reconnect forever, until the server is available again. Used by organizations such as Microsoft, Zendesk, Trello it also includes real-time analytics with counters, logs and charts and has a variety of use cases in IOT.\n\n```js\nio.on('connection', socket => {\n  socket.emit('request' /* … */); // emit an event to the socket\n  io.emit('broadcast' /* … */); // emit an event to all connected sockets\n  socket.on('reply', () => {\n    /* … */\n  }); // listen to the event\n});\n```\n\n[**socketio/socket.io**](https://github.com/socketio/socket.io)\n\n### PM2\n\nIt is a Production Runtime and Process Manager for Node.js applications with a built-in Load Balancer. It allows you to keep applications alive forever, to reload them without downtime and facilitate common devops tasks. Starting an application is easy as well as managing one too.\n\nPM2 has container support as well with the drop-in replacement command for node, called pm2-runtime, run your Node.js application in a hardened production environment. It supports all major Node.js frameworks such as Express, Sails, Hapi and so on.\n\n[**Unitech/pm2**](https://github.com/Unitech/pm2)\n\n### Joi\n\nIntroduced with HapiJS, Joi has become a popular library to validate incoming data requests. If you have ever used an ORM when building your Node application such as Sequelize or Mongoose, you know that it is possible to set validation constraints for your model schemas.\n\nThis makes it very easy to handle and validate data at the application level before persisting it to the database. When building APIs, the data usually come from HTTP requests to certain endpoints, and the need may soon arise to be able to validate data at the request level.\n\nJoi is used to validate schema objects with additional rules provided by its own API. Moreover, it works with any Nodejs framework rather than just HapiJS.\n\n```js\nconst Joi = require('joi');\n\nconst schema = Joi.object()\n  .keys({\n    username: Joi.string().alphanum().min(3).max(30).required(),\n    password: Joi.string().regex(/^[a-zA-Z0-9]{3,30}$/),\n    access_token: [Joi.string(), Joi.number()],\n    birthyear: Joi.number().integer().min(1900).max(2013),\n    email: Joi.string().email({ minDomainAtoms: 2 })\n  })\n  .with('username', 'birthyear')\n  .without('password', 'access_token');\n```\n\n[**hapijs/joi**](https://github.com/hapijs/joi)\n\n### TypeORM\n\nWhether you want to work with TypeScript enabled Nodejs server or make use of latest ES6, ES7 JavaScript features to create an API for your application, TypeORM is a popular library that work with multiple databases. It supports both Active Record and Data Mapper patterns, unlike all other JavaScript ORMs currently in existence, which means you can write high quality, loosely coupled, scalable, maintainable applications the most productive way.\n\nFor example, a typical connection to a database using TypeORM looks like:\n\n```js\nimport 'reflect-metadata';\nimport { createConnection } from 'typeorm';\nimport { Photo } from './entity/Photo';\n\ncreateConnection({\n  type: 'mysql',\n  host: 'localhost',\n  port: 3306,\n  username: 'root',\n  password: 'admin',\n  database: 'test',\n  entities: [Photo],\n  synchronize: true,\n  logging: false\n})\n  .then(connection => {\n    // here you can start to work with your entities\n  })\n  .catch(error => console.log(error));\n```\n\nIt also supports MySQL, PostgreSQL, MariaDB, SQLite, MS SQL Server, Oracle, WebSQL databases.\n\n[**typeorm/typeorm**](https://github.com/typeorm/typeorm)\n\n### Sequelize\n\nIt is a promise based Nodejs ORM that supports multiple SQL based databases such as Postgres, MySQL, MariaDB, SQLite and Microsoft SQL Server. It features solid transaction support, relations, read replication and more. It comes with its own CLI tool that enables data migrations and model/schema creation easy. It has a simple installation process, all you have to do is install `sequelize` in your Nodejs application along with the driver of that database you are using.\n\n```shell\n$ npm install --save sequelize\n\n# And one of the following:\n$ npm install --save pg pg-hstore\n$ npm install --save mysql2\n$ npm install --save mariadb\n$ npm install --save sqlite3\n$ npm install --save tedious # MSSQL\n```\n\n[**sequelize/sequelize**](https://github.com/sequelize/sequelize)\n\n### Mongoose\n\nMongoDB is a commonly used NoSQL database in Nodejs applications. It stores the data in JSON documents and the structure of these documents can vary as it is not enforced like SQL databases.\n\nMongoose is an Object Data Modelling (ODM) library for MongoDB and Node.js. It manages relationships between data, provides schema validation, and is used to translate between objects in code and the representation of those objects in MongoDB.\n\n```js\nconst mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost:27017/test', { useNewUrlParser: true });\n\nconst Cat = mongoose.model('Cat', { name: String });\n\nconst kitty = new Cat({ name: 'Zildjian' });\nkitty.save().then(() => console.log('meow'));\n```\n\n[**Automattic/mongoose**](https://github.com/Automattic/mongoose)\n\n### MochaJS\n\nMocha.js is a JavaScript test framework based on Node.js. It enables you to test both in console and in the browser. You can use this really fast testing suite to do the unit and integration testing plus it works with testing patterns such as TDD (_Test-Driven Development_) and BDD (_Behavior Driven Development_). Mocha works well with other assertion libraries such as Chai, Sinon, Should.js. This is an advantage and the reason for its popularity.\n\n```js\nconst assert = require('assert');\n\ndescribe('Array', function () {\n  describe('#indexOf()', function () {\n    it('should return -1 when the value is not present', function () {\n      assert.equal([1, 2, 3].indexOf(4), -1);\n    });\n  });\n});\n```\n\n[**mochajs/mocha**](https://github.com/mochajs/mocha)\n\n### Chai\n\nChai is a TDD and BDD assertion framework for Node.js which can be paired with any test runner framework. As an assertion tool, you can use Chai with its rich plugin system such as `chai-as-promised`, `chai-events`, `chai-spies-next`. It gives me much simpler and more readable tests than using my own assertion helpers or other less popular libraries.\n\n[**chaijs/chai**](https://github.com/chaijs/chai)\n\n### SinonJS\n\nThis is a standalone testing framework for Node.js. The advantage it possess is that it works with any testing framework. You will find many examples of it being used with Mocha and Chai. It requires minimal integration and supports stubs, spies and mocks. It also supports most browsers (cross-browser support) and runs on the server using Node.js.\n\n[**sinonjs/sinon**](https://github.com/sinonjs/sinon)\n\n### AVA\n\nThis is a minimal testing framework to test Node.js applications. It utilizes the async I/O nature of Node and runs concurrent tests, hence, it vastly decreases test suite times. Some of its highlights are:\n\n- Magic assertion in which it adds code excerpts and clean diffs for actual and expected values. If values in the assertion are objects or arrays, only a diff is displayed, to remove the noise and focus on the problem.\n- Clean stack traces by automatically removing unrelated lines in stack traces, allowing you to find the source of an error much faster, as seen above.\n- supports latest JavaScript features using [**Babel 7**](https://babeljs.io/).\n\n[**avajs/ava**](https://github.com/avajs/ava)\n\n### Jest\n\nJest is an open source framework that built for writing and running tests in JavaScript. It is open source, created and maintained by the Facebook. It is built with multiple layers on top of jasmine (_another test running framework_) by keeping some of good parts from jasmine. Its strengths are:\n\n- is fast\n- it can perform snapshot testing\n- is opinionated, and provides everything out of the box without requiring you to make choices\n\nThe advantage it has over other NodeJS testing frameworks such as Mocha that it uses its own assertion API whereas using Mocha you have to install another third party module in order to create and run tests. Jest is human friendly framework. It has gained its attraction by its well supported and very fast testing behavior.\n\n[**facebook/jest**](https://github.com/facebook/jest)\n\n### CloudRail\n\nUsing CloudRail, you can easily integrate external APIs into your application. CloudRail provides abstracted interfaces that take several services and then exposes a developer-friendly API that uses common functions between all providers.\n\nThis means that, for example, upload() works in exactly the same way for Dropbox as it does for Google Drive, OneDrive, and other Cloud Storage Services, and getEmail() works similarly the same way across all social networks.\n\n[**CloudRail/cloudrail-si-node-sdk**](https://github.com/CloudRail/cloudrail-si-node-sdk)\n\n### agenda\n\nJob scheduling is a big part of any server side framework. Luckily, Nodejs has one awesome framework to schedule jobs to run at a particular time and run on a particular day. `agenda` is a light-weight job scheduling library for Node.js. It uses promised based API and has Mongo backed persistence layer.\n\n[**agenda/agenda**](https://github.com/agenda/agenda)\n\n### Nodemon\n\nIt is a tool that helps develop Node.js based applications by automatically restarting the node application when file changes in the directory are detected. It does not require any additional changes to your code or method of development.\n\n`nodemon` is a replacement wrapper for node, to use `nodemon` replace the word `node` on the command line when executing your script. It was originally written to restart hanging processes such as web servers, but now supports apps that cleanly exit.\n\n[**remy/nodemon**](https://github.com/remy/nodemon)\n\n### Keystone CMS\n\nIt is a content management system and web application framework built on Express framework and uses Mongoose as the ODM. It makes it easy to create sophisticated web sites and apps, and comes with a beautiful auto-generated Admin UI. Currently, the Admin UI is a single page application written using React, Redux and Elemental UI. You can use your own Express instance and integrate Keystone as a library.\n\n[**keystonejs/keystone**](https://github.com/keystonejs/keystone)\n\n### Strapi\n\nAnother open source Content Management System for Nodejs application, Strapi has its own advantages. One of them is it being headless and supporting multiple databases such as MySQL, Postgres and MongoDB. It has many features such as:\n\n- Modern Admin Panel: Elegant, entirely customizable and fully extensible admin panel\n- Secure by default: Reusable policies, CSRF, CORS, P3P, Xframe, XSS\n- Plugins Oriented: Install auth system, content management, custom plugins, and more, in seconds\n- Powerful CLI: Scaffold projects and APIs on the fly\n- Front-end Agnostic: Use any front-end frameworks (React, Vue, Angular, etc.), mobile apps or even IoT\n- Blazing Fast: Built on top of Node.js, Strapi delivers amazing performances.\n\n[**strapi/strapi**](https://github.com/strapi/strapi)\n\n### FakerJS\n\nWhen we start to build an application, we generally do not want to worry much about data. To create a database and fill it with sample data seems much of a hassle to me personally.\n\n```js\nvar faker = require('faker');\n\nvar randomName = faker.name.findName(); // Rowan Nikolaus\nvar randomEmail = faker.internet.email(); // Kassandra.Haley@erich.biz\nvar randomCard = faker.helpers.createCard(); // random contact card containing many properties\n```\n\nFakerJS a wonderful node module to create fake/mock data when you are starting to build a prototype or an application. It has its own API that has a variety of generators to construct mock data as per your needs.\n\n[**Marak/faker.js**](https://github.com/marak/Faker.js/)\n\n### Dotenv\n\nSaving sensitive data in the form of environmental variables is one good practice to be followed when working with Nodejs web frameworks. Environmental variables are local variables that are made available to an application. Creating these variables is made easy with a tool like `dotenv`.\n\nThis module loads environment variables from a `.env` file that you create and adds them to the `process.env` object that is made available to the application. This module allows you to create secret keys that your application needs to function and keep them from going public.\n\n[**motdotla/dotenv**](https://github.com/motdotla/dotenv)\n\n### Conclusion\n\nNodejs is a mature platform. Working with third party libraries is a huge part of the JavaScript ecosystem and you cannot run from it. Apart from your personal opinion, if you do not appreciate working with different third party libraries then you should definitely think about the tech stack you are working with.\n\n_I hope this list gets you started to with most commonly used open source packages that are used in_ [**_Node.js_**](https://nodejs.org) _community._\n",
            "url": "https://amanhimself.dev//blog/29-useful-open-source-libraries-for-nodejs",
            "title": "Top open source libraries for Node.js",
            "summary": "Top open source libraries for Node.js",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/21-useful-open-source-packages-for-react-native",
            "content_html": "---\ntitle: '21 Useful Open Source Packages for React Native'\ndate: '2019-01-28'\nslug: '21-useful-open-source-packages-for-react-native'\ntag: 'react-native'\nthumbnail: '/thumbnails/react.png'\ncanonicalUrl: 'https://medium.com/crowdbotics/21-useful-open-source-packages-for-react-native-807f65a818a1'\n---\n\n![cover_image](https://i.imgur.com/nbq2XcZ.png)\n\nWe live in the world of a variety, yet mobile devices are dominated by two major platforms, iOS and Android. It is a two-horse race, but that doesn’t make mobile app development _easy_. For iOS you write code using Objective-C or Swift. For Android, you use Java. In addition to different programming languages, the tool chains are entirely different too for both of these mobile platforms.\n\nTo create app that work across devices, many modern day developers build Hybrid apps using HTML, CSS and JavaScript — as you would a web page— wrapped in native container. This way, you use (almost) one set of source code for developing applications for both iOS and Android .\n\nIn recent years, hybrid frameworks have evolved from web view to use native APIs. This cross-platform approach of developing a mobile application comes with its own pros and cons. Pros such as being less-time consuming and cost-effective, and cons include performance issues.\n\nOne of the great options that fall under the umbrella of cross-platform development is React Native. React Native was developed by Facebook and used by others such as [Tesla Motors](https://medium.com/u/24413768aadb), [Walmart Labs](https://medium.com/u/c884135151a4), [Uber](https://medium.com/u/b97b1b381b5a), [Instagram Engineering](https://medium.com/u/a4c6efa67fe0), [Discord](https://medium.com/u/fddf6af2df19), [Wix](https://medium.com/u/2741d9d88322) and so on.\n\nIn a nutshell, React Native allows you to build mobile applications that look, feel and perform much more like native applications. The good thing for developers is that they can use almost the same concepts that are being used for building web applications.\n\nThe list below contains an overview of the top open source libraries that you can use in your React Native application.\n\n> [**Also, try out the Crowdbotics application builder to instantly scaffold and deploy a React Native app.**](https://app.crowdbotics.com/dashboard/?utm_campaign=cb-medium&utm_source=blog-post&utm_medium=Medium&utm_content=react-native)\n\n### USEFUL OPEN SOURCE REACT NATIVE PACKAGES\n\n### lottie-react-native\n\nLottie is a mobile library for Android and iOS that parses Adobe After Effects animations exported as JSON with `bodymovin` and renders them natively on mobile. With over 10k+ stars, this npm module helps you use community/custom build animations in your React Native application.\n\n[**react-native-community/lottie-react-native**](https://github.com/react-native-community/lottie-react-native)\n\n### react-native-vector-icons\n\n`react-native-vector-icons` is the go to library if you are considering to use customizable icons with support for NavBar/TabBar, image source and full styling. This npm module bundles famous icon libraries like:\n\n- FontAwesome\n- IonIcons\n- EvilIcons\n- AntDesign\n- MaterialIcons\n- Octicons\n\nand many more. It is like have best of all the libraries in one place, and you do not have to go through the process of hooking up multiple libraries and then linking them with the React Native app. It also supports animation with React Native’s animation library, `Animated`.\n\n[**oblador/react-native-vector-icons**](https://github.com/oblador/react-native-vector-icons)\n\n### react-native-gifted-chat\n\nChat applications are a huge part of mobile app development. There are scenarios in which either you build complete chat applications or add it as a feature to your existing app. In both cases, this module is out there to help you get started with the UI. This npm module comes with fully customizable components, dates, multiple TextInput options, Redux support and so on.\n\n[**FaridSafi/react-native-gifted-chat**](https://github.com/FaridSafi/react-native-gifted-chat)\n\n### react-native-image-picker\n\nAn essential library for any app with Image upload or Image processing. It supports features like selecting from the gallery, and taking a photo from the camera. Another useful feature in this library that I like is the option to select the quality of an image you want to choose. This feature solves memory issues due to high-resolution images.\n\n[\\*_react-native-community/react-native-image-picker_](https://github.com/react-native-community/react-native-image-picker)\n\n### react-native-progress\n\nShowing progress of loading or any other action is important in an app. This library makes it easy to show progress by supporting 5 different components like Linear progress bar, circular, pie and so on using ReactART.\n\n```js\n\nimport * as Progress from 'react-native-progress';\n\n<Progress.Bar progress={0.3} width={200} />\n<Progress.Pie progress={0.4} size={50} />\n<Progress.Circle size={30} indeterminate={true} />\n<Progress.CircleSnail color={['red', 'green', 'blue']} />\n```\n\n[**oblador/react-native-progress**](https://github.com/oblador/react-native-progress)\n\n### Nativebase\n\nNativeBase is a sleek, ingenious, and dynamic front-end framework to build cross-platform Android and iOS mobile apps using ready-to-use generic components of React Native. What is really great about NativeBase is that you can use shared UI cross-platform components, which will drastically increase your productivity.\n\nIts documentation provides an in-depth specification on each components and customize them. You need a component library like Nativebase while working solo, or quickly prototyping an MVP or if you want to focus on the functionality of your application.\n\n[**GeekyAnts/NativeBase**](https://github.com/GeekyAnts/NativeBase)\n\n### react-navigation\n\nNavigation has been a controversial topic in React Naive community, until `react-navigation` package has started to mature. With version `3` recently launched, this npm module is right now a complete solution provider for managing screens in a React Native application. It offers\n\n- stack navigation\n- tab navigation\n- drawer navigation\n- custom navigation support\n- Redux support for complex applications\n\nIf you want to try it out, here is cool [example app](https://expo.io/@react-navigation/NavigationPlayground) built using it.\n\n[**react-navigation/react-navigation**](https://github.com/react-navigation/react-navigation)\n\n### react-native-navigation\n\nReact Native Navigation provides 100% native platform navigation on both iOS and Android for React Native apps. Developed and maintained by the team at Wix, is the second most commonly used package to support navigation of screens in a React Native app after `react-navigation`.\n\nThe reason this package is often a second preference in the community is because of its set up process. You will have to manually hook this library with iOS build and Android `gradle` every time you want to use it by following a number of steps.\n\n### react-native-languages\n\nA community package, react-native-languages is a library that helps you integrate the i18n-js library in a React Native application to internationalize and localize the application. With that, it has many utility functions that you can leverage.\n\nFor example, to get the current device’s language, you would write the following code.\n\n```js\nimport RNLanguages from 'react-native-languages';\n\n// Get Current device language\nconsole.log('language', RNLanguages.language);\n```\n\n[**react-native-community/react-native-languages**](https://github.com/react-native-community/react-native-languages)\n\n### react-native-billing\n\nThis library is exclusively to be used with React Native and Android. Use this library when you need to add in-app billing to your app for Android devices. The tool has a simple interface and works as a bridge by wrapping anjlab’s `InApp Billing` library. This library is up to date and supports ES6 features like `async/await`.\n\n```js\nimport InAppBilling from \"react-native-billing\";\n\nasync purchase() {\n  try {\n    await InAppBilling.open();\n    const details = await InAppBilling.purchase(\"android.test.purchased\");\n    console.log(\"You purchased: \", details);\n  } catch (err) {\n    console.log(err);\n  } finally {\n    await InAppBilling.close();\n  }\n}\n```\n\n[**idehub/react-native-billing**](https://github.com/idehub/react-native-billing)\n\n### react-native-iap\n\nThis is a react-native link library project for in-app purchase for both Android and iOS platforms. The goal of this project is to have similar experience between the two platforms for in-app-purchase. It has a vast variety of helper functions that you can use. Android as a platform has more functions for in-app-purchase.\n\n[**dooboolab/react-native-iap**](https://github.com/dooboolab/react-native-iap)\n\n### tcomb-form-native\n\nForms can be a lot more complicated than icons or components as they have a lot of different parts and there’s logic involved when it comes to field validation and form submission. With this library, you simplify form processing immensely .\n\nIt has a variety of configuration that is platform specific. Using this library you will be writing a lot less code, get usability and accessibility, and no need to update forms when the domain model changes.\n\n[**gcanti/tcomb-form-native**](https://github.com/gcanti/tcomb-form-native)\n\n### Formik\n\nHandling forms is one of the most important aspect of being a good web developer. Same applies if you are using React Native for developing a mobile application. It is a small library that helps you to create forms in React and facilitates form building. It allows you to get values in and out of a form state, validate and get error messages, and effectively submit forms.\n\n[**jaredpalmer/formik**](https://github.com/jaredpalmer/formik)\n\n### Redux\n\nRedux plays a huge part in React and React Native’s ecosystem when it comes to manage state in an application. Redux helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test.\n\nUsing Redux, you can query, select, insert, and update a record in the database. Redux also has a really useful feature to edit live code. Redux works with any UI layer, and has a large ecosystem of add ons to fit your needs.\n\n[**reduxjs/redux**](https://github.com/reduxjs/redux)\n\n### redux-form\n\nAnother well maintained library for building forms in a React Native application. Along with managing state with Redux, this library allows you to track common form states as focused field, fields in the form, fields that the user has interacted with, field values, and many others.\n\n[**erikras/redux-form**](https://github.com/erikras/redux-form)\n\n### redux-persist\n\nRedux Persist takes your Redux state object and saves it to persisted storage. Then on app launch it retrieves this persisted state and saves it back to redux. Managing user data when locally storing in a mobile device can be hard when data sets become complex. Using React Native API `AsyncStorage` natively can be difficult for large applications.\n\n[**rt2zz/redux-persist**](https://github.com/rt2zz/redux-persist)\n\n### React Native Debugger\n\nReact Native Debugger is standalone application that can be installed on your local machine for debugging a React Native application. As a developer, having a quality debugging environment can lead to be more productive, while helping you track down bugs and creating new features.\n\nAnother advantage of using this standalone application, is that it already includes Redux DevTools by default. So if your application is depending on Redux state management library, with minimum configuration, you can hook up your React Native app.\n\n[**jhen0409/react-native-debugger**](https://github.com/jhen0409/react-native-debugger)\n\n### React Native Firebase\n\nReact Native Firebase is lightweight JavaScript library that helps you connect your React Native app to the native Firebase SDK for both iOS and Android platform. This process aims to mirror the official Firebase SDK as closely as possible.\n\nEven though the official SDK works with React Native, this package allows you to consume device SDKs which don’t exist on the Firebase JS SDK. To consume the official SDK in React Native, you will to opt for the web one. Things like AdMob, Analytics, Cloud Messaging (FCM), Remote Config, Performance Monitoring, Dynamic Links are not available in the official Firebase SDK.\n\n[**invertase/react-native-firebase**](https://github.com/invertase/react-native-firebase)\n\n### Jest\n\nJest is a unit testing framework created by Facebook and released on GitHub. It tests JavaScript code. Jest is a versatile testing tool with the ability to adapt to any JavaScript library or framework. Its advantages include snapshot testing support.\n\n[**Jest · _🃏 Delightful JavaScript Testing_**](https://jestjs.io/)\n\n### Enzyme\n\nEnzyme is a testing tool from [AirbnbEng](https://medium.com/u/ebe93072cafd). It supports shallow, full DOM, and static rendering. Enzyme also offers developers API wrappers that are supposed to make asserting, manipulating, and traversing the React DOM easier. Another great benefit of the tool is that it is compatible with other testing libraries and frameworks including Jest and Mocha.\n\n[**airbnb/enzyme**](https://github.com/airbnb/enzyme)\n\n### Detox\n\nThe most difficult part of automated testing on mobile is the tip of the testing pyramid is E2E.Detox is End to End (_E2E_) testing library for applications written in React Native. It means testing application like a real user, but automatically with code. You will write code and this testing library provides tools to _click through_ the application like a real human user.\n\nFor example, a test for a login screen in Detox as it runs on a device/simulator like an actual user looks like below:\n\n```js\ndescribe('Login flow', () => {\n  it('should login successfully', async () => {\n    await device.reloadReactNative();\n    await expect(element(by.id('email'))).toBeVisible();\n\n    await element(by.id('email')).typeText('john@example.com');\n    await element(by.id('password')).typeText('123456');\n    await element(by.text('Login')).tap();\n\n    await expect(element(by.text('Welcome'))).toBeVisible();\n    await expect(element(by.id('email'))).toNotExist();\n  });\n});\n```\n\n[**wix/Detox**](https://github.com/wix/Detox)\n\n### react-native-mock\n\nThis third-party solution is relatively new. React-native-mock helps developers work with the latest versions of React Native. The library was specifically designed to facilitate testing of React Native apps.\n\n[**RealOrangeOne/react-native-mock**](https://github.com/RealOrangeOne/react-native-mock)\n\n### ESLint\n\nLastly, I leave you with the go to linting library used by almost every JavaScript developer. It is called ESLint. It is a pluggable linting utility for JavaScript and to let programmers discover issues with their JavaScript code before executing it. One great benefit of ESLint is that it gives developers the opportunity to create their own linting rules. I personally prefer to use rules provided by the team at AirBnb with some tweaks of my own.\n\n[**ESLint - Pluggable JavaScript linter**](https://eslint.org/)\n\n### Conclusion\n\nThere are other libraries that modules available for React Native for different purposes. Expect more in future since mobile development is hard when it comes to accessing to different APIs. Libraries such as _axios_ for network calls and _Apollo Client_ to query [GraphQL APIs](https://medium.com/crowdbotics/creating-a-graphql-server-with-nodejs-ef9814a7e0e6) can also be used with React Native, as they are used with React JS. I didn’t think that they are worth mentioning here in detail. I hope the above list provides you ready made solutions to help you build better React Native applications.\n\n[Originally published at Crowdbotics](https://medium.com/crowdbotics/21-useful-open-source-packages-for-react-native-807f65a818a1)\n",
            "url": "https://amanhimself.dev//blog/21-useful-open-source-packages-for-react-native",
            "title": "21 Useful Open Source Packages for React Native",
            "summary": "21 Useful Open Source Packages for React Native",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/3-steps-to-learn-react-native-in-2019",
            "content_html": "---\ntitle: '3 Steps to learn React Native in 2019'\nslug: '3-steps-to-learn-react-native-in-2019'\ndate: '2019-01-04'\ntag: 'react-native'\nthumbnail: '/thumbnails/react.png'\ncanonicalUrl: 'https://medium.com/swlh/3-steps-to-learn-react-native-in-2019-5cdb3d1e1c84'\n---\n\n![cover_image](https://i.imgur.com/LUgTT2v.jpg)\n\nIf you are interested in writing code for mobile applications using JavaScript, you are reading the right post. React Native, developed and maintained by Facebook, is an open source framework to develop cross-platform mobile applications, using the programming language JavaScript.\n\nCurrently in its **0.57 version,** React Native is based on Facebook’s front-end library called ReactJS and share many concepts. If you are familiar with React, kudos to you! You have crossed the first hurdle. Coming from front-end development background, React uses a virtual DOM which acts as a shadow to real DOM available. When an element changes, that change is reflected on the real DOM by Virtual DOM using a node that corresponds to each element.\n\nHowever, in React Native, there is no DOM rather than Native Components which are provided by platforms such as iOS and Android. There are no web views here. React Native has an instance of [**JavaScriptCore**](https://facebook.github.io/react-native/docs/javascript-environment.html) to execute JS code when an application starts. React Native uses RCTBridgeModule to make a connection between native code and JavaScript code. It is currently being used by Facebook, Instagram, Uber, Wix, Tesla and many more.\n\nHere is what I think you can do to advance with React Native development.\n\n## Start with basics\n\nThis article just provides you with an overview of what inside the React Native app development process and how things work behind the scenes, briefly. I often come across (especially through [_#100DaysOfCode_](https://twitter.com/_100DaysOfCOde) campaign) developers who struggle to learn a new framework with little no background in specific the programming language. My advice, before you leap to make gigantic projects, start with the basics. Learn the concepts as each specific component to the curve, make sure to apply them as much as you can and build small things.\n\nFor example, learn how to use `FlatList` component. Try creating a list with your own dataset or find a mock/fake data set on the internet and try to build a small app out of it. Always remember the feeling you got from creating your first _Hello World_ program. Do you remember that sense of accomplishment?\n\nTake small steps, build small things at first before dip your toes deep in the complexity of state management libraries such as Redux and Mobx, or persisting data, using third party APIs, using TypeScript or Flow, and so on.\n\nThese are just tools, you do not need to know them on day one (_but I am not saying you have to never learn about them. The keyword here is that they are TOOLS_). If you are new to JavaScript, make sure you are clear with the basic ES6 features such as classes, arrow functions etc. Then, you must go through the basic ReactJS concepts such as props, state, and stateless components in general.\n\nIn summary, start by familiarizing yourself with:\n\n- ES6 Features\n- ReactJS Components API and LifeCycle methods\n- Setting up a development environment for React Native\n- Flexbox\n\n## Advance your way\n\nOnce you have basic concepts clear in your mind and have played around a bit to get some amount of hands-on experience, it is time to advance further. Start building bigger apps that work or behave like a real application and interact with real-time data. Here is a list of things you can learn to advance in your journey.\n\n- Offline data storage with `AsyncStorage`\n- Working with third-party APIs\n- Maps\n- Splash Screens\n- Navigation\n- Redux (for state management)\n- Redux Saga and Persist\n- Tests and TDD\n- Push notifications\n- UI Animations\n- Build and publish your app\n- Continuous Delivery or CI\n\nDo note that, these are just broad topics to get you started. There are many other things you will learn along the way. Don’t get overwhelmed by that.\n\n## Personal Challenges: What do you want out of it?\n\nMaybe you to become professional a React Native developer and work in an organization that uses this tech framework or maybe you want to build apps for your clients/customers. Setting your own personal challenges in the way is a great way to accomplish things and learn.\n\nMake a commitment to yourself and work on it. Find apps on your phone or on stores that you want to clone or add an extra feature as a functionality, or learn about the user interface.\n\nDo not get overwhelmed by the number of mistakes you do or the errors you get. Getting frustrated and ranting/complaining about it over the internet all day is easy but understand this is that, it will not solve your problems or make you a better developer. All of this is a part of your journey. Keep reminding yourself that.\n\n## Conclusion\n\nIn simple words, React Native brings the React to mobile app development. Its goal isn’t to write the code once and run it on any platform. The main goal here is to learn once and write-anywhere. An important distinction to make.\n\n[Originally published at The Startup](https://medium.com/swlh/3-steps-to-learn-react-native-in-2019-5cdb3d1e1c84)\n",
            "url": "https://amanhimself.dev//blog/3-steps-to-learn-react-native-in-2019",
            "title": "3 Steps to learn React Native in 2019",
            "summary": "3 Steps to learn React Native in 2019",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/getting-started-with-react-native-in-2019-build-your-first-app",
            "content_html": "---\ntitle: 'Getting Started with React Native in 2019 - Build Your First App'\n\nslug: 'getting-started-with-react-native-in-2019-build-your-first-app'\ndate: '2019-01-04'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://levelup.gitconnected.com/getting-started-with-react-native-in-2019-build-your-first-app-a41ebc0617e2'\n---\n\n![cover](https://i.imgur.com/p0FiCt8.jpg)\n\nWe live in the world of a variety of mobile devices majorly dominated by two platforms, iOS, and Android. It is a two-horse race and I am sure we can all agree on that. Building a mobile application is not an easy task though.\n\nFor iOS, you write code using Objective-C or Swift and for Android, you will find yourself using Java. Apart from different programming languages used to create a mobile that can run on each of the two platforms, the toolchains are entirely different too for both of these mobile platforms.\n\nMany modern-day developers use a specific set of technology that is used to build web applications: HTML, CSS, and JavaScript. There are different frameworks that fall under the category commonly known as Hybrid applications. You can use almost one set of source code for developing the application for both iOS and Android platforms.\n\nIn recent years, hybrid frameworks have evolved coming from web view to use native APIs. This cross-platform approach of developing a mobile application comes with its own pros and cons. Pros such as being less-time consuming and cost-effective and cons include performance issues.\n\nOne great option that falls under the umbrella of cross-platform development is React Native. Developed and used by Facebook as well others such as Tesla, Walmart, Uber Eats, Instagram, Discord, Wix and so on. React Native is based on Facebook’s web library ReactJS.\n\n### What are you going to learn?\n\nIn this tutorial, you will learn the following things:\n\n- What is React Native?\n- Setting up the Development Environment\n- Use React Native CLI\n- Run a React Native App\n- What is App.js?\n- Hot Reloading\n- `AppRegistry`\n- Build your first React Native App\n- Learn about different UI components\n- `View` Component\n- `StyleSheet` Object\n- `Text` Component\n- Create a list with `FlatList`\n- Learning Path for React Native\n\n### What is React Native?\n\nIn a nutshell, React Native allows you to build mobile applications that look, feel and perform much more like native applications. It uses the same fundamental UI building blocks as regular iOS and Android apps. You just put those building blocks together using JavaScript and React. Good thing for developers is that they can use almost the same concepts that are being used for building web applications.\n\nIf you are familiar with Reactjs or come from front-end development background, React uses a virtual DOM which acts as a shadow to real DOM available. When an element changes, that change is reflected on the real DOM by Virtual DOM using a node that corresponds to each element.\n\nHowever, in React Native, there is no DOM rather than Native Components which are provided by platforms such as iOS and Android. There are no web views here. React Native has an instance of [**JavaScriptCore**](https://facebook.github.io/react-native/docs/javascript-environment.html) to execute JS code when an application starts. React Native uses RCTBridgeModule to make a connection between native code and JavaScript code.\n\nIn simple words, React Native brings the React to mobile app development. Its goal isn’t to write the code once and run it on any platform. The main goal here is to learn once and write-anywhere. An important distinction to make. React Native is still relatively new, as at the time of writing this post, it is in its version `0.57`.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*Ea-6Srtp9ykLmHNp5y-4fQ.png' />\n\n### Pre-requisites: Setting Up Development Environment\n\nTo dive deeply in React Native’s ecosystem, we need to install a few things first to get started. Let us go through one of them.\n\n#### Nodejs & Watchman\n\nReact Native uses Node.js, a JavaScript runtime, to build your JavaScript code. If you do not already have Node.js installed, it’s time to get it from its official website [**here**](https://nodejs.org/en/). I recommend installing LTS (_long-term support_) `10.x.x` version which is also I am using personally.\n\nWatchman is a tool developed by Facebook for watching file changes. It is highly recommended you install it for better performance. For Mac users, You will need the`homebrew` macOS package to install `watchman`: `brew install watchman`.\n\nFor Windows users, there is no `watchman` so you can skip this step but you need to have Nodejs as well as `python2` as React Native's recent version requires it.\n\nLastly, everyone (irrespective of the OS you are using) need to install theJava SE Development Kit (JDK) that can be found [**here**](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html). Make sure the version you install is at least or more than `>= 8`.\n\n#### Native SDKs\n\nFor macOS developers, you can install Xcode which is free to develop iOS applications.\n\nIf you want to develop for Android, setting up its development environment can be a bit tedious if you are new to this. You will be installing [**Android Studio**](https://developer.android.com/studio/index.html) which is a completely free tool to develop Android apps in its native language. You will be installing a list of utilities for this process and then setting path variables for the first time, so I am recommending to go through the exact link [**here**](https://facebook.github.io/react-native/docs/getting-started) which are official setup instructions provided by Facebook.\n\n### React Native CLI\n\nOnce you are done with the development environment setup process and necessary tools, you can take a deep breath right now. We are going to start building our first REACT NATIVE APP. In order to start, we need one more tool. Using `npm` (a package manager, _which you installed using Node.js_) you are now going to install `react-native-cli`. Open your terminal and run the following command.\n\n```shell\nnpm install -g react-native-cli\n```\n\nThis CLI tool is used to scaffold a starter project containing everything you need to build and run a React Native app. `npm` installs this CLI tool as a [**global module**](https://flaviocopes.com/npm-packages-local-global/).\n\n```shell\nreact-native --version\n\n## output\nreact-native-cli: 2.0.1\n```\n\nTo verify that the installation process was a success, you can run the command below and it will output you the current version of the CLI tool.\n\n### Running a React Native App\n\nTo get started we need to create a project directory using the CLI tool just installed. Open up your terminal and run the following.\n\n```shell\nreact-native init EmojiDictRN\n```\n\nYou can name it whatever you want. Once the process is done, traverse inside the project directory. You will be welcomed by a set of files like below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*Q0M1ohq6xC1H7VXDTBpEiA.png' />\n\nFrom above let us now take a brief look at the files or directories that are essential for us to understand:\n\n- **App.js** the first file in any React Native app that is the entry point of the app development process. Whatever you write inside this file, it will get displayed on the mobile device.\n- **node_modules/** is a folder which contains all the dependencies (_or packages_) that are used to develop and run this application.\n- **index.js** is the entry point to trigger the app on a device or simulator\n- **ios** is the folder containing an Xcode project and the code required to bootstrap this app for iOS devices\n- **android** is the folder containing android related code to bootstrap this app for Android devices\n- **package.json** where every dependency installed gets listed\n\nYou can ignore the other files as of now.\n\n### Running the Application\n\nThe `react-native-cli` tool comes with some default snippets of code. To see it in action, you will have to run the application using a terminal. I am going to use an iOS simulator and an Android emulator for this purpose. Windows developers can ignore the iOS part.\n\n```shell\nnpm start\n```\n\nDo note that, we have not made any changes in the source code of the application. To run the app, we need to trigger the below command first.\n\nThis will start the metro bundler to watch for any file changes in a `.js` file in your project. Make sure this command is running in a separate terminal window or a tab when you are building your project for `iOS` or `Android`.\n\n#### Running on iOS\n\nTo run the app with whatever current content it has on an iOS simulator, you can run the following command below in the second terminal window.\n\n```shell\nreact-native run-ios\n```\n\nThis command builds your app and starts it on iOS simulator. This process consumes some good amount of time when building the necessary iOS files for the first time for any React Native app. It will also open up a simulator device for you like below when the process is done.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*DAShIjBe_a2yNNawkC6cNw.png' />\n\nThis iOS simulator is the default one with current Xcode version you have. However, you can run any sim device by adding a flag. By running the command:`xcrun simctl list devices` you can check out which devices you have available as simulators.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*VeZj8AI0mA_LMyEqGw9lUg.png' />\n\nThe last `Booted` or `Shutdown` against each listed device in above image tells you which devices are currently running. To build and run for another device, you can run the following command.\n\n```shell\nreact-native run-ios --simulator=\"iPhone 8 Plus\"\n```\n\nwhere `\"iPhone 8 Plus\"` is the value that you can look up through the last command I mentioned.\n\n#### Running on Android\n\nYou will need an Android device to run your React Native Android app. This can be either a physical Android device or more commonly, you can use an Android Virtual Device which allows you to emulate an Android device on your computer.\n\nIf you wish to run it on a real device, you can follow the complete set of instructions [**here**](https://facebook.github.io/react-native/docs/running-on-device)**.** For running on an Android emulator, open the Android Studio, and choose the option to ‘open an existing project/folder’. Once the project gets opened and is indexed, you will see an icon looking exactly like below image in the right corner.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*-qXxDE18Dz9uQp5J76vnUg.png' />\n\nThis is an option for enabling an Android Virtual Device (_AVD_). If you have just installed Android Studio, you will likely need to create a new AVD. After the virtual device is running, you can run the command `react-native run-android` from your terminal window to open up the application.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*0LUZsqEWNoQVwZVvQjtzbg.png' />\n\n### How to Modify App.js?\n\nTo see the app in action on both the devices, let us modify `App.js` with the code below.\n\n```js\nimport React, { Component } from 'react';\nimport { Platform, StyleSheet, Text, View } from 'react-native';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.instructions}>Hello World!</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF'\n  },\n  instructions: {\n    textAlign: 'center',\n    color: '#333333',\n    marginBottom: 5\n  }\n});\n```\n\nThe result of the following modification can be seen if you press `Cmd + R` on iOS and double `R` on Android.\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*r0z57xfMMVAnhVboDFyghw.png' />\n\n### Enable Hot Reloading\n\nHot Reloading feature in react native application helps to display any updates occur in UI, whenever you save anything in react native app-code. On enabling this feature, you do not have to press `Cmd + R` on iOS and double `R` on Android again for seeing the changes on the UI you just made.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*uZXfYtm9pPH8FX1ZFRzvyQ.png' />\n\nTo enable this feature, all you have to do is press `Ctrl + M/Cmd + M` depending on your OS, and select **Enable Hot Reloading** from the popup menu that appears as shown above.\n\n### What is AppRegistry?\n\nThe file that renders this App component is `index.js` in the root directory which has the following code.\n\n```js\n/** @format */\n\nimport { AppRegistry } from 'react-native';\nimport App from './App';\nimport { name as appName } from './app.json';\n\nAppRegistry.registerComponent(appName, () => App);\n```\n\n`AppRegistry` is the entry point to run a React Native application. App component or any other root component in the app should register by using `AppRegistry.registerComponent` such that the native system can load the bundle of the app and run the app by starting `AppRegistry.runApplication`.\n\nYou can read more about `AppRegistry` in-detail [**here**](https://facebook.github.io/react-native/docs/appregistry.html).\n\n### Baby Steps: First React Native App\n\nIn this section, you are going to build your first React Native app. To get started, we have already generated a React Native project using the cli tool. The only thing now you have to understand is _what are components?_\n\n**Components** are the visual elements that you see on the screen in a React Native app. There are several components made available for you to use by the React Native core. To understand this better, we can categorize these components in six broad categories:\n\n- Basic or Core components such as `View`, `Text`, `Image`, `ScrollView`, `TextInput`, `StyleSheet`\n- List components such as `FlatList` and `SectionList`\n- User Interface or Form Control components such as `Picker`, `Slider`, `Button`, `Switch`\n- iOS Specific components such as `ActionSheetIOS`, `SegmentedControlIOS`, `AlertIOS`, `PushNotificationsIOS`\n- Android Specific components such as `DatePickerAndroid`, `TimePickerAndroid`, `ViewPagerAndroid`, `ToastAndroid`, `PermissionsAndroid`\n- Other/Miscellaneous components such as `Alert`, `Animated`, `CameraRoll`, `Dimensions`, `Clipboard`, `StatusBar`, `Linking`, `Keyboard`, `ActivityIndicator`, `WebView`, and `Modal`\n\nGetting in detail about each of them is out of the scope of this article and will be a tedious way to learn things initially. Instead, we are going to use a project-based approach to learn your way through them. There are many more components and APIs available in React Native core that you can look at the [**official documentation**](http://facebook.github.io/react-native/docs/components-and-apis#user-interface) and from time to time you will need to.\n\n### What are we building?\n\nYou are going to build a small application to just familiarize yourself with basic components. The app is shown in the image below is going to be the end result.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*dKe0pfmB74jfoGTVp9nNmg.png' />\n\nThe above is nothing but a list of text coming directly from the component’s state. Create a new `src/components` directory in the root of the project and inside `components/` create a new file called `EmojiDict.js` with the following snippet of code.\n\n```js\nimport React, { Component } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nclass EmojiDict extends Component {\n  state = {\n    '😃': '😃 Smiley',\n    '🚀': '🚀 Rocket',\n    '⚛️': '⚛️ Atom Symbol'\n  };\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text>{this.state['😃']}</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\n\nexport default EmojiDict;\n```\n\nAccordingly, we have to modify `App.js` file in order to display the result of this component.\n\n```js\nimport React, { Component } from 'react';\n\nimport EmojiDict from './src/components/EmojiDict';\n\nexport default class App extends Component {\n  render() {\n    return <EmojiDict />;\n  }\n}\n```\n\nNow if you take a look at the simulator screen you will see the following result.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*p8x7i3e3jIUvn-KpntKwng.png' />\n\n_What is going on?_ Take a look at the `EmojiDict` file first. We are importing basic components from React Native. We start by declaring a `View` component, which is the basic building block in React Native file. It maps to fundamental native iOS (`UIView`) and Android (`View`) components, hence the name. You can think this component as mere `div` element from HTML where all other elements are placed inside. Hence, a `View` component can contain nested components.\n\n`View` component puts a container element that supports layout styling with `flexbox` and other styles through CSS. We are providing styles to View via `StyleSheet`. Hence, you can say that `View` components are primarily used for styling and layout of children elements.\n\n`StyleSheet` in React Native provides an API to create styles inside the component file. It takes a JavaScript object as it does above, and returns a new `Stylesheet` object from it. There are no _classes_ or _ids_ in React Native like in web development. To create a new style object you use `StyleSheet.create()` method.\n\nThe way we have defined styles by creating an object is the preferred way. Not only it helps you organize styles and keep them separate, but these styles when defined in this manner are also sent through the native render bridge only once.\n\nThe `Text` component is in many ways just like the `View` component, except that it is specifically available to display text. Also, like the `View` component, it supports styling. Right now we are using `flexbox` to style and center the anything inside the `View` component. `Flexbox` is an algorithm to specify the layout for a component for its children to follow the same pattern. Suppose if we modify it as below:\n\n```js\n\nrender() {\n\t\treturn (\n\t\t\t<View style={styles.container}>\n\t\t\t\t<Text>{this.state['😃']}</Text>\n\t\t\t\t<Text>{this.state['🚀']}</Text>\n\t\t\t</View>\n\t\t);\n}\n```\n\nYou will get the following result on refreshing the simulator.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*DqJex2fRcRlI9FSuouaD8g.png' />\n\nThe way we are creating a list of emojis isn’t a pragmatic approach to handle data whether it comes from a third party API or manage by the component’s state and render it as a list as we do above. Let us convert our simple view into `FlatList`.\n\n```js\n<FlatList\n  contentContainerStyle={styles.container}\n  data={[\n    { key: '😃', value: '😃 Smiley' },\n    { key: '🚀', value: '🚀 Rocket' },\n    { key: '⚛️', value: '⚛️ Atom Symbol' }\n  ]}\n  renderItem={({ item }) => <Text>{item.value}</Text>}\n/>\n```\n\n`FlatList` is cross-platform, by default vertical way to display a list of data items. It requires two props: `data` and `renderItem`. `data` is the source of information for the list. `renderItem` takes one item from the source and returns a formatted component to render. Styles that can be applied to a `FlatList` component is done by the prop `contentContainerStyle` that accepts the value of `Stylesheet` object. What we have above is the simplest version of flatlist. Moreover, FlatList in React Native has support to pull to refresh interaction and horizontal display mode.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*dKe0pfmB74jfoGTVp9nNmg.png' />\n\nThis completes our first React Native App. I am sure, you might have learned a thing or two. It is a just a basic component that renders a list of items.\n\n### More on Learning React Native\n\nWith lack of up to date resources or not many resources you will find on React Native concretely, I urge to stick with you learn by doing process and get as much as hands on experience in this field as you can. I did struggle when I started learning React Native, coming from a Web Development background.\n\nHere is what I think you can do to advance with React Native development.\n\n### Start with basics\n\nThis article just provides you with an overview of what inside the React Native app development process and how things work behind the scenes, briefly. I often come across (especially through [_#100DaysOfCode_](https://twitter.com/_100DaysOfCOde) campaign) developers who struggle to learn a new framework with little no background in specific the programming language. My advice, before you leap to make gigantic projects, start with the basics. Learn the concepts as each specific component to the curve, make sure to apply them as much as you can and build small things.\n\nFor example, today learned about using `FlatList` component in this article. Try creating a list with your own dataset or find a mock/fake data set on the internet and try to build a small app out of it. Always remember the feeling you got from creating your first _Hello World_ program. Do you remember that sense of accomplishment?\n\nTake small steps, build small things at first before dip your toes deep in the complexity of state management libraries such as Redux and Mobx, or persisting data, using third party APIs, using TypeScript or Flow, and so on. These are just tools, you do not need to know them on day one (_but I am not saying you have to never learn about them. The keyword here is that they are TOOLS_). If you are new to JavaScript, make sure you are clear with the basic ES6 features such as classes, arrow functions etc. Then, you must go through the basic ReactJS concepts such as props, state, and stateless components in general.\n\nIn summary, take a look at:\n\n- ES6 Features\n- ReactJS Components API\n- Setting up a development environment for React Native\n- Flexbox\n\n### Advance your way\n\nOnce you have basic concepts clear in your mind and have played around a bit to get some amount of hands-on experience, it is time to advance further. Start building bigger apps that work or behave like a real application and interact with real-time data. Here is a list of things you can learn to advance in your journey.\n\n- Offline data storage with `AsyncStorage`\n- Working with third-party APIs\n- Maps\n- Splash Screens\n- Navigation\n- Redux (for state management)\n- Redux Saga and Persist\n- Tests and TDD\n- Push notifications\n- UI Animations\n- Build and publish your app\n- Continuous Delivery or CI\n\nDo note that, these are just broad topics to get you started. There are many other things you will learn along the way. Don’t get overwhelmed by that.\n\n### Personal Challenges: What do you want out of it?\n\nMaybe you to become professional a React Native developer and work in an organization that uses this tech framework or maybe you want to build apps for your clients/customers. Setting your own personal challenges in the way is a great way to learn. Make a commitment to yourself and work on it. Find apps on your phone or on stores that you want to clone or add an extra feature as a functionality, or learn about the user interface.\n\nDo not get overwhelmed by the number of mistakes you do or the errors you get. Getting frustrated and ranting/complaining about it over the internet all day is easy but understand this is that, it will not solve your problems or make you a better developer. All of this is a part of your journey. Keep reminding yourself that.\n\n[Originally published at Level up coding](https://levelup.gitconnected.com/getting-started-with-react-native-in-2019-build-your-first-app-a41ebc0617e2)\n",
            "url": "https://amanhimself.dev//blog/getting-started-with-react-native-in-2019-build-your-first-app",
            "title": "Getting Started with React Native in 2019 - Build Your First App",
            "summary": "Getting Started with React Native in 2019 - Build Your First App",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/my-top-tutorials-in-web-development-and-react-native-in-2018",
            "content_html": "---\ntitle: 'My Top Tutorials in Web Development and React Native in 2018'\ndate: '2018-12-31'\nslug: 'my-top-tutorials-in-web-development-and-react-native-2018'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://medium.com/hackernoon/my-top-tutorials-in-web-development-and-react-native-in-2018-627da9e0481f'\n---\n\nWhen the year 2018 started I wasn’t sure where am I headed to. I had recently started freelancing as a developer, paying bills for myself was my highest priority after leaving traditional 9 to 6(and the countless number of hours spent on commuting). One thing I had realised previously was that an expression of freedom was loving the work you do at your terms. There is no linear virgule to the path of success and financial independency.\n\nDevoting rest of my time and energy to share my knowledge in form of articles through this blog was not on my mind at all then. I used to write long or short tutorials explaining one framework from point of view of a beginner or the trouble I had getting started with a new framework, just for the sake that fellow developers won’t have to spend endless hours Googling about a certain library or the topic that they need to use or learn, for a bigger picture they are working on. I still follow this pattern closely when writing a new article today. My motive is to add value rather than take reader’s time with no end result for either of us.\n\nForward few months, when people started reading and appreciating my writing by expressing gratitude in any way possible, some of my content helped them, there was a new sense of responsibility and a new goal that I had to accomplish.\n\nI have had previous experience in blogging and writing. Running a book blog for past five years, published in some poetry magazines, published by own ebook on Book Blogging and not consistently running a tech blog on Medium for more than a year at the time.\n\nI can say, in these 365 days I have learned a lot about marketing one self shamelessly, promoting content in a manner that doesn’t enforce, identifying the constructive criticism, making connections, gettinh paid to write and in the end some personal things about myself.\n\nAchieving half a million views on the written content soon became a target goal for me and I can say, I did accomplish it blissfully.\n\nCreating content with the thought glued in your consciousness that you have to provide value to the reader is a goal hard to accomplish but if done in tiniest bits, not impossible.\n\n> It is good to have an end to journey toward; but it is the journey that matters, in the end.  \n> ― Ursula K. Le Guin\n\nThus, in below, I am summarising a list of articles that I think will help you achieve your goal or fill that gap in the year 2019 if your goal in the new is to become a developer 🎉.\n\n### Web Development\n\nJavascript is often thought of a web programming language but Javascript, and javascript frameworks such as NodeJS, have many applications apart from just web apps including desktop applications, mobile applications, embedded systems, and back-end development.\n\nIf you are in web development (as I am), and you also want to explore new applications in machine learning, you may be wondering, ‘do I have to wander spend time learning a whole new programming language to explore machine learning?’ No, in fact. Machine learning concepts can be explored with many different programming language and frameworks, including NodeJS.\n\n[**Top NodeJS Libraries and Tools For Machine Learning**](https://medium.com/crowdbotics/top-nodejs-libraries-and-tools-for-machine-learning-ae0c106c9a69)\n\nGet familiar with function-as-a-service (FaaS), deploy a demo on a AWS Lambda serverless computing platform, hook up a MongoDB database-as-a-service to a serverless REST API.\n\n[**How to Build a Serverless Backend with AWS Lambda and Nodejs**](https://medium.com/crowdbotics/how-to-build-a-serverless-backend-with-aws-lambda-and-nodejs-e0d1257086b4)\n\nHello World! with GraphQL — In this tutorial, you will learn how to build a GraphQL server with Nodejs and Express using Apollo Server library 2.0.\n\n[**Creating a GraphQL server with NodeJS**](https://medium.com/crowdbotics/creating-a-graphql-server-with-nodejs-ef9814a7e0e6)\n\nIn the article below, I will describe how to take an existing Web Application that is build using MongoDB, ExpressJS, [Node.js](http://crowdbotics.com/build/node-js?utm_source=medium&utm_campaign=nodeh&utm_medium=node&utm_content=mern), and [React](https://www.crowdbotics.com/build/react) (often called as MERN stack) on a deployment service like Heroku. If you have an existing application built using the same tech stack, you can definitely skip the process in which I show you to quickly build a web application and go straight on to the deployment part.\n\n[**Deploy a MERN stack app on Heroku**](https://medium.com/crowdbotics/deploy-a-mern-stack-app-on-heroku-b0c255744a70)\n\nAnother MERN related in-detail article where you will learn to create a JWT powered login/signup system with glimpse into using Material UI library with ReactJS.\n\n[**Building a MERN Stack App With Material UI**](https://medium.com/crowdbotics/building-a-mern-stack-app-with-material-ui-33ff8ca4da01)\n\n### React Native\n\nBuilding a React or React Native application in the real world can become complex if there is not a proper way to handle data. If at any point the data is not managed, things will get out of hand. Redux is an important part of the React Native ecosystem. If your world revolves around JavaScript, you’ve probably heard about Redux. Before reading the rest of the tutorial and going further, just try to remember that you are only learning about Redux because it will make things easier for you, and not more difficult.\n\n[**How to integrate Redux into your application with React Native and Expo**](https://medium.freecodecamp.org/how-to-integrate-redux-into-your-application-with-react-native-and-expo-ec37c9ca6033)\n\nReact Native is a great framework to develop cross-platform mobile applications for the platforms iOS and Android. In this, I’m going to take you through the process of building a “minimalist” weather application using React Native by fetching real-time data\n\n[**Building a Minimalist Weather App with React Native and Expo**](https://blog.expo.io/building-a-minimalist-weather-app-with-react-native-and-expo-fe7066e02c09)\n\nMy most acclaimed article so far in 2018 is the one below. It guides how to get started using React Native and tries to clear the misconceptions that I have found in somewhere about React Native using DOM and is a hybrid app development framework. It is not.\n\n[**React Native: How to Setup Your First App**](https://hackernoon.com/react-native-how-to-setup-your-first-app-a36c450a8a2f)\n\nIn 2019, I look forward to add more value to the tech community and help fellow developers achieve their goals and may be reach another half million views.\n\n[Originally published at Hackernoon](https://medium.com/hackernoon/my-top-tutorials-in-web-development-and-react-native-in-2018-627da9e0481f)\n",
            "url": "https://amanhimself.dev//blog/my-top-tutorials-in-web-development-and-react-native-in-2018",
            "title": "My Top Tutorials in Web Development and React Native in 2018",
            "summary": "My Top Tutorials in Web Development and React Native in 2018",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/top-nodejs-libraries-and-tools-for-machine-learning",
            "content_html": "---\ntitle: 'Top Node.js Libraries and Tools For Machine Learning'\nslug: 'top-nodejs-libraries-and-tools-for-machine-learning'\ndate: '2018-12-19'\nthumbnail: '/thumbnails/node.png'\ntag: 'nodejs'\ncanonicalUrl: 'https://medium.com/crowdbotics/top-nodejs-libraries-and-tools-for-machine-learning-ae0c106c9a69'\n---\n\n> [Originally published at Crowdbotics](https://medium.com/crowdbotics/top-nodejs-libraries-and-tools-for-machine-learning-ae0c106c9a69)\n\nJavascript is often thought of a web programming language but Javascript, and javascript frameworks such as NodeJS, have many applications apart from just web apps including desktop applications, mobile applications, embedded systems, and back-end development.\n\nIf you are in web development (as I am), and you also want to explore new applications in machine learning (as I do), you may be wondering, ‘do I have to wander spend time learning a whole new programming language to explore machine learning?’ No, in fact. Machine learning concepts can be explored with many different programming language and frameworks, including NodeJS.\n\nIn this article, I review some of the top machine learning libraries for NodeJS to help you get started.\n\n## ml.js\n\nThis library is a collection of tools developed by the [mljs](https://github.com/mljs) organization. It includes a vast list of libraries under different categories such as unsupervised learning, supervised learning, artificial neural networks, regression, optimization, statistics, data processing, and math utilities.\n\nMost of the libraries that are included in ml.js tend to be used in a web browser, but if you are looking to work with them in Node.js environment, you will find an npm package.\n\nCheck out some examples that use utilities from ml.js:\n\n- [Naive-Bayes Classification](https://github.com/mljs/naive-bayes)\n\nEach tool utility is available as a separate module so you do not have to install all of them at once, if there is no need too.\n\n```shell\nnpm install ml-naivebayes\n```\n\nAfter installing the package, you can directly import your JavaScript project. ml.js even supports ES6 modules.\n\n```js\nimport { GaussianNB } from 'ml-naivebayes';\n\nvar model = new GaussianNB();\nmodel.train(Xtrain, Ytrain);\n\nvar predictions = model.predict(Xtest);\n```\n\n- [Finding a minimum value in an array](https://github.com/mljs/array/tree/master/packages/array-min)\n\nAll utilities that helps in transform and computing values using arrays are also packaged separately and are listed under `ml-array` which you can find [**here**](https://github.com/mljs/array)**.** For example, let us say you want to get a minimum value of all the inputs provided as an array. To do so, you will first install the utility `ml-array-min` .\n\n```shell\nnpm install --save ml-array-min\n```\n\nThen you directly require it like below.\n\n```js\nimport min from 'ml-array-min';\n\nconst result = min(\\[1, 5, 3, 2, 4\\]); // 1\n```\n\nTo see the vast list of libraries that are included in `ml.js`, visit the link below.\n\n[**mljs/ml**](https://github.com/mljs/ml)\n\n## Brain.js\n\nBrain.js is a library written in JavaScript for [**neural networks**](http://en.wikipedia.org/wiki/Artificial_neural_network) that can be used with Node.js as well as in the browser. You can simply access it and start using it by installing it through [npm](https://www.npmjs.com/package/brainjs). Since it is written in JavaScript, it has support for asynchronous to train network data using `trainAsync()` and support for streams as well.\n\nGenerally, neural networks are considered to be math-heavy sub-domain in machine learning. Brian.js does a great job simplifying the process of creating and training a neural network by utilizing the ease-of-use of JavaScript and by limiting the API to just a few method calls and options.\n\nFor example, to train a network to approximate the [XOR](https://en.wikipedia.org/wiki/Exclusive_or) function (which is one of the standard examples), you would need:\n\n```js\nvar brain = require('brain');\nvar net = new brain.NeuralNetwork();\n\nnet.train(\\[{input: \\[0, 0\\], output: \\[0\\]},\n {input: \\[0, 1\\], output: \\[1\\]},\n {input: \\[1, 0\\], output: \\[1\\]},\n {input: \\[1, 1\\], output: \\[0\\]}\\]);\n\nvar output = net.run(\\[1, 0\\]); _// \\[0.933\\]_\n```\n\nThis code creates a new network (`net`) and `train`s the network using an array of example. It then`run`s the network with an input of `[1, 0]`, which results in `[0.933]` .\n\nThere are various meaningful machine learning applications that use Brain.js. Take a look at this one: [**Cracking Captcha with Neural Networks**](http://codepen.io/birjolaxew/blog/cracking-captchas-with-neural-networks), in which the author uses captcha images for the dataset and uses image processing and Brain.js library to create a neural network that identifies each individual character.\n\nAnother example of Brain.js being used with React Native can be found [**here**](https://github.com/BrainJS/BrainJSReactNative).\n\n[**BrainJS/brain.js**](https://github.com/BrainJS/brain.js)\n\n## Synaptic\n\nSynaptic is another JavaScript neural network for Node.js. It has a few built-in architectures like multilayer perceptrons, multilayer long-short term memory networks (LSTM), liquid state machines or _Hopfield_ networks, and a trainer capable of training different networks. It also works with your browser.\n\nCheck out the example below for predicting a next character in a stream of text based articles from Wikipedia using a long-short term memory.\n\nBrain.js and Synaptic are both written in JavaScript. Surely, there will be similar use cases for Synaptic as the previous one.\n\nI can give you one more reason to choose synaptic over Brain.js. It has more API functionalities than the previous library mentioned in this article. This certainly means Synaptic will have more use cases and also, It is also actively developed.\n\nFor example, you can train and teach a perceptron to learn an XOR:\n\n```js\nvar myPerceptron = new Perceptron(2,3,1);\nvar myTrainer = new Trainer(myPerceptron);\n\nmyTrainer.XOR(); // { error: 0.004998819355993572, iterations: 21871, time: 356 }\n\nmyPerceptron.activate(\\[0,0\\]); // 0.0268581547421616\nmyPerceptron.activate(\\[1,0\\]); // 0.9829673642853368\nmyPerceptron.activate(\\[0,1\\]); // 0.9831714267395621\nmyPerceptron.activate(\\[1,1\\]); // 0.02128894618097928\n```\n\nCheck out common use cases using this machine learning module such as:\n\n- [Solving an XOR](http://caza.la/synaptic/#/xor)\n- [Painting a picture](http://caza.la/synaptic/#/paint-an-image)\n- [Reading from Wikipedia](http://caza.la/synaptic/#/wikipedia)\n\n[**Synaptic - The javascript neural network library**](http://caza.la/synaptic/#/wikipedia)\n\n## Limdu.js\n\nLimdu.js is a machine learning framework for Node.js that supports Binary classification, multi-label classification, feature engineering, online learning and real-time classification. It is currently in alpha state and looking for contributors.\n\nCheck out the example below of how batch learning can be implemented with the help of Limdu.js\n\n```js\nvar limdu = require('limdu');\n\nvar colorClassifier = new limdu.classifiers.NeuralNetwork();\n\ncolorClassifier.trainBatch(\\[\n {input: { r: 0.03, g: 0.7, b: 0.5 }, output: 0}, // black\n {input: { r: 0.16, g: 0.09, b: 0.2 }, output: 1}, // white\n {input: { r: 0.5, g: 0.5, b: 1.0 }, output: 1} // white\n\\]);\n\nconsole.log(colorClassifier.classify({ r: 1, g: 0.4, b: 0 }));\n// 0.99 - almost white\n```\n\nIn the above example, an array as resource is provided to train the batch of key value pairs in the form of input and output.\n\nOther use cases for this library can be found in the link below. Some of them are listed here:\n\n- Serialization: you might want to train a classifier on your home computer, and use it on a remote server. To do this, you should somehow convert the trained classifier to a string, send the string to the remote server, and deserialize it there.\n- Mutli-label classification: In binary classification, you get the output either as `0` or `1` . On multi-label, , the output is a set of zero or more labels.\n\n[**erelsgl/limdu**](https://github.com/erelsgl/limdu)\n\n> [**Try out the Crowdbotics application builder to instantly scaffold and deploy a Node app.**](https://app.crowdbotics.com/accounts/login/?utm_campaign=v1&utm_source=blog-post&utm_medium=Medium&utm_content=app-builder)\n\n## ConvNetJS\n\nThe ConvNetJS JavaScript implementation of neural networks that is developed by a Stanford University PhD. It currently supports common neural network modules, SVM, regression, and the ability train convolutional networks to process images.\n\nIt has [great documentation](http://cs.stanford.edu/people/karpathy/convnetjs/docs.html), as well as [in-browser examples](http://cs.stanford.edu/people/karpathy/convnetjs/demo/mnist.html). Here are some use cases where you can see ConvNetJS in action:\n\n- [Image Painting (Regreesion)](https://cs.stanford.edu/~karpathy/convnetjs/demo/image_regression.html)\n- [Training an Autoencoder on MNIST digits](http://cs.stanford.edu/~karpathy/convnetjs/demo/autoencoder.html)\n- [Speedtest](https://github.com/karpathy/convnetjs/blob/master/demo/speedtest.html)\n\n[**karpathy/convnetjs**](https://github.com/karpathy/convnetjs)\n\n### Stdlib\n\nStdlib is a JavaScript library which can be used to build advanced statistical models and machine learning libraries. It can also be used for plotting and graphics functionality for data visualization and exploratory data analysis. Stdlib supports in the form of different libraries such as linear regression, binary classification, and natural language processing.\n\nThis library is huge when it comes to providing support in the form of tooling. Some of the advantages it posses are :\n\n- It has its own REPL environment with integrated help and examples.\n- Native add-ons for interfacing with BLAS libraries, with pure JavaScript fallbacks.\n- 50+ [sample datasets](https://github.com/stdlib-js/stdlib/tree/develop/lib/node_modules/%40stdlib/datasets) for testing and development.\n- 200+ [assertion utilities](https://github.com/stdlib-js/stdlib/tree/develop/lib/node_modules/%40stdlib/assert) for data validation and feature detection.\n- 200+ general [utilities](https://github.com/stdlib-js/stdlib/tree/develop/lib/node_modules/%40stdlib/utils) for data transformation, functional programming, and asynchronous control flow.\n- Can be bundled using Browserify, Webpack, and other bundlers for use in web browsers.\n\n[**stdlib-js/stdlib**](https://github.com/stdlib-js/stdlib)\n\n## TensorFlow.js\n\n[TensorFlow](https://medium.com/u/b1d410cb9700) is an open-source hardware-accelerated JavaScript library for training and deploying machine learning models. It is one of the most popular libraries out there. You can use flexible and easy to pick APIs to build models from scratch using the low-level JavaScript linear algebra library or the high-level layers API.\n\nYou will find more implementations of TensorFlow rather than any other library mentioned in this article. There is a reason for that. Not only it is actively maintained, it lets you write, train, and deploy your GPU-based DL models all in JavaScript.\n\nCheck out some live use cases for Tensorflow:\n\n- [EMOJI SCAVENGER HUNT](https://emojiscavengerhunt.withgoogle.com/)\n- [WEBCAM CONTROLLER](https://storage.googleapis.com/tfjs-examples/webcam-transfer-learning/dist/index.html)\n- [NODE.JS: PITCH PREDICTION](https://github.com/tensorflow/tfjs-examples/tree/master/baseball-node)\n\nIt has vast variety of tutorials and guides listed officially on its website [**here**](https://js.tensorflow.org/tutorials/) to get you started. It also provide model converters to run pre-existing TensorFlow models right in the browser or under Node.js.\n\n[**tensorflow/tfjs**](https://github.com/tensorflow/tfjs)\n\n## KerasJS\n\nIt is similar to Tensorflow.js in many ways. One of the similarities is that Keras has support for high-level APIs that take care of abstraction provided by backend frameworks. Using Keras, models can be trained in any backend and you can even hook Tensorflow for that.\n\nOffical KerasJS library offers many use cases in different domains such as:\n\n- Basic Convnet for MNIST\n- Convolutional Variational Autoencoder, trained on MNIST\n- Auxiliary Classifier Generative Adversarial Networks (AC-GAN) on MNIST\n- 50-layer Residual Network, trained on ImageNet\n- Inception v3, trained on ImageNet\n- DenseNet-121, trained on ImageNet\n- SqueezeNet v1.1, trained on ImageNet\n- Bidirectional LSTM for IMDB sentiment classification\n\nAnother thing about these use cases are that all of them are written in [**VueJS**](https://vuejs.org/).\n\nWhile much of the use case for this library lies in using directly with a web based browser. However, to use Keras with Node.js, there is one limitation you will have to be aware of: the Node.js models only run in CPU mode.\n\n[**transcranial/keras-js**](https://github.com/transcranial/keras-js)\n\n## NeuroJS\n\nNeuroJS is a JavaScript framework for deep learning. It mainly focuses on reinforcement learning, but can be used for any neural network based task. It contains neat demos to visualize these capabilities, for instance a 2D self-driving car. It also include support for Support for deep-q-networks and actor-critic models.\n\nA complete list of its features are listed below:\n\n- Implements a full-stack neural-network based machine learning framework\n- Extended reinforcement-learning support\n- Support for deep-q-networks and actor-critic models (via deep-deterministic-policy-gradients)\n- Binary import and export of network configurations (weights etc.)\n- High-performance\n\n[**janhuenermann/neurojs**](https://github.com/janhuenermann/neurojs)\n\n## Mind\n\nAnother flexible neural network library for Node.js, it uses matrix implementation to process training data. It does allow you to configure the network topology and use community made plugins. These plugins generally provide a way to configure pre-trained networks that can go straight to making predictions.\n\nTo create a plugin, simply call `download` on your trained mind:\n\n```js\nconst Mind = require('node-mind')\n\nconst mind = Mind()\n .learn(\\[\n { input: \\[0, 0\\], output: \\[ 0 \\] },\n { input: \\[0, 1\\], output: \\[ 1 \\] },\n { input: \\[1, 0\\], output: \\[ 1 \\] },\n { input: \\[1, 1\\], output: \\[ 0 \\] }\n \\]);\n\nconst xor = mind.download()\n```\n\nSteven, the author, has written a 2 part tutorial on building neural networks by using _Mind_ ([Part 1](http://stevenmiller888.github.io/mind-how-to-build-a-neural-network) | [Part 2](http://stevenmiller888.github.io/mind-how-to-build-a-neural-network-part-2)). This series offer a lot more information than simply how to use _Mind_. Also, check out a live [**demo**](http://stevenmiller888.github.io/mindjs.net/) of a movie recommendation engine built with Mind.\n\n[**stevenmiller888/mind**](https://github.com/stevenmiller888/mind)\n\n## Natural\n\nNatural is a library that provides tokenzing, stemming, classification, phonetics, tf-idf, WordNet, and string similarity. In other words, this library provide language facilities that you can use a module in Node.js. This is an interesting project with a variety of use cases.\n\nAll of these utilities are bundled together and provided as a package that can be easily installed via `npm` : `npm install -S natural`\n\nAs it seems this library is still in early stages and most of the algorithms are English-specific but recent community based contributors have implemented support for other language such as Russian and Spanish.\n\n[**NaturalNode/natural**](https://github.com/NaturalNode/natural)\n\n## Compromise\n\nAnother natural language processing that is only `230kb` minified when used in the browser. It is an advantage of using this library as compared to the previously mentioned, Natural.\n\nThis library provides lot of utilities that are basic and effortless, as well as support community made plugins to extend and use pre-configuration that allow adding vocabulary, fixing errors, and setting context quickly.\n\nApart from English, support for languages including German and French is still a _work in progress._\n\n[**spencermountain/compromise**](https://github.com/spencermountain/compromise)\n\n## Conclusion\n\nJavaScript might be not a go-to programming language for machine learning yet, but the many powerful libraries listed here prove that JavaScript is not behind the curve when it come to machine learning applications.\n\nMany machine learning library developers and teams write libraries using using C, LIBSVM, LIBLINEAR, and so on. These can be implemented in Node.js too, using native extensions provided by the Node.js core APIs.\n\nI hope, this post prove useful to you as well for learning and using different libraries mentioned in your Node.js application.\n",
            "url": "https://amanhimself.dev//blog/top-nodejs-libraries-and-tools-for-machine-learning",
            "title": "Top Node.js Libraries and Tools For Machine Learning",
            "summary": "Top Node.js Libraries and Tools For Machine Learning",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/how-to-build-a-rest-api-with-nodejs-and-postgresql",
            "content_html": "---\ntitle: 'How To Build a REST API With Nodejs and PostgreSQL'\ndate: '2018-12-10'\nslug: 'how-to-build-a-rest-api-with-nodejs-and-postgresql'\nthumbnail: '/thumbnails/node.png'\ntag: 'nodejs'\ncanonicalUrl: 'https://medium.com/crowdbotics/how-to-build-a-rest-api-with-nodejs-and-postgresql-828c7ec1e8b1'\n---\n\n![cover](https://i.imgur.com/0ARGlWV.png)\n\n> [Originally published at Crowdbotics](https://medium.com/crowdbotics/how-to-build-a-rest-api-with-nodejs-and-postgresql-828c7ec1e8b1)\n\nOne of the most important aspects of being a Web Developer is to know how to work with APIs.\n\nWhether building your own application as a front-end or back-end engineer, you are going to come across them. APIs are the core communication system behind the different software systems including the server, the database and the client-side of an application.\n\nIn this tutorial, **we are going to create a REST API using** [**Node.js**](https://www.crowdbotics.com/build/node-js/?utm_campaign=v1&utm_source=blog-post&utm_medium=Medium&utm_content=node) **as the back-end server with help from ExpressJS framework, and connect it with** [**PostgreSQL**](https://www.postgresql.org/) **database.**\n\n## Prerequisites\n\nTo get started with this tutorial, knowledge of the following will be beneficial.\n\n- Knowledge of some of the ES6 JavaScript features\n- Node.js and npm installed on your local dev machine\n- PostgreSQL installed\n\nIf you do not have PostgreSQL installed on your local development machine, you can continue reading the next step where I will walk you through step by step installing it. If you already have it, please skip the next step.\n\n> [**Building with Node? Try out the Crowdbotics application builder to instantly scaffold and deploy a Node applications.**](https://app.crowdbotics.com/accounts/login/?utm_campaign=v1&utm_source=blog-post&utm_medium=Medium&utm_content=app-builder)\n\n## Installing PostgreSQL\n\nPostgreSQL is a powerful and an open source object-relational database. If you are on a Windows machine, PostgreSQL offers an [**installer**](https://www.postgresql.org/download/windows/)**.**\n\nOn macOS, I am going to use `Homebrew` to install it. Open a terminal window and type the following command.\n\n```shell\nbrew install postgresql\n```\n\nOnce the installation is complete, to start the PostgreSQL database you will need to run the below command.\n\n```shell\nbrew services start postgresql\n```\n\nAfter starting this service, you will get a success message like below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*oAV6fVIGxkjj5VD4nRCM1g.png' />\n\n**Note**: Later on, when you need to stop the `postresql` service, you can run the command `brew services stop postgresql`.\n\n## Getting Started\n\nCreate an empty directory and run the following set of commands to initialize an Express server.\n\n```shell\n# create a new directory\nmkdir rest-api-nodejs-postgresql\n\n# traverse inside it\ncd rest-api-nodejs-postgresql\n\n# initialize npm\nnpm int --yes\n\n# install express\nnpm install -S express\n```\n\nCreate a `server.js` file which is going to be the entry point for our server. At the top, we are going to require the `express` module and add some configuration middleware functions to handle `req.body` data. To run the server, type the command `node index.js` and go to URL `http://localhost:4000/` in a browser window and you will get the following result.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*hkctm5kI-r_XA_Ksg6fQAw.png' />\n\nWith that working, we need a way to restart the server every time we change something in our code. I am going to use `nodemon` which will automatically watch for changes in any `.js` file we make in our demo app. To install run `npm i -D nodemon` and add the following to your `package.json` file.\n\n```json\n\"scripts\": {\n  \"start\": \"nodemon server.js\"\n}\n```\n\nTo now run the project we need to use `npm run start` command from now on.\n\n## Setting up Sequelize\n\nSince you have installed PostgreSQL database, and the service is up and running, we can move on to the next step that is to make a connection between the ExpressJS server and PostgreSQL. In order to do that, you will need an ORM (_Object Relational Mapper_) to provide us an interface for both the connection and the API. For our demo, we are going to use [**Sequelize**](http://docs.sequelizejs.com/). Let us begin by installing it.\n\n```shell\nnpm install -S sequelize-cli\n```\n\nThe next step is to create a `.sequelizerc` file in the root of our project. This is going to be the configuration file that contains the specific paths required by Sequelize module. It will help us generate folders and files necessary for sequelize to work.\n\n```js\npath = require('path');\n\nmodule.exports = {\n  config: path.resolve('./config', 'config.json'),\n  'models-path': path.resolve('./models'),\n  'seeders-path': path.resolve('./seeders'),\n  'migration-path': path.resolve('./migrations')\n};\n```\n\nNotice that we are making use of `path` module from Node's core API in this process. The `path.resolve()` method resolves a sequence of paths or path segments into an absolute path. If no path segments are passed, path.resolve() will return the absolute path of the current working directory and in our case, the current working directory is going to be the root of our project.\n\nNow, let’s run the initializing command in order to generate the boilerplate code and necessary folders.\n\n```shell\nsequelize init\n```\n\nWhen you run the above command successfully, you will get the following result.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*Nx7Ck_TlesGm552IzEVF5Q.png' />\n\nYou will also find changes made to your project directory like below. New files and folders created from the `.sequelizerc` file.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*OiyN1jTzSb9wPQed6YHd6w.png' />\n\n## Making Database Connection\n\nThe next step is to install the required dependencies in order to create a database connection with a PostgreSQL database and have access to the database for CRUD operations. Fire up your terminal with the following command.\n\n```shell\nnpm install -S pg pg-hstore\n```\n\nThe package `pg` is responsible for creating the database connection with our Express server and `pg-hstore` is for serializing and deserializing JSON data into the PostgreSQL's hstore format. `hstore` data format stores information in key/value pairs within a single PostgreSQL value. To read more about what exactly `hstore` is or how it works, you can pause here and give the [**official documentation**](https://www.postgresql.org/docs/9.3/hstore.html) a glimpse.\n\nThe two files that are being used in order to create the database connection in our project are `config/config.js` and `models/index.js`. The first thing you need to do here is to create a local database instance. From the command line run the below command.\n\n```shell\ncreatedb todos\n```\n\nThe above `createdb` command is made available to us when we install the PostgreSQL database. Now, let us make some modifications to the`config.js` file. We have to manually define the database instance we create. You can even set up the password to protect the database on your local machine. For our demo, I am going to leave this configuration field to `null`. Also, you will have to change the database dialect to `postgres`.\n\n```json\n{\n  \"development\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"todos\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"postgres\"\n  },\n  \"test\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"todos\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"postgres\"\n  },\n  \"production\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"todos\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"postgres\"\n  }\n}\n```\n\nYou can change the aforementioned values for all three: `development`, `test`, and `production` but do make a notice, for now, we are going to use `development`. This is done in `models/index.js`.\n\n```js\n'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst Sequelize = require('sequelize');\nconst basename = path.basename(__filename);\nconst env = process.env.NODE_ENV || 'development';\nconst config = require(__dirname + '/../config/config.json')[env];\nconst db = {};\n\nlet sequelize;\nif (config.use_env_variable) {\n  sequelize = new Sequelize(process.env[config.use_env_variable], config);\n} else {\n  sequelize = new Sequelize(\n    config.database,\n    config.username,\n    config.password,\n    config\n  );\n}\n\nfs.readdirSync(__dirname)\n  .filter(file => {\n    return (\n      file.indexOf('.') !== 0 && file !== basename && file.slice(-3) === '.js'\n    );\n  })\n  .forEach(file => {\n    const model = sequelize['import'](path.join(__dirname, file));\n    db[model.name] = model;\n  });\n\nObject.keys(db).forEach(modelName => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\nmodule.exports = db;\n```\n\nWhen you deploy your application and use an online hosted database instance, you will need to change `const env = process.env.NODE_ENV || 'development';` with the database URL you get. With this, our setup is complete.\n\n## Creating the Database Model\n\nIn this section, you are going to create two models: `Todo` and `TodoItem`. The `Todo` is going to be the list of one or many `TodoItem`. In terms of traditional SQL database, you can say that `Todo` will have a relationship with `TodoItem` of one-to-many. We are going to sequelize command line interface to generate the boilerplate code for our models.\n\n```shell\nsequelize model:create --name Todo --attributes title:string\n```\n\nThe above command will generate a new file inside `models/todo.js`. You can verify that the above command runs successfully with below image.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*Du48q0ycr2EH7UTMQnkjBA.png' />\n\nAs you can see, another file is created in `migrations/` directory. Our concern at this time is the model file itself which looks like this.\n\n```js\n'use strict';\nmodule.exports = (sequelize, DataTypes) => {\n  const Todo = sequelize.define(\n    'Todo',\n    {\n      title: DataTypes.STRING\n    },\n    {}\n  );\n  Todo.associate = function (models) {\n    // associations can be defined here\n  };\n  return Todo;\n};\n```\n\nThis file is exporting a model called `Todo` which has a single attribute `title` as type `string`. Let us now create our next model for `TodoItem`.\n\n```shell\nsequelize model:create --name TodoItem --attributes content:string,complete:boolean\n```\n\nThis is how our second model inside `todoitem.js` looks like. It has two attributes, `content` of datatype `string` and complete of datatype `boolean`.\n\n```js\n'use strict';\nmodule.exports = (sequelize, DataTypes) => {\n  const TodoItem = sequelize.define(\n    'TodoItem',\n    {\n      content: DataTypes.STRING,\n      complete: DataTypes.BOOLEAN\n    },\n    {}\n  );\n  TodoItem.associate = function (models) {\n    // associations can be defined here\n  };\n  return TodoItem;\n};\n```\n\n## Creating the Database Relationship\n\n`Todo` and `TodoItem` are going to have one-to-many-relationship. This done by associating both the models and define a custom class method. Let us modify both the model files to add this and some modification in each attribute for things to work our way. Open `todo.js` file.\n\n```js\n'use strict';\nmodule.exports = (sequelize, DataTypes) => {\n  const Todo = sequelize.define(\n    'Todo',\n    {\n      title: {\n        type: DataTypes.STRING\n      }\n    },\n    {}\n  );\n  Todo.associate = function (models) {\n    // associations can be defined here\n    Todo.hasMany(models.TodoItem, {\n      foreignKey: 'todoId',\n      as: 'todoItems'\n    });\n  };\n  return Todo;\n};\n```\n\nThe first modification you will make is to add `type` to make the attribute easier to read. Next, inside `Todo.associate` class method we are defining a relationship between both our models using `hasMany` method. Notice how it intakes `models` parameter. The `foriegnKey,` in this case, the `id` of each `TodoItem`. The `as` attribute next to `foriegnKey` means that on each query for a todo, it will include the todo items for the above id.\n\nNow, open `todoitem.js`.\n\n```js\n'use strict';\nmodule.exports = (sequelize, DataTypes) => {\n  const TodoItem = sequelize.define(\n    'TodoItem',\n    {\n      content: { type: DataTypes.STRING },\n      complete: { type: DataTypes.BOOLEAN, defaultValue: false }\n    },\n    {}\n  );\n  TodoItem.associate = function (models) {\n    // associations can be defined here\n\n    TodoItem.belongsTo(models.Todo, {\n      foreignKey: 'todoId',\n      onDelete: 'CASCADE'\n    });\n  };\n  return TodoItem;\n};\n```\n\nFirst, you are going to edit both attributes `content` and `complete`. With `complete` a default value is now has been added. Having a default value will allow the database to provide a value for the particular field. The `onDelete` tells the database to delete the whole todo item when from the associated todo it belongs too.\n\n## Running the Migrations\n\nMigrations provide a clearer picture of what our database models going to look like inside. Since you are making changes in the generated attributes and adding fields like in our case, `defaultValue`, you have to edit the migration files for each specific model wherever necessary.\n\nRunning migrations take care of creating the database table and associated column inside the table for us. This is the functionality of each `up` function in both migrations files. There is also a `down` function that is only to run when you need to undo the changes inside the database table for some reason. Open inside `migrations/<date-time>-create-todo.js` file.\n\n```js\n'use strict';\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    return queryInterface.createTable('Todos', {\n      id: {\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n        type: Sequelize.INTEGER\n      },\n      title: {\n        type: Sequelize.STRING\n      },\n      createdAt: {\n        allowNull: false,\n        type: Sequelize.DATE\n      },\n      updatedAt: {\n        allowNull: false,\n        type: Sequelize.DATE\n      }\n    });\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.dropTable('Todos');\n  }\n};\n```\n\nSimilar changes are made inside `migrations/<date-time>-crrate-todo-item.js`.\n\n```js\n'use strict';\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    return queryInterface.createTable('TodoItems', {\n      id: {\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n        type: Sequelize.INTEGER\n      },\n      content: {\n        type: Sequelize.STRING\n      },\n      complete: {\n        type: Sequelize.BOOLEAN,\n        defaultValue: false\n      },\n      createdAt: {\n        allowNull: false,\n        type: Sequelize.DATE\n      },\n      updatedAt: {\n        allowNull: false,\n        type: Sequelize.DATE\n      },\n      todoId: {\n        type: Sequelize.INTEGER,\n        onDelete: 'CASCADE',\n        references: {\n          model: 'Todos',\n          key: 'id',\n          as: 'todoId'\n        }\n      }\n    });\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.dropTable('TodoItems');\n  }\n};\n```\n\nIn the above file, you are also defining the relationship between both the models. The `todoId` field is not going to be generated by Sequelize automatically until we define it above inside `migrations/<date-time>-crrate-todo-item.js`. Let us run the migration command and generate these models in our database. Open your terminal and execute the below command.\n\n```shell\nsequelize db:migrate\n```\n\nYou will get a result like below indicating the success of the above command.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*XT_pFJozGEeytKP22F8Awg.png' />\n\n**Please Note** if the above command throws an error such as `ERROR: role \"root\" does not exist`. This means you do not have a username created already for `postgres`. You will have to run the following command and can follow the official documentation [**here**](https://www.postgresql.org/docs/10/app-createuser.html) for information.\n\n```shell\ncreateuser <username>\n```\n\n## Building the API\n\nCreating models might seem overwhelming if you are doing it the first time but if you have followed closely so far, you will have no problem going through the whole process next time. In this section, we are going to start building our API. You are going to create your first controller for `todos` inside a new directory and file `controllers/todos.js`. We start by requiring the `todos` model.\n\n```js\nconst Todo = require('../models').Todo;\n\nmodule.exports = {\n  create(req, res) {\n    return Todo.create({\n      title: req.body.title\n    })\n      .then(todo => res.status(201).send(todo))\n      .catch(error => res.status(400).send(error));\n  }\n};\n```\n\nThen, we are exporting the controller function inside which `create` function exists. This function will handle the business logic behind the route handler that we are going to define soon for creating a new todo in our database. It accepts two parameters, `req` for incoming requests and `res` to send the response back to an individual incoming request. On success, `.then()` function will trigger and send back the todo item with an HTTP status of `201`. If an error is encountered, `.catch` will return the error with an HTTP status of `400`.\n\nYou can think of each todo we create here as the name of a list of items. Right now we only are defining the business logic of creating the name for each list. Let’s complete this process and test with a REST client to see if everything works. Now we are going to connect this controller to the desired route. Create a new folder called `routes` and inside it a file called `index.js`.\n\n```js\nconst todosController = require('../controllers/todos.js');\n\nmodule.exports = app => {\n  app.get('/api', (req, res) =>\n    res.status(200).send({\n      message: 'Create Your Own Todo Lists API'\n    })\n  );\n\n  app.post('/api/todos', todosController.create);\n};\n```\n\nIn the above file, there are two routes being defined. One is `/api` which displays the welcome message and using `app.post('/api/todos`) where the request for creating a new to-do list can be send. Last step before the testing of this two new routes begin is to hook the routes inside `server.js` file.\n\n```js\nconst express = require('express');\n\nconst app = express();\nconst PORT = 4000;\n\napp.use(express.json());\napp.use(\n  express.urlencoded({\n    extended: true\n  })\n);\n\n// app.get('/', (req, res) => {\n// \tres.json({ message: 'REST API with Node.js, and Postgres API' });\n// });\n\nrequire('./routes/index')(app);\n\napp.listen(PORT, () => {\n  console.log(`Server running at port ${PORT}.`);\n});\n\nmodule.exports = app;\n```\n\nTo see if everything is working, let’s run the server by running `npm run start` and open your favorite REST API client like Postman [Abhinav Asthana](https://medium.com/u/94144f041644) or [Insomnia REST Client](https://medium.com/u/f5d2e9d5d710) to test the new routes. When you run the URL `http://localhost:4000/api` you will get the success message like below.\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*mw85LS3bjGLqyy4-nG1oHg.png' />\n\nNext step is to create a new todo item. Run the URL `http://localhost:4000/api/todos`.\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*eEigERbZHWQLKXEeKEcsxw.png' />\n\nSo far so good. Let us create a new controller and a route that will list all the to-do lists in our database. Open `controllers/todos.js`. Add the below after `create()` function.\n\n```js\n// after create()\nlist(req, res) {\n\t\treturn Todo.all()\n\t\t\t.then(todos => res.status(201).send(todos))\n\t\t\t.catch(error => res.status(400).send(error));\n  }\n```\n\nNow open `routes/index.js` and create the new route for this logic to run.\n\n```js\napp.get('/api/todos', todosController.list);\n```\n\nOpen the REST client and visit the URL `http://localhost:4000/api/todos](http://localhost:4000/api/todos`.\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*70TGcibYiHPQ_jMGbHfEPw.png' />\n\n## API for Todo Items\n\nSince the API is responding to the logic we have written behind it, you can continue to build it. In this section, you are going to create an individual item and add it to a specific list. Start by creating a file `todoitem.js` inside `controllers/`.\n\n```js\nconst TodoItem = require('../models').TodoItem;\n\nmodule.exports = {\n  create(req, res) {\n    return TodoItem.create({\n      content: req.body.content,\n      todoId: req.params.todoId\n    })\n      .then(todoItem => res.status(201).send(todoItem))\n      .catch(error => res.status(400).send(error));\n  }\n};\n```\n\nNext step is to add the route for it inside `routes/index.js`.\n\n```js\nconst todosController = require('../controllers/todos.js');\nconst todoItemsController = require('../controllers/todoitem.js');\n\nmodule.exports = app => {\n  app.get('/api', (req, res) =>\n    res.status(200).send({\n      message: 'Create Your Own Todo Lists API'\n    })\n  );\n\n  app.post('/api/todos', todosController.create);\n  app.get('/api/todos', todosController.list);\n\n  app.post('/api/todos/:todoId/items', todoItemsController.create);\n};\n```\n\nThe last step is to test this API endpoint. Run the URL `http://localhost:4000/api/todos/2/items`. Do note that the `2` in this URL is the `id` of the list that will associate this todo item to a todo list. From earlier images, you can note that I had three lists with `IDs`: `2`, `9` and `10`. If everything is going right for you, this may differ. You will have `IDs` starting from `1`.\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*6ni8M5l4R3BN7Kz7xUZQtQ.png' />\n\nNow let us modify the `list` function in `controllers/todos.js` such that it returns the todo item along with the list name.\n\n```js\nconst Todo = require('../models').Todo;\nconst TodoItem = require('../models').TodoItem;\n\nmodule.exports = {\n  create(req, res) {\n    return Todo.create({\n      title: req.body.title\n    })\n      .then(todo => res.status(201).send(todo))\n      .catch(error => res.status(400).send(error));\n  },\n  list(req, res) {\n    return Todo.findAll({\n      include: [\n        {\n          model: TodoItem,\n          as: 'todoItems'\n        }\n      ]\n    })\n      .then(todos => res.status(201).send(todos))\n      .catch(error => res.status(400).send(error));\n  }\n};\n```\n\nTo test this, run the URL `http://localhost:4000/api/todos` and you will get similar result like below.\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*06TUB4RzVdfsCoAoTJyHrg.png' />\n\nNotice how the below snippet is added. This is done through the association methods we defined earlier when creating both of our models.\n\n```json\n\"todoItems\": [\n  {\n    \"id\": 3,\n    \"content\": \"buy milk\",\n    \"complete\": false,\n    \"createdAt\": \"2018-12-02T18:06:25.059Z\",\n    \"updatedAt\": \"2018-12-02T18:06:25.059Z\",\n    \"todoId\": 2\n  }\n]\n```\n\n## Deleting Todo Lists\n\nThe last API endpoint we require is to delete a todo list which will further delete all items inside it as `todoItems`. Open `controllers/todos.js`.\n\n```js\ndestroy(req, res) {\n\t\treturn Todo.findById(req.params.todoId)\n\t\t\t.then(todo => {\n\t\t\t\tif (!todo) {\n\t\t\t\t\treturn res.status(400).send({\n\t\t\t\t\t\tmessage: 'Todo List not found'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn todo\n\t\t\t\t\t.destroy()\n\t\t\t\t\tres.status(200).send({ message: 'Todo List deleted Successfully' })\n\t\t\t\t\t.catch(error => res.status(400).send(error));\n\t\t\t})\n\t\t\t.catch(error => res.status(400).send(error));\n  }\n```\n\nAdd the corresponding route inside `routes/index.js`.\n\n```js\napp.delete('/api/todos/:todoId', todosController.destroy);\n```\n\nWhen you run the URL `http://localhost:4000/api/todos/2` with HTTP `DELETE` request it will respond back like below.\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*6xehAdlL-W2HpJMb3ytdCg.png' />\n\nThis can also be verified by running `http://localhost:4000/api/todos`. In response, you will not see the same todo list we just deleted.\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*x5U82BBpx__Cq8FCQZ9PRw.png' />\n\n## Conclusion\n\nThat’s it! In this article, you learned about using PostgreSQL as a database and using ORM tools like Sequelize, and how to migrate data models into database properly. We learned how to connect PostgreSQL database and what the correct configuration to do so. Also, we created a REST API using Express as the back-end server framework. Our REST API can be improved with better error handling and form validation. The possibilities from here are endless. The popularity of the PostgreSQL database among developers is at its peak.\n\n**The complete code for the tutorial at [this Github repository](https://github.com/amandeepmittal/rest-api-node-postgresql)**\n",
            "url": "https://amanhimself.dev//blog/how-to-build-a-rest-api-with-nodejs-and-postgresql",
            "title": "How To Build a REST API With Nodejs and PostgreSQL",
            "summary": "How To Build a REST API With Nodejs and PostgreSQL",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/integrating-firebase-with-react-native",
            "content_html": "---\ntitle: 'Integrating Firebase with React Native'\ndate: '2018-12-05'\nslug: 'integrating-firebase-with-react-native'\nthumbnail: '/thumbnails/react.png'\ntag: 'react'\ncanonicalUrl: 'https://blog.jscrambler.com/integrating-firebase-with-react-native/'\n---\n\n**This post has been updated in 2021. Please visit [this URL](https://blog.jscrambler.com/integrating-firebase-with-react-native/) to view the new post.**\n\nFirebase is a Backend as a Service (_BaaS_) that provides an advantage to mobile developers who use React Native for developing mobile applications. As a React Native developer, by using Firebase you can start building an MVP (minimum viable product), keeping the costs low and prototyping the application pretty fast. In this tutorial, we will be learning how to get started by integrating Firebase with a React Native application. We will also create a small application from scratch with the help of Firebase & React Native to see how they work together.\n\n## Getting Started\n\n[Firebase](https://console.firebase.google.com/?pli=1) is a platform that got acquired by Google and has a healthy and active community. Most users in this community are web and mobile developers as Firebase can help with mobile analytics, push notification, crash reporting and out of the box provides email as well as social authentication.\n\nTo get started, you will need a target mobile OS, whether you choose to go with iOS or Android or both. Please refer to [React Native official documentation](https://facebook.github.io/react-native/docs/getting-started) if you are setting up React Native development environment for the first time. You will need sdk tools and Android Studio especially to setup a developer environment for Android. For iOS, you only need Xcode installed on your macOS. You will also need to have installed:\n\n- [Nodejs](http://nodejs.org) (`>= 8.x.x`) and npm/yarn installed\n- [react-native-cli](https://www.npmjs.com/package/react-native-cli) (`>= 2.0.1`)\n\nReact Native is distributed as two npm packages, `react-native-cli`, and `react-native`. We are going to use the `react-native-cli` to generate an app. Begin by installing `react-native-cli`:\n\n```shell\nnpm install -s react-native-cli\n```\n\nNow, let’s create a new React Native project called “rnFirebaseDemo”:\n\n```shell\nreact-native init rnFirebaseDemo\n```\n\nWhen the above command is done running, traverse into the project directory using `cd rnFirebaseDemo`. Now, let’s check if everything is working correctly and our React Native application has been properly initialized by running one of the following commands:\n\n```shell\n# on macOS\nreact-native run-ios\n\n# For Windows/Unix users\nreact-native run-android\n```\n\nThis command will run the default screen as shown below in an iOS simulator or Android emulator but it will take a few moments since we are running it for the first time.\n\n![ss1](https://i.imgur.com/mBobZpT.png)\n\n## Adding Firebase\n\nTo add Firebase to our existing React Native application, we need to install the dependency.\n\n```shell\nyarn add firebase\n```\n\nWhen we open the project in a code editor, its structure looks like this:\n\n![ss2](https://i.imgur.com/TdKzipp.png)\n\nWe need to make some modifications before we can really start building our app. Create an `src` directory inside the root folder. This is where our app components and screens will live. Further, within the `src` directory, we will create two folders: `screens` and `components`.\n\n![ss3](https://i.imgur.com/N9m3Y83.png)\n\nThe `screen` directory will contain all the UI related components that we need to display to the end user, whereas the `components` folder will contain any other component that will be used or re-used to display the user interface.\n\nLet us create our first screen, Home screen, inside `screens/` with a new file `Home.js`.\n\n```js\nimport React, { Component } from 'react';\nimport { View, Text } from 'react-native';\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <View>\n        <Text>Home Screen</Text>\n      </View>\n    );\n  }\n}\n```\n\nOur next screen is going to be `Add Item`. Create a new file called `AddItem.js`.\n\n```js\nimport React, { Component } from 'react';\nimport { View, Text } from 'react-native';\n\nexport default class AddItem extends Component {\n  render() {\n    return (\n      <View>\n        <Text>Add Item</Text>\n      </View>\n    );\n  }\n}\n```\n\nOur last screen is going to be a List of items that we need to display. In the same directory, create a new file called `List.js`.\n\n```js\nimport React, { Component } from 'react';\nimport { View, Text } from 'react-native';\n\nexport default class List extends Component {\n  render() {\n    return (\n      <View>\n        <Text>List</Text>\n      </View>\n    );\n  }\n}\n```\n\n## Adding react-navigation\n\nTo navigate between different screens, we need to add the `react-navigation` library. We are going to use the latest version that is `3.0.0`.\n\n```shell\nyarn add react-navigation\n```\n\nNext, we will install `react-native-gesture-handler`. If you’re using Expo, you don’t need to do anything here.\n\n```shell\nyarn add react-native-gesture-handler\n```\n\nThe next step is clearly to run the command below and link the libraries we just installed:\n\n```shell\nreact-native link\n```\n\nAfter adding this package, let us run the build process again:\n\n```shell\n# on macOS\nreact-native run-ios\n\n# For Windows/Unix users\nreact-native run-android\n```\n\nNow, to see it in action, let us add the Home component as our first screen. Add the following code in `App.js`.\n\n```js\nimport React, { Component } from 'react';\nimport { createStackNavigator, createAppContainer } from 'react-navigation';\nimport Home from './src/screens/Home';\n\n// we will use these two screens later in our AppNavigator\nimport AddItem from './src/screens/AddItem';\nimport List from './src/screens/List';\n\nconst AppNavigator = createStackNavigator({\n  Home: {\n    screen: Home\n  }\n});\n\nconst AppContainer = createAppContainer(AppNavigator);\n\nexport default class App extends Component {\n  render() {\n    return <AppContainer />;\n  }\n}\n```\n\nAt this stage, if we go to the simulator, we will see the following result:\n\n![ss4](https://i.imgur.com/IMXVJ9n.png)\n\nThe Home Screen is showing up. We will add two other screens as routes to `AppNavigator` in order to navigate to them through the Home Screen.\n\n```js\nconst AppNavigator = createStackNavigator(\n  {\n    Home,\n    AddItem,\n    List\n  },\n  {\n    initialRouteName: 'Home'\n  }\n);\n```\n\nNow, our stack has three routes: a Home route, an AddItem route, and a ListItem route. The Home route corresponds to the `Home` screen component, the AddItem corresponds to the `AddItem` screen and the ListItem route corresponds to the `ListItem` component. The initial route for the stack is the `Home` route, this is defined if we have multiple screens and need to describe a starting point.\n\n## Navigating between the screens\n\nPreviously, we defined a stack navigator with three routes but we didn't hook them up in order to navigate between them. Well, this is an easy task too. The `react-navigation` library provides us with a way to manage navigation from one screen to another and back. To make this work, we will modify the `Home.js`.\n\n```js\nimport React, { Component } from 'react';\nimport { Button, View, Text } from 'react-native';\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <View>\n        <Text>Home Screen</Text>\n        <Button\n          title=\"Add an Item\"\n          onPress={() => this.props.navigation.navigate('AddItem')}\n        />\n        <Button\n          title=\"List of Items\"\n          color=\"green\"\n          onPress={() => this.props.navigation.navigate('List')}\n        />\n      </View>\n    );\n  }\n}\n```\n\nIn the code above, we are adding a `Button` component from the `react-native` API. `react-navigation` passes a navigation prop in the form of `this.props.navigation` to every screen in the stack navigator. We have to use the same screen name on the `onPress` function to navigate as we defined in `App.js` under `AppNavigator`.\n\nYou can also customize the back button manually with your own styling on both screens `AddItem` and `List` but, for our demonstration, we are going to use the default.\n\n![ss5](https://i.imgur.com/oB1OSRS.gif)\n\n## Creating a Database with Firebase\n\nGo to the [Firebase](https://firebase.google.com/) Console, log in from your Google Account and a create a new project.\n\n![ss6](https://i.imgur.com/kB6UcyI.png)\n\nWe will then add the database configuration in a new file inside `src/config.js`.\n\n```js\nimport Firebase from 'firebase';\nlet config = {\n  apiKey: 'AIzaXXXXXXXXXXXXXXXXXXXXXXX',\n  authDomain: 'rnfirebXXX-XXXX.firebaseapp.com',\n  databaseURL: 'rnfirebXXX-XXXX.firebaseapp.com',\n  projectId: 'rnfirebase-XXXX',\n  storageBucket: 'rnfirebase-XXXX.appspot.com',\n  messagingSenderId: 'XXXXXXX'\n};\nlet app = Firebase.initializeApp(config);\nexport const db = app.database();\n```\n\nThe config object is where you fill in the details you get after creating a new project in Firebase and going to the section **Add Firebase to your web app**. Also in the Firebase console, from left sidebar, click on **Database** and then choose the first option: ((Realtime Database)). Then, go to “rules” and paste the following:\n\n```json\n{ \"rules\": { \".read\": true, \".write\": true } }\n```\n\n![ss7](https://i.imgur.com/JyNyFqS.png)\n\n## Adding Data from the App to Firebase\n\nIn this section, we will edit `AddItem.js` which represents an input field and a button. The user can add a item to the list and it will get saved to Firebase data.\n\n```js\nimport React, { Component } from 'react';\nimport {\n  View,\n  Text,\n  TouchableHighlight,\n  StyleSheet,\n  TextInput,\n  AlertIOS\n} from 'react-native';\n\nimport { db } from '../config';\n\nlet addItem = item => {\n  db.ref('/items').push({\n    name: item\n  });\n};\n\nexport default class AddItem extends Component {\n  state = {\n    name: ''\n  };\n\n  handleChange = e => {\n    this.setState({\n      name: e.nativeEvent.text\n    });\n  };\n  handleSubmit = () => {\n    addItem(this.state.name);\n    AlertIOS.alert('Item saved successfully');\n  };\n\n  render() {\n    return (\n      <View style={styles.main}>\n        <Text style={styles.title}>Add Item</Text>\n        <TextInput style={styles.itemInput} onChange={this.handleChange} />\n        <TouchableHighlight\n          style={styles.button}\n          underlayColor=\"white\"\n          onPress={this.handleSubmit}\n        >\n          <Text style={styles.buttonText}>Add</Text>\n        </TouchableHighlight>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  main: {\n    flex: 1,\n    padding: 30,\n    flexDirection: 'column',\n    justifyContent: 'center',\n    backgroundColor: '#6565fc'\n  },\n  title: {\n    marginBottom: 20,\n    fontSize: 25,\n    textAlign: 'center'\n  },\n  itemInput: {\n    height: 50,\n    padding: 4,\n    marginRight: 5,\n    fontSize: 23,\n    borderWidth: 1,\n    borderColor: 'white',\n    borderRadius: 8,\n    color: 'white'\n  },\n  buttonText: {\n    fontSize: 18,\n    color: '#111',\n    alignSelf: 'center'\n  },\n  button: {\n    height: 45,\n    flexDirection: 'row',\n    backgroundColor: 'white',\n    borderColor: 'white',\n    borderWidth: 1,\n    borderRadius: 8,\n    marginBottom: 10,\n    marginTop: 10,\n    alignSelf: 'stretch',\n    justifyContent: 'center'\n  }\n});\n```\n\nIn the code above, we are adding a Firebase database instance from `config.js` and `db` and then pushing any item that the user adds through `addItem` and `handleSubmit()`. You will get an alert message when you press the button **Add** to add the item from the input value as shown below.\n\n![ss8](https://imgur.com/qi5UQec.gif)\n\nTo verify that the data is there in the database, go to your Firebase console.\n\n[ss9](https://i.imgur.com/KZDYCIo.png)\n\n## Fetching Items from the Database\n\nTo fetch data from the Firebase database, we are going to use the same reference to `db` in `List.js`.\n\n```js\nimport React, { Component } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport ItemComponent from '../components/ItemComponent';\n\nimport { db } from '../config';\n\nlet itemsRef = db.ref('/items');\n\nexport default class List extends Component {\n  state = {\n    items: []\n  };\n\n  componentDidMount() {\n    itemsRef.on('value', snapshot => {\n      let data = snapshot.val();\n      let items = Object.values(data);\n      this.setState({ items });\n    });\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        {this.state.items.length > 0 ? (\n          <ItemComponent items={this.state.items} />\n        ) : (\n          <Text>No items</Text>\n        )}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ebebeb'\n  }\n});\n```\n\nFor the `ItemComponent`, we create a new file inside `components/ItemComponent.js`. This is a non-screen component. Only the `List` will use it to `map` and display each item.\n\n```js\nimport React, { Component } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport PropTypes from 'prop-types';\n\nexport default class ItemComponent extends Component {\n  static propTypes = {\n    items: PropTypes.array.isRequired\n  };\n\n  render() {\n    return (\n      <View style={styles.itemsList}>\n        {this.props.items.map((item, index) => {\n          return (\n            <View key={index}>\n              <Text style={styles.itemtext}>{item.name}</Text>\n            </View>\n          );\n        })}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  itemsList: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'space-around'\n  },\n  itemtext: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center'\n  }\n});\n```\n\nThis step concludes the integration of a Firebase database with our React Native app. You can now add the new data items and fetch them from the database as shown below.\n\n![ss9](https://i.imgur.com/0Nr4d4J.gif)\n\n## Conclusion\n\nIn this tutorial, we’ve shown you how to integrate Firebase with a React Native application. You don’t a complete server that creates an API and further uses a database to prototype or build an MVP of your application.\n\nYou can find the complete code inside [this Github repo](https://github.com/amandeepmittal/rnFirebaseDemo).\n\n[Originally published at Jscrambler](https://blog.jscrambler.com/integrating-firebase-with-react-native/)\n",
            "url": "https://amanhimself.dev//blog/integrating-firebase-with-react-native",
            "title": "Integrating Firebase with React Native",
            "summary": "Integrating Firebase with React Native",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/how-to-build-your-own-blog-from-scratch-with-gatsbyjs-graphql-react-and-markdown",
            "content_html": "---\ntitle: 'How To Build A Blog From Scratch With React, Markdown, GraphQL and Gatsbyjs'\nslug: 'how-to-build-your-own-blog-from-scratch-with-gatsbyjs-graphql-react-and-markdown'\ndate: '2018-11-21'\nthumbnail: '/thumbnails/gatsby.png'\ntag: 'gatsby'\ncanonicalUrl: 'https://medium.com/crowdbotics/how-to-build-your-own-blog-from-scratch-with-gatsbyjs-graphql-react-and-markdown-78352c367bd1'\n---\n\nThere are lots of quick and easy, no-code ways to get blog up and running — such as [Medium](https://blog.crowdbotics.com/should-you-use-medium-as-your-business-blog-platform-2019-update/) or Wordpress — but, whether it’s to customize, monetize, add security, or just learn, today, I’ll show you how to code your own blog from scratch.\n\nWhen adding a blog to your existing website, or just starting out with a new blog, a static site generator can help you get started.\n\nStatic site generators such as GatsbyJS are primarily used to serve fixed content, but they can also be used for pretty much any web application, including blog and e-commerce web applications.\n\nIn this post, we are going to create a blog from scratch using GatsbyJS with ReactJS and GraphQL at its core.\n\n### What is GatsbyJS?\n\n[Gatsby](https://www.gatsbyjs.com/how-it-works/) is a simple, robust, and fast static site generator. It uses ReactJS to render static content on the web. The content in a Gatsby app is written in the same way as any other React app: through components. These components are rendered at build time to the DOM as static HTML, CSS, and JavaScript.\n\nAt a high level, Gatsby uses various source plugins to read data and make it available via a GraphQL interface. You write GraphQL queries to load this data and render React components. GraphQL can render content that is sourced from a large number of formats and sources such as Markdown, CSV, and CMS like Wordpress, Drupal, GraphCMS, and so on.\n\n### Why use Gatsby?\n\nGatsby takes care of a lot behind the scenes.\n\n- Future proof [JAMstack](https://jamstack.org/) websites\n- Gatsby has a rich plugin ecosystem that is easily extensible\n- Pre-configured Webpack based build system (no need to break your head)\n- Supports [PWA (_Progressive Web App_)](https://blog.crowdbotics.com/learn-to-build-a-simple-progressive-web-app-pwa-with-angular-and-lighthouse-hacker-news-clone/) by default\n- Optimized for speed. Gatsby loads only critical parts so that your site loads as fast as possible. Once loaded, Gatsby prefetches resources for other pages so that clicking on the site feels incredibly fast\n\nGatsby also has an ever-growing data plugin ecosystem, especially for data transformation. Overall, I think the points above should be enough to lure you into trying it out.\n\n### Pre-requisites\n\n- Familiarity with HTML, JavaScript, ReactJS\n- Nodejs with `npm` or `yarn` installed\n- Gatsby CLI (which we are going to install in next section)\n\n**Note:** At the time of writing this tutorial, Gatsby `v2` was officially launched.\n\n### Getting Started with Gatsby\n\nTo start, we need to install the command line utility provided by GatsbyJS to quickly scaffold projects. Open your terminal and type the following command.\n\n```shell\nnpm install -g gatsby-cli\n```\n\nTo verify that it has been installed, run the following command.\n\n```shell\n# Check the version\ngatsby -v\n\n# you will get a similar output\n2.4.5\n```\n\nOnce you successfully installed `gatsby-cli`, it is time to generate a new project.\n\n```shell\ngatsby new gatsby-blog-starter\n```\n\nThis process will take a minute or two and, at the end of it, you will have a new directory. Traverse inside it. Gatsby’s default project structure looks like this:\n\n<img src='https://cdn-images-1.medium.com/max/800/1*Y2MEtJVZ4BmnmALDO-D1lw.png' />\n\nTo see what we get by default, run `gatsby develop`. This will run the project without creating the official build directory on a development server through webpack (used by Gatsby internally). After the command runs successfully, you will be prompted by the following screen like below in your terminal.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*CC6dYalWGIY2d0DQ1Gg5yw.png' />\n\nYou can visit `http://localhost:8000` to see the default site in action.\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*1Ow9OKXVy8-T1x_bGiTjRg.png' />\n\n### Running a GraphQL Query\n\n<img src='https://cdn-images-1.medium.com/max/800/1*L8BlmC_0Xx_B75e7Lv4osQ.png' />\n\nEvery Gatsby project contains at least these files. You might be familiar with some of these such as `node_modules`and `public` directory, which is served when deployed. It also contains `package.json`, which contains the metadata of any modern Javascript application.\n\nOur main object of focus are in the directory `src` and files such as `gatsby-config.js` and `gatsby-node.js`.These contain the metadata and other essential information about our current application. Inside the `src/` there are two sub-directories: `components/` and `pages/`. The `components/` contain further two files: `layout.css` and `layout.js`. These serve as the starting point of our application.\n\nYou have already seen what the default page that comes with Gatsby looks like. We have a title in the navigation bar. Let’s add a subtitle. Open `gatsby-config.js` and a new field `description` and change `title` like below.\n\n```js\nsiteMetadata: {\n    title: 'Gatsby Blog',\n    description: 'This is my personal blog.'\n  },\n```\n\nGatsby allows us to query metadata fields described in this file as a GraphQL query. In order to take a look at what kind of stuff we can query from Gatsby, run `gatsby develop` from the terminal. You will not see any changes at `http://localhost:8000/` yet because we haven't modified the component responsible for that. However, we can verify by running a simple GraphQL query. Open `http://localhost:8000/___graphql` in the browser.\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*0F7_m7zpVpipIjc1qU9SMw.png' />\n\nWe’ve got the GraphQL browser open and over on the side here, we can see the documentation explorer, which lets us go through our schema and look at what kind of stuff we can query for. Click on the `query` type on the right hand side to see what query fields we can access.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*JsaxRxF-uWp4CCotFWBrMQ.png' />\n\nThis gives us a list of all of the query types that we can look for. Take a look at the `site` and the `siteMetadata`. You can start typing a `s`, and you will see an autocomplete for the query type `site`. This is really helpful. Run the below query.\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*zt1jv_nlaWMFNPgmZTSGYw.png' />\n\nGreat!\n\nNow that you are familiar with the nitty-gritty of Gatsby and how it works, in the next section, we will start working on the blog.\n\n### Writing our first Markdown blog post\n\nGatsby makes use of various plugins for building static sites. In this section, we are going to install and configure in order to make use of `gatsby-source-filesystem` and `gatsby-transformer-remark` to work with locally stored Markdown files. Open your terminal and type.\n\nI am using `yarn` because Gatsby uses it by default over `npm` as the package manager. Once both of these dependencies are installed, configure `gatsby-config.js` file like below.\n\n```js\nplugins: [\n  'gatsby-transformer-remark',\n  {\n    resolve: `gatsby-source-filesystem`,\n    options: {\n      name: `pages`,\n      path: `${__dirname}/src/pages/`\n    }\n  }\n];\n```\n\nThe rest of the plugins remain same. `gatsby-transformer-remark` is used parse Markdown files in `.md` format into HTML. `gatsby-source-filesystem` helps us with reading those markdown files from the disk. Each post in our blog is going to be in markdown format.\n\nTo understand it better, let us add some posts. Traverse to `src/pages` directory and then add one or two posts in a year, month, and date format with a slug like below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*kVIkKPBAX029E6DmXYUScQ.png' />\n\nEach markdown file is supposed to have some frontmatter fields that are used to create and update our posts. Open the `2018-11-14-hello-world.md` and the following content.\n\nSimilarly you can add the content to the second post.\n\nThe content of these two Markdown files will be our first two blog posts. The block surrounded in dashes is referred to as _frontmatter_, and the contents of the block can be used to inject React components with the specified data, e.g. path, date, title, tags etc.\n\nOne important note is that path will be used when we dynamically create our pages to specify the URL to each blog to render the file. We’ll do this later.\n\n### Creating the Blog Template\n\nIf you take a look at your blog in a browser, you will see that Gatsby is not yet displaying any blog posts that you have created. This is because Gatsby still does not know where these blog posts are or that you even want them to be displayed in the browser. However, if you try to query it in the _GraphiQL_ browser tab, you can see that **frontmatter** data of blog post is available.\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*f2k6uRd0tZ31BIWJbXHRqg.png' />\n\nEach Markdown file is parsed into a node of type `MarkdownRemark`. To query all markdown files in on query, we are using `allMarkdownRemark`. All **frontmatter** fields are converted into GraphQL fields.\n\nTo display each post let us create a new template that will be consistent in style and getting **frontmatter** from GraphQL query we have just seen. Inside the `src` directory, create a new folder called `templates` and inside it, create a new file called `blogPost.js`.\n\n```js\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\nconst Template = ({ data }) => {\n  const title = data.markdownRemark.frontmatter.title;\n  const date = data.markdownRemark.frontmatter.date;\n  const html = data.markdownRemark.html;\n\n  return (\n    <div>\n      <h1>{title}</h1>\n      <div className=\"blogpost\" dangerouslySetInnerHTML={{ __html: html }} />\n    </div>\n  );\n};\n\nexport const postQuery = graphql`\n  query ($pathSlug: String!) {\n    markdownRemark(frontmatter: { path: { eq: $pathSlug } }) {\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM, DD, YYYY\")\n        path\n        tags\n        excerpt\n      }\n    }\n  }\n`;\n\nexport default Template;\n```\n\nIn this component, notice the new query `postQuery` we are creating. This query will help us to display our blog posts into the template. This query puts all the _frontmatter_ we require in order to display blog post in the component `Template`'s `props`.\n\n```js\nconst title = props.data.markdownRemark.frontmatter.title;\nconst html = props.data.markdownRemark.html;\n```\n\nIn above, I am fetching the title for each post and the HTML content. While rendering the output we get from the query, I am using `dangerouslySetInnerHTML` which is a React’s replacement for using `innerHTML` in the browser DOM. In general, setting HTML from code is risky because it exposes a user to a cross-site scripting (XSS) attack if used with sensitive data. Since we do not have any users (no login/signup system), I am just using it for content that is rendered as HTML from markdown.\n\nWe now have a template of how our blog post will look but we still haven’t configured a way to render and convert a blog post into HTML. That’s next. Open `gatsby-node.js` in the root of your project and add the following code.\n\n```js\nconst path = require('path');\n\nexports.createPages = ({ graphql, actions }) => {\n  const { createPage } = actions;\n\n  return new Promise((resolve, reject) => {\n    const blogPostTemplate = path.resolve('src/templates/blogPost.js');\n    // Query for markdown nodes to use in creating pages.\n    resolve(\n      graphql(\n        `\n          query {\n            allMarkdownRemark(\n              sort: { order: ASC, fields: [frontmatter___date] }\n            ) {\n              edges {\n                node {\n                  frontmatter {\n                    path\n                    title\n                    tags\n                  }\n                }\n              }\n            }\n          }\n        `\n      ).then(result => {\n        const posts = result.data.allMarkdownRemark.edges;\n\n        posts.forEach(({ node }) => {\n          const path = node.frontmatter.path;\n          createPage({\n            path,\n            component: blogPostTemplate,\n            context: {\n              pathSlug: path\n            }\n          });\n          resolve();\n        });\n      })\n    );\n  });\n};\n```\n\nWe start by requiring Node’s `path` in order to fetch the blog post template. Notice the `actions` along with `graphql` as parameters when we are exporting `createPages`. Gatsby uses Redux internally to manage state. That's where `actions` come from. The object `actions` contain the functions and these can be individually extracted by using ES6 object de-structuring. It has pre-defined functions such as `createPage`, `createRedirect`, `setWebpackConfig` and so on. You can find all of them [**here**](https://www.gatsbyjs.org/docs/actions/).\n\nWe then make use `createPage` programmatically. There are [two other ways other](https://www.gatsbyjs.org/docs/creating-and-modifying-pages/) than the approach we are implementing. In our case, we need to read Markdown files.\n\nSince our home page is still not done to display a list of blog posts you will have to visit each URL listed below in order to see the blog posts in action.\n\n- For the first post, visit: `[http://localhost:8000/first-post](http://localhost:8000/first-post)`\n- For the second post, visit: `[http://localhost:8000/second-post](http://localhost:8000/second-post)`\n\n<img src='https://cdn-images-1.medium.com/max/800/1*FfBpJzPlwG8h5-3CvR8mJQ.png' />\n\nTry to modify the `Template` component and other fields from the frontmatter. Open `src/blogPost.js`.\n\n```js\nconst Template = ({ data }) => {\n  const title = data.markdownRemark.frontmatter.title;\n  const date = data.markdownRemark.frontmatter.date;\n  const html = data.markdownRemark.html;\n  return (\n    <div>\n      <h1>{title}</h1>\n      <div>\n        <em>{date}</em>\n      </div>\n      <br />\n      <div className=\"blogpost\" dangerouslySetInnerHTML={{ __html: html }} />\n    </div>\n  );\n};\n```\n\nTo represent the changes, I have added the date in italics just before the content of the blog post and after the title. Visit any post’s URL and see it in action.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*cmFx6s6ZsVpGNHoI8wSMLQ.png' />\n\n### Adding Previous and Next Blog Post Links\n\nFor this feature to work with our blog, we are going to make use Gatsby `Link` component. It is a wrapper around `@reach/router`’s Link component that adds enhancements specific to Gatsby and you can even use props such as `activeStyle` or `activeClassName` to add styling attributes to the rendered element when it matches the current URL. Just like how a normal routing component in React behaves. Open `blogPost.js` file and add this.\n\n```js\nimport React from 'react';\nimport { graphql, Link } from 'gatsby';\n\nconst Template = ({ data, pathContext }) => {\n  const title = data.markdownRemark.frontmatter.title;\n  const date = data.markdownRemark.frontmatter.date;\n  const html = data.markdownRemark.html;\n  const { next, prev } = pathContext;\n\n  return (\n    <div>\n      <h1>{title}</h1>\n      <div>\n        <em>{date}</em>\n      </div>\n      <br />\n      <div className=\"blogpost\" dangerouslySetInnerHTML={{ __html: html }} />\n      <p>\n        {prev && (\n          <Link to={prev.frontmatter.path}>\n            {prev.frontmatter.title}{' '}\n            <span role=\"img\" aria-label=\"point-left\">\n              👈{' '}\n            </span>\n            Previous\n          </Link>\n        )}\n      </p>\n      <p>\n        {next && (\n          <Link to={next.frontmatter.path}>\n            Next{' '}\n            <span role=\"img\" aria-label=\"point-right\">\n              👉\n            </span>\n            {next.frontmatter.title}\n          </Link>\n        )}\n      </p>\n    </div>\n  );\n};\n\n// rest of the code remain sames\n```\n\nNotice how I am using `span` tags with attribute `role` to wrap emojis along with `aria-label` attribute. It is considered as good practice in Gatsby, React and you will definitely avoid any linting errors. Now to make the above code work, we need to modify the `context` in `gatsby-node.js`.\n\n```js\nposts.forEach(({ node }, index) => {\n  const path = node.frontmatter.path;\n  createPage({\n    path,\n    component: blogPostTemplate,\n    context: {\n      pathSlug: path,\n      prev: index === 0 ? null : posts[index - 1].node,\n      next: index === posts.length - 1 ? null : posts[index + 1].node\n    }\n  });\n  resolve();\n});\n```\n\nThe context object now contains two keys called `prev` and `next`. We are also using `index` value of each post. If the `index === 0`, there is not going to be any previous post since it is the first one. You cannot go to a previous post here. We are then using these new context properties in `blogPost.js` using `pathContext`.\n\nVisit the first post and you will get the following result.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*43qrMpLgEskYZzuZ2cFOQA.gif' />\n\n### Display all posts on Homepage\n\nSince all of our markdown posts are getting rendered into HTML correctly, the next and previous post feature working too. So let us move ahead and display all the blog posts on the home page. Not the complete posts, but a link to each one.\n\n```js\nimport React from 'react';\nimport { graphql, Link } from 'gatsby';\n\nimport Layout from '../components/layout';\n\nconst IndexPage = ({ data }) => {\n  const { edges } = data.allMarkdownRemark;\n\n  return (\n    <Layout>\n      <div>\n        {edges.map(edge => {\n          const { frontmatter } = edge.node;\n          return (\n            <div key={frontmatter.path}>\n              <Link to={frontmatter.path}>{frontmatter.title}</Link>\n              &nbsp;\n              <small>\n                {' '}\n                <em>published on</em> {frontmatter.date}\n              </small>\n              <p>{frontmatter.excerpt}</p>\n              <br />\n            </div>\n          );\n        })}\n      </div>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query HomePageQuery {\n    allMarkdownRemark(sort: { order: DESC, fields: frontmatter___date }) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            tags\n            excerpt\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default IndexPage;\n```\n\nOn visiting the Home page URL: `http://localhost:8000/` you will get the following result.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*Ei7BmnjIcRvG0JmhGwVDZw.png' />\n\n### Conclusion\n\nWe now have a functioning blog!\n\nI challenge you to expand your own blog further by adding comments or tags functionalities. Gatsby has a lot to offer. You learn more about Gatsby at their [official documentation](https://www.gatsbyjs.org/).\n\n**The complete code for the tutorial at [this Github repository](https://github.com/amandeepmittal/gatsby-blog-starter)**\n\n[Originally published at Crowdbotics](https://medium.com/crowdbotics/how-to-build-your-own-blog-from-scratch-with-gatsbyjs-graphql-react-and-markdown-78352c367bd1)\n",
            "url": "https://amanhimself.dev//blog/how-to-build-your-own-blog-from-scratch-with-gatsbyjs-graphql-react-and-markdown",
            "title": "How To Build A Blog From Scratch With React, Markdown, GraphQL and Gatsbyjs",
            "summary": "How To Build A Blog From Scratch With React, Markdown, GraphQL and Gatsbyjs",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/building-a-mern-stack-app-with-material-ui",
            "content_html": "---\ntitle: 'Building an authenticated MERN Stack App Using Material UI'\ndate: '2018-11-16'\nslug: 'building-a-mern-stack-app-with-material-ui'\nthumbnail: '/thumbnails/react.png'\ntag: 'nodejs'\ncanonicalUrl: 'https://medium.com/crowdbotics/building-a-mern-stack-app-with-material-ui-33ff8ca4da01'\n---\n\n![cover](https://i.imgur.com/YHJ7UNq.png)\n\n> [Originally published at Crowdbotics](https://medium.com/crowdbotics/building-a-mern-stack-app-with-material-ui-33ff8ca4da01)\n\nIt can sometime be overwhelming to build a full-stack web application using a stack like MERN.\n\nSetting up the the back end and connecting it with a client-side library like React to fetch and display data is just the beginning. One you have the data user will interact with, you need to focus on developing a functional User Interface (_UI_) for your web application. For some developers, UI can be the tricky part.\n\n[MERN](https://medium.com/crowdbotics/deploy-a-mern-stack-app-on-heroku-b0c255744a70) is full-stack because it consists of MongDB, Express, [React](https://www.crowdbotics.com/build/react) and [Nodejs](https://crowdbotics.com/build/node-js). Each of these technologies can be replaced with something comparable but it is common practice to use them together.\n\nReact is the library you will use to build the front-end of the web application. Express is a Nodejs framework that helps you to build a server that communicates to and fro with a NoSQL database like MongoDB.\n\nIn this tutorial, I am going to show you how to build a small web application using this technology stack, step-by-step. Along with building a simple web app, you will learn how to use the Material UI library to make the application look good. You can then use what you learn here for to make your own applications look better and be more functional.\n\n### Pre-requisites\n\nBefore we get started, install all the tools we are going to need to set up our application.\n\n- Nodejs\n- MongoDB\n- yarn\n- create-react-app\n\n_The last in the above list are installed using npm._\n\n### Set up the MERN App\n\nTo get started, you need to follow the steps below by opening your terminal and typing these commands. To keep you from getting lost, I will leave a comment before each command using `#`.\n\n```shell\n\n# create an empty directory and traverse inside it\nmkdir mern-material-demo\n\n# initialize it with npm\nnpm init -y\n\n# install server side dependencies (initially)\nyarn add express mongoose cookie-parser express-jwt jsonwebtoken\n\n# use babel for import statements in Node\nyarn add -D babel-cli babel-preset-env babel-watch\n\n# create a client using create-react-app from root\ncreate-react-app client\n```\n\nAfter this step, make sure your root project looks like below with some extra files and folders.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*_JHQWIDI9FjHq-pr0k1x1Q.png' />\n\nWe are going to bootstrap the server using Babel. To setup and learn what Babel is, please read [here](https://hackernoon.com/how-to-use-import-statements-in-nodejs-94c85e23aeb7).\n\nThe next step is to define the configuration you will need to proceed with server creation. Inside `server`, create a new file `config/index.js` and define the following inside it.\n\n```js\nconst config = {\n  port: process.env.PORT || 4000,\n  jwtSecret: process.env.JWT_SECRET || 'mkT23j#u!45',\n  mongoURI: process.env.MONGODB_URI || 'mongodb://localhost/mern-auth'\n};\n\nexport default config;\n```\n\nFor MongoDB, I am going to use a local instance. If you want to use a cloud service (free tier), please [read the steps to set it up and consume in a Node server app here](https://blog.crowdbotics.com/how-to-deploy-a-mern-stack-app-on-heroku/).\n\nMake sure add the `dev` script inside `package.json`.\n\n```json\n\"scripts\": {\n\t\"dev\": \"babel-watch index.js\"\n}\n```\n\n### Connect Database and the Server\n\nInside `config` directory, create a new file called `dbConnection.js`. Let us start by defining the MongoDB connection.\n\n```js\nimport mongoose from 'mongoose';\nimport config from './index';\n\nconst URI = config.mongoURI;\nmongoose.connect(URI);\n\n// When successfully connected\nmongoose.connection.on('connected', () => {\n  console.log('Established Mongoose Default Connection');\n});\n\n// When connection throws an error\nmongoose.connection.on('error', err => {\n  console.log('Mongoose Default Connection Error : ' + err);\n});\n```\n\nI am going to use [Mongoose](https://mongoosejs.com/) as ODM (_Object Document Mapper_). This helps write queries inside the Node server and create business logic behind it. It also provides a schema-based solution to create data models and define them in our Node app.\n\nAlthough MongoDB is a schema-less database, Mongoose helps our application understand the data structure and organize it at the same time. The most basic benefit is to make a connection between the Express app when it bootstraps and the MongoDB instance on our local machine.\n\nLet’s create a small server in the `index.js` file of the root of our web app. Here it is in action.\n\n```js\nimport express from 'express';\nimport cookieParser from 'cookie-parser';\nimport config from './server/config';\n\n// DB connection\nrequire('./server/config/dbConnection');\n\nconst app = express();\n\n// middleware functions\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\napp.use(cookieParser());\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  if (err.name === 'UnauthorizedError') {\n    res.status(401).json({ error: err.name + ':' + err.message });\n  }\n});\n\napp.listen(config.port, () => {\n  console.log(`🚀 at port ${config.port}`);\n});\n```\n\nIf you are getting a message like below (_ignore the mongoose warning_), this means our server is up and running and successfully connected to the local instance of the database.\n\n### Building The User Model\n\nTo demonstrate, I am going to create a user data model with properties to save the user data when a new user registers with our application. We are going to save user credentials and validate it using Mongoose in this section. Create a new file inside `server/models/user.js`.\n\nWe will start by importing the necessary dependencies at the top of our file and then create a new Mongoose Schema, `userSchema` which is an object with properties. Typically, NoSQL databases are super flexible, in that they allow us to put whatever we want in them without enforcing any specific kind of structure. However, Mongoose adds a layer of structure on top of the typical MongoDB way of doing things. This helps us perform additional validation to ensure that our users are not submitting any random data to our database without us having to write tons of boilerplate code ourselves.\n\n```js\nimport mongoose from 'mongoose';\nimport crypto from 'crypto';\nconst Schema = mongoose.Schema;\n\nconst userSchema = new Schema({\n  name: {\n    type: String,\n    trim: true,\n    required: 'User Name is required'\n  },\n  email: {\n    type: String,\n    trim: true,\n    unique: 'Email already exists',\n    match: [/.+\\@.+\\..+/, 'Please fill a valid email address'],\n    required: 'Email is required'\n  },\n  hashedPassword: {\n    type: String,\n    required: 'Password is required'\n  },\n  salt: {\n    type: String\n  }\n});\n\nuserSchema\n  .virtual('password')\n  .set(function (password) {\n    this._password = password;\n    this.salt = this.makeSalt();\n    this.hashedPassword = this.encryptedPassword(password);\n  })\n  .get(function () {\n    return this._password;\n  });\n\nuserSchema.methods = {\n  authenticate: function (plainText) {\n    return this.encryptedPassword(plainText) === this.hashedPassword;\n  },\n  encryptedPassword: function (password) {\n    if (!password) return '';\n    try {\n      return crypto\n        .createHmac('sha1', this.salt)\n        .update(password)\n        .digest('hex');\n    } catch (err) {\n      return '';\n    }\n  },\n  makeSalt: function () {\n    return Math.round(new Date().valueOf() * Math.random()) + '';\n  }\n};\n\nuserSchema.path('hashedPassword').validate(function (v) {\n  if (this.hashedPassword && this._password.length < 6) {\n    this.invalidate('password', 'Password must be at least 6 characters long.');\n  }\n  if (this.isNew && !this._password) {\n    this.invalidate('password', 'Password is required.');\n  }\n}, null);\n\nexport default mongoose.model('User', userSchema);\n```\n\nWe now use the `userSchema` object to add a virtual`password` field. Note that whatever property is described inside the `userSchema` object is going to be saved in the MongoDB document. We are not saving the password directly. We are creating a virtual field first to generate an encrypted hash of the password and then save it in our database.\n\nA virtual field is a document property that can be used to combine different fields or decompose a single value into multiple values for storage but never gets carried on inside the MongoDB database itself.\n\nUsing the Nodejs `crypto` module we are creating a hash that updates the virtual `password`. The ‘salt’ field is a randomly generated string for each password. This terminology comes from cryptography. We are also putting in the logic of validating the password field and checking whether it is 6 characters long. Lastly, we export the `User` model to be used with routes and controllers logic in our server.\n\n### User Routes\n\nNow, let’s write the business logic behind the routes to create for the React end to interact with the server. Create a new file `server/controllers/user.js` and write the following code. Import the user model first that from the previous section.\n\n```js\nimport User from '../models/user';\nimport errorHandler from '../helpers/dbErrorHandler';\n\nexport const registerUser = (req, res, next) => {\n  const user = new User(req.body);\n  user.save((err, result) => {\n    if (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      });\n    }\n    res.status(200).json({\n      message: 'New user registered successfully!'\n    });\n  });\n};\n\nexport const findUserById = (req, res, next, id) => {\n  User.findById(id).exec((err, user) => {\n    if (err || !user) {\n      return res.status(400).json({\n        error: 'No user found with that credentials!'\n      });\n    }\n    req.profile = user;\n    next();\n  });\n};\n\nexport const findUserProfile = (req, res) => {\n  // eliminate password related fields before sending the user object\n  req.profile.hashedPassword = undefined;\n  req.profile.salt = undefined;\n  return res.json(req.profile);\n};\n\nexport const deleteUser = (req, res, next) => {\n  let user = req.profile;\n  user.remove((err, deletedUser) => {\n    if (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      });\n    }\n    deletedUser.hashedPassword = undefined;\n    user.salt = undefined;\n    res.json(user);\n  });\n};\n```\n\nI have also added a helper function inside a separate file at the location `server/helpers/dbErrorHandler.js` to gracefully handle any error that occurs in any of the routes like we are using in above and respond back with a meaningful message. You can download the file from [here](https://gist.github.com/amandeepmittal/56e30487a2782fa7f0209ab0f3cd518a).\n\nIn the file above, we are creating three controller functions. The first one, `registerUser`, creates a new user in the database from the JSON object received in a `POST` request from the client. The JSON object is received inside `req.body` that contains the user credentials we need to store in the database. Further, `user.save`, saves the new user in the database. Notice that we are not creating a unique field which is common in this type of scenarios to identify each new user saved in our database. This is because MongoDB database creates an `_id` field each time a new record is saved.\n\nThe next function we are exporting is `findUserById`. It queries the database to find the specific details related to the user whose `_id` is provided in parametric route (which I will define shortly). If a matching user is found with that `_id` in the database, then the user object is returned and appended inside the `req.profile`.\n\n`findUserProfile` controller function retrieves the user detail from `req.profile` and removes any sensitive information such as password's hash and salt values before sending this user object to the client. The last function `deleteUser` removes the the user details from the database.\n\nNow let use the controller logic and add it to corresponding routes inside `server/routes/user.js`.\n\n```js\nimport express from 'express';\nimport {\n  registerUser,\n  findUserById,\n  findUserProfile,\n  deleteUser\n} from '../controllers/user';\n\nconst router = express.Router();\n\nrouter.route('/api/users').post(registerUser);\n\nrouter.route('/api/users/:userId').get(findUserProfile).delete(deleteUser);\n\nrouter.param('userId', findUserById);\n\nexport default router;\n```\n\nThe controller functions are first imported and then used with their corresponding route.\n\n### Auth Routes\n\nTo restrict access to user operations — such as the logged in user can only access their profile and no one else’s — we are going to implement a JWT authentication to protect the routes. The two routes required to sign in and sign out the user from our application are going to be inside a separate file `server/routes/auth.js`.\n\n```js\nimport express from 'express';\nimport { signin, signout } from '../controllers/auth';\n\nconst router = express.Router();\n\nrouter.route('/auth/signin').post(signin);\n\nrouter.route('/auth/signout').get(signout);\n\nexport default router;\n```\n\nThe first route uses an HTTP `POST` request to authenticate a user with email and password credentials. The second route is used when the user hits the `signout` button (which we will implement in our front-end). The logic behind how these two routes work has to be defined in another file. Create a new file `server/controllers/auth.js` with the following code.\n\n```js\nimport User from '../models/user';\nimport jwt from 'jsonwebtoken';\nimport expressJwt from 'express-jwt';\nimport config from '../config';\n\nexport const signin = (req, res) => {\n  User.findOne({ email: req.body.email }, (err, user) => {\n    if (err || !user) {\n      return res.status(401).json({\n        error: 'User not found'\n      });\n    }\n    if (!user.authenticate(req.body.password)) {\n      return res.status(401).json({\n        error: 'Wrong Email or Password!'\n      });\n    }\n\n    const token = jwt.sign(\n      {\n        _id: user._id\n      },\n      config.jwtSecret\n    );\n\n    res.cookie('t', token, {\n      expire: new Date() + 9999\n    });\n\n    return res.json({\n      token,\n      user: { _id: user._id, name: user.name, email: user.email }\n    });\n  });\n};\n\nexport const signout = (req, res) => {\n  res.clearCookie('t');\n  return res.status(200).json({\n    message: 'Sign out successful!'\n  });\n};\n\nexport const requireSignin = expressJwt({\n  secret: config.jwtSecret,\n  userProperty: 'auth'\n});\n\nexport const hasAuthorization = (req, res) => {\n  const authorized = req.profile && req.auth && req.profile._id == req.auth._id;\n  if (!authorized) {\n    return res.status(403).json({\n      error: 'User is not authorized!'\n    });\n  }\n};\n```\n\nI am using two JWT related packages from `npm` to enable authentication and protect our routes: `express-jwt` and `jsonwebtoken`. You already installed them when we bootstrapped this project. The first controller function `signin` we are exporting receives user's credentials in `req.body`. Email is used to retrieve the matching user from the database. Remember, we have added a `unique` field when defining the `userSchema`.\n\n```js\n// model/user.js\n\temail: {\n\t\ttype: String,\n\t\ttrim: true,\n\t\tunique: 'Email already exists',\n\t\tmatch: [/.+\\@.+\\..+/, 'Please fill a valid email address'],\n\t\trequired: 'Email is required'\n  },\n```\n\nSince we are also receiving user’s password, we are going to verify it with the hash and the salt value that we stored in our database. The signed JWT is returned to the client to authenticate the user with their details if successful. We are using browser’s cookies here to store the JWT token. You can use the browser’s local storage for this purpose.\n\nThe `signout` function above clears the cookie containing the signed JWT token. The last two functions are important for our application. Both `requireSignin` and `hasAuthorization` are used to protect access to certain routes from an unauthorized user. They check and validate the user on client whether they are authenticated to give access.\n\n`requireSignin` method here verifies a valid JWT in the `Authorization` header of the request. `hasAuthorization` allows a user to operate protected routes by checking that the user who is sending the request is identical to the authenticated user. In our application we are going to use this on one protected route. We are going to delete the user profile and their data from the database in that route.\n\nNow let us use these methods to protect user routes. Open `server/routes/user.js`.\n\n```js\nimport express from 'express';\nimport {\n  registerUser,\n  findUserById,\n  findUserProfile,\n  deleteUser\n} from '../controllers/user';\n\n// import them to protect routes\nimport { requireSignin, hasAuthorization } from '../controllers/auth';\n\nconst router = express.Router();\n\nrouter.route('/api/users').post(registerUser);\n\nrouter\n  .route('/api/users/:userId')\n  .get(requireSignin, findUserProfile)\n  .delete(requireSignin, hasAuthorization, deleteUser);\n\nrouter.param('userId', findUserById);\n\nexport default router;\n```\n\n### Finishing the back-end\n\nWith the routing logic set up, we can now complete the server by adding our routes to `index.js` file.\n\n```js\nimport express from 'express';\nimport cookieParser from 'cookie-parser';\nimport config from './server/config';\n// ADD these\nimport userRoutes from './server/routes/user';\nimport authRoutes from './server/routes/auth';\n\n// DB connection\nrequire('./server/config/dbConnection');\n\nconst app = express();\n\n// middleware functions\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\napp.use(cookieParser());\n\n// ADD routes\napp.use('/', userRoutes);\napp.use('/', authRoutes);\n\napp.use((err, req, res, next) => {\n  if (err.name === 'UnauthorizedError') {\n    res.status(401).json({ error: err.name + ':' + err.message });\n  }\n});\n\napp.listen(config.port, () => {\n  console.log(`🚀 at port ${config.port}`);\n});\n```\n\nTo test these routes, open up a [REST](https://medium.com/crowdbotics/building-a-rest-api-with-koajs-417c276929e2) Client like [Postman](https://www.getpostman.com/) or [Insomnia](https://insomnia.rest/) and the URL `http://localhost:4000/api/users` with required fields in order to create a user.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*xPH-zPCYtLcp18FdUP8iHw.png' />\n\nIf there are no errors, you are going to receive the message `Successfully signed up!`. This means the user has been added to the database. If you try to make a new user with same credentials, it will throw an error this time.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*X3DWS3U5S-iBlOfYfmZ0cw.png' />\n\nIf you use a MongoDB Client to view the records of your local database like [Mongo Compass](https://www.mongodb.com/products/compass) or [Robomongo](https://robomongo.org/), you can easily see newly created user’s details.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*z2Gd9TSd6sDBaIFWGorcTQ.png' />\n\nUsing the same user credentials, we will attempt a sign-in. It should give us a JWT back.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*6U2XmG6nC_9W1-JBRG284w.png' />\n\nIt works!\n\nExcept for the sensitive information that we eliminated from the route, we are receiving back the token and a user object.\n\nNow let’s find the user profile. Hit the URL `http://localhost:4000/api/users/{USER_ID}` where `USER_ID` is the same created by MongoDB database when adding the user record.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*eDWff4NSiZhwDQmvRSJmSQ.png' />\n\nYou have to add the `Bearer` before signed JWT returned from the previous request at the Header `Authorization`. This completes our API testing and now we can focus on building the front-end of our application.\n\n### Adding Material UI in React\n\nThere are a series of steps to follow to add the Material UI Library to our react app. Traverse in the `client` directory and follow the below steps. We are going to use Material Icons in SVG form, so let’s add that package.\n\n```shell\n# Open terminal and install the package\nyarn add @material-ui/core @material-ui/icons\n```\n\nMaterial-UI uses `Roboto` font and we have to add it through Google Font CDN to our client side. Open `public/index.html` add the following. Let’s also change the title.\n\n```html\n<head>\n  <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" />\n  <link\n    rel=\"stylesheet\"\n    href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500\"\n  />\n  <title>MERN App</title>\n</head>\n```\n\nTo see if everything installed correctly and is working, run the client project using command `yarn start`. This will open the default React app that comes with `create-react-app` at URL `http://localhost:3000`. To see our our assets (such as **Roboto** font) being loaded, go to _Developer Tools_ and open _Network_ tab. Refresh the page to reload the assets and you will notice that the font family is being loaded.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*_7ZRhHMJ3-hgT_FbtqrKpw.png' />\n\n### Defining the Home Page\n\nNow let’s build the first component of our application. Create a new file inside `src/components/Home.js` and put the following content.\n\n```js\nimport React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport logo from '../logo.svg';\n\nconst styles = theme => ({\n  card: {\n    maxWidth: 700,\n    margin: 'auto',\n    marginTop: theme.spacing.unit * 5\n  },\n  title: {\n    padding: `${theme.spacing.unit * 3}px ${theme.spacing.unit * 2.5}px ${\n      theme.spacing.unit * 2\n    }px`,\n    color: theme.palette.text.secondary,\n    fontSize: 24\n  },\n  media: {\n    minHeight: 450\n  }\n});\n\nclass Home extends Component {\n  render() {\n    const { classes } = this.props;\n    return (\n      <div>\n        <Card className={classes.card}>\n          <Typography type=\"headline\" component=\"h2\" className={classes.title}>\n            Welcome to the MERN APP\n          </Typography>\n          <CardMedia\n            className={classes.media}\n            image={logo}\n            title=\"Auth with MERN\"\n          />\n          <CardContent>\n            <Typography type=\"body1\" component=\"p\">\n              This is a demo application that uses a Node + MongoDB API for user\n              authentication. Built With React + Material UI.\n            </Typography>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(Home);\n```\n\nThe first component we are importing from `@material-ui` in this file is `withStyles`. It allows us to style a component by declaring a `styles` object with access top-level styles such as we are using `theme` with our home component. We will define these top-level `theme` related styles shortly in `App.js`. Next, we are importing `Card, CardContent, CardMedia` to create a card view. `CardMedia` is used to display any media file whereas `CardContent` is used with `Typography` to output text. Typography is used to present hierarchy based styles over text to the content as clearly and efficiently as possible.\n\nNow open up `App.js` and add the following content.\n\n```js\nimport React, { Component } from 'react';\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport green from '@material-ui/core/colors/green';\nimport red from '@material-ui/core/colors/red';\n\nimport Home from './components/Home';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: '#C8E6C9',\n      main: '#4CAF50',\n      dark: '#2E7D32',\n      contrastText: '#fff'\n    },\n    secondary: {\n      light: '#EF9A9A',\n      main: '#F44336',\n      dark: '#C62828',\n      contrastText: '#000'\n    },\n    openTitle: green['400'],\n    protectTitle: red['400'],\n    type: 'dark'\n  }\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <MuiThemeProvider theme={theme}>\n        <Home />\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n```\n\n`MuiThemeProvider` and `createMuiTheme` classes are used to create default theme. The theme specifies the color of the components, darkness of the surfaces, level of shadow, appropriate opacity of ink elements, and so on. If you wish to customize the theme, you need to use the `MuiThemeProvider` component in order to inject a theme into your application. To configure a theme of your own, `createMuiTheme` is used. You can also make the theme dark by setting type to `dark` like we have done above. Lastly, `<MuiThemeProvider theme={theme}>` is where the top level styles are being passed to child components, in our case `Home`.\n\nIf you render the app by running `yarn start`, you will get the below output.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*ccxb9zV_vqwALeW0ijWLyw.png' />\n\n### Adding React Router\n\nWe need a way to navigate different routes for the user to sign in and sign out. In this section, we will add `react-router` library to our app for this purpose.\n\n```shell\nyarn add react-router react-router-dom\n```\n\n`react-router` library is a collection of navigational components. To get started, create a new file inside `src` folder called `Routes.js`.\n\n```js\nimport React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Home from './components/Home';\n\nclass Routes extends Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n      </Switch>\n    );\n  }\n}\n\nexport default Routes;\n```\n\nThe `Route` component is the main building block of React Router. Anywhere that you want to only render content based on the location’s pathname, you should use a `Route` element. `Switch` is used to group different `Route` components. The route for the homepage, our `Home` component does include an `exact` prop. This is used to state that route should only match when the pathname matches the route’s path exactly. To use the newly created Routes, we have to make some changes to `App.js` to make it work.\n\n```js\nimport React, { Component } from 'react';\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport green from '@material-ui/core/colors/green';\nimport red from '@material-ui/core/colors/red';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport Routes from './Routes';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: '#C8E6C9',\n      main: '#4CAF50',\n      dark: '#2E7D32',\n      contrastText: '#fff'\n    },\n    secondary: {\n      light: '#EF9A9A',\n      main: '#F44336',\n      dark: '#C62828',\n      contrastText: '#000'\n    },\n    openTitle: green['400'],\n    protectTitle: red['400'],\n    type: 'dark'\n  }\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <MuiThemeProvider theme={theme}>\n          <Routes />\n        </MuiThemeProvider>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n```\n\nThe `BrowserRouter` defined above is used when you have a server that will handle dynamic requests.\n\n### Connecting Node server and React\n\nI wrote an article for Crowdbotics dealing [how to connect a Node.js server with the React front end **here**](https://blog.crowdbotics.com/how-to-set-up-a-node-backend-with-hapi-js-for-a-react-web-app/)**.** We do not need to review the whole process. Just open your `package.json` and add the following for our app to kickstart.\n\n```json\n\"proxy\": \"http://localhost:4000/\"\n```\n\nNext, I am going to add methods to be used in different components that will handle API calls from our server side code. Create two new files inside `utils` directory: `api-auth.js` and `api-user.js`.\n\n```js\n// api-user.js\n\nexport const registerUser = user => {\n  return fetch('/api/users/', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  })\n    .then(response => {\n      return response.json();\n    })\n    .catch(err => console.log(err));\n};\n\nexport const findUserProfile = (params, credentials) => {\n  return fetch('/api/users/' + params.userId, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + credentials.t\n    }\n  })\n    .then(response => {\n      return response.json();\n    })\n    .catch(err => console.error(err));\n};\n\nexport const deleteUser = (params, credentials) => {\n  return fetch('/api/users/' + params.userId, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + credentials.t\n    }\n  })\n    .then(response => {\n      return response.json();\n    })\n    .catch(err => console.error(err));\n};\n```\n\nIn `api-auth.js`, add the following.\n\n```js\n// api-auth.js\nexport const signin = user => {\n  return fetch('/auth/signin/', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    credentials: 'include',\n    body: JSON.stringify(user)\n  })\n    .then(response => {\n      return response.json();\n    })\n    .catch(err => console.log(err));\n};\n\nexport const signout = () => {\n  return fetch('/auth/signout/', {\n    method: 'GET'\n  })\n    .then(response => {\n      return response.json();\n    })\n    .catch(err => console.log(err));\n};\n```\n\nThe `signin` method takes care of user credentials from the view component (which we will create shortly), then uses `fetch` to make a `POST` call to verify the user credentials with the backend. The `signout` method uses `fetch` to make a GET call to the sign-out API endpoint on the back-end.\n\n### Front-End: Auth Components\n\nNext, we will setup all the necessary components required for authentication.\n\nOne by one, I am going to create new files so please follow closely.\n\nCreate a new directory inside `components` and call it `auth`. Then, create a new file `auth-helper.js`.\n\n```js\nimport { signout } from '../../utils/api-auth.js';\n\nconst auth = {\n  isAuthenticated() {\n    if (typeof window == 'undefined') return false;\n\n    if (sessionStorage.getItem('jwt'))\n      return JSON.parse(sessionStorage.getItem('jwt'));\n    else return false;\n  },\n  authenticate(jwt, cb) {\n    if (typeof window !== 'undefined')\n      sessionStorage.setItem('jwt', JSON.stringify(jwt));\n    cb();\n  },\n  signout(cb) {\n    if (typeof window !== 'undefined') sessionStorage.removeItem('jwt');\n    cb();\n    //optional\n    signout().then(data => {\n      document.cookie = 't=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';\n    });\n  }\n};\n\nexport default auth;\n```\n\nThese functions will help us manage the state of authentication in the browser. Using these methods our client side app will be able to check whether the user has logged in or not. To protect the routes, such as a user’s profile, from un-authorized access, we have to define a new component inside `PrivateRoute.js` and make use of the methods above.\n\n```js\nimport React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport auth from './auth-helper';\n\nconst PrivateRoute = ({ component: Component, ...rest }) => (\n  <Route\n    {...rest}\n    render={props =>\n      auth.isAuthenticated() ? (\n        <Component {...props} />\n      ) : (\n        <Redirect\n          to={{\n            pathname: '/signin',\n            state: { from: props.location }\n          }}\n        />\n      )\n    }\n  />\n);\n\nexport default PrivateRoute;\n```\n\nWe are going to use this component as an auth flow in the `Routes.js` we have defined. Components that rendered via this route component will only load when the user is authenticated. Our last component related to user authentication is to be defined inside `Signin.js`.\n\n```js\nimport React, { Component } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Icon from '@material-ui/core/Icon';\nimport { withStyles } from '@material-ui/core/styles';\nimport auth from './auth-helper';\nimport { Redirect } from 'react-router-dom';\nimport { signin } from '../../utils/api-auth.js';\n\nconst styles = theme => ({\n  card: {\n    maxWidth: 600,\n    margin: 'auto',\n    textAlign: 'center',\n    marginTop: theme.spacing.unit * 5,\n    paddingBottom: theme.spacing.unit * 2\n  },\n  error: {\n    verticalAlign: 'middle'\n  },\n  title: {\n    marginTop: theme.spacing.unit * 2,\n    color: theme.palette.openTitle\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n    width: 300\n  },\n  submit: {\n    margin: 'auto',\n    marginBottom: theme.spacing.unit * 2\n  }\n});\n\nclass Signin extends Component {\n  state = {\n    email: '',\n    password: '',\n    error: '',\n    redirectToReferrer: false\n  };\n\n  clickSubmit = () => {\n    const user = {\n      email: this.state.email || undefined,\n      password: this.state.password || undefined\n    };\n\n    signin(user).then(data => {\n      if (data.error) {\n        this.setState({ error: data.error });\n      } else {\n        auth.authenticate(data, () => {\n          this.setState({ redirectToReferrer: true });\n        });\n      }\n    });\n  };\n\n  handleChange = name => event => {\n    this.setState({ [name]: event.target.value });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { from } = this.props.location.state || {\n      from: {\n        pathname: '/'\n      }\n    };\n    const { redirectToReferrer } = this.state;\n    if (redirectToReferrer) {\n      return <Redirect to={from} />;\n    }\n\n    return (\n      <Card className={classes.card}>\n        <CardContent>\n          <Typography type=\"headline\" component=\"h2\" className={classes.title}>\n            Sign In\n          </Typography>\n          <TextField\n            id=\"email\"\n            type=\"email\"\n            label=\"Email\"\n            className={classes.textField}\n            value={this.state.email}\n            onChange={this.handleChange('email')}\n            margin=\"normal\"\n          />\n          <br />\n          <TextField\n            id=\"password\"\n            type=\"password\"\n            label=\"Password\"\n            className={classes.textField}\n            value={this.state.password}\n            onChange={this.handleChange('password')}\n            margin=\"normal\"\n          />\n          <br />{' '}\n          {this.state.error && (\n            <Typography component=\"p\" color=\"error\">\n              <Icon color=\"error\" className={classes.error}>\n                error\n              </Icon>\n              {this.state.error}\n            </Typography>\n          )}\n        </CardContent>\n        <CardActions>\n          <Button\n            color=\"primary\"\n            variant=\"raised\"\n            onClick={this.clickSubmit}\n            className={classes.submit}\n          >\n            Submit\n          </Button>\n        </CardActions>\n      </Card>\n    );\n  }\n}\n\nexport default withStyles(styles)(Signin);\n```\n\nThis is a form component that contains `email` and `password` field (\\_as we defined in state above) for the user to enter to get authenticated. `redirectToReferrer` property in state is what we are using if the user gets verified by the server or not. If the credentials entered by the user are valid, this property will trigger `Redirect` component of `react-router-dom`.\n\n### Front-End: User Components\n\nSimilarly to our auth routes, we are going to separate our user components inside `components/user/` folder. First, we need a React component to register a new user. Create a file called `Signup.js`.\n\n```js\nimport React, { Component } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Icon from '@material-ui/core/Icon';\nimport { withStyles } from '@material-ui/core/styles';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Dialog from '@material-ui/core/Dialog';\nimport { Link } from 'react-router-dom';\n\nimport { registerUser } from '../../utils/api-user.js';\n\nconst styles = theme => ({\n  card: {\n    maxWidth: 600,\n    margin: 'auto',\n    textAlign: 'center',\n    marginTop: theme.spacing.unit * 5,\n    paddingBottom: theme.spacing.unit * 2\n  },\n  error: {\n    verticalAlign: 'middle'\n  },\n  title: {\n    marginTop: theme.spacing.unit * 2,\n    color: theme.palette.openTitle\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n    width: 300\n  },\n  submit: {\n    margin: 'auto',\n    marginBottom: theme.spacing.unit * 2\n  }\n});\n\nclass Signup extends Component {\n  state = {\n    name: '',\n    password: '',\n    email: '',\n    open: false,\n    error: ''\n  };\n\n  handleChange = name => event => {\n    this.setState({ [name]: event.target.value });\n  };\n\n  clickSubmit = () => {\n    const user = {\n      name: this.state.name || undefined,\n      email: this.state.email || undefined,\n      password: this.state.password || undefined\n    };\n    registerUser(user).then(data => {\n      if (data.error) {\n        this.setState({ error: data.error });\n      } else {\n        this.setState({ error: '', open: true });\n      }\n    });\n  };\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div>\n        <Card className={classes.card}>\n          <CardContent>\n            <Typography\n              type=\"headline\"\n              component=\"h2\"\n              className={classes.title}\n            >\n              Sign Up\n            </Typography>\n            <TextField\n              id=\"name\"\n              label=\"Name\"\n              className={classes.textField}\n              value={this.state.name}\n              onChange={this.handleChange('name')}\n              margin=\"normal\"\n            />\n            <br />\n            <TextField\n              id=\"email\"\n              type=\"email\"\n              label=\"Email\"\n              className={classes.textField}\n              value={this.state.email}\n              onChange={this.handleChange('email')}\n              margin=\"normal\"\n            />\n            <br />\n            <TextField\n              id=\"password\"\n              type=\"password\"\n              label=\"Password\"\n              className={classes.textField}\n              value={this.state.password}\n              onChange={this.handleChange('password')}\n              margin=\"normal\"\n            />\n            <br />{' '}\n            {this.state.error && (\n              <Typography component=\"p\" color=\"error\">\n                <Icon color=\"error\" className={classes.error}>\n                  error\n                </Icon>\n                {this.state.error}\n              </Typography>\n            )}\n          </CardContent>\n          <CardActions>\n            <Button\n              color=\"primary\"\n              variant=\"raised\"\n              onClick={this.clickSubmit}\n              className={classes.submit}\n            >\n              Submit\n            </Button>\n          </CardActions>\n        </Card>\n        <Dialog open={this.state.open} disableBackdropClick={true}>\n          <DialogTitle>New Account</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              New account successfully created.\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Link to=\"/signin\">\n              <Button color=\"primary\" autoFocus=\"autoFocus\" variant=\"raised\">\n                Sign In\n              </Button>\n            </Link>\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(Signup);\n```\n\nWe start the component by declaring an empty state that contains various properties such as name, email, password and error. The `open` property is used to capture the state of a `Dialog` box.\n\nIn Material UI, a `Dialog` is a type of modal window that appears in front of app content to provide critical information or ask for a decision. The modal in our case will either render an error message or the confirmation message depending on the status returned from the server.\n\nWe are also defining two handler functions. `handleChange` changes the new value of every input field entered. `clickSubmit` invokes when a user after entering their credentials, submit the registration form. This function calls `registerUser` from the API to send the data to the backend for further actions.\n\nCreate a new file called `Profile.js`.\n\n```js\nimport React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport Person from '@material-ui/icons/Person';\nimport Divider from '@material-ui/core/Divider';\nimport auth from '../auth/auth-helper';\nimport { findUserProfile } from '../../utils/api-user.js';\nimport { Redirect, Link } from 'react-router-dom';\n\nimport DeleteUser from './DeleteUser';\n\nconst styles = theme => ({\n  root: theme.mixins.gutters({\n    maxWidth: 600,\n    margin: 'auto',\n    padding: theme.spacing.unit * 3,\n    marginTop: theme.spacing.unit * 5\n  }),\n  title: {\n    margin: `${theme.spacing.unit * 3}px 0 ${theme.spacing.unit * 2}px`,\n    color: theme.palette.protectedTitle\n  }\n});\n\nclass Profile extends Component {\n  constructor({ match }) {\n    super();\n    this.state = {\n      user: '',\n      redirectToSignin: false\n    };\n    this.match = match;\n  }\n  init = userId => {\n    const jwt = auth.isAuthenticated();\n    findUserProfile(\n      {\n        userId: userId\n      },\n      { t: jwt.token }\n    ).then(data => {\n      if (data.error) {\n        this.setState({ redirectToSignin: true });\n      } else {\n        this.setState({ user: data });\n      }\n    });\n  };\n  componentWillReceiveProps = props => {\n    this.init(props.match.params.userId);\n  };\n  componentDidMount = () => {\n    this.init(this.match.params.userId);\n  };\n  render() {\n    const { classes } = this.props;\n    const redirectToSignin = this.state.redirectToSignin;\n    if (redirectToSignin) {\n      return <Redirect to=\"/signin\" />;\n    }\n    return (\n      <Paper className={classes.root} elevation={4}>\n        <Typography type=\"title\" className={classes.title}>\n          Profile\n        </Typography>\n        <List dense>\n          <ListItem>\n            <ListItemAvatar>\n              <Avatar>\n                <Person />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText\n              primary={this.state.user.name}\n              secondary={this.state.user.email}\n            /> {auth.isAuthenticated().user &&\n              auth.isAuthenticated().user._id == this.state.user._id && (\n                <ListItemSecondaryAction>\n                  <DeleteUser userId={this.state.user._id} />\n                </ListItemSecondaryAction>\n              )}\n          </ListItem>\n          <Divider />\n        </List>\n      </Paper>\n    );\n  }\n}\n\nexport default withStyles(styles)(Profile);\n```\n\nThis component shows a single user who is authenticated by the back-end of our application. The profile information of each user is stored in the database. This is done by the `init` function we have defined above the render function of our component.\n\nWe are using `redirectToSignin` redirect to the user on sign-out. We are also adding a delete profile button as a separate component which has to be defined in a separate file called `DeleteUser.js`.\n\n```js\nimport React, { Component } from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core//Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Dialog from '@material-ui/core/Dialog';\nimport Delete from '@material-ui/icons/Delete';\nimport auth from '../auth/auth-helper';\nimport { deleteUser } from '../../utils/api-user';\nimport { Redirect, Link } from 'react-router-dom';\n\nclass DeleteUser extends Component {\n  state = {\n    redirect: false,\n    open: false\n  };\n  clickButton = () => {\n    this.setState({ open: true });\n  };\n  deleteAccount = () => {\n    const jwt = auth.isAuthenticated();\n    deleteUser(\n      {\n        userId: this.props.userId\n      },\n      { t: jwt.token }\n    ).then(data => {\n      if (data.error) {\n        console.log(data.error);\n      } else {\n        auth.signout(() => console.log('deleted'));\n        this.setState({ redirect: true });\n      }\n    });\n  };\n  handleRequestClose = () => {\n    this.setState({ open: false });\n  };\n  render() {\n    const redirect = this.state.redirect;\n    if (redirect) {\n      return <Redirect to=\"/\" />;\n    }\n    return (\n      <span>\n        <IconButton\n          aria-label=\"Delete\"\n          onClick={this.clickButton}\n          color=\"secondary\"\n        >\n          <Delete />\n        </IconButton>\n\n        <Dialog open={this.state.open} onClose={this.handleRequestClose}>\n          <DialogTitle>{'Delete Account'}</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Confirm to delete your account.\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleRequestClose} color=\"primary\">\n              Cancel\n            </Button>\n            <Button\n              onClick={this.deleteAccount}\n              color=\"secondary\"\n              autoFocus=\"autoFocus\"\n            >\n              Confirm\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </span>\n    );\n  }\n}\n\nexport default DeleteUser;\n```\n\nThis component is used for deleting the user profile that exists in the database. It uses the same `deleteUser` API endpoint we defined in our back-end. `deleteAccount` method is responsible for handling this task.\n\n### Front-End: Completing the Navbar\n\nIn this section we are going to complete our client side routes by leveraging a `Navbar` component. Create a new file `component/Navbar.js`.\n\n```js\nimport React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Home from '@material-ui/icons/Home';\nimport Button from '@material-ui/core/Button';\nimport auth from './auth/auth-helper';\nimport { Link, withRouter } from 'react-router-dom';\n\nconst isActive = (history, path) => {\n  if (history.location.pathname == path) return { color: '#F44336' };\n  else return { color: '#ffffff' };\n};\nconst Menu = withRouter(({ history }) => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      <Typography type=\"title\" color=\"inherit\">\n        MERN App\n      </Typography>\n      <Link to=\"/\">\n        <IconButton aria-label=\"Home\" style={isActive(history, '/')}>\n          <Home />\n        </IconButton>\n      </Link>\n      {!auth.isAuthenticated() && (\n        <span>\n          <Link to=\"/signup\">\n            <Button style={isActive(history, '/signup')}>Sign up</Button>\n          </Link>\n          <Link to=\"/signin\">\n            <Button style={isActive(history, '/signin')}>Sign In</Button>\n          </Link>\n        </span>\n      )}\n      {auth.isAuthenticated() && (\n        <span>\n          <Link to={'/user/' + auth.isAuthenticated().user._id}>\n            <Button\n              style={isActive(\n                history,\n                '/user/' + auth.isAuthenticated().user._id\n              )}\n            >\n              My Profile\n            </Button>\n          </Link>\n          <Button\n            color=\"inherit\"\n            onClick={() => {\n              auth.signout(() => history.push('/'));\n            }}\n          >\n            Sign out\n          </Button>\n        </span>\n      )}\n    </Toolbar>\n  </AppBar>\n));\n\nexport default Menu;\n```\n\nThis `Navbar` component will allow us to access routes as views on the front-end. From `react-router` we are importing a High Order Component called `withRouter` to get access to history object's properties and consume our front-end routes dynamically.\n\nUsing `Link` from `react-router` and `auth.isAuthenticated()` from our authentication flow, we are checking for whether the user has access to authenticated routes or not, that is, if they are logged in to our application or not.\n\n`isActive` highlights the view to which the current route is activated by the navigation component.\n\n### Running the Application\n\nThe next step is to import this navigation component inside `Routes.js` and define other necessary routes we need in our app. Open `Routes.js` and add the following.\n\n```js\nimport React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Navbar from './components/Navbar';\n\nimport Home from './components/Home';\nimport PrivateRoutes from './components/auth/PrivateRoutes';\nimport Signin from './components/auth/Signin';\nimport Profile from './components/user/Profile';\nimport Signup from './components/user/Signup';\n\nclass Routes extends Component {\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <PrivateRoutes path=\"/user/edit/:userId\" />\n          <Route path=\"/user/:userId\" component={Profile} />\n          <Route path=\"/signup\" component={Signup} />\n          <Route path=\"/signin\" component={Signin} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default Routes;\n```\n\nAfter completing this test, let’s test our application. Make sure you are running the backend server using `nr dev` command in one tab in your terminal. Using another tab or window, traverse to `client` directory and run the command `yarn start`. Once the application starts, you will be welcomed by the Homepage, as below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*sl6_pEHr8QLBK3hi3V6tTg.png' />\n\nNotice in the navbar above there are three buttons. The home icon is for Home page highlighted `red` in color. If you move on to the sign in page, you will see the sign in button highlighted. We already have one user registered to our application (_when we were building the API_). Please enter the credentials (_email:_ [_jane@doe.com_](mailto:jane@doe.com) and _password: pass1234 or the credentials you entered_) as shown below and submit the form.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*N8oztui9YOVgyHAP1jUW0w.png' />\n\nOn submitting the form you will be redirected to the home page as per the component logic. The changes can be noticed at the navigation menu. Instead of sign-up and sign-in, you will see My Profile and Sign Out button. Click My Profile and you can see the current user’s details.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*-xTVUQbUhb6yJnZIIk6eHw.png' />\n\nOn clicking the `delete` icon it will delete the user. You can also try signing out of the application by clicking on the sign out button from navigation and then you will be redirected to the home page.\n\n### Conclusion\n\nWe have reached the end. Even though this tutorial is lengthy and, a lot is going on, I am sure if you take your time, you will understand the concepts and the logic behind it. It is after all, a full-stack MERN application. It uses JSON Web Tokens as an authentication strategy.\n\nIf you want to learn **how to deploy this application, you can continue to read** [**this article**](https://amanhimself.dev/blog/deploy-a-mern-stack-app-on-heroku)**.**\n\n**The complete code for the tutorial at [this Github repository](https://github.com/amandeepmittal/mern-material-demo)**\n",
            "url": "https://amanhimself.dev//blog/building-a-mern-stack-app-with-material-ui",
            "title": "Building an authenticated MERN Stack App Using Material UI",
            "summary": "Building an authenticated MERN Stack App Using Material UI",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/how-to-build-a-serverless-backend-with-aws-lambda-and-nodejs",
            "content_html": "---\ntitle: 'How to Build a Serverless Backend with AWS Lambda and Nodejs'\ndate: '2018-11-13'\nslug: 'how-to-build-a-serverless-backend-with-aws-lambda-and-nodejs'\nthumbnail: '/thumbnails/node.png'\ntag: 'nodejs'\ncanonicalUrl: 'https://medium.com/crowdbotics/how-to-build-a-serverless-backend-with-aws-lambda-and-nodejs-e0d1257086b4'\n---\n\nServerless architecture is a cloud computing execution model where a cloud provider like AWS, Azure or Google Cloud is used to deploy backend or server-side code. In comparison to traditionally deployed web applications, in serverless architecture, the developer does not has to maintain the servers or the infrastructure. They only have to pay a subscription to the third party vendor whereas the vendor is responsible to handle the operation of the backend logic of a server along with scalability, reliability, and security.\n\nThere are two ways a serverless architecture can be implemented in order to deploy your server-side code. First one is Backend as a Service or **_BaaS_**. A good example of this is Firebase which you can often see in conjunction between a web or a mobile application to a database or providing user authentication.\n\nWhat we are going to focus in this article is called Function as a Service or **_FaaS_**. With FaaS, the server code is run inside containers that are usually triggered by common events such as HTTP requests from the client, database operations, file uploads, scheduled events and so on. The code on the cloud provider that is deployed and getting executed is in the form of a function.\n\nIn FaaS, these functions are deployed in modular form. One function corresponds to each operation, thus eliminating the rest of the code and time spent on writing boilerplate code for setting up a server and data models. These modular functions can further be scaled automatically and independently. This way, more time can be spent on writing the logic of the application that a potential user is going to interact with. You do not have to scale for the entire application and pay for it. Common use cases of FaaS so far have been implemented are scheduled tasks (or cron jobs), automation, [web applications](https://www.crowdbotics.com/build/build-software-faster), and [chatbots](https://www.crowdbotics.com/build/chatbot-software).\n\nCommon FaaS service platform providers are:\n\n- AWS Lambda\n- [Google Cloud](https://medium.com/u/4f3f4ee0f977) Functions\n- Microsoft Azure Functions\n- [Apache OpenWhisk](https://medium.com/u/3d89752f34da)\n\nIn the following tutorial, we are going to create a demo to deploy on a serverless infrastructure provider such as AWS Lambda.\n\n### What is AWS Lambda?\n\nIn order to build and deploy a backend function to handle a certain operation, I am going to start with setting up the service provider you are going to use to follow this article. AWS Lambda supports different runtimes such as [Node.js](https://www.crowdbotics.com/build/node-js), Java, Python, .NET Core and Go for you to execute a function.\n\nThe function runs inside a container with a 64-bit Amazon Linux AMI. You might be thinking, ‘why I am telling you all of this?’ Well, using serverless for the first time can be a bit overwhelming and if you know what you are getting in return, that’s always good! More geeky stuff is listed below.\n\n- Memory: 128MB — 3008MB\n- Ephemeral disk space: 512MB\n- Max execution duration: 300 seconds\n- Compressed package size: 50MB\n- Uncompressed package size: 250MB\n\nThe execution duration here means that your Lambda function can only run a maximum of 5 minutes. This does mean that it is not meant for running longer processes. The disk space is the form of a temporary storage. The package size refers to the code necessary to trigger the server function. In case of Node.js, this does mean that any dependencies that are being imported into our server (for example, `node_modules/` directory).\n\nA typical lambda function in a Node.js server will look like below.\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*a8oVpnOEISTzsuLEH9UaqA.png' />\n\nIn the above syntax, `handlerFunction` is the name of our Lambda function. The `event` object contains information about the event that triggers the lambda function on execution. The `context` object contains information about the runtime. Rest of the code is written inside the Lambda function and at last a `callback` is invoked with an error object and result object. We will learn more about these objects later when are going to implement them.\n\n### Setting up AWS Lambda\n\nIn order to setup a Lambda function on AWS, we need to first register an account for the access keys. Use your credentials to login or signup a new account on [console.amazon.com](https://portal.aws.amazon.com/billing/signup#/start) and once you are through the verification process you will be welcomed by the following screen.\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*Z_nBXZzDdIuiuM6JdFGqGA.png' />\n\nTo get the keys and permissions in order to deploy a function, we have to switch to Identity and Access Management (IAM). Then go to `Users` tab from the left hand sidebar and click on the button `Add user`. Fill in the details in the below form and do enable `Access Type > Programmatic Access`.\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*PHUnYi1euJNBo1DCgIP2Sw.png' />\n\nThen on the next page, select `Attach Existing Policies Directly` and then select a policy name `AdministratorAccess`.\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*ZwcXfwj7ZtSW6PzZxGJDNQ.png' />\n\nClick `Next: Review` button and then click `Create User` button when displayed. Proceeding to the next step you will see the user was created. Now, and only now, will you have access to the users Access Key ID and Secret Access Key. This information is unique for every user you create.\n\n### Creating a Serverless Function\n\nWe are going to use install an npm dependency first to proceed and scaffold a new project. Open up your terminal and install the following.\n\n```shell\nnpm install -g serverless\n```\n\nOnce installed, we can run the serverless framework in the terminal by running the command:\n\n```shell\nserverless\n```\n\nOr use the shorthand `sls` for `serverless`. This command will display all the available commands that come with the serverless framework.\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*J5dUlRdUkpTqNY2POPK7ag.png' />\n\nAfter installing the `serverless` dependency as a global package, you are ready to create your first function. To start, you will need to configure your AWS registered user credentials. AWS gives you a link to download access keys when creating a user.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*b8xegxAg6xjsMC4CHFsYzA.png' />\n\nYou can also visit your username and visit _Security Credentials_ like below.\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*9M0Nb4QTI9gFxoG1wVh1jA.png' />\n\nNow let us configure AWS with the serverless package.\n\n```shell\nsls config credentials --provider aws --key ACCESS_KEY --secret SECRET_KEY\n```\n\nIf the above command runs successfully you will get a success message like below\n\n<img src='https://cdn-images-1.medium.com/max/800/1*uqlYKZAAgpDAWmXhN8mB0A.png' />\n\nThe good thing about using `serverless` npm package is that it comes with pre-defined templates that you can create in your project using a command and also creates a basic configuration for us that is required to deploy our Lambda function. To get started, I am going to use `aws-nodejs` template inside a new directory.\n\n```shell\nsls create -t aws-nodejs -p aws-serverless-demo && cd aws-serverless-demo\n```\n\nThe `-p` flag will create a new directory with name `aws-serverless-demo`. The `-t` flag uses the pre-defined boilerplate. The result of this will create three new files in your project directory.\n\n- Usual `.gitignore`\n- `handler.js` where we will write our handle function\n- `serverless.yml` contains the configuration\n\nThe default handler file looks like below.\n\n```js\n'use strict';\n\nmodule.exports.hello = async (event, context) => {\n  return {\n    statusCode: 200,\n    body: JSON.stringify({\n      message: 'Go Serverless v1.0! Your function executed successfully!',\n      input: event\n    })\n  };\n\n  // Use this code if you don't use the http event with the LAMBDA-PROXY integration\n  // return { message: 'Go Serverless v1.0! Your function executed successfully!', event };\n};\n```\n\nIn the above file, `hello` is the function that has two parameters: `event`, and `context`. `module.exports` is basic Nodes syntax as well as the rest of the code. You can clearly see it also supports ES6 features. An `event` is an object that contains all the necessary request data. The `context` object contains AWS-specific values. We have already discussed it before. Let us modify this function to our needs and add a third parameter called the`callback`. Open `handler.js` file and edit the `hello` function.\n\n```js\n'use strict';\n\nmodule.exports.hello = (event, context, callback) => {\n  console.log('Hello World');\n  callback(null, 'Hello World');\n};\n```\n\nThe `callback` function must be invoked with an `error` response as the first argument, in our case it is `null` right now or a valid response as the second argument which is currently sending a simple `Hello World` message. We can now deploy this handler function using the command below from your terminal window.\n\n```shell\nsls deploy\n```\n\nIt will take a few minutes to finish the process. Our serverless function gets packed into a `.zip` file. Take a notice at the **Service Information** below. It contains all the information what endpoints are available, what is our function, where it is deployed and so on.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*m2FL-IdSqaFhKMuSmKnT_Q.png' />\n\nYou can try the `invoke` attribute like following to run the function and see the result.\n\n```shell\nsls invoke --function hello\n```\n\nThe output will look like below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*W_iWmZ_bVhyjp7mfbmBN6Q.png' />\n\nTake a look at the configuration in `serverless.yml`.\n\n```yml\n# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to\n#     work with those  events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n```\n\n### REST API with Serverless Stack\n\nIn this part of the tutorial, I will show you **how to hook up a MongoDB database as a service to a Serverless REST API.** We are going to need three things that will complete our tech stack. They are:\n\n- AWS Lambda\n- Node.js\n- MongoDB Atlas\n\nWe already have the first two, all we need is to setup a [MongoDB](https://medium.com/u/db5cd12199bd) cloud database called Atlas. MongoDB Atlas is a database as a service developed by the team behind the MongoDB itself. Along with providing a free/paid tier for storing your data on the cloud, MongoDB Atlas provides a lot of analytics that is essential to manage and monitor your application. MongoDB Atlas does provide a free tier that we will be using with our serverless stack.\n\n### Creating a database on MongoDB Atlas\n\nWe will start by creating a database on the MongoDB Atlas. Login to the site and create an account if you do not have it already. We just need a sandbox environment to get hands-on experience so we must opt for free tier. Once you have your account set up, open up your account page and add a new organization.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*7W3seaSdt-J2JfQYHidnhQ.png' />\n\nNow, after entering the name, proceed further and click on _Create Organization_.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*PfITUpnG3MXuQz23mskXNQ.png' />\n\nYou will be then prompted to the main screen where you can create a new project. Type in the name of your project and proceed further.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*d9BZjyAy5FPLB7TEXq3Ccw.png' />\n\nMongoDB Atlas is secured by default. You need to set permissions before we leverage its usage in our app. You can name the database at the pointed field below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*h1fSIz3G3svG6wzTCATiAA.png' />\n\nNow, we can add our free sandbox to this project. It is called a cluster.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*1PO22dNYhGRkSzuwEilmFg.png' />\n\nAfter all that, just add an admin user for the cluster and give him a really strong password. As you can see the price for this cluster will be `$0.00` forever. Your cluster will take a few minutes to deploy. While that is underway, let us finally start writing some code.\n\n### Building the API\n\nNext, we install all the necessary dependencies in order to create the API.\n\n```shell\ninit -y\nnpm i --save mongoose dotenv\n```\n\nAfter that, we configure the `serverless.yml` and add the other handler functions that we need to deploy.\n\n```yml\n# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n  create:\n    handler: handler.create # point to exported create function in handler.js\n    events:\n      - http:\n          path: notes # path will be domain.name.com/dev/notes\n          method: post\n          cors: true\n  getOne:\n    handler: handler.getOne\n    events:\n      - http:\n          path: notes/{id} # path will be domain.name.com/dev/notes/1\n          method: get\n          cors: true\n  getAll:\n    handler: handler.getAll # path will be domain.name.com/dev/notes\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n  update:\n    handler: handler.update # path will be domain.name.com/dev/notes/1\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n  delete:\n    handler: handler.delete\n    events:\n      - http:\n          path: notes/{id} # path will be domain.name.com/dev/notes/1\n          method: delete\n          cors: true\n```\n\nThe CRUD operations that will handle the functionalities of the REST API are going to be in the file `handler.js`. Each event contains the event information of the current event that will be invoked from the `handler.js`. In the above configuration file, we have defined each CRUD operation along with an event and the name. Also notice, when defining the `events` in above file, we are associating an HTTP request with a `path` that is going to be the endpoint of the CRUD operation in the API, the HTTP method and lastly, `cors` option.\n\nI am going to demonstrate a simple Note taking app through our REST API. These CRUD operations are going to be the core of it. Since our API is going to be hosted remotely, we have to enable Cross-Origin Resource Sharing. No need to install another dependency on that. Serverless configuration file has support for it. Just specify in the `events` section like `cors: true`. By default, it is false.\n\n### Defining the Handler Functions\n\nIf you are familiar with Node.js and Express framework you will notice there is little difference in creating a controller function that leads to the business logic of a route. The similar approach we are going to use to define in each handler function.\n\n```js\n'use strict';\n\nmodule.exports.hello = (event, context, callback) => {\n  console.log('Hello World');\n  callback(null, 'Hello World');\n};\n\nmodule.exports.create = (event, context, callback) => {\n  context.callbackWaitsForEmptyEventLoop = false;\n\n  connectToDatabase().then(() => {\n    Note.create(JSON.parse(event.body))\n      .then(note =>\n        callback(null, {\n          statusCode: 200,\n          body: JSON.stringify(note)\n        })\n      )\n      .catch(err =>\n        callback(null, {\n          statusCode: err.statusCode || 500,\n          headers: { 'Content-Type': 'text/plain' },\n          body: 'Could not create the note.'\n        })\n      );\n  });\n};\n\nmodule.exports.getOne = (event, context, callback) => {\n  context.callbackWaitsForEmptyEventLoop = false;\n\n  connectToDatabase().then(() => {\n    Note.findById(event.pathParameters.id)\n      .then(note =>\n        callback(null, {\n          statusCode: 200,\n          body: JSON.stringify(note)\n        })\n      )\n      .catch(err =>\n        callback(null, {\n          statusCode: err.statusCode || 500,\n          headers: { 'Content-Type': 'text/plain' },\n          body: 'Could not fetch the note.'\n        })\n      );\n  });\n};\n\nmodule.exports.getAll = (event, context, callback) => {\n  context.callbackWaitsForEmptyEventLoop = false;\n\n  connectToDatabase().then(() => {\n    Note.find()\n      .then(notes =>\n        callback(null, {\n          statusCode: 200,\n          body: JSON.stringify(notes)\n        })\n      )\n      .catch(err =>\n        callback(null, {\n          statusCode: err.statusCode || 500,\n          headers: { 'Content-Type': 'text/plain' },\n          body: 'Could not fetch the notes.'\n        })\n      );\n  });\n};\n\nmodule.exports.update = (event, context, callback) => {\n  context.callbackWaitsForEmptyEventLoop = false;\n\n  connectToDatabase().then(() => {\n    Note.findByIdAndUpdate(event.pathParameters.id, JSON.parse(event.body), {\n      new: true\n    })\n      .then(note =>\n        callback(null, {\n          statusCode: 200,\n          body: JSON.stringify(note)\n        })\n      )\n      .catch(err =>\n        callback(null, {\n          statusCode: err.statusCode || 500,\n          headers: { 'Content-Type': 'text/plain' },\n          body: 'Could not fetch the notes.'\n        })\n      );\n  });\n};\n\nmodule.exports.delete = (event, context, callback) => {\n  context.callbackWaitsForEmptyEventLoop = false;\n\n  connectToDatabase().then(() => {\n    Note.findByIdAndRemove(event.pathParameters.id)\n      .then(note =>\n        callback(null, {\n          statusCode: 200,\n          body: JSON.stringify({\n            message: 'Removed note with id: ' + note._id,\n            note: note\n          })\n        })\n      )\n      .catch(err =>\n        callback(null, {\n          statusCode: err.statusCode || 500,\n          headers: { 'Content-Type': 'text/plain' },\n          body: 'Could not fetch the notes.'\n        })\n      );\n  });\n};\n```\n\nThe context contains all the information about the handler function. How long it has been running, how much memory it is consuming among other things. In above, every function has the same value of `context.callbackWaitsForEmptyEventLoop` set to false and starts with `connectToDatabase` function call. The context object property `callbackWaitsForEmptyEventLoop` value is by default set to true. This property is used to modify the behavior of a callback.\n\nBy default, the callback will wait until the event loop is empty before freezing the process and returning the results to the invoked function. By setting this property’s value to false, it requests the AWS Lambda to freeze the process after the callback is called, even if there are events in the event loop. You can read more about this context property at the official [Lambda Documentation](https://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-context.html).\n\n### Connecting MongoDB\n\nWe need to create a connection between the database and our serverless functions in order to consume the CRUD operations in real-time. Create a new file called `db.js` in the root and append it with following.\n\n```js\nconst mongoose = require('mongoose');\nmongoose.Promise = global.Promise;\nlet isConnected;\n\nmodule.exports = connectToDatabase = () => {\n  if (isConnected) {\n    console.log('=> using existing database connection');\n    return Promise.resolve();\n  }\n\n  console.log('=> using new database connection');\n  return mongoose.connect(process.env.DB).then(db => {\n    isConnected = db.connections[0].readyState;\n  });\n};\n```\n\nThe is common Mongoose connection that you might have seen in other Nodejs apps if using MongoDB as a database. The only difference here is that we are exporting `connectToDatabase` to import it inside `handler.js` for each CRUD operation. Modify `handler.js` file and import it at the top.\n\n```js\n'use strict';\n\nconst connectToDatabase = require('./db');\n```\n\nNext step is to define the data model we need in order for things to work. Mongoose provides this functionality too. Serverless stack is unopinionated about which ODM or ORM you use in your application. Create a new file called `notes.model.js` and add the following.\n\n```js\nconst mongoose = require('mongoose');\nconst NoteSchema = new mongoose.Schema({\n  title: String,\n  description: String\n});\nmodule.exports = mongoose.model('Note', NoteSchema);\n```\n\nNow import this model inside `handler.js` for our callbacks at the top of the file.\n\n```js\nconst Note = require('./notes.model.js');\n```\n\n### Using Dotenv and Environment Variables\n\nProtecting our keys and other essentials is the first step to a secured backend application. Create a new file called variables.env. In this file, we will add our MONGODB connection URL that we have already used in `db.js` as a `process.env.DB`. The good thing about environment variables is that they are global to the scope of the application.\n\nTo find out our MongoDB URL, we need to go back to the mongodb atlas, to out previously created cluster. Click the button `Connect` and then you will be prompted a page where you can choose how to access the application. Click `Allow Access From Anywhere`.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*tu5gwq1g-L_nWjpfUEz_ag.png' />\n\n<img src='https://cdn-images-1.medium.com/max/800/1*sMkkGj1_unFYQveVf2Huew.png' />\n\nCopy the mongodb URL from above and paste it in the `variables.env` file.\n\n```shell\nDB=mongodb://<user>:<password>@cluster0-shard-00-00-e9ai4.mongodb.net:27017,\ncluster0-shard-00-01-e9ai4.mongodb.net:27017,cluster0-shard-00-02-e9ai4.mongodb.\nnet:27017/test?ssl=true&replicaSet=Cluster0-shard-0&authSource=admin\n```\n\nReplace the user and password field with your credentials. Now to make it work, all we have to add the following line in our `handler.js`.\n\n```js\nrequire('dotenv').config({ path: './variables.env' });\n```\n\n### Deployment\n\nAll you have to do is run the deploy command from the terminal.\n\n```shell\nsls deploy\n```\n\nSince we have connected our Lambda function, this command will prompt us with a different endpoints. Each handler function is deployed as a separate REST endpoint.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*vNUMO69rnmx5y-QF3Kr6-Q.png' />\n\nYou can test your API using CURL command from the terminal like below.\n\n```shell\ncurl -X POST https://7w3e8tfao0.execute-api.us-east-1.amazonaws.com/dev/notes --data '{\"title\": \"My First\nNote\", \"description\": \"This is a note.\"}'\n```\n\n**The complete code for the tutorial at [this Github repository](https://github.com/amandeepmittal/aws-serverless-demo)**\n\n[Originally published at Crowdbotics](https://medium.com/crowdbotics/how-to-build-a-serverless-backend-with-aws-lambda-and-nodejs-e0d1257086b4)\n",
            "url": "https://amanhimself.dev//blog/how-to-build-a-serverless-backend-with-aws-lambda-and-nodejs",
            "title": "How to Build a Serverless Backend with AWS Lambda and Nodejs",
            "summary": "How to Build a Serverless Backend with AWS Lambda and Nodejs",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/creating-a-graphql-server-with-nodejs-in-2018",
            "content_html": "---\ntitle: 'Creating a GraphQL server with Nodejs'\ndate: '2018-11-05'\nslug: 'creating-a-graphql-server-with-nodejs-in-2018'\nthumbnail: '/thumbnails/graphql.png'\ntag: 'graphql'\ncanonicalUrl: 'https://medium.com/crowdbotics/creating-a-graphql-server-with-nodejs-ef9814a7e0e6'\n---\n\n![cover](https://i.imgur.com/kcItwPv.png)\n\n> [Originally published at Crowdbotics](https://medium.com/crowdbotics/creating-a-graphql-server-with-nodejs-ef9814a7e0e6)\n\nWhen it comes to network requests between a client and a server application, REST (which stands for _Representational state transfer_) is one of the most popular choices for connecting the two. In the world of [REST APIs](https://blog.crowdbotics.com/how-to-build-a-rest-api-with-koajs/), everything revolves around the idea of having resources as accessible URLs. We then use CRUD operations (Create, Read, Update, Delete), which are basically HTTP methods such as GET, POST, PUT & DELETE, to interact with the data.\n\nHere is an example of a typical REST request:\n\n```json\n// example of a request\nhttps://swapi.co/api/people/\n\n// response of the above request in JSON\n{\n\t\"results\": [\n\t\t{\n\t\t\t\"name\": \"Luke Skywalker\",\n\t\t\t\"gender\": \"male\",\n\t\t\t\"homeworld\": \"https://swapi.co/api/planets/1/\",\n\t\t\t\"films\": [\n\t\t\t\t\"https://swapi.co/api/films/2/\",\n\t\t\t\t\"https://swapi.co/api/films/6/\",\n\t\t\t\t\"https://swapi.co/api/films/3/\",\n\t\t\t\t\"https://swapi.co/api/films/1/\",\n\t\t\t\t\"https://swapi.co/api/films/7/\"\n\t\t\t],\n    }\n\t\t{\n\t\t\t\"name\": \"C-3PO\",\n\t\t\t\"gender\": \"n/a\",\n\t\t\t\"homeworld\": \"https://swapi.co/api/planets/1/\",\n\t\t\t\"films\": [\n\t\t\t\t\"https://swapi.co/api/films/2/\",\n\t\t\t\t\"https://swapi.co/api/films/5/\",\n\t\t\t\t\"https://swapi.co/api/films/4/\",\n\t\t\t\t\"https://swapi.co/api/films/6/\",\n\t\t\t\t\"https://swapi.co/api/films/3/\",\n\t\t\t\t\"https://swapi.co/api/films/1/\"\n\t\t\t],\n\t\t}\n  ]\n}\n```\n\nThe response format for a REST API is not necessarily JSON, but this is the preferred method these days with most APIs. **Apart from REST, another way to handle network requests has emerged: GraphQL. Open sourced in 2015, GraphQL is changing the way developers write an API on the server side and handle it on the client side.** GraphQL was developed and is actively maintained by Facebook.\n\n### Shortcomings of REST\n\nGraphQL is a query language to develop an API. In contrast to REST, which is an architecture or ‘a way of doing things’, graphQL was developed with a concept in mind that a client requests only the desired set of items from the server in a single request.\n\nIn REST architecture or like on our above example, when fetching the films Luke Skywalker appeared in in Star Wars movies, we are getting an array of `films` or the name of `homeworld` which further consists different API URLs that lead us to details of different sets of JSON data. This is certainly an example of over fetching. The client side, in order to get the details of films in which the character Luke Skywalker appeared, and the name of his home planet, will have to send multiple requests to the server.\n\nWith GraphQL, this can be resolved into a single network request. Hop on to the API url: `https://graphql.github.io/swapi-graphql/` and see run the following query.\n\n_Note: In the example below, you can ignore how the GraphQL API is working behind the scenes. I will be walking you step by step to build your own (maybe the first) GraphQL API later in this tutorial._\n\n```graphql\n{\n  allPeople {\n    edges {\n      node {\n        name\n        gender\n        homeworld {\n          name\n        }\n        filmConnection {\n          edges {\n            node {\n              title\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nWe are going to fetch the data that we need such as the name of the character, their `gender`, `homeworld`, and the title of the `films` they appeared. After running the above query, you will get the following result:\n\n```json\n{\n  \"data\": {\n    \"allPeople\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"name\": \"Luke Skywalker\",\n            \"gender\": \"male\",\n            \"homeworld\": {\n              \"name\": \"Tatooine\"\n            },\n            \"filmConnection\": {\n              \"edges\": [\n                {\n                  \"node\": {\n                    \"title\": \"A New Hope\"\n                  }\n                },\n                {\n                  \"node\": {\n                    \"title\": \"The Empire Strikes Back\"\n                  }\n                },\n                {\n                  \"node\": {\n                    \"title\": \"Return of the Jedi\"\n                  }\n                },\n                {\n                  \"node\": {\n                    \"title\": \"Revenge of the Sith\"\n                  }\n                },\n                {\n                  \"node\": {\n                    \"title\": \"The Force Awakens\"\n                  }\n                }\n              ]\n            }\n          }\n        },\n        {\n          \"node\": {\n            \"name\": \"C-3PO\",\n            \"gender\": \"n/a\",\n            \"homeworld\": {\n              \"name\": \"Tatooine\"\n            },\n            \"filmConnection\": {\n              \"edges\": [\n                {\n                  \"node\": {\n                    \"title\": \"A New Hope\"\n                  }\n                },\n                {\n                  \"node\": {\n                    \"title\": \"The Empire Strikes Back\"\n                  }\n                },\n                {\n                  \"node\": {\n                    \"title\": \"Return of the Jedi\"\n                  }\n                },\n                {\n                  \"node\": {\n                    \"title\": \"The Phantom Menace\"\n                  }\n                },\n                {\n                  \"node\": {\n                    \"title\": \"Attack of the Clones\"\n                  }\n                },\n                {\n                  \"node\": {\n                    \"title\": \"Revenge of the Sith\"\n                  }\n                }\n              ]\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\nIf the client side of an application is triggering the above GraphQL URL, it will only send one request on the network to get the desired result, thus eliminating any possibility of over fetching or sending multiple requests.\n\n### Pre-requisites\n\nTo follow this tutorial, all you need is `Nodejs` and `npm` installed on your local machine.\n\n- [Nodejs](http://nodejs.org) `^8.12.0`\n- npm `^6.4.1`\n\n### GraphQL in a nutshell\n\nIn a nutshell, **GraphQL** is a syntax that elucidates how to ask for _data_ and is generally used to retrieve data (aka, a _query_) or make changes to it (aka _mutation)_ from a server to a client.\n\nGraphQL has few defining characteristics:\n\n- It lets the client specify exactly what data it needs. This is also known as declarative data fetching.\n- It is not opinionated about the network layer\n- It makes easier to combine several sets of data from multiple sources\n- It uses a strongly typed system when declaring the structure of data in the form of both the schema and the query. This helps to validate the queries even before the network requests are sent.\n\n### Building Blocks of a GraphQL API\n\nA GraphQL API has four building blocks:\n\n- schema\n- query\n- mutations\n- resolvers\n\n**Schema** is defined at the server in the form of objects. Each object corresponds to data types such that they can be queried upon. For example:\n\n```graphql\ntype User {\n  id: ID!\n  name: String\n  age: Int\n}\n```\n\nThe schema above defines the shape of a user object with a required field `id` denoted by the `!` sign. Other fields such as the`name` which is of type _string_ and age which is of type _integer_ are also included. This also validates the schema when querying for the data.\n\n**Queries** are what you use to make a request to a GraphQL API. For instance, in our example above, when we are fetching the data related to a Star Wars character. Let us simplify this. To query in GraphQL, it is about asking for specific fields on objects. For example, using the same API as we did above, we fetch the name of all the characters in Star Wars. Below you can see the difference. On left-hand side of the image, is the query and on the right-hand side is the image.\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*L-Z_EF1tNkq4jUhsopHasw.png' />\n\nThe good thing about GraphQL queries is that they can be nested to go as deep as you’d like. This is hard to do in a REST API. The operation becomes much more complex.\n\nBelow is another example of a nested query, a more complex one\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*ug3h4hZmAeuNHyy93Ygy2Q.png' />\n\n**Mutations:** In REST architecture, to modify the data we either use `POST` to add data or `PUT` to update the existing fields with the data. In GraphQL, the overall concept is similar. You will send a query to cause the write operations on the server side. However, this form of the query is called a Mutation.\n\n**Resolvers** are the link between the schema and the data. They provide functionality that can be used to interact with databases through different operations.\n\n_In this tutorial, you will learn how to setup a GraphQL server with_ [_Nodejs_](https://www.crowdbotics.com/build/node-js?utm_source=medium&utm_campaign=nodeh&utm_medium=node&utm_content=koa-rest-api) _using the same building blocks we have just learned._\n\n### Hello World! with GraphQL\n\nLets now write our first GraphQL server. For this tutorial, we are going to use [Apollo Server.](https://www.apollographql.com/docs/apollo-server/) We need to install three packages in total for the Apollo Server to work with our existing Express application as a middleware. The good thing about Apollo Server is that it can be used with several popular frameworks for Node.js: Express, [Koa](https://medium.com/crowdbotics/building-a-rest-api-with-koajs-417c276929e2), and [Hapi](https://medium.com/crowdbotics/setting-up-nodejs-backend-for-a-react-app-fe2219f26ea4). Apollo itself is kept library-agnostic, so it is possible to connect it with a lot of third-party libraries in client and server applications.\n\nOpen your terminal and install the following dependencies:\n\n```shell\n# First create a new empty directory\nmkdir apollo-express-demo\n\n# Then initialize it\nnpm init -y\n\n# Install required dependencies\nnpm install --save graphql apollo-server-express express\n```\n\nLet us understand briefly what these dependencies do.\n\n- `graphql` is a support library and is a required module for our purpose\n- `apollo-server-express` is added to an existing application and is a corresponding HTTP server support package\n- `express` web framework for Nodejs\n\nYou can take a look at the following image of all the dependencies I installed without any error.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*gCozaTuzY6DHaPG4Ya43zA.png' />\n\nCreate a new file called `index.js` at the root of your project with the following code.\n\n```js\nconst express = require('express');\nconst { ApolloServer, gql } = require('apollo-server-express');\n\nconst typeDefs = gql`\n  type Query {\n    hello: String\n  }\n`;\n\nconst resolvers = {\n  Query: {\n    hello: () => 'Hello world!'\n  }\n};\n\nconst server = new ApolloServer({ typeDefs, resolvers });\n\nconst app = express();\nserver.applyMiddleware({ app });\n\napp.listen({ port: 4000 }, () =>\n  console.log(`🚀 Server ready at http://localhost:4000${server.graphqlPath}`)\n);\n```\n\nThis is our initial server file in which we start by simply requiring the `express` module. The `gql` is a template literal tag that is used for writing GraphQL schema as types. The schema consists of type definitions with a mandatory _Query_ type for reading data. It can further have fields and nested fields representing other data fields. In our above example, we are defining `typeDefs` to write a graphQL schema.\n\nThen `resolvers` come into picture. Resolvers are used to return data for the fields from a schema. We are defining one resolver in our example which maps the function `hello()` to implement on our schema. Next, we create a `server` that uses the `ApolloServer` class to instantiate and start the server. Since we are using Express, we need to integrate the `ApolloServer` class. We are passing it by the method `applyMiddleware()` as the`app` to add the Apollo Server’s middleware. `app` here represents the existing application and is an instance of Express.\n\nLastly, we bootstrap the server by using `app.listen()` which is provided by the Express module itself. To run the server, open up your terminal and run the command `node index.js`. Now, from a browser window, visit the url: `http://localhost:4000/graphql` to see it action.\n\nApollo Server sets up GraphQL Playground for you so that you can start running queries and exploring schemas quickly as shown below.\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*ba4JULFAk5VbSFRsNxof8g.png' />\n\nTo run a query, type the following query on the left-hand side which is the editable space and then press the ▶ (play) button in the middle.\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*SGaIF-GZ0E0QLg2K6sJ7CA.png' />\n\nThe schema tab on the right-hand side describes the data type of our query `hello`. This is coming straight from the `typeDefs` we defined in our server.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*3v_Uh_k2gjC-XueD9PhWvQ.png' />\n\n_Voila!_ You just created your first GraphQL server. Now let us extend our current knowledge for the real world.\n\n### Building an API with GraphQL\n\nSo far we have put together all the modules and whatever necessary terminology that comes with it. In this section, we are going to create a small _Star Wars API_ for our own demonstration purpose using Apollo Server. You might have guessed by now that Apollo server is a library that helps you to connect a GraphQL schema to an HTTP server using Nodejs. It is not bound to only a specific Node framework, for example, we used ExpressJS in the previous section. It supports [Koa](https://medium.com/crowdbotics/building-a-rest-api-with-koajs-417c276929e2), Restify, [Hapi](https://medium.com/crowdbotics/setting-up-nodejs-backend-for-a-react-app-fe2219f26ea4), and Lambda too. For our API, let’s continue to use Express.\n\n### Compiling with Babel\n\nIf you want to start from scratch, go ahead and.install all the libraries from the section `Hello World! With GraphQL`. Here are dependencies the we installed in the previous section:\n\n```json\n\"dependencies\": {\n\t\t\"apollo-server-express\": \"^2.1.0\",\n\t\t\"express\": \"^4.16.4\",\n\t\t\"graphql\": \"^14.0.2\"\n\t}\n```\n\nI am going to use the same project and the same file `index.js` to bootstrap the server. But before we start building our API, I want you to show you how to use ES6 modules in our demo project. Working with front-end libraries like React and Angular which already have support for ES6 features such as `import` and `export default` statements. Nodejs version `8.x.x` has way around this. All we need is a transpiler which allows us to write JavaScript using ES6 features. You can totally skip this step and use the good old `require()` statements.\n\nWhat is a _transpiler_ though?\n\n> Transpilers are also known as ‘source-to-source compilers’ that read code from source written in one programming language and produce an equivalent code in another language.\n\nIn the case of Nodejs, we are not switching programming languages, rather we need to use new language features that are not supported by the LTS version of Node I am using. I am going to setup [**Babel**](https://babeljs.io/) **compiler** and enable it in our project by going through the following configuration process.\n\nFirst, you will have to install few dependencies and do mind `-D` flag as we only need these dependencies for our development environment.\n\n```shell\nnpm install -D babel-cli babel-preset-env babel-watch\n```\n\nOnce you have installed them, add a `.babelrc` file to the root of the project and add the following config:\n\n```json\n{\n  \"presets\": [env]\n}\n```\n\nThe last step in the configuration process is to add a `dev` `script` in `package.json`. This will take care of running the babel compiler on its own (automate) once there is a change. This done by `babel-watch` that also takes care of re-starting [Nodejs](https://www.crowdbotics.com/build/node-js?utm_source=medium&utm_campaign=nodeh&utm_medium=node&utm_content=koa-rest-api) web server.\n\n```json\n\"scripts\": {\n\t\"dev\": \"babel-watch index.js\"\n}\n```\n\nTo see it action add the following code to your `index.js` and see if everything is working fine.\n\n```js\nimport express from 'express';\n\nconst app = express();\n\napp.get('/', (req, res) => res.send('Babel Working!'));\n\napp.listen({ port: 4000 }, () =>\n  console.log(`🚀 Server ready at http://localhost:4000`)\n);\n```\n\nFrom terminal write `npm run dev`. If there are no errors, you will get the following:\n\n<img src='https://cdn-images-1.medium.com/max/800/1*Cix-Zl8mbZf90qpuHxEB8g.png' />\n\nYou can also visit `http://localhost:4000/` in a browser window to see it action.\n\n### Adding a Schema\n\nWe need a schema to start our GraphQL API. Let us create a new file called `api/schema.js` inside the directory `api`. Add the following the schema.\n\n```js\nimport { gql } from 'apollo-server-express';\n\nconst typeDefs = gql`\n  type Person {\n    id: Int\n    name: String\n    gender: String\n    homeworld: String\n  }\n  type Query {\n    allPeople: [Person]\n    person(id: Int!): Person\n  }\n`;\n\nexport default typeDefs;\n```\n\nOur schema consists of two queries in total. The first is `allPeople` through which all characters in our API can be fetched and listed. The second query `person` is to retrieve one person using their id. Both of these query types are dependent on a custom type called `Person` object which contains four properties.\n\n### Add a Resolver\n\nWe have already learned about the importance of a resolver. It is based on a simple mechanism that it has to link the schema and the data. Resolvers are functions that contain the logic behind a query or mutation. They are used then to retrieve data and return it on the relevant request.\n\nIf you have built servers before using Express, you can think of a resolver as a controller where each controller is built for a specific route. Since we are not using any database behind our server, we must provide some dummy data to mock our API.\n\nCreate a new file called `resolvers.js` and add the following code.\n\n```js\nonst defaultData = [\n\t{\n\t\tid: 1,\n\t\tname: 'Luke SkyWaler',\n\t\tgender: 'male',\n\t\thomeworld: 'Tattoine'\n\t},\n\t{\n\t\tid: 2,\n\t\tname: 'C-3PO',\n\t\tgender: 'bot',\n\t\thomeworld: 'Tattoine'\n\t}\n];\n\nconst resolvers = {\n\tQuery: {\n\t\tallPeople: () => {\n\t\t\treturn defaultData;\n\t\t},\n\t\tperson: (root, { id }) => {\n\t\t\treturn defaultData.filter(character => {\n\t\t\t\treturn (character.id = id);\n\t\t\t})[0];\n\t\t}\n\t}\n};\n\nexport default resolvers;\n```\n\nFirst, we define the `defaultData` array which contains details of two characters from Star Wars. Both of these objects inside the array have four properties as per our schema. Next is our `resolvers` object which contains two functions. `allPeople()` here can be used later to retrieve all the data inside the`defaultData` array. The `person()` arrow function, uses an argument `id` to retrieve the person object with the requested ID. This we have already defined in our query.\n\nYou have to export both resolvers and schema objects to use them with Apollo Server middleware.\n\n### Implementing the Server\n\nNow that we have defined our schema and resolver, we will implement the server inside the file `index.js`. Start by importing Apollo Server from `apollo-server-express`. We also need to import our schema and resolvers object from the `api/` folder. Then, use GraphQL middleware from the Apollo Server Express library to instantiate the GraphQL API.\n\n```js\nimport express from 'express';\nimport { ApolloServer } from 'apollo-server-express';\n\nimport typeDefs from './api/schema';\nimport resolvers from './api/resolvers';\n\nconst app = express();\n\nconst PORT = 4000;\n\nconst SERVER = new ApolloServer({\n  typeDefs,\n  resolvers\n});\n\nSERVER.applyMiddleware({ app });\n\napp.listen(PORT, () =>\n  console.log(`🚀 GraphQL playground is running at http://localhost:4000`)\n);\n```\n\nLastly, we bootstrap our Express server using `app.listen()`. You can run the server now executing the command from the terminal `npm run dev`. Once the Node server starts, it will prompt a success message indicating the server has started.\n\nNow to test our GraphQL API, hop on to `http://localhost:4000/graphql` URL in a browser window and run the following query.\n\n```graphql\n{\n  allPeople {\n    id\n    name\n    gender\n    homeworld\n  }\n}\n```\n\nHit the _play_ button and you will see a familiar result on the right side section like below.\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*BnyLxWTl_9yDpoIDLH-Xzg.png' />\n\nThis is all happening because our query type `allPeople` has custom business logic to retrieve all the data (in our case the mock data we are providing as an array inside `resolvers.js`) using a resolver. To fetch a single person object try running another query like this. Remember you have to provide the ID.\n\n```graphql\n{\n  person(id: 1) {\n    name\n    homeworld\n  }\n}\n```\n\nRun the above query, and as a result, you can have the values of each field/property you have mentioned to query up on. Your result will be similar to the following.\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*DOSW6mN894ZYg498rVxNKg.png' />\n\nGreat! I am sure you must have got hold of how to create a GraphQL query and run it. Apollo Server library is a powerful one. It also enables us to edit the playground. _Suppose we want to edit the theme of the playground?_ All we have to do is provide an option when creating `ApolloServer` instance, in our case the `SERVER`.\n\n```js\nconst SERVER = new ApolloServer({\n  typeDefs,\n  resolvers,\n  playground: {\n    settings: {\n      'editor.theme': 'light'\n    }\n  }\n});\n```\n\nThe `playground` property has many features such defining a default endpoint for the playground to changing the theme. You can even enable the playground in the production mode. More configurable options can be found in the official documentation of Apollo Server [**here**](https://www.apollographql.com/docs/apollo-server/v2/features/graphql-playground.html)**.**\n\nAfter changing the theme we get the following.\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*cZ7KO6x0FVXql9c04ZshIA.png' />\n\n### Conclusion\n\nIf you completed this tutorial step by step, _Congratulations!🎉_\n\nYou have learned how to configure an Express server with Apollo library to setup your own GraphQL API. Apollo Server is an open source project and is one the most stable solution to create GraphQL APIs for full-stack applications. It also supports client-side out of the box for React, Vue, Angular, Meteor, and Ember as well as Native mobile development with Swift and Java. More information about this can be found [**here**](https://www.apollographql.com/docs/react/).\n\n**The complete code for the tutorial at [this Github repository](https://github.com/amandeepmittal/apollo-express-demo)**\n",
            "url": "https://amanhimself.dev//blog/creating-a-graphql-server-with-nodejs-in-2018",
            "title": "Creating a GraphQL server with Nodejs",
            "summary": "Creating a GraphQL server with Nodejs",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/how-to-use-import-statements-in-nodejs",
            "content_html": "---\ntitle: 'How to use Import statements in Nodejs'\ndate: '2018-11-01'\nslug: 'how-to-use-import-statements-in-nodejs'\nthumbnail: '/thumbnails/node.png'\ntag: 'nodejs'\ncanonicalUrl: 'https://medium.com/better-programming/how-to-use-import-statements-in-nodejs-94c85e23aeb7'\n---\n\n> **UPDATE:** Up to date version of this post is at [How to use ES6 import syntax in Node.js](https://amanhimself.dev/blog/how-to-use-es6-import-syntax-in-node/).\n\nI don’t always like to try different versions of setting up a Nodejs application. Don’t get me wrong — I believe in experimenting with one’s set up, which can lead to learning new things. But there is a limit. Recently, I find myself more often going to set up a Nodejs server to develop a RESTful API. Furthermore, the server has to work with the client in a way that the client can consume the API easily. For the client-side development, I am using ReactJS.\n\nWith the context switching between the client and the server I often find myself making errors during the process. One of the most common is using `import` statements in Nodejs files. This leads to a syntax error called `Unexpected identifier`. Even after switching to Nodejs `v10` LTS on my local machine, I find the lack of using ES6 modules rather disappointing.\n\nTo overcome this problem, and reduce the number of errors I cause during development, I read a few tutorials but decided to mesh a setup of my own. These tutorials, though well written, use methods that are almost completely opposite to one another. I want consistency when working on full-stack applications for my day job.\n\nAs a result, I m going to show you a streamlined, less time-consuming version of using `import` statements in a Nodejs server-side application. To continue to read this article, please make sure you have following applications installed on your local machine:\n\n- Nodejs\n- npm\n\n### Getting Started With a Mock Project\n\nI call it a mock project because I am going to start from scratch to build this setup. At the end of this tutorial, I will leave a link to a Github repository that can serve as a starter kit to many of your Nodejs plus Express projects. You can skip to the link part and DIY — there’s no complexity here. If you’re still curious, continue to read this short piece.\n\nTo start, create a new directory, traverse inside it and initialize it with `npm`.\n\n```shell\nmkdir node-babel-setup\nnpm init -y\n```\n\nYou can check out the `package.json` file after initializing your project as an npm project. It will be filled with details that you have used to configure npm.\n\n```json\n{\n  \"name\": \"node-babel-setup\",\n  \"version\": \"0.0.1\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"Aman Mittal <amandeepmittal@live.com> (www.amanhimself.me)\",\n  \"license\": \"MIT\"\n}\n```\n\nNext, create a new file with the following command from your terminal:\n\n```shell\ntouch index.js\n```\n\n<img src='https://cdn-images-1.medium.com/max/800/1*cToGazhSQLTx3oIwsJULPQ.png' />\n\nThat’s all we need to set up a bare minimum project directory. In the next section, we take a look at what dependencies we have to install and why we need those dependencies.\n\n### Creating the Node Server\n\nTo create a server I am going to use Express. To include Express in our project as a dependency, run the following command from your terminal:\n\n```shell\nnpm install -S express\n```\n\nNext, append the `index.js` file with the following code:\n\n```js\nconst express = require('express');\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.get('/', (req, res) => {\n  res.send('Hello from Nodejs!');\n});\n\napp.listen(PORT, () => {\n  console.log(`🚀 at port ${PORT}`);\n});\n```\n\nYou can run the server by running the command `node index.js`. Visit URL `http://localhost:3000/` and you’ll see a message displayed in the browser window: `Hello from Nodejs!`.\n\nThis indicates that the code for the server is fine. Now modify the first line of `index.js` to:\n\n```js\nimport express from 'express';\n```\n\nRun the same command `node index.js` and stay at the terminal window. This time the server does not start as there is an error in the process. It’s the same error I told you about at the start of this article. Nodejs cannot execute `import` statements by default.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*itCGCm0lnbBG94KS6D0bOg.png' />\n\n### Using Babel\n\nAll we need is a transpiler, which allows us to write JavaScript using ES6 features such as `import` statements in our Nodejs project. _What’s a transpiler?_\n\n> Transpilers are also known as source-to-source compilers that read code from source written in one programming language and produce an equivalent code in another language.\n\nIn our case we’re not switching programming languages, rather we need to use new language features that are not yet supported by the LTS version of Node. I’m going to set up Babel compiler and enable it in our project by going through the following configuration process:\n\nFirst, you will have to install few dependencies. Do mind -D flag as we only need these dependencies for our development environment:\n\n```shell\nnpm install -D babel-cli babel-preset-env babel-watch\n```\n\nOnce you have installed them, add a `.babelrc` file to the root of the project and add the following config:\n\n```json\n{\n  \"presets\": [\"env\"]\n}\n```\n\nThe last step in the configuration process is to add a `dev` script in `package.json`. You can name this script whatever you like. This will take care of running the babel compiler on its own (automate) once there is a change. This done by `babel-watch` that also takes care of re-starting Nodejs web server.\n\n```json\n\"scripts\": {\n  \"dev\": \"babel-watch index.js\",\n}\n```\n\nTo see it action make sure the following code to your `index.js` uses `import` statement like below.\n\n```js\nimport express from 'express';\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.get('/', (req, res) => {\n  res.send('Hello!');\n});\n\napp.listen(PORT, () => {\n  console.log(`🚀 at port ${PORT}`);\n});\n```\n\nFrom terminal write `nr dev`. If there are no errors, you’ll get the following:\n\n<img src='https://cdn-images-1.medium.com/max/800/1*Rz9TPPfk6B4p4NPTntXKvg.png' />\n\nWhere `nr` is shorthand for `npm run`. You can also visit `http://localhost3000/` in your browser to verify the result and see if the server is working or not.\n\n### Conclusion\n\nThis article has shown you how to create a bare minimum Node server from scratch, and how you can introduce upcoming JavaScript features in your Node.js environment using Babel. I’m sure now you are not going to make the same silly errors like me in _Nodejs_ + _insert a frontend framework/library of your choice_ as I did.\n\n_You can find the complete source code for the above article at_ [**_Github Repo_**](https://github.com/amandeepmittal/node-babel-setup)\n",
            "url": "https://amanhimself.dev//blog/how-to-use-import-statements-in-nodejs",
            "title": "How to use Import statements in Nodejs",
            "summary": "How to use Import statements in Nodejs",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/setting-up-nodejs-backend-for-a-react-app",
            "content_html": "---\ntitle: 'Setting up Nodejs Backend for a React App'\ndate: '2018-10-18'\nslug: 'setting-up-nodejs-backend-for-a-react-app'\nthumbnail: '/thumbnails/node.png'\ntemplate: post\ntag: 'nodejs'\ncanonicalUrl: 'https://medium.com/crowdbotics/setting-up-nodejs-backend-for-a-react-app-fe2219f26ea4'\n---\n\nIn this article, I am going to walk you through setting up your own [Node.js](http://crowdbotics.com/build/node-js) backend server for a [React application](https://crowdbotics.com/build/react). Both frameworks are often used together to build real time, fullstack web applications. A database, such as MySQL, Postgresql, or a NoSQL database such as MongoDB, is used to store information. For brevity’s sake, I will not use a database in this walkthrough.\n\n_Requirements:_ You need Node.js and npm installed on your local machine as well as `create-react-app` installed as a global dependency. If you do not have it, run the following command and install it.\n\n```shell\nnpm install -g create-react-app\n```\n\n_In some cases, you might have to give root permissions when installing a global dependency._\n\nFor the Nodejs backend, I am going to use [**HapiJS**](https://hapijs.com/). If you are not familiar with it, it will be fun as you will be learning a lot of new things.\n\n### Getting Started with the Backend\n\nTo start, we need an empty directory inside which we can have our server and client live alongside each other. Initialize it by running the command `npm init` and you are ready to install Hapijs as a framework to build the web server.\n\n```shell\nnpm install hapi --save\n```\n\nAfter Express, Hapi is quite popular among teams and individuals who write the server side of their application using Node. Hapi is currently being used by organizations such as Walmart and Yahoo and has an active community. After the dependency is successfully installed, create a new file called `server.js`.\n\n```js\n'use strict';\n\nconst Hapi = require('hapi');\n\n// Create a server with a host and port\nconst server = Hapi.server({\n  host: 'localhost',\n  port: 8000\n});\n\n// Add the route\nserver.route({\n  method: 'GET',\n  path: '/',\n  handler: (request, h) => {\n    return 'hello world';\n  }\n});\n\n// Start the server\nasync function start() {\n  try {\n    await server.start();\n  } catch (err) {\n    console.log(err);\n    process.exit(1);\n  }\n\n  console.log('Server running at:', server.info.uri);\n}\n\nstart();\n```\n\nThis is the most basic server you can create using Hapi.\n\nWe start as usual by requiring Hapijs dependency and create a new object with a configuration of our own. See the `host` and `port` above.\n\nAfter that, we add a simple route that uses HTTP method `GET` and has a handler function or usually called a callback function to return the response back to the client when a request comes in. Lastly, we are creating an asynchronous function to bootstrap the server using `async/await` syntax.\n\nThe `async/await` requires you to add a `try/catch` block every time you want to catch the errors. We `console.log` in case any error occurs running the program and use Nodejs global `process` object to make sure that program exits gracefully in case of one. To see it in action, run `node server.js` and it will eventually run on port `8000`.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*yR_UcIKCzTeNoN9HPYCNdQ.png' />\n\n### Setting up a React app\n\nNow that we have built our server, let us create the front end of our application. We have already installed the main ingredient we need to start with. Open your terminal and type:\n\n```shell\ncreate-react-app client\n```\n\nThis will create a react application named `client` inside the folder where we previously built our server. Simple as that.\n\nNow you can traverse to the `client` directory and run the React app separately on a different port. However, this is not what we want.\n\n### The proxy\n\nWe want a setup that will make our React app and use the server URL as a global variable. This is easier than you might think.\n\nNavigate to client directory and locate `package.json` file. Add the following configuration to it.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*jEgu48E180zXD0Z3_NyuHA.png' />\n\nAnd that’s it. This is all you need to do. _But wait! How is this even possible?_ The answer lies with the `create-react-app`.\n\n`create-react-app` does all this automatically and behind the scene because it is using [_webpack_](https://webpack.js.org/).\n\nWebpack has a development server that uses a proxy to handle the API server or in other terms, it requests to our Hapi server running on port `8000`. This is one of the biggest advantages I have found for using create-react-app so far. Webpack handles all the configuration.\n\n### Conclusion: Running the app\n\nLet us now test a route that sends the data from the Hapi backend server to React front-end side whenever a request comes from the client. Create a route /`mock`in `server.js` to serve the data the dummy data defined as an array `data` itself.\n\n```js\n'use strict';\n\nconst Hapi = require('hapi');\n\n// mock data\n\nconst data = [\n  { id: 1, name: 'Alex', age: 21 },\n  { id: 2, name: 'Alice', age: 23 }\n];\n\n// Create a server with a host and port\nconst server = Hapi.server({\n  host: 'localhost',\n  port: 8000\n});\n\n// Add the route\nserver.route({\n  method: 'GET',\n  path: '/',\n  handler: (request, h) => {\n    return 'hello world';\n  }\n});\n\nserver.route({\n  method: 'GET',\n  path: '/mock',\n  handler: (request, h) => {\n    return { data };\n  }\n});\n\n// Start the server\nasync function start() {\n  try {\n    await server.start();\n  } catch (err) {\n    console.log(err);\n    process.exit(1);\n  }\n\n  console.log('Server running at:', server.info.uri);\n}\n\nstart();\n```\n\nTo test this route, let us use REST client like POSTMAN or Insomnia and see if the data is being requested at the route `/mock`.\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*ygiAUjIzThy-NHFfbi9Rsg.png' />\n\nNow let us display this data in our front end. Traverse to `client/App.js` file and do the following.\n\n```js\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    data: []\n  };\n\n  componentDidMount() {\n    this.fetchData()\n      .then(res => this.setState(res))\n      .catch(err => console.log(err));\n  }\n\n  fetchData = async () => {\n    const response = await fetch('/mock');\n    const body = response.json();\n\n    return body;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1>Data from the Backend</h1>\n          {this.state.data.map(person => (\n            <p key={person.id}>\n              Name: {person.name} <br /> Age: {person.age}\n            </p>\n          ))}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\nWe start by defining a local state that will contain the data coming from the backend inside `componentDidMount()` life-cycle hook method. This further calls the asynchronous method`fetchData()` that actually requests the data from the API url `/mock`. Since we have already defined the complete URL as `proxy` we do not have to write the complete url.\n\nFinally, we are able to see the data as below.\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*79TNeMIHMbzT1Vcnh7ZNZw.png' />\n\n_You can find the complete source code for the above article at_ [**_Github Repo_**](https://github.com/amandeepmittal/hapi-react-example)\n\n_[Originally published at Crowdbotics](https://medium.com/crowdbotics/setting-up-nodejs-backend-for-a-react-app-fe2219f26ea4)_\n",
            "url": "https://amanhimself.dev//blog/setting-up-nodejs-backend-for-a-react-app",
            "title": "Setting up Nodejs Backend for a React App",
            "summary": "Setting up Nodejs Backend for a React App",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/building-a-rest-api-with-koajs",
            "content_html": "---\ntitle: 'Building a REST API with Koajs'\ndate: '2018-10-16'\nslug: 'building-a-rest-api-with-koajs/'\nthumbnail: '/thumbnails/node.png'\ntag: 'nodejs'\ncanonicalUrl: 'https://medium.com/crowdbotics/building-a-rest-api-with-koajs-417c276929e2'\n---\n\n![cover](https://i.imgur.com/ohg3d3s.png)\n\n> [Originally published at Crowdbotics](https://medium.com/crowdbotics/building-a-rest-api-with-koajs-417c276929e2)\n\nThere are quite a few [Node.js](http://crowdbotics.com/build/node-js?utm_source=medium&utm_campaign=nodeh&utm_medium=node&utm_content=koa-rest-api) frameworks available for web development to build a back-end server for a web or a mobile application. The most popular framework is ExpressJS, which has been used widely in the industry for a long time.\n\nIn this article, however, **we are going to discuss** [**Koa**](http://koajs.com)**, to write server-side code that uses Node.js as the runtime engine. In this tutorial, I will show how to build a** [**small REST API**](https://blog.crowdbotics.com/how-to-write-an-api-in-3-lines-of-code-with-django-rest-framework/) **then test it using a REST Client.**\n\n### What is Koa?\n\nKoa is designed and built by the team behind ExpressJS with additions such as promises and `async/await` support in its core. These ES2015 features are used to tackle API's asynchronous calls. Distributed as a lightweight Node.js framework, Koa provides a minimal interface for developing web applications and APIs.\n\nKoa has features that help JavaScript developers who want to use and leverage Node.js to accelerate the development of APIs and web applications. I have been using Koa for some of my latest back-end applications and I would love to share my knowledge to get you started.\n\n### Features of Koa\n\nSome of the features of the Koa framework include:\n\n- Designed as a lightweight and flexible framework for Node.js\n- Support for ECMAScript 6 (/ES2015) by default\n- Developers can use generators as functions to stop and resume the code execution\n- Simplifies the use of Error handling by using middleware more effectively\n- Identifies and understands all HTTP methods\n- Even before Express, Koa had support for `async/await`\n\nTo use this framework, the only two requirements for runing the code examples below is to have Node.js installed in your local machine along with `npm` to access and install it as a dependency. The second requirement is to have a general understanding of JavaScript as a programming language.\n\n### Getting Started\n\nTo start using Koa as a server-side framework you will have to first install it. Create a directory where you will want to place all the project related files. We will first initialize it as a Node.js project.\n\n```shell\n# First initialize an empty directory\nnpm init -y\n```\n\nThis will help us generate a `package.json` file that holds all the records of dependencies we add to our project using `npm`. I am using `-y` flag to skip the questionnaire prompted by npm. You will get a similar result once it is done.\n\n```json\n{\n  \"name\": \"koa-rest-api-tut\",\n  \"version\": \"0.0.1\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"Aman Mittal\",\n  \"license\": \"MIT\"\n}\n```\n\nNext step is to add Koa as a local dependency. I am sure you know what a local dependency here means. If not, please refer to `[npm](https://docs.npmjs.com/)` [documentation](https://docs.npmjs.com/).\n\n```shell\nnpm install -S koa\n```\n\nSo far so good. Now we can get started and build our application. However, please note that to use Koa either on your local machine or deploy any server-side project that uses it, _you need to have Node.js version equal to or greater than_ `_v7.6.0_`_._\n\n### Our First Koa App\n\nTo understand Koa better, and point out the differences with a commonly used framework such as ExpressJS, we are going to first write an obligatory _Hello World_ program.\n\nBelow, we create a route in a file called `app.js`.\n\n```js\n// app.js\nconst Koa = require('koa');\nconst app = new Koa();\n\n// Our First Route\napp.use(async ctx => {\n  ctx.body = 'Hello World';\n});\n\n// Bootstrap the server\napp.listen(3000);\n```\n\nNow, open the terminal and run the following command:\n\n```js\nnode app.js\n```\n\nIf you are not prompted with an error, that means the server ran successfully.\n\nRight now, we are not getting anything exciting from the terminal. If you go to `http://localhost:3000` in your browser window, you should see a `Hello World` message greeting you!\n\n<img src='https://cdn-images-1.medium.com/max/800/1*vmF-dRrg83Uq4Zt6BbkAEg.png' />\n\nTo understand more about what is happening, let’s import the Koa library into our `app.js` file.\n\nNext, we define an instance called `app` that will access all the methods that are included in Koa's API such as `use()` and `listen()`. `app.use()` is how th middleware function is defined. We are using this middleware function as a route. The `app.listen()` is how the server knows to run on a port number specified such as `3000`.\n\n### Wait, what is ctx?\n\nAnother important feature that we use in our bare minimum example is `ctx`. I do hope you noticed it there.\n\nWe are using `ctx` as an argument to the asynchronous middleware function. It is called **Context** in Koa and it encapsulates **request** and **response** objects into a single object. Unlike ExpressJS, that requires request and response as separate objects passed as arguments. For example:\n\n```js\n// request and response objects in ExpressJS\n\napp.use((request, response) => {\n  // ... rest of the route\n});\n```\n\nIn Koa, a context is created for every request that comes to the server and is always referenced as a middleware.\n\n```js\n// request and response as context in Koa\napp.use(async ctx => {\n  ctx.request;\n  ctx.response;\n});\n```\n\n### Side Tip: Installing nodemon\n\nBefore I start on REST APIs, the core of the article, I want to introduce a great tip that is helpful in building a Node.js application. During the development mode, irrespective of the framework I am using, I use `nodemon` as a dependency to watch for file changes and automatically restart the application. This eliminates the need of running `node [filename].js` command again and again. You can totally, skip this step and move on the next one where I show the steps for writing the REST API.\n\nThis small utility has such an impact on my workflow that it saves hours of development chores. So let me show you how to set it up in our demo application. I am using the same project as previous **Hello World** example to demonstrate this. Write the following command to install it.\n\n```shell\nnpm install -D nodemon\n```\n\n`-D` flag is used to tell npm to install the current dependency as a `devDependency`. The difference between it and a normal dependency is that `devDependencies` tend to work only in development environment. They are not installed in a production environment since there is no use of them there. Other types of `devDependencies` you might come across when writing Node applications are linting tools such as ESLint.\n\nOnce, `nodemon` is installed, append the `package.json` file and an npm script.\n\n```json\n\"scripts\":{\n  \"dev\": \"nodemon app.js\"\n}\n```\n\nPoint this script to the initial file of the Koa application, in our case, it is `app.js`. To run the application now, all you have to type is `npm run dev` command in your terminal. This time, you will see a few messages suddenly prompted in the terminal. These messages are provided by `nodemon`.\n\n### Building the REST API\n\nFinally, you have arrived at the point where you can start building the REST API. You have to install dependencies for the API to work. Let’s install them.\n\n```shell\nnpm i -S koa-body koa-router\n```\n\n> What are these dependencies for?\n\n**koa-body** is a body-parser middleware. It supports `urlencoded`, multi-part and `json` request bodies. Basically, it helps to create and respond to HTTP `POST` requests which are available as a form field, or a file upload, etc. It tells the server that the incoming request from the client has a body of data. ExpressJS uses the same approach in handling body requests.\n\n**koa-router** is the routing middleware that provides ExpressJS style routing using HTTP verbs. It has methods that you can directly use in the application Such as `app.get()`, `app.post()`, etc.\n\n**Note:** I will be mocking data in this application for the sake of brevity and clear understanding of framework’s concepts. If you want to, you can use the database of your choice. The structure of data is not complex.\n\nWrite the following code in the `app.js` file.\n\n```js\n// app.js\n\nconst Koa = require('koa');\nconst koaBody = require('koa-body');\n\n// create app instance\nconst app = new Koa();\n\n// middleware functions\napp.use(koaBody());\n\n// Require the router here\n\n// use the router here\n\napp.listen(3000);\n```\n\nAfter body-parser middleware, you are going to have the routes. I am using another file to describe the routes to separate the code for clear understanding. Create a new file called `books.js`. Define the following inside that file with the data to mock.\n\n```js\n// books.js\n\nconst Router = require('koa-router');\n\n// Prefix all routes with: /books\nconst router = new Router({\n  prefix: '/books'\n});\n\nlet books = [\n  { id: 101, name: 'Fight Club', author: 'Chuck Palahniuk' },\n  { id: 102, name: 'Sharp Objects', author: 'Gillian Flynn' },\n  { id: 103, name: 'Frankenstein', author: 'Mary Shelley' },\n  { id: 101, name: 'Into The Wild', author: 'John Krakauer' }\n];\n\n// Routes will go here\n\nmodule.exports = router;\n```\n\nFirst, I am importing the necessary dependency to create routes: `koa-router`. The next step is to create an instance of this newly imported dependency. Notice the prefix part: `/books`. Using a prefix for the routes is how you can define and categorized different routes. You can also use this technique to classify the different API versions such as `v1`, `v2`, etc.\n\nThe `books` array is the mock data. It contains information about books and each book is represented by a separate object inside the array. Each object further has three data fields: `id`, `name`, and `author`.\n\nLet’s build the first route of our API.\n\n### Creating a route to handle GET request\n\nBelow is the code for handling a `GET` request in Koa. Add the following code to `books.js`.\n\n```js\n// books.js\nrouter.get('/', (ctx, next) => {\n  ctx.body = books;\n  next();\n});\n```\n\nThe callback function attached to the `router.get()` contains two arguments. I have already explained to you what `ctx` or context is. The last argument is `next()`. This is often used in middleware functions. Any middleware function invokes this function to indicate the current middleware function has suspended running and the next middleware function available must be invoked.\n\nThis callback function traverses through the `books` array when to send the response. To run this, you have to first include the routes file in `app.js` and invoke them.\n\n```js\n// app.js\nconst Koa = require('koa');\nconst koaBody = require('koa-body');\n\nconst app = new Koa();\n\n// Set up body parsing middleware\napp.use(koaBody());\n\n// Require the Router we defined in books.js\nlet books = require('./books.js');\n\n// Use the Router on the sub route /books\napp.use(books.routes());\n\napp.listen(3000);\n```\n\nNext step is to run the command: `npm run dev` and visit the url `http://localhost:3000/books` to see the following result.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*d-GFucqnhOEIeORSytPH4w.png' />\n\n> _Congratulations! 🎉 You just build your first route using Koa._\n\nNext step is to create a route to fetch a book by its `id`. It is going to use the similar approach as the previous route, plus we see how to extract information from `request.params` object of an incoming request.\n\n```js\n// books.js\nrouter.get('/:id', (ctx, next) => {\n  let getCurrentBook = books.filter(function (book) {\n    if (book.id == ctx.params.id) {\n      return true;\n    }\n  });\n\n  if (getCurrentBook.length) {\n    ctx.body = getCurrentBook[0];\n  } else {\n    ctx.response.status = 404;\n    ctx.body = 'Book Not Found';\n  }\n  next();\n});\n```\n\nRouting parameters are named segments that are used capture the values specified in the URL. In our case, such as`:id`. Above, we define a routing middleware function that can handle incoming requests from URLs such as `http:localhost:3000/books/103`. Enter this URL in your browser window and you will get the following result.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*-F6g2j_QsvwBjXUdrVsZhw.png' />\n\nIn case of when `id` does not exist or is invalid, you have to send an error message with an HTTP status of `404`.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*BKDmJ80xYVoOsVQTNaMiKw.png' />\n\n### Handling a POST request\n\nThe last route you are going to build for this demonstration is going to handle `POST` requests.\n\n```js\n// books.js\n\nrouter.post('/new', (ctx, next) => {\n  // Check if any of the data field not empty\n  if (\n    !ctx.request.body.id ||\n    !ctx.request.body.name ||\n    !ctx.request.body.author\n  ) {\n    ctx.response.status = 400;\n    ctx.body = 'Please enter the data';\n  } else {\n    let newBook = books.push({\n      id: ctx.request.body.id,\n      name: ctx.request.body.name,\n      author: ctx.request.body.author\n    });\n    ctx.response.status = 201;\n    ctx.body = `New book added with id: ${ctx.request.body.id} & name: ${ctx.request.body.name}`;\n  }\n  next();\n});\n```\n\nThe `/new` route is used for creating a new book add it into our `books` array. I am using this to mock data and not real database so restarting the application will delete the newly added books. In the above routing middleware, the Koa Context object first checks if any of the data field required in `request.body` is present or not. If one of them is missing, this routing middleware will be terminated and sends back an error to the user.\n\nIf everything is fine, this routing middleware accepts the data and returns success message with correct HTTP status of code for creating a new record. To run this URL, I am using `curl` command from my terminal but you can use any REST client such as Postman or Insomnia.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*qbXL75_xqOrtgE0UTXEPPw.png' />\n\nFor our all routes to be more descriptive and follow REST API pattern, I have re-written every `ctx.body` object from each routing middleware function. Here is how the complete routing file looks so far.\n\n```js\n// books.js\nconst Router = require('koa-router');\n\n// Prefix all routes with /books\nconst router = new Router({\n\tprefix: '/books'\n});\n\nlet books = [\n\t{ id: 101, name: 'Fight Club', author: 'Chuck Palahniuk' },\n\t{ id: 102, name: 'Sharp Objects', author: 'Gillian Flynn' },\n\t{ id: 103, name: 'Frankenstein', author: 'Mary Shelley' },\n\t{ id: 104, name: 'Into The Willd', author: 'Jon Krakauer' }\n];\n\n// Routes will go here\nrouter.get('/', (ctx, next) => {\n\tctx.body = {\n\t\tstatus: 'success',\n\t\tmessage: books\n\t};\n\tnext();\n});\n\nrouter.get('/:id', (ctx, next) => {\n\tlet getCurrentBook = books.filter(function(book) {\n\t\tif (book.id == ctx.params.id) {\n\t\t\treturn true;\n\t\t}\n\t});\n\n\tif (getCurrentBook.length) {\n\t\tctx.body = getCurrentBook[0];\n\t} else {\n\t\tctx.response.status = 404;\n\t\tctx.body = {\n\t\t\tstatus: 'error!',\n\t\t\tmessage: 'Book Not Found with that id!'\n\t\t};\n\t}\n\tnext();\n});\n\nrouter.post('/new', (ctx, next) => {\n\t// Check if any of the data field not empty\n\tif (\n\t\t!ctx.request.body.id ||\n\t\t!ctx.request.body.name ||\n\t\t!ctx.request.body.author\n\t) {\n\t\tctx.response.status = 400;\n\t\tctx.body = {\n\t\t\tstatus: 'error',\n\t\t\tmessage: 'Please enter the data';\n    }\n\t} else {\n\t\tlet newBook = books.push({\n\t\t\tid: ctx.request.body.id,\n\t\t\tname: ctx.request.body.name,\n\t\t\tauthor: ctx.request.body.author\n\t\t});\n\t\tctx.response.status = 201;\n\t\tctx.body = {\n\t\t\tstatus: 'success',\n\t\t\tmessage: `New book added with id: ${ctx.request.body.id} & name: ${\n\t\t\t\tctx.request.body.name\n\t\t\t}`\n\t\t};\n\t}\n\tnext();\n});\n\nmodule.exports = router;\n```\n\n<img src='https://cdn-images-1.medium.com/max/800/1*R2_CY-WOiEM2pqE-bLQbRg.png' />\n\nThis completes the basics of building a REST API using Koa as a Node.js framework. It’s a pretty minimal framework with all the necessary ways to tackle incoming requests and send the response back from the server. Koa also supports ready-made middleware functions to make use for logging, handling errors, testing, compression, and security.\n\n> You can find the complete code used in this tutorial at [this Github repository](https://github.com/amandeepmittal/koa-rest-api-tut)\n",
            "url": "https://amanhimself.dev//blog/building-a-rest-api-with-koajs",
            "title": "Building a REST API with Koajs",
            "summary": "Building a REST API with Koajs",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/deploy-a-mern-stack-app-on-heroku",
            "content_html": "---\ntitle: 'Deploy a MERN stack app on Heroku'\ndate: '2018-10-12'\nslug: 'deploy-a-mern-stack-app-on-heroku'\nthumbnail: '/thumbnails/heroku.png'\ntag: 'heroku'\ncanonicalUrl: 'https://medium.com/crowdbotics/deploy-a-mern-stack-app-on-heroku-b0c255744a70'\n---\n\n![cover](https://i.imgur.com/IP8rrV2.png)\n\nIn this article, I will describe how to take an existing Web Application that is build using MongoDB, ExpressJS, [Node.js](http://crowdbotics.com/build/node-js?utm_source=medium&utm_campaign=nodeh&utm_medium=node&utm_content=mern), and [React](https://www.crowdbotics.com/build/react) (often called as MERN stack) on a deployment service like Heroku. If you have an existing application built using the same tech stack, you can definitely skip the process in which I show you to quickly build a web application and go straight on to the deployment part. For the rest of you, please continue to read.\n\n### MERN Stack\n\nMongoDB, ExpressJS, Node.js, and Reactjs are used together to build web applications. In this, Node.js and Express bind together to serve the backend, MongoDB provides a NoSQL database to store the data and frontend is built using React that a user interacts with. All four of these technologies are open source, cross-platform and JavaScript based. Since they are JavaScript based, one of the main reasons why they are often used together.\n\nAs JavaScript is used throughout to build a Fullstack application, developers do not need to learn and change the context of using different programming languages to build or work on different aspect of a web application.\n\nTo continue to follow this tutorial there are requirements that you will need to build the demo application and then deploy it on Heroku.\n\n- Node.js/npm installed\n- Heroku account\n\nFor MongoDB, we are going to use a cloud based service like mLab which provides database as a service. It has a free tier, and having an account there will be time saving.\n\n## Building a Full-stack app using MERN\n\n### Building the Backend\n\nI am going to take you through building a web application using MERN Stack. To start, please create an empty directory and type the following commands in the order they are specified.\n\n```shell\n# to generate package.json\nnpm init -y\n\n# install following dependencies\nnpm install -S express mongoose\n\nnpm install -D nodemon\n```\n\nCreate a `server.js` file inside the root of the directory. This file will server us the backend file for us.\n\n```js\n// server.js\nconst express = require('express');\nconst app = express();\n\nconst PORT = process.env.PORT || 5000;\n\n// configure body parser for AJAX requests\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\n\n// routes\napp.get('/', (req, res) => {\n  res.send('Hello from MERN');\n});\n\n// Bootstrap server\napp.listen(PORT, () => {\n  console.log(`Server listening on port ${PORT}.`);\n});\n```\n\nNow, I made following changes in `package.json` for this program to work.\n\n```json\n\"main\": \"server.js\",\n\t\"scripts\": {\n    \"server\": \"nodemon server.js\",\n  }\n```\n\nTo see if everything is working, run the command `npm start server` that we just defined in `package.json` as a script. If there are no errors, you will get the following result. Visit the following url: `[http://localhost:5000](http://localhost:5000.)`[.](http://localhost:5000.)\n\n<img src='https://cdn-images-1.medium.com/max/800/1*fza80DTPXuhFwJapj2ZIbQ.png' />\n\nPlease note that onwards Express version `4.16.0` body parser middleware function is a built-in middleware and there is no need to import it as a separate dependency. Body parser middleware is required to handle incoming AJAX requests that come in the form of JSON payloads or urlencoded payloads.\n\n### Models with Mongoose\n\nWhen I am not writing JavaScript, I am a bibliophile. Thus, for this demonstration, I am going to build a web application that tends to take care of all the books that I want to read. If you are into books, you can think of it is as your own personal TBR manager.\n\nI will start by creating a database model called `Book` inside the file `models/Books.js`. This will resemble a schema of what to expect from the user when adding information to our application.\n\n```js\n// Books.js\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst bookSchema = new Schema({\n  title: {\n    type: String,\n    required: true\n  },\n  author: {\n    type: String,\n    required: true\n  }\n});\n\nconst Book = mongoose.model('Book', bookSchema);\n\nmodule.exports = Book;\n```\n\nI am using `mongoose` to define the schema above. Mongoose is an ODM (Object Document Mapper). It allows you to define objects with a strongly typed schema that is mapped as a MongoDB collection. This schema architecture allows us to provide an organized shape to the document inside the MongoDB collection.\n\nIn our `bookSchema` we are defining two fields: a `title` which indicates the title of the book and an `author` representing the name of the author of the book. Both these fields are `string` type.\n\n### Defining Routes\n\nOur application is going to need some routes that will help the client app to communicate with the server application and perform CRUD (Create, Read, Update, Delete) operations. I am defining all the business logic that works behind every route in a different file. Conventionally, named as controllers. Create a new file `controllers/booksController.js`.\n\n```js\n// booksControllers.js\nconst Book = require('../models/Books');\n\n// Defining all methods and business logic for routes\n\nmodule.exports = {\n  findAll: function (req, res) {\n    Book.find(req.query)\n      .then(books => res.json(books))\n      .catch(err => res.status(422).json(err));\n  },\n  findById: function (req, res) {\n    Book.findById(req.params.id)\n      .then(book => res.json(book))\n      .catch(err => res.status(422).json(err));\n  },\n  create: function (req, res) {\n    Book.create(req.body)\n      .then(newBook => res.json(newBook))\n      .catch(err => res.status(422).json(err));\n  },\n  update: function (req, res) {\n    Book.findOneAndUpdate({ _id: req.params.id }, req.body)\n      .then(book => res.json(book))\n      .catch(err => res.status(422).json(err));\n  },\n  remove: function (req, res) {\n    Book.findById({ _id: req.params.id })\n      .then(book => book.remove())\n      .then(allbooks => res.json(allbooks))\n      .catch(err => res.status(422).json(err));\n  }\n};\n```\n\nThe business logic or you can say the controller logic behind the application is nothing but the methods that will work on a specific route. There are five functions in total. Each has its own use. I am requiring our Book model, previously created, as it provides functions for us to query CRUD operations to the database. A mongoose query can be executed in two ways, by providing a callback function or by using `.then()` function which also indicates that mongoose support promises. I am using the promising approach above to avoid the nuisance caused by nested callbacks (and commonly known as _callback hell_).\n\nNext step is to use these methods in our routes inside `routes/` directory. Create a new file called `books.js`.\n\n```js\n// books.js\n\nconst router = require('express').Router();\nconst booksController = require('../controllers/booksController');\n\nrouter.route('/').get(booksController.findAll).post(booksController.create);\n\nrouter\n  .route('/:id')\n  .get(booksController.findById)\n  .put(booksController.update)\n  .delete(booksController.remove);\n\nmodule.exports = router;\n```\n\nI have separated the concerned routes that match a specific URL. For example, routes that are starting with `:id` routing parameter are defined above together in the file. Open `index.js` in the same directory and add the following.\n\n```js\n// index.js\n\nconst router = require('express').Router();\nconst bookRoutes = require('./books');\n\nrouter.use('/api/books', bookRoutes);\n\nmodule.exports = router;\n```\n\nI am adding a prefix `/api/books` before the routes. This way, you can only access them as `http://localhost:5000/api/books`.\n\nFor this to work, I am going to import book routes in the `server.js` file after every other middleware defined and before we have bootstrapped the server.\n\n```js\n// server.js\n\nconst routes = require('./routes');\n\n// after all middleware functions\n\napp.use(routes);\n```\n\nAlso remove the default route `app.get('/')...` that was previously created. We are soon going to serve the application's front end here on the default route.\n\n### Connecting with Database using mLab\n\nI am going to use [**mlab**](https://mlab.com) to host the database of our application on the cloud. Once you create an account, your dashboard will look similar to mine. I already have few sandboxes running, so do not mind them.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*gnhdXtIORiT1EsMEv3MSUg.png' />\n\nTo create a new one, click on the button `Create New` under MongoDB deployments. After that, you select the plan type Sandbox which provides the free tier up to 500MB.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*LiDzbwLDCpC-e4Igs7qptg.png' />\n\nAfter the MongoDB deployment is created, a database user is required by the mlab to have you connect to this database. To create one now, visit the ‘Users’ tab and click the ‘Add database user’ button.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*GyHzO_0P76__Y6_UOG1zXA.png' />\n\nNow copy the string provided by mlab such as:\n\n`mongodb://<dbuser>:<dbpassword>@ds125453.mlab.com:25453/mern-example`\n\nand add the `dbuser` and `dbpassword` you just entered to create the new user. I am going to save these credentials as well as the string given by mlab to connect to the database inside a file called `config/index.js`.\n\n```js\n// config/index.js\nconst dbuser = 'xxxxxxxxxx';\nconst dbpassword = 'xxxxxxxxx';\n\nconst MONGODB_URI = `mongodb://${dbuser}:${dbpassword}\n@ds125453.mlab.com:25453/mern-example`;\n\nmodule.exports = MONGODB_URI;\n```\n\nYou can replace the `x`'s for `dbuser` and `dbpassword`. Now to define the connection with mlab string we are again going to use mongoose. Create a new file inside `models/index.js`.\n\n```js\n// models/index.js\n\nconst mongoose = require('mongoose');\nconst URI = require('../config/index');\n\nmongoose.connect(process.env.MONGODB_URI || URI);\n\n// When successfully connected\nmongoose.connection.on('connected', () => {\n  console.log('Established Mongoose Default Connection');\n});\n\n// When connection throws an error\nmongoose.connection.on('error', err => {\n  console.log('Mongoose Default Connection Error : ' + err);\n});\n```\n\nWe are importing the same database URI string that we just exported in `config`. I am going to require this file inside our `server.js` before any middleware is defined.\n\n```js\n// server.js\nconst express = require('express');\nconst app = express();\n\nconst routes = require('./routes');\n\nconst PORT = process.env.PORT || 5000;\n\n// require db connection\nrequire('./models');\n\n// configure body parser for AJAX requests\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\n\napp.use(routes);\n\n// Bootstrap server\napp.listen(PORT, () => {\n  console.log(`Server listening on port ${PORT}.`);\n});\n```\n\nNow run the server again and if you get the following message, that means your database is gracefully connected to the web server.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*560qCrzs2900Z2zqwUK2oA.png' />\n\n### Building the FrontEnd with React\n\nTo build the user interface of our application, I am going to `create-react-app`. Run the following command to generate a react application inside a directory called `client`.\n\n```shell\ncreate-react-app client/\n```\n\nOnce the scaffolding process is complete, run `npm run start` after traversing inside the client directory from your terminal, and see if everything works or not. If you get a screen like below that means everything is top-notch.\n\nInstall two dependencies from `npm` that we need to in order for the client to work.\n\n```shell\nyarn add axios react-router-dom@4.1.2\n```\n\nYou are going to need **axios** to make AJAX requests to the server. `react-router-dom` is for switching between navigation routes.\n\nI am not going to walk you through every component and reusable component I have built in this application. I am only going to take you through what needs to be done connect the React app to Node.js server, the build process and then deploying it.\n\nThe main frontend file, `App.js` looks like this:\n\n```js\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Books from './pages/Books';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Nav from './components/Nav';\n\nconst App = () => (\n  <Router>\n    <div>\n      <Nav />\n      <Switch>\n        <Route exact path=\"/\" component={Books} />\n        <Route exact path=\"/books\" component={Books} />\n        <Route exact path=\"/books/:id\" component={Detail} />\n        <Route component={NoMatch} />\n      </Switch>\n    </div>\n  </Router>\n);\n\nexport default App;\n```\n\nNext, I have created an `API.js` inside the `utils` directory which we handle all the requests and fetching data, in simple terms AJAX requests between our client and the server.\n\n```js\nimport axios from 'axios';\n\nexport default {\n  // Gets all books\n  getBooks: function () {\n    return axios.get('/api/books');\n  },\n  // Gets the book with the given id\n  getBook: function (id) {\n    return axios.get('/api/books/' + id);\n  },\n  // Deletes the book with the given id\n  deleteBook: function (id) {\n    return axios.delete('/api/books/' + id);\n  },\n  // Saves a book to the database\n  saveBook: function (bookData) {\n    return axios.post('/api/books', bookData);\n  }\n};\n```\n\nWe also have `pages` and a separate `components` directory. The `pages` contain those files that are going to display the content when we add a book and its author in our list using a form to submit the data to the backend. The form itself uses different reusable components which are built separately. The sole purpose of doing this is to follow best practices that are convenient to understand the source code and a common practice in the React community.\n\nThere are two pages `Books` and `Details`. Let us go through them.\n\n```js\n// Books.js\n\nimport React, { Component } from 'react';\nimport DeleteBtn from '../../components/DeleteBtn';\nimport Jumbotron from '../../components/Jumbotron';\nimport API from '../../utils/API';\nimport { Link } from 'react-router-dom';\nimport { Col, Row, Container } from '../../components/Grid';\nimport { List, ListItem } from '../../components/List';\nimport { Input, FormBtn } from '../../components/Form';\n\nclass Books extends Component {\n  state = {\n    books: [],\n    title: '',\n    author: ''\n  };\n\n  componentDidMount() {\n    this.loadBooks();\n  }\n\n  loadBooks = () => {\n    API.getBooks()\n      .then(res => this.setState({ books: res.data, title: '', author: '' }))\n      .catch(err => console.log(err));\n  };\n\n  deleteBook = id => {\n    API.deleteBook(id)\n      .then(res => this.loadBooks())\n      .catch(err => console.log(err));\n  };\n\n  handleInputChange = event => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    if (this.state.title && this.state.author) {\n      API.saveBook({\n        title: this.state.title,\n        author: this.state.author\n      })\n        .then(res => this.loadBooks())\n        .catch(err => console.log(err));\n    }\n  };\n\n  render() {\n    return (\n      <Container fluid>\n        <Row>\n          <Col size=\"md-6\">\n            <Jumbotron>\n              <h1>What Books Should I Read?</h1>\n            </Jumbotron>\n            <form>\n              <Input\n                value={this.state.title}\n                onChange={this.handleInputChange}\n                name=\"title\"\n                placeholder=\"Title (required)\"\n              />\n              <Input\n                value={this.state.author}\n                onChange={this.handleInputChange}\n                name=\"author\"\n                placeholder=\"Author (required)\"\n              />\n\n              <FormBtn\n                disabled={!(this.state.author && this.state.title)}\n                onClick={this.handleFormSubmit}\n              >\n                Submit Book\n              </FormBtn>\n            </form>\n          </Col>\n          <Col size=\"md-6 sm-12\">\n            <Jumbotron>\n              <h1>Books On My List</h1>\n            </Jumbotron>\n            {this.state.books.length ? (\n              <List>\n                {this.state.books.map(book => (\n                  <ListItem key={book._id}>\n                    <Link to={'/books/' + book._id}>\n                      <strong>\n                        {book.title} by {book.author}\n                      </strong>\n                    </Link>\n                    <DeleteBtn onClick={() => this.deleteBook(book._id)} />\n                  </ListItem>\n                ))}\n              </List>\n            ) : (\n              <h3>No Results to Display</h3>\n            )}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Books;\n```\n\nWe are defining a local state to manage data and pass it on to the API from the component. Methods like `loadBooks` are making AJAX requests through the API calls we defined inside `utils/API.js`. Next is the details page.\n\n```js\n// Details.js\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Col, Row, Container } from '../../components/Grid';\nimport Jumbotron from '../../components/Jumbotron';\nimport API from '../../utils/API';\n\nclass Detail extends Component {\n  state = {\n    book: {}\n  };\n\n  componentDidMount() {\n    API.getBook(this.props.match.params.id)\n      .then(res => this.setState({ book: res.data }))\n      .catch(err => console.log(err));\n  }\n\n  render() {\n    return (\n      <Container fluid>\n        <Row>\n          <Col size=\"md-12\">\n            <Jumbotron>\n              <h1>\n                {this.state.book.title} by {this.state.book.author}\n              </h1>\n            </Jumbotron>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col size=\"md-2\">\n            <Link to=\"/\">← Back to Authors</Link>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Detail;\n```\n\nIt shows the books I have added in my list. To use it, first we are going to connect it with Node.js.\n\n### Connecting React and Node\n\nThere are two build steps we have to undergo through in making a connection between our client side and server side. First, open the `package.json` file inside the `client` directory and enter a proxy value that points to the same URL on which server is serving the API.\n\n```js\n\"proxy\": \"http://localhost:5000\"\n```\n\nNext step is to run the command `yarn build` inside the client directory such that it builds up the project. If you haven't run this command before in this project, you will notice a new directory suddenly appears.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*K5i8irozZCKYpIodE6hgng.png' />\n\nWe also need to make two changes to our backend, to serve this `build` directory. The reason we are doing this is to deploy our full stack application later on Heroku as one. Of course, you can two deployment servers where one is serving the REST API such as our backend and the other serves the client end, the build folder we just created.\n\nOpen `routes/index.js` and add the following line.\n\n```js\n// routes/index.js\nconst router = require('express').Router();\nconst bookRoutes = require('./books');\nconst path = require('path');\n\n// API routes\nrouter.use('/api/books', bookRoutes);\n\n// If no API routes are hit, send the React app\nrouter.use(function (req, res) {\n  res.sendFile(path.join(__dirname, '../client/build/index.html'));\n});\n\nmodule.exports = router;\n```\n\nNext, open the `server.js` to in which we add another line using Express built-in middleware that serves static assets.\n\n```js\n// server.js\nconst express = require('express');\nconst app = express();\n\nconst routes = require('./routes');\n\nconst PORT = process.env.PORT || 5000;\n\n// require db connection\nrequire('./models');\n\n// configure body parser for AJAX requests\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\n\n// ADD THIS LINE\napp.use(express.static('client/build'));\n\napp.use(routes);\n\n// Bootstrap server\napp.listen(PORT, () => {\n  console.log(`Server listening on port ${PORT}.`);\n});\n```\n\nNow you can open your terminal and run the following command.\n\n```shell\nnpm run start\n```\n\nThis will trigger our server at url `http://localhost:5000`. Visit it using a browser and see your MERN stack app in action like below. For brevity, I haven't much styled but go ahead and showcase your CSS skills.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*V3ZbTRYfdUc2jnEWHsPEdQ.png' />\n\nTo verify that the data from our application is being added to the database, go to your mlab MongoDB deployment. You will notice a collection appearing with the name of `books`. Open it and you can see the data you have just submitted through the form. Here is how mine looks like.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*mNSQyfBe_qzh_IyUZdaT_w.png' />\n\nI already have two records.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*dfYnIQotE5nFr3UhkDIb9g.png' />\n\n<img src='https://cdn-images-1.medium.com/max/800/1*mauB7W6yd80fS5gmWHomPA.png' />\n\nSince everything is running locally without any problem, we can move to the next part.\n\n### Deploying on Heroku\n\nThis is our final topic in this tutorial. Now, all you need is to have a free Heroku account and [_Heroku toolbelt_](https://devcenter.heroku.com/articles/heroku-cli) to run the whole deployment process from your terminal.\n\n> _The Heroku Command Line Interface (CLI) makes it easy to create and manage your Heroku apps directly from the terminal. It’s an essential part of using Heroku. ~_ [_Official Documentation_](https://devcenter.heroku.com/articles/heroku-cli)\n\nTo download the Heroku CLI interface visit [this link](https://devcenter.heroku.com/articles/heroku-cli). Depending on your operating system, you can download the packager. You can also choose a simpler method that is to install the cli interface using npm.\n\n`npm install -g heroku`\n\nAfter you go through the download and installation process, you can verify that everything has installed correctly.\n\n```shell\nheroku --version\n# Output\nheroku/7.16.0 darwin-x64 node-v8.12.0\n```\n\nModify `package.json` by adding the following script.\n\n```json\n\n\"scripts\": {\n\t\t\"start\": \"node server.js\",\n\t\t[...]\n\t}\n```\n\nLogin to your Heroku account with credentials by running command `heroku login` like below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*Tfgopqciv5qCw_YzDXOM6A.png' />\n\nNext, create a `Procfile` in the root folder with following value.\n\n```shell\nweb: npm run start\n```\n\nOnce you are logged in traverse to the project directory of your MERN stack application. Run the following command to create a Heroku instance of your app. Make sure you are in the main directory and not in the client folder.\n\nBefore we go on to prepare our project for Heroku, I am going to use `git` to push our current project. This is the most common and safe way to use it with Heroku cli interface. Run the following commands in the order described.\n\n```shell\n# initialize our project as git repository\ngit init\n\n# prepare the stage\ngit add .\n\n# Commit all changes to git\ngit commit -m \"commit all changes\"\n```\n\nThen run:\n\n```shell\nheroku create\n```\n\nWhen this command runs successfully, it gives you an app id like this. Remember this app id as we are going to use it set our existing mlab MongoDB URI.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*75t_1Se-SNCHrQ67CIKwmQ.png' />\n\nNext step is to connect the existing mlab deployment from our Heroku app.\n\n```shell\nheroku config:set MONGODB_URI=mongodb://\nuser:password@ds125453.mlab.com:25453/mern-example -a\ndamp-dusk-80048\n```\n\nYou can also use the free tier of mlab provided by Heroku using the following command in case you haven’t deployed your database previously. This command must only be run in case you are not already using mlab for your Mongodb deployment.\n\n```shell\nheroku addons:create mongolab\n```\n\nYou can verify that the configuration value has been set by running:\n\n```shell\nheroku config:get MONGODB_URI --app damp-dusk-80048\n\n# Output\n\nmongodb://user:password@ds125453.mlab.com:25453/mern-example\n```\n\nNote that `user` and `password` in above commands are your mlab credentials that have been discussed on how to set up them in previous sections of this article. Next step is to push the whole app to Heroku.\n\n```shell\n# Push to heroku\n\ngit push heroku master\n```\n\nThis points to Heroku remote instead of `origin`. This above command sends the source code to Heroku and from then Heroku reads `package.json` only to install `dependencies`. That is the reason we defined `start` script rather using the than `server` one because Heroku or a deployment server has no use of development environment dependencies such as `nodemon`.\n\nFinishing the building of your project may look similar to mine.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*jsmi-MziaelOUtB_2Mbn4Q.png' />\n\nYou can then visit the URL given by Heroku like below. Do notice the already existing data that we deployed using local server in the previous section.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*PQTWi9hFs29cI2B2IsRRDw.png' />\n\n### Conclusion\n\nThere are many deployment techniques that you can try on Heroku. The technique described in this article is just one of them. I hope you have this article has helped you out.\n\n[Originally published at Crowdbotics](https://medium.com/crowdbotics/deploy-a-mern-stack-app-on-heroku-b0c255744a70)\n",
            "url": "https://amanhimself.dev//blog/deploy-a-mern-stack-app-on-heroku",
            "title": "Deploy a MERN stack app on Heroku",
            "summary": "Deploy a MERN stack app on Heroku",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/navigation-in-a-react-native-app",
            "content_html": "---\ntitle: 'How to use React Navigation in a React Native App'\ndate: '2018-09-28'\nslug: 'navigation-in-a-react-native-app'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://medium.com/hackernoon/navigation-in-a-react-native-app-cf61ed85e80b'\n---\n\nNavigation plays an important role in mobile applications. Without navigation, there will be little use of an application. In this tutorial, we are going to learn how to implement Navigation in a React Native application from scratch. If you are familiar with web, or Reactjs as library, overall concept of navigation is same. It is used to navigate to different pages or screens (in our case). However, the implementation of a navigation library here is different from the web.\n\n### Getting Started\n\nBefore building a mobile application it is recommended that one spends an amount of time strategize how the application will handle navigation and routing. In this module, we will be covering different navigation techniques available to us. First, let us setup our project. We will use **react native CLI tool** for this. If you haven’t installed it, type the first line otherwise if you already installed, you can skip the first command.\n\nNext, we will navigate into the new project directory and will run the project to see if everything is working fine by running the following command.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*NlX0zu7oVyFJv_CKdLXMMg.png' />\n\nAfter that, we will install the dependency we need to implement navigation in our application.\n\n```shell\nyarn add react-navigation\n```\n\nNow that we have created our bare minimum application and have the required dependencies installed, we can start by creating our components and look at different navigation techniques.\n\n### Stack Navigation\n\nStack Navigation is exactly what the word _stack_ refers to. It is a pile of screens or app pages that can be removed from the top. It follows a simple mechanism, _last in, first out_. It stack navigator, it means, adding screens on top of each other. To implement this we will create three screens inside the directory `src/`. If the directory name is not available to you, do create one. These three screens are `.js` files: `ScreenOne`, `ScreenTwo` and `ScreenThree`.\n\n```shell\n// ScreenOne.js\nimport React, { Component } from 'react';\nimport { View, StyleSheet, TouchableHighlight, Text } from 'react-native';\n\nclass ScreenOne extends Component {\n\tstatic navigationOptions = {\n\t\ttitle: 'Welcome'\n\t};\n\trender() {\n\t\tconst { navigate } = this.props.navigation;\n\t\treturn (\n\t\t\t<View style={styles.container}>\n\t\t\t\t<TouchableHighlight\n\t\t\t\t\tonPress={() => navigate('ScreenTwo', { screen: 'Screen Two' })}\n\t\t\t\t\tstyle={styles.button}\n\t\t\t\t>\n\t\t\t\t\t<Text style={styles.buttonText}>Screen One </Text>\n\t\t\t\t</TouchableHighlight>\n\t\t\t</View>\n\t\t);\n\t}\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center'\n\t},\n\tbutton: {\n\t\talignSelf: 'stretch',\n\t\tmarginLeft: 10,\n\t\tmarginRight: 10,\n\t\tborderRadius: 5,\n\t\theight: 40,\n\t\tjustifyContent: 'center'\n\t},\n\tbuttonText: {\n\t\tcolor: 'teal',\n\t\tfontSize: 22,\n\t\talignSelf: 'center'\n\t}\n});\nexport default ScreenOne;\n\n// ScreenTwo.js\nimport React, { Component } from 'react';\nimport { View, StyleSheet, TouchableHighlight, Text } from 'react-native';\n\nclass ScreenTwo extends Component {\n\tstatic navigationOptions = ({ navigation }) => {\n\t\treturn {\n\t\t\ttitle: `Welcome ${navigation.state.params.screen}`\n\t\t};\n\t};\n\n\trender() {\n\t\tconst { state, navigate } = this.props.navigation;\n\t\treturn (\n\t\t\t<View style={styles.container}>\n\t\t\t\t<Text style={styles.titleText}>{state.params.screen}</Text>\n\n\t\t\t\t<View style={styles.buttonContainer}>\n\t\t\t\t\t<TouchableHighlight\n\t\t\t\t\t\tonPress={() => this.props.navigation.goBack()}\n\t\t\t\t\t\tstyle={[styles.button, { backgroundColor: '#3b3b3b' }]}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Text style={styles.buttonText}>Go Back</Text>\n\t\t\t\t\t</TouchableHighlight>\n\n\t\t\t\t\t<TouchableHighlight\n\t\t\t\t\t\tonPress={() => navigate('ScreenThree', { screen: 'Screen Three' })}\n\t\t\t\t\t\tstyle={[styles.button, { backgroundColor: '#4b4bff' }]}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Text style={styles.buttonText}>Next</Text>\n\t\t\t\t\t</TouchableHighlight>\n\t\t\t\t</View>\n\t\t\t</View>\n\t\t);\n\t}\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center'\n\t},\n\tbutton: {\n\t\talignSelf: 'stretch',\n\t\tmarginLeft: 10,\n\t\tmarginRight: 10,\n\t\tborderRadius: 5,\n\t\theight: 40,\n\t\tjustifyContent: 'center'\n\t},\n\tbuttonText: {\n\t\tcolor: 'white',\n\t\tfontSize: 22,\n\t\talignSelf: 'center'\n\t}\n});\nexport default ScreenTwo;\n\n// ScreenThree.js\nimport React, { Component } from 'react';\nimport { StyleSheet, View, Text, TouchableHighlight } from 'react-native';\n\nclass ScreenThree extends Component {\n\tstatic navigationOptions = ({ navigation }) => ({\n\t\ttitle: `Welcome ${navigation.state.params.screen}`\n\t});\n\n\trender() {\n\t\tconst { params } = this.props.navigation.state;\n\t\treturn (\n\t\t\t<View style={styles.container}>\n\t\t\t\t<Text style={styles.titleText}>{params.screen}</Text>\n\t\t\t\t<TouchableHighlight\n\t\t\t\t\tstyle={styles.button}\n\t\t\t\t\tonPress={() => this.props.navigation.goBack()}\n\t\t\t\t>\n\t\t\t\t\t<Text style={styles.buttonText}>Go Back</Text>\n\t\t\t\t</TouchableHighlight>\n\t\t\t</View>\n\t\t);\n\t}\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center'\n\t},\n\ttitleText: {\n\t\tfontSize: 22\n\t},\n\tbutton: {\n\t\talignSelf: 'stretch',\n\t\tmarginRight: 25,\n\t\tmarginLeft: 25,\n\t\tmarginTop: 20,\n\t\tborderRadius: 20,\n\t\tbackgroundColor: '#ff0044',\n\t\theight: 50,\n\t\tjustifyContent: 'center'\n\t},\n\tbuttonText: {\n\t\tcolor: 'white',\n\t\tfontSize: 18,\n\t\talignSelf: 'center'\n\t}\n});\n\nexport default ScreenThree;\n```\n\nNotice, in all three screens we have access `navigation.state` as props and `navigationOptions` as a static object. The navigationOptions takes header options for the screen title _Welcome_. In the application screen above, you will see the Welcome text in the toolbar. Other header options include `headerTitle`, `headerStyle` and many more. This is made available to us by `react-navigation` dependency.\n\n`this.props.navigation` object also different properties that we can directly access in our component. The first, `navigate` is used to specify screen to navigate. Next, `goBack()` is the method that helps us navigate back to the previous screen, if available. Lastly, the `state` object help us keep track of the previous and the new state.\n\nUsing `onPress()` handler we can also access the screen directly as we are doing in `ScreenOne.js`. Just pass the component and the screen name as an argument.\n\n```js\nonPress={() => navigate('ScreenTwo', { screen: 'Screen Two' })}\n```\n\nAll of these methods and objects are made available to our components because of below configuration. To make use of these three screens, and see how Stack Navigation works in action, we will modify our `App.js` as:\n\n```js\nimport React from 'react';\n\nimport { StackNavigator } from 'react-navigation';\nimport ScreenOne from './src/stack/ScreenOne';\nimport ScreenTwo from './src/stack/ScreenTwo';\nimport ScreenThree from './src/stack/ScreenThree';\n\nconst App = StackNavigator({\n  ScreenOne: { screen: ScreenOne },\n  ScreenTwo: { screen: ScreenTwo },\n  ScreenThree: { screen: ScreenThree }\n});\n\nexport default App;\n```\n\nWe are importing `StackNavigator` from `react-navigation` and all other screens we created inside the source directory.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*7ucBAxqZoAqvDGEbHfSniQ.png' />\n\n_Screen One_\n\n<img src='https://cdn-images-1.medium.com/max/800/1*mwaLBOP-jYybqXn4dN10Sg.png' />\n\n_Screen Two_\n\n<img src='https://cdn-images-1.medium.com/max/800/1*1i4GrVvkqB1qHoF5GjY5mQ.png' />\n\n_Screen Three_\n\n### Tab Navigation\n\nThe way Tab Navigation work is different from Stack Navigator. The different screens will be available to the UI at one point and there is no first or next screen. The user can access each tab from the Tab Menu. To create a Tab Navigation menu, we need to import `createBottomTabNavigator`. Let us see how it works. This time, we will edit the `App.js` code.\n\n```js\n// App.js\nimport React from 'react';\nimport { Text, View } from 'react-native';\nimport { createBottomTabNavigator } from 'react-navigation';\n\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Home!</Text>\n      </View>\n    );\n  }\n}\n\nclass SettingsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Settings!</Text>\n      </View>\n    );\n  }\n}\n\nexport default createBottomTabNavigator({\n  Home: HomeScreen,\n  Settings: SettingsScreen\n});\n```\n\n<img src='https://cdn-images-1.medium.com/max/800/1*f8_SrGnqj7wR7m31-9bnVg.png' />\n\nOf course, you can modularize it a bit by separating Home and Setting screen in different components of their own. For our demo application, the above example serves the purpose. You can add `tabBarOptions` to modify its look and feel.\n\n```js\nexport default createBottomTabNavigator(\n  {\n    Home: HomeScreen,\n    Settings: SettingsScreen\n  },\n  {\n    tabBarOptions: {\n      activeTintColor: 'red',\n      inactiveTintColor: 'black'\n    }\n  }\n);\n```\n\n<img src='https://cdn-images-1.medium.com/max/800/1*tATWRPRM39a6UkruTayrTw.png' />\n\n### Conclusion\n\nIt might take a while to grasp them and use them for your application but once you get the whole of the basic concept, you can do wonders with it. You can even integrate Stack and Tab Navigators for complex scenarios. [react-navigation](https://reactnavigation.org/docs/en/getting-started.html) has a good documentation.\n\n[Originally published at Hackernoon.com](https://medium.com/hackernoon/navigation-in-a-react-native-app-cf61ed85e80b)\n",
            "url": "https://amanhimself.dev//blog/navigation-in-a-react-native-app",
            "title": "How to use React Navigation in a React Native App",
            "summary": "How to use React Navigation in a React Native App",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/accessing-geo-location-and-app-permissions-in-react-native-and-expo",
            "content_html": "---\ntitle: 'Accessing Geo-location and App Permissions in React Native and Expo'\nslug: 'accessing-geo-location-and-app-permissions-in-react-native-and-expo'\ndate: '2018-09-20'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://medium.com/react-native-training/accessing-geo-location-and-app-permissions-in-react-native-and-expo-e7a1bd4714a2'\n---\n\n> [Originally published at React Native Training](https://medium.com/react-native-training/accessing-geo-location-and-app-permissions-in-react-native-and-expo-e7a1bd4714a2)\n\n![cover_image](https://i.imgur.com/jEjHKCI.jpg)\n\nIn web, Geolocation is provided as an API that has different methods to use in a web application. Similarly, React Native takes advantage of this API and is available as polyfills. Geolocation is a must have feature to implement in a mobile app. Few of the famous mobile apps that use it for more than 90% in terms of usage are Uber, Google Maps, etc. In this article, I will show how to integrate the Geolocation API in a React Native app in two ways. Using Expo and using `react-native-cli`. Along with that, I am going to implement a real time feature that is commonly used with these types of applications. Asking **user permissions**. Permissions in `react-native-cli` can be a bit tricky but after reading this article, it won't be tricky to you as much.\n\n## Getting Started With Expo\n\nFor this purpose, I am using `expo-cli`. Follow the below commands to set up an Expo project and get started.\n\n```shell\n\nnpm install -g expo-cli\n\nexpo-cli init find-me\n\n# select blank template & traverse into a newly created directory\n\nnpm run ios\n\n# for Window users, run\n\nnpm run android\n```\n\nYou will be welcomed with a default screen. We will start here. First, edit the `App.js`.\n\n![ss](https://i.imgur.com/kWvPIWF.png)\n\nCreate a new file for the `FindMe` component at `src -> screens -> FindMe -> index.js`. Inside this file, we will just display a text.\n\n![ss](https://i.imgur.com/rRRzQVb.png)\n\nHere is how our app looks so far.\n\n![ss](https://i.imgur.com/9oCTyax.png)\n\n## Accessing Geolocation API\n\nThe Geolocation API exists as a global object called `navigator` object in React Native, just like the web. It is accessible via `navigator.geolocation` in our source code and there is no need to import it.\n\nFor our demonstration purposes, we will be using `getCurrentPosition` method from the geolocation API. This method allows a mobile app to request a user's location and accepts three parameters: success callback, error callback and a configuration object in the last.\n\n![ss](https://i.imgur.com/oeYTXrk.png)\n\nThe first callback has a `position` argument that is an object with the following properties.\n\n```shell\n{\n  \"timestamp\": 1533729980953.91\n  \"coords\": {\n    \"accuracy\": 5,\n    \"altitude\": 0,\n    \"altitudeAccuracy\": -1,\n    \"heading\": -1,\n    \"latitude\": 37.785834,\n    \"longitude\": -122.406417,\n    \"speed\": -1\n  }\n}\n```\n\nNow, implement this in our `FindMe` component.\n\n![ss](https://i.imgur.com/totMaU5.png)\n\nWe start be importing `TouchableOpcaity`. It is a wrapper that responds accurately to user touches. In a mobile app, you will be making use of them. Think of it as a button in a web application. This newly imported wrapper accepts an `onPress` prop that is going to trigger the function defined as in the value, in our case `findCurrentLocation`.\n\n`findCurrentLocation` holds the logic of fetching a user's location. We are also using the local state to display coordinates from the data provided to us by `position` object. The text `Where Am I` now becomes clickable.\n\n![ss](https://i.imgur.com/Wj58GJo.png)\n\nThat’s it for the app part. Now let us see how to add permissions to the same application.\n\n## Using Expo Permissions\n\nRequesting to access a user’s information whether it is location or any other sensitive information on the device, it is your job as the developer to ask for the permissions first. It is one time process, both when developing the application and when the user is using the application. Most permissions are asked when the user installs the application run it for the first time.\n\nFor us, Expo has integrated all the permission API we need for this demo app or any other app you are building using Expo. This API has different methods for device types of permissions to grant for. Such as location, camera, audio recording, contacts, camera roll, calendar, reminders (for ios only) and notifications. We are going to use `Location`.\n\n![ss](https://i.imgur.com/e4InNct.png)\n\nWe change our state a bit. It will not store the whole geolocation object and `errorMessage` in case of an error. Our `findCurrentLocation` remains the same. In fact, we are not using it. Expo has a method for us that does the same. It is called `getCurrentPositionAsync`. It will only fetch the user's location and other properties made available by `getCurrentPosition` method from Geolocation API and if the permission is granted. In the render method, `onPress` prop is now calling a different method `findCurrentLocationAsync` that holds the logic for asking permission and fetches the location data after the user has granted permission to our app to access it. If not, the error message is set otherwise the location in the state is updated.\n\nThe last step is for android users. Open `app.json` and permissions.\n\n![ss](https://i.imgur.com/NvFVYyw.png)\n![ss](https://i.imgur.com/gov0n1z.png)\n\nIf you press allow, you will see the following result.\n\n![ss](https://i.imgur.com/hEh9YBC.png)\n\nNote that in even in development mode and running the app in a simulator, the permissions are only asked once. To perform this again, you will have to delete the app from your simulator and re-run the command to start the expo app.\n\n## Using react-native-cli\n\nUsing `react-native-cli` means you will have to set permissions on your own, however, the logic of getting a user's location is going to be the same.\n\nThere are no templates in `react-native-cli` so once the directory is generated, traverse into it and run `npm start` to see if everything is installed correctly. The first thing you will notice when you open this project in an IDE or a code editor is that there is a vast amount of change in the structure of files and folders. Expo had a sort of minimal project structure as compared to this one. There are separate build folders such as `/android` and `/ios` for each platform. You can also use flow (which is similar to TypeScript, open sourced by Facebook).\n\n![ss](https://i.imgur.com/MOyLOFw.png)\n\nWe will only modify `App.js` file with the following code.\n\n![ss](https://i.imgur.com/CPryJLE.png)\n\nObserve that `findCoordinates` works the same way as in Expo application and also the code in `render()` function is exactly same. Our next step is to set permissions.\n\nIn ios, geolocation is enabled by default when a project is created using `react-native-cli`. To use it, we just need to include a key in `info.plist` which is inside the `ios/findCoordsApp` directory.\n\n![ss](https://i.imgur.com/Iqc2Y2c.png)\n\nFor android, we need to add the following line in `android/app/src/AndroidManifest.xml` file.\n\n```xml\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n```\n\n![ss](https://i.imgur.com/eqkj6TT.png)\n\nNow if you run your application you will see the following screen.\n\n![ss](https://i.imgur.com/528AV75.png)\n\nClick on the text and you will be prompted to ask whether to allow the application to request for user’s location or not. For the demonstration purpose, I am using an android Emulator since we have already seen how it works on ios Simulator in the Expo section.\n\n![ss](https://i.imgur.com/RVPukGJ.png)\n\nIf you press allow, you will see the following result.\n\n![ss](https://i.imgur.com/z7MQSko.png)\n\n_You can find the complete code in this Github repository._ 👇\n\n[**amandeepmittal/findCoordsApp**](https://github.com/amandeepmittal/findCoordsApp)\n\nIf you want to learn more about working with Geolocation API in a React Native application, please go through the [**official documentation**](https://facebook.github.io/react-native/docs/geolocation)**.**\n\n[**Expo’s Documentation**](https://docs.expo.io/versions/latest/sdk/permissions#__next) has a lot more on **Permissions** too.\n",
            "url": "https://amanhimself.dev//blog/accessing-geo-location-and-app-permissions-in-react-native-and-expo",
            "title": "Accessing Geo-location and App Permissions in React Native and Expo",
            "summary": "Accessing Geo-location and App Permissions in React Native and Expo",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/simple-recipe-to-build-a-theme-app-in-react-native",
            "content_html": "---\ntitle: 'Simple Recipe to Build a Theme App in React Native'\ndate: '2018-09-11'\nslug: 'simple-recipe-to-build-a-theme-app-in-react-native'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://medium.com/hackernoon/simple-recipe-to-build-a-theme-app-in-react-native-8e2456f81bc5'\n---\n\nRecently, I have been working on a React Native application that demands a changeable theme based on the user selection. I wanted to do this in a simplest way possible. I have so far avoided any React Native UI toolkit such as NativeBase or React Native Elements. In the article below, I am going to share with you all about this simple recipe.\n\n> This is what we are building. By the end of this article you will have a similar looking React Native project.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*NK6OqE6SWsT3ibxXDhkx6g.gif' />\n\n### Requirements\n\nYou can either clone the application to see how it works from this Github repo here to see everything working properly. Or you can follow the article step by step. It is up to you. To start, generate a react native app using a generator of your choice. We have to choices:\n\n- `react-native cli`\n- expo-cli/CRNA\n\nI will use expo-cli for the demo purposes but you can use CRNA(Create-React-Native-Project) if you want. We need to the following dependencies to be installed in our project before we start.\n\n- redux\n- redux-logger(optional, it will be better for you to debug in case anything goes wrong)\n- react-navigation\n- react-native-vector-icons (only install if you are using react-native-cli)\n\n### Getting Started: Navigation\n\nWe need only two screen for the demonstration. I am going to call them `Home.js` and `Theme.js`. Both are right now contain only boilerplate code. It is good for them to be dumb until we connect them using `react-navigation`. Create a new file called `navigation.js` and import both the components.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*hBNBbPck6EmD9Bq9NCAhzA.png' />\n\n`createStackNavigator` is the replacement to `StackNavigator` in `react-navigation` version 2+. Notice that, we are not passing a header to the Home Screen.\n\n### Creating a Store using Redux\n\nNext step is to build a redux store that will make use of an action, action creator and reducer to change theme in our application. In `actions.js` put the following code.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*T86eAgIOjKi5L0xyuqIxCA.png' />\n\nWe only have one action and changes the theme color of the app. Now the reducer:\n\n<img src='https://cdn-images-1.medium.com/max/800/1*n6CqWVOCKJw0an8y2UeqkQ.png' />\n\nNotice that we are setting the primary color in the initial state as the hex value. You can also retrieve it from a configuration file or constants file in your application. We are also exporting the `colors.js` file which contains three different hex code values that define different color schemes.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*bKG_BG6i7e7IvwT9p9zm5g.png' />\n\nLastly, create the store and it to `App.js` for the application components to use it.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*EBI1jplYD7TB4oxkZMlp_A.png' />\n\nInside `App.js` file we connect our Redux store to manage the state as well as navigation.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*4xA_ue2jr9WWItYKLQzCFA.png' />\n\nYou might be wondering why the heck use a Redux Store for such a small application. Well, all I am trying to demonstrate is a pragmatic approach to build a them-able application using React Native and Redux. It is your choice to manage the state.\n\n### Finalizing the App\n\nThe last components of our React Native application from where the action happens are `Home.js` and `Theme.js`.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*P08ni2pglIDyhL0h8SIgbg.png' />\n\nBy pressing the settings icon, we can navigate to the Themes screen to change background color of the Home screen. We are also passing the title of the Theme Screen here.\n\nThe magic of changing the color is happening in `Home.js` at this line:\n\n```js\n<View style={[styles.container, { backgroundColor: this.props.primaryColor }]}>\n```\n\nWe are receiving the `primaryColor` from the props. The `Theme.js` file will be changing the value of this prop on selecting a viable option. Take a look below.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*pqMt7rWFEqGI8H-Ml70rnQ.png' />\n\nIn above, `handleThemeChange` handles the dispatching of the only action we defined in `actions.js`. At last, we have our app working.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*NK6OqE6SWsT3ibxXDhkx6g.gif' />\n\n[Originally published at Hackernoon.com](https://medium.com/hackernoon/simple-recipe-to-build-a-theme-app-in-react-native-8e2456f81bc5)\n",
            "url": "https://amanhimself.dev//blog/simple-recipe-to-build-a-theme-app-in-react-native",
            "title": "Simple Recipe to Build a Theme App in React Native",
            "summary": "Simple Recipe to Build a Theme App in React Native",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/how-to-integrate-redux-into-your-application-with-react-native-and-expo",
            "content_html": "---\ntitle: 'How to integrate Redux into your application with React Native and Expo'\ndate: '2018-08-10'\nslug: 'how-to-integrate-redux-into-your-application-with-react-native-and-expo'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://medium.com/free-code-camp/how-to-integrate-redux-into-your-application-with-react-native-and-expo-ec37c9ca6033'\n---\n\n![cover](https://i.imgur.com/YqZC6zh.jpg)\n\nRedux is an important part of the React Native ecosystem. If your world revolves around JavaScript, you’ve probably heard about Redux. Before reading the rest of the tutorial and going further, just try to remember that you are only learning about Redux because it will make things easier for you, and not more difficult. Now let us learn why you need Redux in your application.\n\n### Need for Redux\n\nBuilding a React or React Native application in the real world can become complex if there is not a proper way to handle data. If at any point the data is not managed, things will get out of hand. If you are familiar with React or React Native, you know the default way of handling data is to keep it in a component state and pass it to children components as props.\n\nState and Props are the only two ways to control data in a component. Props is short for **properties.** It is a simple rule to follow in the React world that we should not mutate or change the value of props. In React, the flow of data is unidirectional or one way. That is, the data can always be passed from a parent to a child component. Take a look below at this simple example:\n\n<img src='https://cdn-images-1.medium.com/max/800/1*PXT5wJ4ctcEANSAciWe6Iw.png' />\n\nIn the above example, we create two components (Parent and Child) in separate files. The Parent component consists of a view where the Child component is rendered. In the child component, the view renders a text message that is incoming from the props. The incoming message is available as the data in the state of the parent component.\n\nThis way, the child component can be reused with other parent components such that each parent component can have its own data to render. Do note that we are not modifying the value of `this.props` at any point.\n\nThe state is there to mutate data. This is the only reason that the state exists within each component. Whenever we want to change the state, we use `this.setState()` method within a component. This method re-renders the component and all of its child components to reflect the changes. This works both in React and React Native similarly, but the internals are different.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*YqjKCFCmuMikKf5n8kb_tw.png' />\n\nSince we can manage state and props so efficiently within a React Native app, why is Redux necessary? Well, the above example represents the bare minimum and not a real-time scenario. Imagine an application like Instagram or Twitter. You have different screens, and each screen may depend on a component or two like the Parent and the reusable Child components from our example. It would be hard to keep track of the state of each component.\n\nRedux is one the most widely adopted ways of handling data. It enables the state to be shared as a global attribute that an entire React Native application can use and receive in the form of props. This is known as creating a store in Redux. Redux simplifies the state by moving it into one place.\n\nRedux uses an underlying React Mechanism called context. We are not going to dwell what context is, since it is out of the scope of this article. I just wanted you to know that nothing magical is happening behind the scenes.\n\nJust remember the following terms, since we are going to see them in action in the tutorial below:\n\n- Actions\n- Reducers\n- Store\n\nThe key to learning Redux is practice. I don’t want to share too much information and overwhelm things right now. So let us begin by creating a demo application to learn Redux.\n\n### Building a Pomodoro application\n\n#### Getting Started with Expo-CLI\n\nTo build this application, I am going to use the latest tool introduced by the [Expo](https://medium.com/u/df61a4267d7a) team called [expo-cli](https://www.npmjs.com/package/expo-cli). Install it as a global dependency and then initialise a new React Native project using it.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*WVhMAOBzQNl-4RpL0CThLw.png' />\n\nTo see if everything is working correctly at this initial state, run the following command.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*qxzbx05hdPWwKy6zQGSS6g.png' />\n\nYou will be prompted with the following interface. Take some time to go through it. If you have build applications using Expo XDE or Create-React-Native-App before, you will see that not much has changed, except that now Expo-CLI makes use of the Chrome browser.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*PP7QE6q2zPf_Ge3OPAuYcg.png' />\n\nChoose a simulator or device that can run Expo Client as marked in the above image. If you get the below screen, that means our React Native project has been initialised without any difficulties.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*BXZsSSnTpdxs38_dRcnb5w.png' />\n\nWith that, create the following files and folders inside the `components` directory. I will discuss why we are following this directory structure later. For now, our initial setup is complete and we can start building our application.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*xVtf1meIsa4A0frjAsFsIw.png' />\n\n#### Timer Component ⏱\n\nFirst, we will create a dumb Timer component and connect it with `App.js`. Add the following code to the `Timer/index.js`:\n\n<img src='https://cdn-images-1.medium.com/max/800/1*wQk1JSY-NaEmU1FbZKz29g.png' />\n\nNext, modify the `App.js` file:\n\n<img src='https://cdn-images-1.medium.com/max/800/1*emdQmLUOWJ6yNmZ6ZYTI6w.png' />\n\n<img src='https://cdn-images-1.medium.com/max/800/1*U1Cyur_BU0oqQYQ23oHNyg.png' />\n\nWe will now make a static Timer component to see how things fit in. We’ll start by modifying the `StatusBar`. Then we define two `Text` elements from the `react-native` library to specify where the actual timer will be displayed and where the buttons for starting and stopping the timer will be displayed. For now, both are text fields.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*dtR7uZ3PaUrpcksPrVFWHQ.png' />\n\n<img src='https://cdn-images-1.medium.com/max/800/1*C4tNc0e_fqsuVfIu308BDQ.png' />\n\n#### Adding Buttons 🔘\n\nIn this section, we are going to replace the section that displays `Start and Stop Buttons!` with actual buttons. We will be using `TouchableOpactiy` to make this work. A `TouchableOpacity` component acts as a wrapper for making views respond properly to touches. The opacity of the wrapped view (or the button in our case) gets decreased whenever a user touches it.\n\nWe create a reusable component since we need two buttons: Start and Stop.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*tj3HIFtHmaRMJC_XgokHyQ.png' />\n\nThis is a stateless component, so it has no class — we only need it to represent the Button in the UI of our app. We also import FontAwesome icons from `@expo/vector-icons`, which is a fork of react-native-vector-icons and comes directly with the expo SDK. No need to install it as a separate dependency. To display an icon, we need to define its `size`.\n\nLastly, in the above stateless component, we define `propTypes`. I will be discussing how and why we should use PropTypes in a React Native application in another article.\n\nIn a mobile app, events are triggered by touch. To handle those events, we are going to use `onPress`. We will have only two events here, Start and Stop. Both the buttons in our app are going to make use of `onPressOut` which differs from `onPress` . The `onPressOut` is called whenever the touch is released by the user (when the user stops pressing the button). It is called before `onPress` and is more accurate in a situation like ours where we need to start or stop the timer by pressing the button as soon as the user is done.\n\nWe will now require this `Button` component in our Timer component.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*jy7fxGEmZ6XhFbQVKBsmNw.png' />\n\n<img src='https://cdn-images-1.medium.com/max/800/1*5YaPpg8mP6Nb95LIjifmdw.gif' />\n\n### Integrating Redux 😍\n\nSo far, our Timer application does not do anything other than display a bare minimum UI. To make it work, we start by adding some necessary Redux dependencies.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*1wEzBipK4kL89Mt2d84sGQ.png' />\n\nNow, let us start integrating Redux in our app.\n\n#### Actions 🎬\n\nIn Redux, the state of the whole application is represented by one JavaScript object. Think of this object as read-only, since we cannot make changes to this state (which is represented in the form of a tree) directly. We need `actions` to do so.\n\nActions are like events in Redux. They can be triggered in the form of mouse clicks, key presses, timers or network requests. The nature of each event mentioned is mutable. An action is a JavaScript object. To define an action, there is one requirement: each action much have its own type property. We define these types in a file called `types.js`:\n\n<img src='https://cdn-images-1.medium.com/max/800/1*VKHREyQdGAXCvdmVFXfPBw.png' />\n\nOur application needs only three actions so far. The type of any action is a string value and is defined as a constant.\n\nIn the file `actions.js`, we will require these types to define action creators. Action Creators are functions that create actions.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*8ZO2qO4_ivFDAcuVkcyw8g.png' />\n\n#### Reducers 🚜\n\nThe receiver of the action is known as a reducer. Whenever an action is triggered, the state of the application changes. The handling of the application’s state is done by the reducers.\n\nA reducer is a pure function that calculates the next state based on the initial or previous state. It always produces the same output if the state is unchanged. It takes two inputs, and state and action must return the default state.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*52J8tvpIPftFQvxGjljioQ.png' />\n\nIn our initial state, we define three attributes: `isPlaying`, `elapsedTime` and `timerDuration`. The timer currently has a default value of 6 (seconds) for testing purposes, but the actual value we are going to change later is `25` (or 1500 seconds).\n\nThen there are three helper functions:\n\n- `applyStartTimer` will start the timer\n- `applyRestartTimer` will stop the timer function and set everything to default\n- and lastly, `applyAddSecond` will check if the time passed is less than the total timer's duration. If so, it’ll add one more second to increase its value. If the not, it will return the default state and stop the timer function from running.\n\nAfter that, we define our reducer function and export the same function. Observe how the reducer function is organised. This is a pattern followed by most community members I have seen on the internet.\n\n[This](https://egghead.io/courses/getting-started-with-redux) is a good resource to get started with Redux in general by [Dan Abramov](https://medium.com/u/a3a8af6addc1) and it is FREE!\n\n#### Creating Redux Store 🏬\n\nWith the help of the reducer and the initial state, we can create the store object.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*FcpwQgHpKTaMvM_jjLlhKQ.png' />\n\nA store is an object that brings and actions and reducers together. It provides and holds state at the application level instead of individual components. Redux is not an opinionated library in terms of which framework or library should use it or not.\n\nTo bind a React or React Native application with Redux, you do it with `react-redux` module. This is done by using the high ordered component `Provider`. It basically passes the store down to the rest of the application.\n\nWe need to bind action creators with our Timer function in order to make it fully functional (so that it responds to the touchable events or the start or restart of the timer). We will do this in the `Timer/index.js` function.\n\nFirst, we import the required dependencies to bind action creators.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*1amB7kU23eYwjF-a8aGUiQ.png' />\n\n`bindActionCreators` maps action functions to an object using the names of the action functions. These functions automatically dispatch the action to the store when the function is called. To change the data, we need to dispatch an action. To enable this, we need two things: `mapStateToProps` and `mapDispatchToProps`, and we need to connect both of them with our component. This is the boilerplate code that you will be re-writing.\n\nWe define these two functions and modify our `export default` statement after we define the styles for our React Native views.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*RobgSa1MMNKK-J4RstCN9w.png' />\n\n`mapStateToProps` is an object that lives in the store whose keys are passed down to the component as props. The below is the complete code for the Timer component.\n\n### Completing The App\n\n<img src='https://cdn-images-1.medium.com/max/800/1*LqWiY370yr3gXMPtiJC9wg.png' />)\n\nI have created a custom function called `formatTime` to display the time in the correct format, but you can make use of any timer library. Next, to increment the value of time, I use the React lifecycle method `componentWillReceiveProps`. I know it is going to deprecated soon, but for now it works. See our mini-app in action below:\n\n<img src='https://cdn-images-1.medium.com/max/800/1*kMPizExeDMG-6MrYNbw8ew.gif' />\n\nFor the sake of brevity and this demo, I am using only seconds to display the timer. You can increase the value of the timer by editing the value of constant `TIMER_DURATION` in `reducers.js`.\n\nWe have reached the end of the article. Hopefully, you have had as much fun reading it as I did writing it. You can find the complete code for this article at this Github repo:\n\n[**amandeepmittal/rn-pomodoro-example**]https://github.com/amandeepmittal/rn-pomodoro-example)\n\n_Do you remember me telling you about a particular file structure I followed in implementing Redux architecture? Well it is called_ **_re-ducks_** _pattern and you can find more details in this informative article by_ [_Alex Moldovan_](https://medium.com/u/93d08ec35da2)_:_\n\n[**Scaling your Redux App with ducks**](https://medium.freecodecamp.org/scaling-your-redux-app-with-ducks-6115955638be)\n\n[Originally published at freeCodeCamp.org](https://medium.com/free-code-camp/how-to-integrate-redux-into-your-application-with-react-native-and-expo-ec37c9ca6033)\n",
            "url": "https://amanhimself.dev//blog/how-to-integrate-redux-into-your-application-with-react-native-and-expo",
            "title": "How to integrate Redux into your application with React Native and Expo",
            "summary": "How to integrate Redux into your application with React Native and Expo",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/week-3-with-react-native",
            "content_html": "---\ntitle: 'Week 3 with React Native - Why use Expo?'\ndate: '2018-07-26'\nslug: 'week-3-with-react-native'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://medium.com/hackernoon/week-3-with-react-native-107f6779a831'\n---\n\n[Originally published at Hackernoon.com](https://medium.com/hackernoon/week-3-with-react-native-107f6779a831)\n\nThis week has been a hectic one for me. Deadline coming closer, and too many tasks to complete. It has been a happening one also. I got the invite to join Gatsbyjs open source team, to help and maintain the on going projects. I love contributing to open source communities and projects.\n\n![](https://i.imgur.com/K7zj9sl.png)\n\n### 👍\n\nThis week I took a dive deeper in Expo and React Native. I successfully, implemented Facebook login and access to Firebase database in a RN app using Expo API. Expo is beautiful to work with. It takes care of a lot of native work that otherwise one would be integrating by opening either Xcode or Android Studio. I found these links helpful to go through for providing a Facebook authentication in a React Native app.\n\n- [Expo Facebook](https://docs.expo.io/versions/latest/sdk/facebook#__next)\n- For Firebase SDK setup and integration in a React Native app go through [this link](https://docs.expo.io/versions/latest/guides/using-firebase#__next), also provided by Expo API.\n\nOne good thing about Expo is that it comes with Create-React-Native-App starter project. Second most important thing I went through this week was integrating and implementing a Redux store in a React Native. To quickly get started, I went through a [Udemy Course by Stefan Hyltoft](https://www.udemy.com/learn-redux-in-react-native-in-less-than-2-hours/) since enrolling was free and seemed to the point. His explanation of concepts is clear but his methodology of working did not appeal me. Any recommendation on how to organize the actions and reducers will be helpful.\n\n### Why Use Expo for React Native?\n\nExpo is popular because it handles a lot of headache tasks itself and provide smooth APIs that work with React Native app outside the box. It is open source and does cost anything to use. To test on a real iOS device you need an Apple developer account (\\$99/year). You can accomplish this using Expo for both platforms: iOS and android. Expo provides a client app and by downloading it from the respective stores based on the mobile platform your device runs, you can easily test applications.\n\nCurrently, Expo’s SDK handles camera, maps, location tracking, analytics, push notifications and much more. Distributing it an Expo app is easy to. You can complete the process just by running the following command. It has dedicated [store](https://expo.io/) where you can publish apps for others to use. Quite helpful in prototyping.\n\n```shell\nexp publish\n```\n\nFor standalone applications there are command available from the Expo CLI tool that you can use. A standalone app does not need the Expo client to run the application. You can generate IPA or apk files by running:\n\n```shell\nexp build:ios\n\n# OR\n\nexp build:android\n```\n\nThere are shortcomings using Expo. I am not going to list them here but the team behind it seems to works rapidly to implement these new features. You can submit a feature or upvote one using this or get involved as a contributor.\n\n[**Feature Requests - Expo**](https://expo.canny.io/feature-requests)\n",
            "url": "https://amanhimself.dev//blog/week-3-with-react-native",
            "title": "Week 3 with React Native - Why use Expo?",
            "summary": "Week 3 with React Native - Why use Expo?",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/week-2-with-react-native-building-a-weather-app",
            "content_html": "---\ntitle: 'Week 2 With React Native - Building a Weather App'\nslug: 'week-2-with-react-native-building-a-weather-app'\ndate: '2018-07-16'\nthumbnail: '/thumbnails/expo.png'\ntemplate: post\ntag: 'expo'\ncanonicalUrl: 'https://medium.com/hackernoon/week-2-with-react-native-building-a-weather-app-ca50fcfcb1e1'\n---\n\n> [Originally published at Hackernoon.com](https://medium.com/hackernoon/week-2-with-react-native-building-a-weather-app-ca50fcfcb1e1)\n\nThis post was supposed to come out last weekend. I had a busy weekend could not find the time to write it nor had the energy to pull off it. Last week, I announced publicly, [in the first post](https://medium.com/@amanhimself/starting-over-with-react-native-aff0dbdf5909), that I have re-started learning and getting hands on experience using React Native. This post is a continuation to that one.\n\nThis week I advanced further in my journey. I completed [Spencer Carli](https://medium.com/u/1ec17560bf99)’s “[How to Setup a new React Native Project](https://learn.handlebarlabs.com/courses/enrolled/253279)”. The course goes through absolute basics of setting up a bare minimum app in which I got to learn things like:\n\n- configuring iOS simulator on MAC\n- linting with ESlint\n- Prettier: using code formatting tool\n- Debugging\n\nThough, I had been already familiar with the process of lint and prettier since I use both of them in my daily workflow. Debugging and other modules are a delight to get familiar with in the start and will give an overall aspect of things such that you do not loose patience with yourself when trying to use them later. Moreover, Spencer is a calm instructor and has soothing voice. I enjoyed his method of teaching.\n\n### eslint-config 🛠\n\nI took the linting process with ESLint a step further. I worked on a small npm module called [eslint-config-amanhimself](https://www.npmjs.com/package/eslint-config-amanhimself) and the advantage of using it is that, now I do not have to setup and configure every other React-Native project I start from scratch. The other advantages of using lint tool if you are familiar with web programming, you do not need an introduction.\n\nI personally, recommend you to use [ESLint](https://eslint.org/) with your projects, not only React Native but any other JavaScript library or framework you choose to work with. It does bring consistency in writing code and save minute errors from occurring at the time of compilation.\n\n[**amandeepmittal/eslint-config-amanhimself**](https://github.com/amandeepmittal/eslint-config-amanhimself)\n\nThis tool is completely open source and saves a lot of my time and yours will too, if you decide to use it. At least give it a try. I want you to know that I am open to contributors if we can make this utility better that benefits every one.\n\n### Weather Cards ⛅️\n\nNext thing I worked on was a small application that I built to fetch weather of city using a third party API and display a set of data in the form of a card. This is how it looks like.\n\n![](https://i.imgur.com/XPIOrxO.png)\n![](https://i.imgur.com/5rz4eNi.png)\n\nThe main elements that I used in building this application are the following:\n\n- Background image (using `ImageBackground`)\n- InputText Value\n- Fetching Weather Data from the API `[https://www.metaweather.com/api/](https://www.metaweather.com/api/)`\n- Card View UI to display Data\n\nBackground Image changes accordingly to the type of the weather which is fetched from the API. In this process, I also learned a bit about using React Native’s `Platform` API and how to elevate the card style which is done differently for iOS and android.\n\nDeveloping for Mobile is different from developing an app for web. In mobile, there are so many different elements to use and take care of. For example, in the below screen notice two things. One is a little cross button to delete the text in one action from the input field (only supported for iOS by RN API, I am sure there might be solution for android but I haven’t tried yet). Next, is the `KeyboardAvoidingView` which automatically re-positions the keyboard (or any other UI element) in the view to show maximum display elements.\n\n![KeyboardAvoidingView Example](https://i.imgur.com/a81AmEV.gif)\n\nIn this process, I also learned that creating a custom component is not so hard but publishing it on `npm` for React Native apps is a difficult task. The card view in this application I am using can be found here as a separate component:\n\n[**amandeepmittal/react-native-simple-card**](https://github.com/amandeepmittal/react-native-simple-card)\n\nTo setup and build this project I have used _Create-React-Native-App_ which is another wonderful open source tool to quickly kickstart a React Native project.\n\nI had a fun week with React Native. I tried to spend as much time as I could get. _🙏 Thank you for reading this post_.\n\nI also published another article this week on React Native:\n\n[_React Native: How to Setup Your First App_](https://medium.com/@amanhimself/react-native-how-to-setup-your-first-app-a36c450a8a2f)\n",
            "url": "https://amanhimself.dev//blog/week-2-with-react-native-building-a-weather-app",
            "title": "Week 2 With React Native - Building a Weather App",
            "summary": "Week 2 With React Native - Building a Weather App",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/react-native-how-to-setup-your-first-app",
            "content_html": "---\ntitle: 'React Native - How to Setup Your First App'\ndate: '2018-07-13'\nslug: 'react-native-how-to-setup-your-first-app'\nthumbnail: '/thumbnails/react.png'\ntag: 'react-native'\ncanonicalUrl: 'https://levelup.gitconnected.com/react-native-how-to-setup-your-first-app-a36c450a8a2f'\n---\n\n**PLEASE NOTE**\n\n_At the start of the year 2019, I updated this post and re-wrote it here 👇_\n\nGetting Started with React Native in 2019: Build Your First App Learn how to build your first React Native app with important basic concepts and where to go from [here](https://amanhimself.dev/blog/getting-started-with-react-native-in-2019-build-your-first-app).\n\n_It is more in-depth, and covers almost every basic aspect about React Native ecosystem. By reading the new post, you will also built a more advance version of a typical “hello world” app._\n\nReact Native is a framework for building mobile applications with JavaScript and leveraging ReactJS. It uses native UI components. If you are familiar with React or come from front end development background, React uses a virtual DOM which acts as a shadow to real DOM available. When an element changes, that change is reflected on the real DOM by Virtual DOM using a node that corresponds to each element. However, in React Native, there is no DOM rather than Native Components which are provided by platforms such as iOS and Android. There are no web views here.\n\nReact Native has an instance of [JavaScriptCore](https://facebook.github.io/react-native/docs/javascript-environment.html) to execute JS code when an application starts. React Native uses RCTBridgeModule to make a connection between native code and JavaScript code. It is assumed that as you dwell more in development with React Native, you might come across using a third-party SDK for a specific mobile platform. This bridging will be very helpful.\n\n### Difference between React Native and Reactjs\n\nReact Native has its own wrappers around the native components and do not make use of every HTML element. For example, `<View>` which is considered similar to `div` of HTML. This is a major difference between React Native and Reactjs. This also means that you cannot reuse every library that renders HTML and is available for Reactjs. It has its own navigation modules.\n\n### Platform Specific Designing\n\nDesigning a mobile application for multiple platforms available with the same set of code can be a bit overwhelming. In this case, a developer or a development team is left with two choices. Either they come up with a user interface that universal to their application. This means the UI of the app looks the same on every platform. However, this is not going to be the case with every application you develop. React Native can detect the platform you are running and conditions can be used to apply the styling.\n\nDiving deeply in the bridging part or platform specific designing part of this article is out of the scope. This is written to familiarize you with the basic ecosystem of React Native but I wanted to discuss these topics briefly such that to give an idea of what you are getting into.\n\n### Developer Environment for React Native\n\nThese are required dependencies to set up a local environment and further, to develop any type of application using it, on your machine.\n\nDependencies required:\n\nNote: Note that you have a Node.js version `>=4.0` to continue.\n\nTo setup Native SDKs for specific platforms:\n\n- **iOS** (install/have Xcode, it is free and most probably pre-installed)\n- **Android** (I’d recommend that you follow instructions [here](https://facebook.github.io/react-native/docs/getting-started.html))\n\nThe last step is to install React Native CLI using this command:\n\n```shell\nnpm install -g react-native-cli\n```\n\nThe above instructions work best if you need to build native code in your application or want to integrate React Native in an existing application. If you want to quickly prototype an application and you can use [_Create React Native App_](https://facebook.github.io/react-native/docs/getting-started.html) module that is very similar to Create React App. For _Create React Native App_ you are not required to install above dependencies (of course you need Node.js for _npm_ modules) and platform-specific SDKs. Facebook itself recommends using [Expo](https://expo.io/) client on your phone to see the app in action. I will be using `react-native-cli` for the brevity of the subject of this article.\n\n### Hello World with React Native\n\nTo scaffold an app, use the React Native command line interface we just installed in the previous step.\n\nIf you sneak peak inside the directory to see the structure, you will see a similar one:\n\n```shell\nreact-native init HelloWorld\n\ncd HelloWorld\n```\n\n<img src='https://cdn-images-1.medium.com/max/800/0*30ZgnW1lf7SY3UVM.png' />\n\nLet us try running the app before making any changes. Since I am on a mac, I will be using command:\n\n```shell\nreact-native run-ios\n```\n\nTo run the same application in an Android Emulator or device (if connected), you can use the command:\n\n```shell\nreact-native run-android\n```\n\nSince you are running any of the above command for the first time, it takes some minutes for the app show up in an emulator. Do not worry, if everything runs successfully, it will show up.\n\n<img src='https://cdn-images-1.medium.com/max/800/0*YczCUc-cdJpnJd_b.png' />\n\nThe code you see above running is available in `App.js`:\n\n<img src='https://cdn-images-1.medium.com/max/800/0*qtqjP_V2kuuGEuku.png' />\n\nIf you are familiar with Reactjs, you can easily understand this code. `<View>` stands for wrapper element such as `div` in HTML and `<Text>` stands for `<p>` in HTML.\n\nYou will be prompted with a success message and in a new terminal window, _Metro Bundler (developed by Facebook)_ will be running until the application closes.\n\n<img src='https://cdn-images-1.medium.com/max/800/0*5EZJZ55baUagTXGM.png' />\n\n<img src='https://cdn-images-1.medium.com/max/800/0*CMeu3NOHz3Gcgpx3.png' />\n\nThe file that renders this `App` component is `index.js` in the root directory. You will see this code:\n\n<img src='https://cdn-images-1.medium.com/max/800/0*NsVZtz_ZooVZxt1F.png' />\n\nDo you notice something? There is no `react-dom` because there is no DOM in React Native. `AppRegistery` is the entry point to run a React Native application. `App` component or any other root component in the app should register by using `AppRegistry.registerComponent` such that a native system can load the bundle of the app and run the app by starting `AppRegistry.runApplication`.\n\nYou can read more about `AppRegistery` [here](https://facebook.github.io/react-native/docs/appregistry.html).\n\nYou have successfully setup your first React Native application. You can read my other articles on React Native:\n\n[**Building a Minimalist Weather App with React Native and Expo** React Native is a great framework to develop cross-platform mobile applications for the platforms iOS and Android](https://blog.expo.io/building-a-minimalist-weather-app-with-react-native-and-expo-fe7066e02c09)\n\nLink to the [**Github Repo**](https://github.com/amandeepmittal/rn-HelloWorld) for this project if you are still curious too see the how the project structure looks rather than trying it out yourself.\n\n### React Native in 2019\n\n_At the starting of the year 2019, I updated this post and re-wrote it here 👇_\n\n[**Getting Started with React Native in 2019: Build Your First App** Learn how to build your first React Native app with important basic concepts and where to go from here!](https://levelup.gitconnected.com/getting-started-with-react-native-in-2019-build-your-first-app-a41ebc0617e2)\n\nIt is more in-depth, and covers almost every basic aspect about React Native ecosystem.\n\n[Originally published at Gitconnected.com](https://levelup.gitconnected.com/react-native-how-to-setup-your-first-app-a36c450a8a2f)\n",
            "url": "https://amanhimself.dev//blog/react-native-how-to-setup-your-first-app",
            "title": "React Native - How to Setup Your First App",
            "summary": "React Native - How to Setup Your First App",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/starting-over-with-react-native",
            "content_html": "---\ntitle: 'Starting Over with React Native'\ndate: '2018-07-07'\nslug: 'starting-over-with-react-native'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://amanhimself.dev/blog/starting-over-with-react-native/'\n---\n\n## Start of 2018 🚀\n\nWhen 2018 arrived I decided to pick up a new framework called [React.js](https://reactjs.org/) to enhance my skillset and get more work done remotely. A day came when I was in the middle of React development that I got interested in [React Native](https://facebook.github.io/react-native/) which is used to develop cross-platform mobile applications and started playing around it. I wrote some articles on it, worked on a few mini projects, read about APIs in its official docs but then due to the load of work from my clients I had to stop in between for three months. I tried hard to continue to learn in my spare time but managing work along with a personal hobby blog (that is not a hobby anymore, I am professional book critic 😅 and it demands quite some hours in a week) I knew I was going to burn out.\n\nNot to interfere with my day job, I completely stopped reading or doing any React Native stuff. I even deleted my precious Trello board, where I had saved plenty of resources from awesome developers out there who have already mastered the art of React Native and contributing for the community by building courses, writing tutorials, etc.\n\n> Lesson #1: Tech community runs because of these awesome people who spend countless hours in making things as understandable for a newbie or someone with intermediate skillset.\n\nI did not even think twice before deleting it. How foolish of me! 😭\n\n## My Background 👨‍💻\n\nI have been in development for two years now. I am a Computer Science graduate and after a false start in my career, I started coding because I met Node.js while working on a project at that time. I was already familiar with HTML, CSS, and JavaScript before I entered the portal of programming heaven as a full-timer from my graduation days, had built two sites using them. Unfortunately, they do not continue to exist, had I known this at that time, I would have took some screenshots. They were hilarious as compared to modern day UIs. 😆\n\nI went online and studied various resources to understand Node.js and its ecosystem, then came across freeCodeCamp.org curriculum which helped me sharpen my existing skills and expand my knowledge in web development, especially front-end and gave me a direction. Met some awesome people along the way: [Quincy Larson](https://medium.com/u/17756313f41a), [Scott Spence](https://medium.com/u/cf8522762673), [Alexander Kallaway](https://medium.com/u/c852ec9b2c3d) to name some who motivated to continue this path and not alone altogether.\n\n> Worked with them (and still maintaining) some awesome open source campaigns that you can find at freeCodeCamp’s Github! 🚀\n\n## Starting Over📱\n\nThere comes a time in life when you are so obsessed with something that there comes a bright light that guides you to the door of your own obsession. Recently, someone wanted to collaborate on a project that needs to build a React Native app. I am not sure if I will get it but this time I have thought hard enough about not giving up like before and I think, whatever happens, I will try to hustle my way through it. Another lesson I have learned over the years that programming has taught me.\n\n> Lesson #2: Be patient and keep on building things (practice)!\n\nWithout getting hands-on experience or building things even if they suck, as a coder you are not going to go anywhere. The more you code, the fewer things start to suck if you are open to enhancing your methods and ready to learn. This time I have a blueprint that I am going to follow and will continue to refer it here as I progress ahead in my journey.\n\n> Lesson #3: Learning must never stop.\n\nThis is the biggest lesson I have learned in two years of being a professional developer and in general life.\n\n_Why start with it now, you ask?_ I know companies like Udacity and AirBnb have recently announced that they will stop continuing building their own applications using React Native. Both of them did mention that React Native has its own limitations in a detailed manner. Every framework or library does. Nothing is perfect out there and I do not think there ever will be such a thing. These are all creation of mankind and we ourselves are not perfect so how can you expect to build something that is 💯%. These organizations might have a different use case using this framework than a thousand other developers who are still using it. I do not know, neither do I care at this stage.\n\n## Recommended Resources\n\nFor a start, I am currently going through [Spencer Carli](https://medium.com/u/1ec17560bf99)’s free courses on React Native. One teaches you [to build an app](https://learn.handlebarlabs.com/p/react-native-basics-build-a-currency-converter) and other teaches you to [organise your react native code](https://learn.handlebarlabs.com/p/how-to-set-up-a-new-react-native-project).\n\n_Thank you reading this post. I know I haven’t shared much about React Native which is the focus of this seres but consider this post as chance to explain my motive behind it. I will try to share as much as about my progress in this series of posts and hopefully they might help you in some way or the other. 🙏_\n",
            "url": "https://amanhimself.dev//blog/starting-over-with-react-native",
            "title": "Starting Over with React Native",
            "summary": "Starting Over with React Native",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/connecting-a-node-js-and-reactjs-example",
            "content_html": "---\ntitle: 'How to Upload a File with Reactjs and Nodejs'\nslug: 'connecting-a-node-js-and-reactjs-example'\ndate: '2018-06-23'\nthumbnail: '/thumbnails/node.png'\ntag: 'nodejs'\ncanonicalUrl: 'https://www.zeolearn.com/magazine/connecting-reactjs-frontend-with-nodejs-backend'\n---\n\n![cover](https://i.imgur.com/X7ju8yL.jpg)\n\n> [Originally this article was published on Zeolearn.com](https://www.zeolearn.com/magazine/connecting-reactjs-frontend-with-nodejs-backend)\n\nUploading Files might seem a task that needs to be conquered especially if you are getting into web development. In this tutorial, simple AJAX based file uploads using Reactjs on front-end and Node.js back-end. This is easy to accomplish with the following technologies since the whole source code will be in one language, JavaScript. In this example, to demonstrate for connecting a Reactjs application with Node.js backend, we will be making the use of a simple file upload example. The topics we will be covering are going to be:\n\n- Setting up a Back-end of our app using `express-generator`\n- Using `create-react-app` to scaffold a front-end Reactjs app\n- Using `axios` for cross-origin API calls\n- Handling POST requests on our server\n- Using `express-fileupload`, a promise based library\n- Lastly, making a connection between Reactjs and Node.js\n\n### Getting Started\n\nWe will be starting without back-end first. We will write a server application with necessary configurations required to accept cross-origin requests and uploading files. First, we need to install `express-generator` which is the official and quickest way to start with an Express back-end application.\n\n```shell\nnpm install -g express-generator\n```\n\nWe will install this module globally from our terminal. After installing this global `npm` module, we have an instance of it named `express` to generate our project structure.\n\n```shell\nmkdir fileupload-example\nexpress server\ncd server\n```\n\nWhen changing the current directory to the project `express` command just scaffolded, we can observe the following structure and files:\n\n<img src='https://cdn-images-1.medium.com/max/800/0*x6livl3bk3Wc8OX6.png' />\n\nTo run this backend server on default configuration, we have to install the dependencies mentioned in `package.json` first.\n\n```js\nnpm install\nnpm start\n```\n\nExpress-generator comes with following dependencies. Some of them are essential to use such as `morgan` and `body-parser` and some we can leave out for this project.\n\n```json\n\"dependencies\": {\n    \"body-parser\": \"~1.18.2\",\n    \"cookie-parser\": \"~1.4.3\",\n    \"debug\": \"~2.6.9\",\n    \"express\": \"~4.15.5\",\n    \"jade\": \"~1.11.0\",\n    \"morgan\": \"~1.9.0\",\n    \"serve-favicon\": \"~2.4.5\"\n  }\n```\n\nI will be adding two more packages for our configurable back-end application to behave in the way we want to.\n\n```shell\nnpm install --save cors express-fileupload\n```\n\n`cors` provide a middleware function for Express applications to enable various Cross-Origin Resource Sharing options. CORS is a mechanism that allows restricted resources (in our case, API or AJAX requests) on a web page from another domain. It helps a browser and a server to communicate and can be hosted on separate domains. You will understand it more when you will see it in action.\n\nThe other module, `express-fileupload` is a bare minimum express middleware function for uploading files. The advantages it has it that it has support for Promises and can handle multiple file uploads.\n\nWith these two important packages added as dependencies in our project, we can now start by modifying the default Express back-end in `app.js` file.\n\n```js\nconst express = require('express');\nconst path = require('path');\nconst favicon = require('serve-favicon');\nconst logger = require('morgan');\nconst cookieParser = require('cookie-parser');\nconst bodyParser = require('body-parser');\nconst cors = require('cors'); // addition we make\nconst fileUpload = require('express-fileupload'); //addition we make\n\nconst index = require('./routes/index');\nconst users = require('./routes/users');\n\nconst app = express();\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'jade');\n\n// uncomment after placing your favicon in /public\n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(cookieParser());\n\n// Use CORS and File Upload modules here\napp.use(cors());\napp.use(fileUpload());\n\napp.use('/public', express.static(__dirname + '/public'));\n\napp.use('/', index);\n\n// catch 404 and forward to error handler\napp.use(function (req, res, next) {\n  const err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handler\napp.use(function (err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n\nmodule.exports = app;\n```\n\nIn the above code, you would notice that we made some additions. The first addition we did is to import packages `cors` and `express-fileupload` in `app.js` after other dependencies are loaded.\n\n```js\nconst cors = require('cors'); // addition we make\nconst fileUpload = require('express-fileupload'); //addition we make\n```\n\nThen just after other middleware functions, we will instantiate these two newly imported packages.\n\n```js\n// Use CORS and File Upload modules here\napp.use(cors());\napp.use(fileUpload());\n```\n\nAlso, we need to allow data coming from a form. For this, we have to enable `urlencoded` options of `body-parser` module and specify a path as to store the image file coming from the client.\n\n```js\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// below, also change this to\napp.use('/public', express.static(__dirname + '/public'));\n```\n\nWith this, we can see if our server is working correctly by running:\n\n```shell\nnpm start\n```\n\nIf you get the screen below by navigation on port `http://localhost:3000`, it means that our server is running.\n\n<img src='https://cdn-images-1.medium.com/max/800/0*Tgeuf8qKcqzzwfSZ.png' />\n\nBefore we move to generate our front-end application, we need to change to port for our backend since front-end application generated using `create-react-app` will also be running on port `3000`. Open `bin/www` file and edit:\n\n```js\n/**\n * Get port from environment and store in Express.\n */\n\n// 3000 by default, we change it to 4000\n\nvar port = normalizePort(process.env.PORT || '4000');\napp.set('port', port);\n```\n\n### Setting up Front-end\n\n`create-react-app` is another command line utility that to generate a default Reactjs front-end application.\n\n```shell\ncreate-react-app node-react-fileupload-front-end\n```\n\nWe will also install the required library we are going to use for making API calls to our backend server.\n\n```shell\nyarn add axios\n```\n\n`index.js` is the starting point of our application in the `src/` directory. It registers the render function using `ReactDOM.render()` by mounting `App` component. Components are the building blocks in any Reactjs application. This `App` component comes from `src/App.js`. We will be editing this file in our front-end source code.\n\n### File Upload Form\n\nWe will be using the HTML `form` element that has an input which provides access to the value, that is the file, using `refs`. `Ref` is a special attribute that can be attached to any component in React. It takes a callback function and this callback will be executed immediately after the component is mounted. It can be also be used on an HTML element and the callback function associated will receive the DOM element as the argument. This way, `ref` can be used to store a reference for that DOM element. That is exactly what we are going to do.\n\n```js\nclass App extends Component {\n  // We will add this part later\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>FileUpload</h1>\n        <form onSubmit={this.handleUploadImage}>\n          <div>\n            <input\n              ref={ref => {\n                this.uploadInput = ref;\n              }}\n              type=\"file\"\n            />\n          </div>\n          <br />\n          <div>\n            <input\n              ref={ref => {\n                this.fileName = ref;\n              }}\n              type=\"text\"\n              placeholder=\"Enter the desired name of file\"\n            />\n          </div>\n          <br />\n          <div>\n            <button>Upload</button>\n          </div>\n          <hr />\n          <p>Uploaded Image:</p>\n          <img src={this.state.imageURL} alt=\"img\" />\n        </form>\n      </div>\n    );\n  }\n}\n```\n\nThe `input` element must have the `type=\"file\"` otherwise it would not be able to recognize what type we are using it for. It is similar to the values like `email`, `password`, etc.\n\nThe `handleUploadImage` method will take care of the API calls that we need to request to the server. If that call is successful, the local state of our React application will be set to let the user know that the upload was successful. Inside this function, to make the API call, we will be using `axios` library we installed when setting up our front end app.\n\n```js\nconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\timageURL: ''\n\t\t};\n\n\t\tthis.handleUploadImage = this.handleUploadImage.bind(this);\n\t}\n\n\thandleUploadImage(ev) {\n\t\tev.preventDefault();\n\n\t\tconst data = new FormData();\n\t\tdata.append('file', this.uploadInput.files[0]);\n\t\tdata.append('filename', this.fileName.value);\n\n\t\tfetch('http://localhost:4000/upload', {\n\t\t\tmethod: 'POST',\n\t\t\tbody: data\n\t\t}).then(response => {\n\t\t\tresponse.json().then(body => {\n\t\t\t\tthis.setState({ imageURL: `http://localhost:4000/${body.file}` });\n\t\t\t});\n\t\t});\n\t}\n```\n\nThe FormData object lets you compile a set of key/value pairs to send using XMLHttpRequest. It is primarily intended for use in sending form data but can be used independently from forms in order to transmit keyed data. To build a FormData object, instantiating it then appending fields to it by calling its `append()` method like we did above.\n\n<img src='https://cdn-images-1.medium.com/max/800/0*Xa5qBk-hqFkJsTIW.png' />\n\nSince we are not using any styling, our form looks bare minimum and ugly. But you can go ahead and make it look more professional. For brevity, I am going to keep things simple. I recommend you to always enter a file uname, other wise it will store the file on the with `undefined.jpg` name.\n\n### Updating the server to handle AJAX Request\n\nRight now, we do not have in our server code to handle the `POST` request React app makes a request to. We will add the route in our `app.js` in our Express application where the default route is defined.\n\n```js\napp.post('/upload', (req, res, next) => {\n  // console.log(req);\n  let imageFile = req.files.file;\n\n  imageFile.mv(`${__dirname}/public/${req.body.filename}.jpg`, err => {\n    if (err) {\n      return res.status(500).send(err);\n    }\n\n    res.json({ file: `public/${req.body.filename}.jpg` });\n    console.log(res.json);\n  });\n});\n```\n\n```shell\nnpm start\n```\n\nThis route gets triggered when a request is made to `/upload/`. The callback associated using the route contain `req`, `res` objects and access to `next`, a standard way of defining a middleware function in an Express application. The `req` object has the file and the filename that was uploaded during form submission from the client application. If any error occurs, we return the 500 server error code. Otherwise we return the path to the actual file and console the `response` object to check if everything is work as we expect it.\n\n`.mv` file is promise-based and provided to us by the `express-fileupload` package we installed earlier. Try uploading an image file from the client now. Make sure both the client and server are running from different terminal tabs at this point. If you get a success message like this in your terminal:\n\n```shell\nPOST /upload 200 98.487 ms - 25\nGET /public/abc.jpg 200 6.231 ms - 60775\n```\n\nAt the same time, the client is requesting to view the file on the front-end with a `GET` HTTP method. That means the route `/upload` from the browser is successfully called and everything is working fine. Once the file is uploaded on the server and it will be sent back to the client to reflect that the user has successfully uploaded the file.\n\n<img src='https://cdn-images-1.medium.com/max/800/0*cWOzuejEhEOtSQV8.png' />\n\nYou can find the complete code for this example at [**FileUpload-Example**](https://github.com/amandeepmittal/fileupload-example) Github Repository.\n",
            "url": "https://amanhimself.dev//blog/connecting-a-node-js-and-reactjs-example",
            "title": "How to Upload a File with Reactjs and Nodejs",
            "summary": "How to Upload a File with Reactjs and Nodejs",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/react-native-building-a-minimalist-weather-app-using-expo-xde",
            "content_html": "---\ntitle: 'React Native - Building a Minimalist Weather App using Expo XDE'\ndate: '2018-03-27'\nslug: 'react-native-building-a-minimalist-weather-app-using-expo-xde'\nthumbnail: '/thumbnails/expo.png'\ntemplate: post\ntag: 'expo'\ncanonicalUrl: 'https://blog.expo.io/building-a-minimalist-weather-app-with-react-native-and-expo-fe7066e02c09'\n---\n\nReact Native is a great framework to develop cross-platform mobile applications for the platforms iOS and Android. In this, I am going to take you through the process of building a “minimalist” weather application using React Native by fetching real-time data. If you have never worked with React Native, you can use this walkthrough as kickstart in your journey of becoming a mobile application developer and will be a cool project for your portfolio.\n\n### Getting Started: Requirements\n\nYou have some experience of working your way with Reactjs, you will have no problem following this tutorial. If you newbie to JavaScript or Reactjs ecosystem, I want to halt right here and go through [this awesome resource](http://www.react.express/) that can help you with understanding the basic concepts in this tutorial. Don’t spend too much time if you are not interested in building web applications using Reactjs, just go through the nitty-gritty.\n\nPlease note that React Native is not a hybrid mobile app framework like others available. It uses a bridge between Javascript and native APIs of a specific platform. Do take a look at [React Native Official Docs](https://facebook.github.io/react-native/docs/getting-started.html) to read more about this.\n\nI will be using [Expo](https://expo.io/) which is described as “the fastest way to build an app”. It is an open-source set of tools and services that come in handy, especially if you are getting started in the React Native world. The development tool I am going to use for Expo is [Expo XDE](https://expo.io/).\n\n**Requirements summary**\n\n- You know how to write JavaScript\n- Familiar with React\n- Nodejs installed on your local machine\n- Simple `npm` commands\n\nThat’s all. Let us get started with the development process.\n\n### Getting Started: In real this time\n\nOpen the Expo XDE after its installation and click on the “Create New Project”.\n\n<img src='https://cdn-images-1.medium.com/max/800/0*6kAET2qSInCk6rtP.png' />\n\nEnter the name of your application and click on “Create”. The name of the application will be in lowercase, I don’t know why, Expo XDE UI does not support uppercase characters.\n\n<img src='https://cdn-images-1.medium.com/max/800/0*NyV0f0GPNVnTeJHd.png' />\n![](https://cdn-images-1.medium.com/max/800/0*JIjaFynv5BRNDAh4.png)\n\nExpo, behind the scenes using React Native Package manager to simulate the application and the load dependencies from the app’s `package.json` file. The benefit of using Expo XDE is that you do not have to open multiple terminal windows and you can test the app while still developing on a real device. Once it is done with the process of generating a source code of our app, we can start it in a simulator on our local machine to see the default app it comes with.\n\n<img src='https://cdn-images-1.medium.com/max/800/0*ft82CkCgUzl2AFoj.png' />\n\nIf you are on Mac, make sure, you have Xcode installed. If you are using Windows, please follow the instructions to install Android Studio to run the simulator.\n\nIf you want to skip simulating the app and run it on an actual device without generating any `.apk` or `.ipa`, install the Expo client and scan the QR code generated by default by Expo XDE.\n\n<img src='https://cdn-images-1.medium.com/max/800/0*gp1nRwd4sg051Weh.png' />\n\nOnce, bundling of the source code is done you will be prompt with a success message on the Expo XDE terminal:\n\n<img src='https://cdn-images-1.medium.com/max/800/0*1pOjz1x6gdMbCuxJ.png' />\n\nAnd you will be able to see that our default app is running on the device:\n\n<img src='https://cdn-images-1.medium.com/max/800/0*vvy0yzLxdw5BHhIy.png' />\n\n<img src='https://cdn-images-1.medium.com/max/800/0*VQREoYLkE45Iw2Ku.png' />\n\nThe message displayed here is the same code that is rendered by `App.js` in the root of our app.\n\n```js\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text>Minimalist Weather App</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n```\n\nChange the `<Text>` to:\n\n```js\n<Text>Minimalist Weather App</Text>\n```\n\nand you will see the output being rendered and the app is reloaded live. You don’t have to refresh it to see the changes.\n\n<img src='https://cdn-images-1.medium.com/max/800/0*HGCr4kSfTugsZq9-.png' />\n\nThis completes our first getting started step. In the next step, we will build a static prototype of what our app is going to look like.\n\n### The Prototype\n\nIn this step, we will be developing our first screen, that is going to be loading screen.\n\nIn your `App.js`, define a local state:\n\n```js\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default class App extends React.Component {\n  state = {\n    isLoading: false\n  };\n\n  render() {\n    const { isLoading } = this.state;\n    return (\n      <View style={styles.container}>\n        {isLoading ? null : (\n          <View>\n            <Text>Minimalist Weather App</Text>\n          </View>\n        )}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n```\n\nThe above code states that when our local state object `isLoading` is false, we will show the name of the application. This is what we are going to render. Later on, instead of displaying the name of application we will be showing the weather here once our API has successfully fetches the data. For now, I am sticking to this message because first, we are going to work on, what if our app is in the state of loading? Let's add a text message to indicate that the app is fetching the data.\n\n```js\nimport React from 'react';\nimport { StyleSheet, Text, View, Animated } from 'react-native';\n\nexport default class App extends React.Component {\n  state = {\n    isLoading: true\n  };\n\n  render() {\n    const { isLoading } = this.state;\n    return (\n      <View style={styles.container}>\n        {isLoading ? (\n          <Text>Fetching The Weather</Text>\n        ) : (\n          <View>\n            <Text>Minimalist Weather App</Text>\n          </View>\n        )}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n```\n\nWhen our app is done loading the data from the API, we will set the state of `isLoading` to false.\n\n<img src='https://cdn-images-1.medium.com/max/800/0*1ii9x6Eoi02W3d6h.png' />\n\n### First Screen\n\nWe will define a new Weather component at `./components/Weather.js`. The boilerplate code for every weather condition screen is going to be the same. It will be divided into two views, a header, and a body. The header will show the weather condition icon and temperature and the body will display the text associated with the weather condition.\n\nIn Weather.js, we will start by defining two containers inside the main container: `headerContainer` and `bodyContainer`. Do note that we are defining `Weather` component not as a class but a function in order to receive props and since it will not be managing a state.\n\n```js\nimport React from 'react';\nimport { View, Text, Stylesheet } from 'react-native';\n\nconst Weather = () => {\n  return (\n    <View style={styles.container}>\n      <View style={styles.headerContainer} />\n      <View style={styles.bodyContainer} />\n    </View>\n  );\n};\n\nconst styles = StyleSheet({\n  container: {\n    flex: 1\n  },\n  headerContainer: {},\n  bodyContainer: {}\n});\n\nexport default Weather;\n```\n\nWe will be using `MatericalCommunityIcons` that comes with expo (one of the perks) as a sub-library of a humongous library called `vector-icons`.\n\n```js\nimport React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\nconst Weather = () => {\n  return (\n    <View style={styles.weatherContainer}>\n      <View style={styles.headerContainer}>\n        <MaterialCommunityIcons size={48} name=\"weather-sunny\" color={'#fff'} />\n        <Text style={styles.tempText}>Temperature˚</Text>\n      </View>\n      <View style={styles.bodyContainer}>\n        <Text style={styles.title}>So Sunny</Text>\n        <Text style={styles.subtitle}>It hurts my eyes!</Text>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  weatherContainer: {\n    flex: 1,\n    backgroundColor: '#f7b733'\n  },\n  headerContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  tempText: {\n    fontSize: 48,\n    color: '#fff'\n  },\n  bodyContainer: {\n    flex: 2,\n    alignItems: 'flex-start',\n    justifyContent: 'flex-end',\n    paddingLeft: 25,\n    marginBottom: 40\n  },\n  title: {\n    fontSize: 48,\n    color: '#fff'\n  },\n  subtitle: {\n    fontSize: 24,\n    color: '#fff'\n  }\n});\n\nexport default Weather;\n```\n\nThis how our app looks after the prototypal stage is complete.\n\n<img src='https://cdn-images-1.medium.com/max/800/0*cpkJvjx_VETikRV5.png' />\n\n### Fetching The Data\n\nTo fetch real-time weather data I found [Open Weather Map API](https://openweathermap.org/) to be highly useful and consistent. To communicate with the API you are going to need an API key. Register yourself as a user on the site, and get your API key. Please note that it takes at least 10 minutes for Open Weather API to activate the API key. Once it is available, tag along.\n\nGo to the [API section](https://openweathermap.org/api) and you will see that our need is satisfied by the Current Weather data. I am going to store my API key in `./utils/WeatherAPIKey.js` file. I know not the best name for a file.\n\n```js\nexport const API_KEY = 'YOUR_API_KEY HERE';\n```\n\nThe way the Open Weather API works is that we need to provide it coordinates using device’s location in terms of longitude and latitude. It will then fetch the data from its server which will be a JSON object. From the server, right now we need two things, the temperature, and the weather condition. We should have temperature and the weather condition stored in our local state in `App.js`.\n\n```js\nimport React from 'react';\nimport { StyleSheet, Text, View, Animated } from 'react-native';\n\nimport { API_KEY } from './utils/WeatherAPIKey';\n\nimport Weather from './components/Weather';\n\nexport default class App extends React.Component {\n  state = {\n    isLoading: false,\n    temperature: 0,\n    weatherCondition: null,\n    error: null\n  };\n\n  componentDidMount() {\n    navigator.geolocation.getCurrentPosition(\n      position => {\n        this.fetchWeather(position.coords.latitude, position.coords.longitude);\n      },\n      error => {\n        this.setState({\n          error: 'Error Gettig Weather Condtions'\n        });\n      }\n    );\n  }\n\n  fetchWeather(lat = 25, lon = 25) {\n    fetch(\n      `http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&APPID=${API_KEY}&units=metric`\n    )\n      .then(res => res.json())\n      .then(json => {\n        console.log(json);\n      });\n  }\n\n  render() {\n    const { isLoading } = this.state;\n    return (\n      <View style={styles.container}>\n        {isLoading ? <Text>Fetching The Weather</Text> : <Weather />}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  }\n});\n```\n\nWe start by importing the API key we just defined and then updating our state with `temperature`, `weatherCondition`, and `error`. We are using `componentDidMount()` a lifecycle method which helps us re-render once our API is done fetching the data. It will also help us in updating the state. We are also using JavaScript `navigator` API to get the current location. This is where a JavaScript API will communicate with a native one using a bridge. We pass on the values of latitude and longitude to our custom function `fetchWeather` where the API of Open Weather Map is called.\n\nThe result we get is in JSON format, and if you console log it, you will be able to see the result as a JSON object in Expo terminal where there are a lot of values. We only need the value of temperature and the weather condition. We then update local state with the new values obtained. `&units=metric` at the end of our API call converts the temperature from Kelvin to Celsius.\n\n```js\n.then(json => {\n        // console.log(json);\n        this.setState({\n          temperature: json.main.temp,\n          weatherCondition: json.weather[0].main,\n          isLoading: false\n        });\n```\n\nNow, all we have to do is pass the value two of our local state as props to the `Weather` Component and then update it such that it can receive those props.\n\nFirst, in `App.js`:\n\n```js\n<Weather weather={weatherCondition} temperature={temperature} />\n```\n\nUpdate the `Weather.js`:\n\n```js\nconst Weather = ({ weather, temperature }) => {\n  return (\n    <View style={styles.weatherContainer}>\n      <View style={styles.headerContainer}>\n        <MaterialCommunityIcons size={48} name=\"weather-sunny\" color={'#fff'} />\n        <Text style={styles.tempText}>{temperature}˚</Text>\n      </View>\n      <View style={styles.bodyContainer}>\n        <Text style={styles.title}>{weather}</Text>\n        <Text style={styles.subtitle}>It hurts my eyes!</Text>\n      </View>\n    </View>\n  );\n};\n```\n\n<img src='https://cdn-images-1.medium.com/max/800/0*IUfQ_1hTKAa-U0m4.png' />\n\nSince we have done the hard part of fetching the real-time data, we must make `Weather` component behave [dynamically to the values](https://openweathermap.org/weather-conditions) it is getting. All this dynamic part is going to be associated with one thing which we are getting from our local state, `weatherCondition`.\n\n### Dynamic Behaviour\n\nUsing `weatherCondition` we can define the background changes, title, subtitle and weather icon changes. Let's start by pre-defining weather conditions in a file `./utils/WeatherConditions.js`.\n\n```js\nexport const weatherConditions = {\n  Rain: {\n    color: '#005BEA',\n    title: 'Raining',\n    subtitle: 'Get a cup of coffee',\n    icon: 'weather-rainy'\n  },\n  Clear: {\n    color: '#f7b733',\n    title: 'So Sunny',\n    subtitle: 'It is hurting my eyes',\n    icon: 'weather-sunny'\n  },\n  Thunderstorm: {\n    color: '#616161',\n    title: 'A Storm is coming',\n    subtitle: 'Because Gods are angry',\n    icon: 'weather-lightning'\n  },\n  Clouds: {\n    color: '#1F1C2C',\n    title: 'Clouds',\n    subtitle: 'Everywhere',\n    icon: 'weather-cloudy'\n  },\n\n  Snow: {\n    color: '#00d2ff',\n    title: 'Snow',\n    subtitle: 'Get out and build a snowman for me',\n    icon: 'weather-snowy'\n  },\n  Drizzle: {\n    color: '#076585',\n    title: 'Drizzle',\n    subtitle: 'Partially raining...',\n    icon: 'weather-hail'\n  },\n  Haze: {\n    color: '#66A6FF',\n    title: 'Haze',\n    subtitle: 'Another name for Partial Raining',\n    icon: 'weather-hail'\n  },\n  Mist: {\n    color: '#3CD3AD',\n    title: 'Mist',\n    subtitle: \"Don't roam in forests!\",\n    icon: 'weather-fog'\n  }\n};\n```\n\nThese weather conditions are provided from Open Weather API [here](https://openweathermap.org/weather-conditions). Then, let’s import this file in our `Weather.js`. We will also define PropTypes now for the two props we are receiving from `App.js`. Take a look below, it is simple.\n\n```js\nimport React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport PropTypes from 'prop-types';\nimport { weatherConditions } from '../utils/WeatherConditions';\n\nconst Weather = ({ weather, temperature }) => {\n  return (\n    <View\n      style={[\n        styles.weatherContainer,\n        { backgroundColor: weatherConditions[weather].color }\n      ]}\n    >\n      <View style={styles.headerContainer}>\n        <MaterialCommunityIcons\n          size={72}\n          name={weatherConditions[weather].icon}\n          color={'#fff'}\n        />\n        <Text style={styles.tempText}>{temperature}˚</Text>\n      </View>\n      <View style={styles.bodyContainer}>\n        <Text style={styles.title}>{weatherConditions[weather].title}</Text>\n        <Text style={styles.subtitle}>\n          {weatherConditions[weather].subtitle}\n        </Text>\n      </View>\n    </View>\n  );\n};\n\nWeather.propTypes = {\n  temperature: PropTypes.number.isRequired,\n  weather: PropTypes.string\n};\n\nconst styles = StyleSheet.create({\n  weatherContainer: {\n    flex: 1\n  },\n  headerContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-around'\n  },\n  tempText: {\n    fontSize: 72,\n    color: '#fff'\n  },\n  bodyContainer: {\n    flex: 2,\n    alignItems: 'flex-start',\n    justifyContent: 'flex-end',\n    paddingLeft: 25,\n    marginBottom: 40\n  },\n  title: {\n    fontSize: 60,\n    color: '#fff'\n  },\n  subtitle: {\n    fontSize: 24,\n    color: '#fff'\n  }\n});\n\nexport default Weather;\n```\n\nMost of the source code is same. We are now just making some additions by using available props with weather conditions and to dynamically change the background, icon, weather name, and the subtitle. You can play around with the styling to make it look more minimalistic or more exquisite, it is up to you.\n\n<img src='https://cdn-images-1.medium.com/max/600/0*xjM1JAPtNLWtzvau.gif' />\n\n**Note:** Before running the application on your actual device make sure you have internet access and location “on” the device for this app to work. We haven’t talked about App Permissions in this article and it is a bit out of the scope too.\n\nThe whole code for this application is available at this [Github Repo](https://github.com/amandeepmittal/rn-minimalist-weather-app). I have also published the application on [Expo Store here](https://expo.io/@amanhimself/rn-minimalist-weather-app) for you to test out. Just scan the QR code and run the application to see what you will be working in this tutorial.\n\n[Originally this article was published on Blog.expo.io](https://blog.expo.io/building-a-minimalist-weather-app-with-react-native-and-expo-fe7066e02c09)\n",
            "url": "https://amanhimself.dev//blog/react-native-building-a-minimalist-weather-app-using-expo-xde",
            "title": "React Native - Building a Minimalist Weather App using Expo XDE",
            "summary": "React Native - Building a Minimalist Weather App using Expo XDE",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/react-native-getting-started-with-lottie-and-expo",
            "content_html": "---\ntitle: 'React Native - Getting Started with Lottie and Expo'\ndate: '2018-03-09'\nslug: 'react-native-getting-started-with-lottie-and-expo'\nthumbnail: '/thumbnails/expo.png'\ntag: 'expo'\ncanonicalUrl: 'https://medium.com/hackernoon/react-native-getting-started-with-lottie-and-expo-8b2105fbb496'\n---\n\nIn this tutorial, we will be using [Lottie](https://www.lottiefiles.com/) with React Native. Lottie is an opensource library that renders Adobe Effects by providing easy to use animations just like static images. These animations are beautiful. Lottie is a mobile library developed by AirBnB. These animations are exported as JSON files using [Bodymovin](https://github.com/airbnb/lottie-web) to render the natively on mobile and in web applications.\n\n> _👍 for designers who spend their time contributing in LottieFiles._\n\n### Requirements\n\nI will be using Expo XDE for brevity and to get started quickly. Create a new project using it. I am going to call `rn-lottie-example` but you can call whatever you want.\n\n<img src='https://cdn-images-1.medium.com/max/800/0*POyT_Icv07TuPXTE.png' />\n\nWhen the XDE completes running ReactNative Package Manager and builds up the project, you can go to `Device` dropdown menu at the right and click on whichever simulator you have installed depending on the operations system you are using. Windows users please make sure you have android studio and necessary files installed and MacOS users, please have XCode installed or up to date.\n\n<img src='https://cdn-images-1.medium.com/max/800/0*fX2Q-CxR1HRTvJA-.png' />\n\nYou can also view the application, by running it using Expo Client on your mobile device. Note that, depending on your internet connection, this can be slow and your mobile device and development machine must be on same wifi. Scan the QR code in `Share` section, you are ready to go. Once, the app is rendered, you will be welcomed by the default screen:\n\n<img src='https://cdn-images-1.medium.com/max/800/0*MiGY3Fi2WDSbBXvP.png' />\n\nNow open your favorite text editor/IDE because we are going to start writing code in next section.\n\n### Getting Started\n\nInstalling Lottie as a dependency in a project can a bit tricky but fortunately, Expo provides support for it. We do not have to install anything since we are using Expo. We directly import the dependency in our `App.js`:\n\n```js\nimport { DangerZone } from 'expo';\nconst { Lottie } = DangerZone;\n```\n\nSine Lottie in Expo project is in Alpha mode, do not get worried by the word `DangerZone`.\n\nInclude a local state in our application called `animation`. We will call this help in playing and restarting the animation itself. I am using [this file](https://www.lottiefiles.com/110-location) for our animation from [LottieFiles.com](https://gist.github.com/www.lottiefiles.com) so you can download it. Of course, you are free to choose any other. Animations listed on the site are open source.\n\n```js\nstate = {\n  animation: null\n};\n```\n\nLater, we will using the `state.animation` to source the animation file fetched directly in `Lottie` component.\n\n### Defining the animation\n\nWe will define two custom functions: `_playAnimation` and `_loadAnimationAsync` that perform the animation and load the animation from the internet using the `fetch` API. We will also be pre-mounting our animation using `componentWillMount()` method available to us by core React. In this Life cycle method, when the state is set, it can be called before the initial render.\n\nIn general, it is used to prepare either the first render or update the state before the render. This is why we are using it. We need to update the state we defined.\n\n```js\ncomponentWillMount() {\n    this._playAnimation();\n  }\n\n  _playAnimation = () => {\n    if (!this.state.animation) {\n      this._loadAnimationAsync();\n    } else {\n      this.animation.reset();\n      this.animation.play();\n    }\n  };\n\n  _loadAnimationAsync = async () => {\n    let result = await fetch(\n      'https://www.lottiefiles.com/storage/datafiles/a795e9d1bd5672fd901329d51661db5c/JSON/location.json'\n    );\n\n     this.setState(\n      { animation: JSON.parse(result._bodyText) },\n      this._playAnimation\n    );\n  };\n```\n\nInside, `_loadAnimationAsync()` we use JavaScript's `fetch` API to get the animation from its source. This does mean, that the animation is coming from internet so if you are testing on your mobile device, make sure you have access to internet.\n\nThis how our render function looks like:\n\n```js\nrender() {\n    return (\n      <View style={styles.container}>\n        <View style={styles.animationContainer}>\n          {this.state.animation && (\n            <Lottie\n              ref={animation => {\n                this.animation = animation;\n              }}\n              style={styles.loadingAnimation}\n              source={this.state.animation}\n            />\n          )}\n        </View>\n      </View>\n    );\n  }\n```\n\nWe separately define styling for the overall container and the animation. To load the animation, we will set its `backgroundColor` to `transparent` in order to remove any background color it has by default.\n\n```js\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  animationContainer: {\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flex: 1\n  },\n  loadingAnimation: {\n    width: 400,\n    height: 400,\n    backgroundColor: 'transparent'\n  }\n});\n```\n\nYou can see the application working\n\n<img src='https://cdn-images-1.medium.com/max/800/0*ojXTyWvdJ70ut1Yl.gif' />\n\nThis tutorial shows how you can get started with Lottie animation library using React Native and Expo. There are other ways to define animations and you can go in-depth as much as you want. This article is written for a beginner’s point of view.\n\nFor alternative to Lottie, you can check [Facebook’s Keyframes](https://github.com/facebookincubator/Keyframes) that also uses Adobe After Effects to create one.\n\nComplete code of our demo application:\n\n```js\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { DangerZone } from 'expo';\nconst { Lottie } = DangerZone;\n\nexport default class App extends React.Component {\n  state = {\n    animation: null\n  };\n\n  componentWillMount() {\n    this._playAnimation();\n  }\n\n  _playAnimation = () => {\n    if (!this.state.animation) {\n      this._loadAnimationAsync();\n    } else {\n      this.animation.reset();\n      this.animation.play();\n    }\n  };\n\n  _loadAnimationAsync = async () => {\n    let result = await fetch(\n      'https://www.lottiefiles.com/storage/datafiles/a795e9d1bd5672fd901329d51661db5c/JSON/location.json'\n    );\n\n    this.setState(\n      { animation: JSON.parse(result._bodyText) },\n      this._playAnimation\n    );\n  };\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <View style={styles.animationContainer}>\n          {this.state.animation && (\n            <Lottie\n              ref={animation => {\n                this.animation = animation;\n              }}\n              style={styles.loadingAnimation}\n              source={this.state.animation}\n            />\n          )}\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  animationContainer: {\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flex: 1\n  },\n  loadingAnimation: {\n    width: 400,\n    height: 400,\n    backgroundColor: 'transparent'\n  }\n});\n```\n\nYou can also find the complete code at this [**Github repo**](https://github.com/amandeepmittal/rn-lottie-example)**,** in case you just want to play around this concept.\n\n_[Originally this article was published on Hackernoon.com](https://medium.com/hackernoon/react-native-getting-started-with-lottie-and-expo-8b2105fbb496)_\n",
            "url": "https://amanhimself.dev//blog/react-native-getting-started-with-lottie-and-expo",
            "title": "React Native - Getting Started with Lottie and Expo",
            "summary": "React Native - Getting Started with Lottie and Expo",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/build-a-progressive-web-app-using-react",
            "content_html": "---\ntitle: 'Build a Progressive Web App using React'\nslug: 'build-a-progressive-web-app-using-react'\ndate: '2018-02-01'\nthumbnail: '/thumbnails/react.png'\ntag: 'react'\ncanonicalUrl: 'https://www.zeolearn.com/magazine/an-introduction-to-progressive-web-apps-pwa'\n---\n\n> [Originally this article was published on Zeolearn.com](https://www.zeolearn.com/magazine/an-introduction-to-progressive-web-apps-pwa)\n\n![cover_image](https://i.imgur.com/qQAmt3M.jpg)\n\n**Progressive Web App with React!** When I read this I thought, why not build one ourselves. If you are familiar with React and a bit about its ecosystem such as Create-React-App utility, this guide is for you.\n\nIf you spend at least third quarter of your day on internet then you have seen or read about progressive web apps here and there. _No?_ PWA are performance focused web applications that are especially streamlined for a mobile device. They can be saved over a device’s home screen and tend to consist a native app feel and look. The first PWA app I used on my mobile device is the Lite Twitter one which got released a few months back. Here is the link if you want to try: [https://lite.twitter.com/](https://lite.twitter.com/). They even support push notifications and offline support these days.\n\n### Getting Started\n\nLet us create a basic React app using _Create-React-App_ generator, the official scaffolding tool to generate _Reactjs_ _App_ released and maintained by _Facebook_. To install it, we will use our command line tool:\n\n```shell\nnpm install --global create-react-app\n```\n\nOnce the installation process is complete, go to your desired directory and create an empty project. Run this from your command-line interface:\n\n```shell\ncreate-react-app react-pwa-example\n\n# and cd in that directory\ncd react-pwa-example\n```\n\nGo ahead and take a look at the directory structure and **package.json** file. See what dependencies come with this scaffolding tool.\n\nCRA or Create React App is one of the best with minimum hassle tool that I am currently using to build apps and prototypes with React. It is running all that Babel, Webpack stuff behind the scenes. If you want more information or want to customize the process, read [here](https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#npm-run-eject).\n\nI hope, regardless of the timeline, your package.json file looks like this:\n\n```json\n{\n  \"name\": \"react-pwa-app\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"^16.2.0\",\n    \"react-dom\": \"^16.2.0\",\n    \"react-scripts\": \"1.0.17\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n```\n\nWe need to one more dependency and that is React-Router: Go Back to your terminal:\n\n```shell\nnpm install --save react-router-dom@4.2.2\n```\n\nYou can now try running the application from terminal and see if everything is working:\n\n```shell\nnpm run start\n```\n\nThe boilerplate code will and look like this:\n\n![](https://i.imgur.com/3vGXI94.png)\n\n### Building the PWA App\n\nSince the sole purpose of this guide is to make you familiar with the build process, I am not going to work out a complex application. For sake of simplicity and your precious time, we will build a simple app. Go to `src/App.js` file and make amendments exactly like below:\n\n```js\nimport React, { Component } from 'react';\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './components/Home';\nimport About from './components/About';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h2>React App</h2>\n        </div>\n        <BrowserRouter>\n          <div>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/about\" exact component={About} />\n          </div>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\nexport default App;\n```\n\nIn above we are including two pages using `react-router-dom.`Further we define **Home** and **About** Components in `src/components/` directory. It is always a best practice to use this approach and make sure that react components are short and readable.\n\nFor `Home.js`:\n\n```js\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst home = () => {\n  return (\n    <div title=\"Home\">\n      <h1>Home Page</h1>\n      <p>\n        <Link to=\"/about\">About</Link>\n      </p>\n    </div>\n  );\n};\n\nexport default home;\n```\n\nAnd for `About.js`:\n\n```js\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst about = () => {\n  return (\n    <div title=\"About\">\n      <h1>About Page</h1>\n      <p>\n        <Link to=\"/\">Home</Link>\n      </p>\n    </div>\n  );\n};\n\nexport default about;\n```\n\nNow to see if everything working, run `npm start` from your terminal window, and you will get a similar result:\n\n![](https://i.imgur.com/qdqY2YP.png)\n\nIf you click on the **About** button/hyperlink, the `react-router-dom` will render the **about** page without changing the common Header part that is defined in `App.js`. This is a bare minimum single page application.\n\nOur main job is still yet to be done. Let’s convert this bare minimum React application to a PWA.\n\n### Installing Lighthouse\n\nLighthouse is a free tool from Google that evaluates your app based on their PWA checklist. Add it to your Chrome browser from [here](https://developers.google.com/web/tools/lighthouse/). Once installed as an extension we can start the auditiing process by clicking on the Lighthouse at top right corner where other extension might exist in your browser. Click on the icon and then make sure you are on right tab by checking the URL shown in the lighthouse popup. Also, make sure that development server of Create-react-app from terminal is running. Otherwise Lighthouse won’t be able to generate report. The report that is generated by the Lighthouse is based on a checklist that available to view [here](https://developers.google.com/web/progressive-web-apps/checklist).\n\n![](https://i.imgur.com/c3oDUYx.png)\n\nClick on the Generate Report button. After the process is completed, a new window will open where Lighthouse has generated a report. By the looks of it, it does not look pleasing to the Lighthouse and as a Progressive Web App.\n\n![](https://i.imgur.com/khE0Q5o.png)\n![](https://i.imgur.com/8OjdMK4.png)\n\nWe will be solving these issues one by one.\n\n### Setting up a Service Worker\n\nLet’s setup a service worker first. That is the first thing Lighthouse audited. What is a service worker, you ask? Well, it is a proxy server that sit between web applications, browsers and the network. We can use it to make React Apps work offline (remember the earlier point we discussed. Progressive Web Apps are focused on performance). You can definitey read details about it on [Google’s Web Fundamental Docs](https://developers.google.com/web/fundamentals/primers/service-workers/?hl=en).\n\nIt is a two step process. First we will create a`service-worker.js` file (service worker, after all is JavaScript code) and then register that worker in our `index.html`.\n\nIn the `public` directory of our app strucutre, create a file `service-worker.js`. I am going to use Addy Osmani's service worker configuraiton and I will recommend you to do so, at least for this one. You can find the complete thing in much much detail [here](https://medium.com/@addyosmani/progressive-web-apps-with-react-js-part-3-offline-support-and-network-resilience-c84db889162c). To continue, make sure you add the following code in `service-worker.js` file:\n\n```js\nvar doCache = false;\n\nvar CACHE_NAME = 'my-pwa-cache-v1';\n\nself.addEventListener('activate', event => {\n  const cacheWhitelist = [CACHE_NAME];\n  event.waitUntil(\n    caches.keys().then(keyList =>\n      Promise.all(\n        keyList.map(key => {\n          if (!cacheWhitelist.includes(key)) {\n            console.log('Deleting cache: ' + key);\n            return caches.delete(key);\n          }\n        })\n      )\n    )\n  );\n});\n\nself.addEventListener('install', function (event) {\n  if (doCache) {\n    event.waitUntil(\n      caches.open(CACHE_NAME).then(function (cache) {\n        fetch('manifest.json')\n          .then(response => {\n            response.json();\n          })\n          .then(assets => {\n            const urlsToCache = ['/', assets['main.js']];\n            cache.addAll(urlsToCache);\n            console.log('cached');\n          });\n      })\n    );\n  }\n});\n\nself.addEventListener('fetch', function (event) {\n  if (doCache) {\n    event.respondWith(\n      caches.match(event.request).then(function (response) {\n        return response || fetch(event.request);\n      })\n    );\n  }\n});\n```\n\nOur next step is to register the our service worker by loading the one we just wrote in `service-worker.js`. Add this before the closing `</body>` tag in `index.html`.\n\n```html\n<script>\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', function () {\n      navigator.serviceWorker\n        .register('service-worker.js')\n        .then(\n          function (registration) {\n            console.log(\n              'ServiceWorker registration successful with scope: ',\n              registration.scope\n            );\n          },\n          function (err) {\n            console.log('ServiceWorker registration failed: ', err);\n          }\n        )\n        .catch(function (err) {\n          console.log(err);\n        });\n    });\n  } else {\n    console.log('service worker is not supported');\n  }\n</script>\n```\n\nMake sure you restart the dev server by running `npm run start` from the terminal. You must see this line if you open Chrome's DevTools > Console:\n\n![](https://i.imgur.com/HRVYgGB.png)\n\nIf we run the Lighthouse audit process again, I hope we will get a better result.\n\n![](https://i.imgur.com/xaTMUez.png)\n\nYes, you can clearly compare the above with our previous audit. It has imporved, and our previous first issue is now coming under Passed Audits. Now let’s move and add some enhancement.\n\n### Adding Progressive Enhancement\n\nProgressive Enhancement is way to improve the app/site since it will work without any JavaScript loading. Now, we want to display a loading message and some CSS or none (your choice) before the React app initializes the DOM. Let’s add a the required CSS and a loading message to our `index.html`. To increase performance, I am also adding all our CSS (that is CSS contained inside `App.css` and `index.css`) in our `index.html` file.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n  <meta name=\"theme-color\" content=\"#000000\">\n  <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\">\n  <link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n  <title>React App</title>\n  <style type=\"text/css\">\n    body {\n      margin: 0;\n      padding: 0;\n      font-family: sans-serif;\n    }\n    .App {\n      text-align: center;\n    }\n    .App-logo {\n      height: 80px;\n    }\n    .App-header {\n      background-color: #222;\n      height: 150px;\n      padding: 20px;\n      color: white;\n    }\n    .App-title {\n      font-size: 1.5em;\n    }\n    .App-intro {\n      font-size: large;\n    }\n    @keyframes App-logo-spin {\n      from {\n        transform: rotate(0deg);\n      }\n      to {\n        transform: rotate(360deg);\n      }\n    }\n  </style>\n</head>\n\n<body>\n  <div id=\"root\">\n    <div class=\"App\">\n      <p>\n        Loading...\n      </p>\n    </div>\n\n    <script>\n      if ('serviceWorker' in navigator) {\n        window.addEventListener('load', function () {\n          navigator.serviceWorker.register('service-worker.js').then(function (registration) {\n            console.log('ServiceWorker registration successful with scope: ', registration.scope);\n          }, function (err) {\n            console.log('ServiceWorker registration failed: ', err);\n          }).catch(function (err) {\n            console.log(err)\n          });\n        });\n      } else {\n        console.log('service worker is not supported');\n      }\n    </script>\n\n</body>\n\n</html>\n```\n\nWe can now delete `App.css` and `index.css` file from out project directory and also remove their import references from `App.js` and `index.js`.\n\nThe above process improves the performance of our app by 10 points. The overall PWA score is same though:\n\n![](https://i.imgur.com/lHn2hZG.png)\n\n### Adding it to Device’s Home Screen\n\nThe creators of create-react-app is so good to us that they have already included a `manifest.json` file in `public` directory with some basic configuration. This feature that we are currently adding allows a user to save our PWA site page on their device's home screen. In future, if the user wish to open the app, they can do that just by using PWA as a normal application and it will open in their phone's default browser.\n\nFor this purpose, we are going to edit `public/manifest.json`:\n\n```json\n{\n  \"short_name\": \"PWA React App\",\n  \"name\": \"Progressive React App Example\",\n  \"icons\": [\n    {\n      \"src\": \"logo.png\",\n      \"sizes\": \"192x192\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"logo-512.png\",\n      \"sizes\": \"512x512\",\n      \"type\": \"image/png\"\n    }\n  ],\n  \"start_url\": \"/\",\n  \"display\": \"standalone\",\n  \"theme_color\": \"#000\",\n  \"background_color\": \"#000\"\n}\n```\n\nLet’s talk about this file a bit. The `short_name` is the name of app that will appear on Home Screen of device. `name` will appear on the splash screen. `icons` is important and is the main icon of our app and will appear along the `short_name` on home screen, just like a native mobile application. The size of the icon must be `192x192`. I haven't played around with other image formats but you can. [Here](https://i.imgur.com/RaN7Qey.png) is the link to a dummy logo for this walkthrough we are working on. Add it to the `public` directory. The 512 setting is for splash screen and is a requirement in auditing process. So here is the [link](https://i.imgur.com/TmblrhM.png) to download that.\n\nNext is `start_url` that notifies that the app was started frome Home Screen. Below it there are three more properties. `display` is for the appearance of the app, and I am making `theme_color` and `background_color` to be same since I want the application to match header background.\n\nWe will now solve one of our issue in the previous audit. We are left with only some of them to resolve.\n\n![](https://i.imgur.com/zyot782.png)\n\n### Deployment\n\nFirst, let us turn the caching on. In `service-worker.js` edit the first line and change the existing boolean value to `true`.\n\n```js\nvar doCache = true;\n```\n\nI will be using [Firebase](https://firebase.google.com/) here for deployment since it is easy to connect it with a web/mobile application for prototyping IMO. First, in Firebase console, create a new project `pwa-example-1`. Now, install the firebase-tool we need to deploy our PWA app. We will be installing this dependency as a global module.\n\nNow the CLI tool will prompt for some questions. I am adding a series of images for clarity, make sure you choose the same answers when prompted.\n\n```shell\nnpm install -g firebase-tools\n\n# then run the following commands\nfirebase login\nfirebase init\n```\n\n![](https://i.imgur.com/0cg1Dtt.png)\n![](https://i.imgur.com/7pg1Di0.png)\n![](https://i.imgur.com/7pg1Di0.png)\n\nPress the Enter key for final time and you will get a success message and two firebase config files generated in your project directory: `.firebaserec` and `firebase.json`.\n\nNow, it is time to deploy our app. From terminal run:\n\n```shell\nnpm run build && firebase deploy\n```\n\nThe above command tells create-react-app to build our project into the build/ folder, which Firebase CLI tool then deploys. Firebase CLI tool will give you back a URL, save it and open it in Chrome, and then run our Lighthouse audit for the last time. The hosting url will be similar to below:\n\n```shell\nHosting URL: https://pwa-example-1.firebaseapp.com\n```\n\nThis solves our main issue from starting regarding using HTTTPS over HTTP. With that, all of our issues our solved and our PWA app gets 100/100 score.\n\n![](https://i.imgur.com/VSEWUqI.png)\n![](https://i.imgur.com/2GJL7m5.png)\n\nThe score looks good to me for our first application. The performance bar above of our application can be improved and there are few ways to that. I will not get into that since the scope of this application is for learning purpose.\n\nYou can find the complete code at [this Github repository](https://github.com/amandeepmittal/react-pwa-app). Go ahead to clone the repo, don’t forget to `npm install` once inside the project directory and then head start by trying out aforementioned PWA tips and techniques.\n",
            "url": "https://amanhimself.dev//blog/build-a-progressive-web-app-using-react",
            "title": "Build a Progressive Web App using React",
            "summary": "Build a Progressive Web App using React",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/designing-a-rest-api-with-node-js-and-mongodb-atlas",
            "content_html": "---\ntitle: 'Designing a REST API with Node.js and MongoDB Atlas'\ndate: '2018-01-22'\nslug: 'designing-a-rest-api-with-node-js-and-mongodb-atlas'\nthumbnail: '/thumbnails/node.png'\ntag: 'nodejs'\ncanonicalUrl: 'https://www.zeolearn.com/magazine/designing-a-rest-api-with-nodejs-and-mongodb-atlas'\n---\n\n![cover](https://i.imgur.com/5rvcM6q.png)\n\n> [Originally Published at Zeolearn.com](https://www.zeolearn.com/magazine/designing-a-rest-api-with-nodejs-and-mongodb-atlas)\n\nNodejs is a remarkable technology for the fulfilling and developing web applications. Being open source and in the past few years, we have seen it rising. It might be a bit different from other traditional web technologies in terms of learning curve but I urge you to stick with it if you are getting in to web development and have opted [Node.js](https://www.zeolearn.com/node-js-training) ecosystem. In this tutorial, I will walk you through the basics of REST API design with using Node.js ecosystem.\n\nI’d love if you follow along with me with snippets of code that are in continuation below. Before we begin, I want you to understand what is REST and how its beneficial to use it with server side JavaScript.\n\n**What is REST?**\n\nREST is an acronym for Representation State Transfer and is an industry standard (till Graphql conquers the world) for defining how an API and its endpoint (routes) should communicate with the server code of your web application. A REST API consumes HTTP methods such GET, POST, etc. with endpoints that are nothing but URLs that you can use to fetch some data or update/create new data in the database. In his [whitepaper](https://www.ics.uci.edu/%7Efielding/pubs/dissertation/rest_arch_style.htm), Roy Fielding described the paradigms and practical use of REST. I am going to summarise points what he exactly says in that paper. The basis of a RESTful API depends on below:\n\n- Client-Server\n- Stateless\n- Uniform Interface\n- Cacheable\n- Layered System\n- Code-On-Demand style\n\nTo read about them in detail, please see Roy Fielding’s paper on the same [here](https://www.ics.uci.edu/%7Efielding/pubs/dissertation/rest_arch_style.htm).\n\nApplications that make use of REST APIs perform four basic operations that are known as CRUD.\n\n- C: Creating data\n- R: Reading data\n- U: Updating data\n- D: Deleting/removing data​\n\n**Prequisites**\n\nThere are some things we need to go through this tutorial successfully.\n\n- [Node.js](https://nodejs.org/) installed\n- Access to [MongoDB](https://www.mongodb.com/), a NoSQL database on your local machine or cloud\n- IDE/Editor\n- [Postman](https://www.getpostman.com/), a REST client to test our API’s endpoints\n\nIf you do not have [MongoDB](https://www.zeolearn.com/mongodb-training) installed on your local mahcine, do not worry. In the next step I am going walk you through setting up a free tier of MongoDB in cloud.\n\n**Consuming MongoDB in Cloud**\n\nFor the sake of brevity, I am going to use [MongoDB Atlas](https://www.mongodb.com/cloud/atlas) a service that you can use to store data for your sample application. You can also use other popular database-as-a-service [Mlab](https://mlab.com/) without any hassle.\n\nI already have an account setup, so I’d suggest you to sign up on mongodb atlas’ site with your email. Once you have logged in, you will get the below screen:\n\n<img src='https://cdn-images-1.medium.com/max/1200/0*K-3GHE1axS48h85u.png' />\n\nAt this point, you can either take time to explore what MongoDB Atlas is or you can skip and together we will setup a Sandbox for our sample application. Click on the “New Project” button on the right side of the web page.\n\n<img src='https://d6vdma9166ldh.cloudfront.net/media/images/b7a62c69-71a3-4678-89d3-276832706d9a.png' />\n\n<img src='https://d6vdma9166ldh.cloudfront.net/media/images/e910bddb-5e50-4d0a-aaa4-d7d36939e491.png' />\n\nThen you will be prompted to fill in the details. See screenshots below, enter a name for your project and click “next” and then click “Create Project”. Per one account in MongoDB Atlas, you will get one free tier/cluster. Follow the steps below to setup one.\n\n<img src='https://d6vdma9166ldh.cloudfront.net/media/images/71db2429-c41d-48bb-a9e1-21281f5cfbcb.png' />\n\nClick on the Build new Cluster button.\n\n<img src='https://d6vdma9166ldh.cloudfront.net/media/images/145b86aa-63c1-45e4-ae53-f92bdf852562.png' />\n\nScroll down a bit, and then select the free tier M0. Per free cluster, we get 512mb of space. More than enough for what we need for this tutorial.\n\n<img src='https://d6vdma9166ldh.cloudfront.net/media/images/9c0385c7-e282-4fd7-a266-487425841b0e.png' />\n\nThen enter username and password for an Admin connection that we will use to connect to our database through our application. Make sure you remember both username and password and password must a bit strong. Lastly, click on confirm and deploy and the service will take at least 10 minutes to setup a database cluster.\n\n<img src='https://d6vdma9166ldh.cloudfront.net/media/images/17807485-9b69-43c4-9d83-e9c7aa5abb1f.png' />\n\nThat’s it. The database is now ready to be used. Now let us setup our application.\n\n## Configuring Server Side\n\nFrom your terminal:\n\n```shell\n# to initalise our node project, we need a package.json file\nnpm init --yes\n\n# install express framework\nnpm install -S express mongoose body-parser\n```\n\nMongoose is client that helps us connect and communicate with our database. BodyParser is needed as a middleware to parse the data to be sent through HTTP requests. Express is de facto standard and is one of the reason we will be using it.\n\n## Running the Server\n\nLet’s first the nitty gritties of our server. Create a file app.js in the root directory with the following code:\n\n```js\n// app.js\n\nconst express = require('express');\n\nconst app = express();\n\nconst port = process.env.PORT || 3301;\n\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}`);\n});\n```\n\nThe app is an object provided by Express API for the developer to communicate with the application and bootstrap a server. In Express application, it is that easy to write bare minimum server. There are different ways you can setup your server but the basics will remain same. For brevity, I am using app.js but you can take a look at Express generator that scaffolds a structure in a quick manner.\n\nNow, add an npm script to package.json file to test and start our server.\n\n```json\n\"scripts\": {\n    \"start\": \"node app.js\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n```\n\nFrom terminal, npm run start or npm start and you should see the success message without any error.\n\n<img src='https://d6vdma9166ldh.cloudfront.net/media/images/180b1cc9-7178-44ff-8319-8747548ad6cd.png' />\n\n## Setting up Mongoose\n\nMongoose is an ORM (Object Relational Mapper) that is used to interact with MongoDB database instance. We have already setup our instance using MongoDB atlas and installed mongoose as the project dependency. So let us start by defining a schema. Though, NoSQL database are schema less it is consider a best practice to define a schema to give some structure to the data that will be stored in our database.\n\nA typical Express application follows MVC (model-view-controller) model to define a directory structure and that is what we are going to do. Create a directory models and inside it a file Task.js with following code:\n\n```js\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst TaskSchema = new Schema({\n  taskName: {\n    type: String,\n    required: true\n  },\n  createdOn: {\n    type: Date,\n    default: Date.now\n  }\n});\n\nmodule.exports = mongoose.model('Tasks', TaskSchema);\n```\n\nThis schema does look like a JSON data and that is exactly what MongoDB stores or it appears to be for the developer to. Original format of data stored in MongoDB is called BSON (stands for \\_Binary JSON) and it converts JSON to BSON is handled by the dtabase itself. You can read more about it here in the official docs.\n\nMongoose allows us to create define a schema for our the document to be stored in our application via inside the application just by defining a model. You can think it of as a blueprint. All your tasks in the database collection, will have taskName and createdOn value. Lastly, we bind our schema with the name of our collection Tasks. The collection in MongoDB our by default plural since they tend to contain a number of documents. taskName and createOn are called fields in terms of MongodB terminology. Together they constitute a document inside the collection Tasks and each document will have a unique ID to identify them as a record in the database. This unique ID is stored in MongoDB database by default and is a 12 byte value made up of different things related to our database. You can read more about how this unique ID created by the database [here](https://docs.mongodb.com/manual/reference/method/ObjectId/).\n\n## Connecting Database To our Application\n\nBefore we further go with the controller part, let us first connect the database to our server and see if everything is working A-OK.\n\nI like to store all my application’s configuration in a config directory. Create a db.js file inside that directory.\n\n```js\nconst mongoose = require('mongoose');\n\nconst dbURI =\n  'mongodb://newuser:myNewPassword@cluster0-shard-00-00-gibou.mongodb.net:27017,cluster0-shard-00-01-gibou.\n  mongodb.net:27017,cluster0-shard-00-02-gibou.mongodb.net:27017/test?ssl=true&replicaSet=Cluster0-shard-0&\n  authSource=admin';\n\nconst options = {\n  reconnectTries: Number.MAX_VALUE,\n  poolSize: 10\n};\n\nmongoose.connect(dbURI, options).then(\n  () => {\n    console.log('Database connection established!');\n  },\n  err => {\n    console.log('Error connecting Database instance due to: ', err);\n  }\n);\n\n// require any models\n\nrequire('../models/Task');\n```\n\nTo get the connection string you have to follow the following steps:\n\nFirst click on the connect button on your MongoDB Atlas page the following screen will prompt.\n\n<img src='https://d6vdma9166ldh.cloudfront.net/media/images/1ed9e590-2aad-47e2-989b-95bcad69e339.png' />\n\nThen, click “Allow Access from Anywhere” to white list our server URL.\n\n<img src='https://d6vdma9166ldh.cloudfront.net/media/images/1434b0f6-7bde-4e3c-8a13-68fe382894e2.png' />\n\nThen, copy the URI string for version 3.4:\n\n<img src='https://d6vdma9166ldh.cloudfront.net/media/images/d7458a10-1220-4c67-ac1f-eafcce4190b4.png' />\n\nAnd enter the username and password you entered during the setup of our instance in place of `username:<password>` and remove the placeholders `<>`. I am using options variable to spike your curiosity such that you will explore about it and the power of mongoose. You can read more about connection options that provided by mongoose here.\n\nLastly, we use `mongoose.connect()` to establish a connection between server and the database instance and handle it gracefully using a promise. But wait, the connection won't be establish until we connect this config file with our application and for that we need to require this file in our main app.js file.\n\n```js\nconst express = require('express');\n\n// db instance connection\nrequire('./config/db');\n\nconst app = express();\n\nconst port = process.env.PORT || 3301;\n\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}`);\n});\n```\n\nNow restart our server from command line and you will see the success prompt:\n\n<img src='https://d6vdma9166ldh.cloudfront.net/media/images/2f7929df-6a92-4823-b48d-a7e3cffe86ee.png' />\n\nDo you notice one thing here? For every change we make in our application, we have to restart our server from command line and to ignore this tedious process we can make use of a powerful utility called nodemon developed by Remy Sharp.\n\n## Enter Nodemon\n\nAfter we setup nodemon I promise we will be focusing on code of our API but making use of this utility will save tons of amount of time when working on an API yourself. Let's install nodemon as a dev dependency first.\n\n```shell\nnpm install -D nodemon\n```\n\nAfter installing it, change the start script in package.json file to:\n\n```json\nnpm install -D nodemon\n```\n\nNow if we start our server, nodemon will monitor for any changes made and restart the server when necessary on its own. We don’t have to worry about that anymore.\n\nBack to our API code.\n\n## Setting up Business Logic\n\nTo setup routes or endpoints of our application, we need to include `body-parser` in our `app.js`.\n\n```js\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\n// db instance connection\nrequire('./config/db');\n\nconst app = express();\n\nconst port = process.env.PORT || 3301;\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\n\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}`);\n});\n```\n\nBodyParser parses incoming HTTP requests as middleware under req.bodybefore routes or API have access to them and perform any further actions on them. Very useful and essential step when using forms in a web application.\n\nTo define the business logic of our APIs endpoints, we are going to create a separate file TaskController.js under directory controllers.\n\nFor our API routes (I am going to call them route for brevity but they are same as endpoints) we are going to five different actions or operations or way to handle incoming requests. These tasks will cover our CRUD operations. Each route will have at least two parameters: req and res.\n\n- `req`: request, useful when creating or or updating a new task and read data from the body (this where BodyParser works like a charm).\n- `res`: response to fulfill that incoming request with response.\n\n```js\nconst Task = require('../models/Task');\n\nexports.listAllTasks = (req, res) => {\n  Task.find({}, (err, task) => {\n    if (err) {\n      res.status(500).send(err);\n    }\n    res.status(200).json(task);\n  });\n};\n\nexports.createNewTask = (req, res) => {\n  let newTask = new Task(req.body);\n  newTask.save((err, task) => {\n    if (err) {\n      res.status(500).send(err);\n    }\n    res.status(201).json(task);\n  });\n};\n\nexports.readTask = (req, body) => {\n  Task.findById(req.params.taskid, (err, task) => {\n    if (err) {\n      res.status(500).send(err);\n    }\n    res.status(200).json(task);\n  });\n};\n\nexports.updateTask = (req, res) => {\n  Task.findOneAndUpdate(\n    { _id: req.params.taskid },\n    req.body,\n    { new: true },\n    (err, task) => {\n      if (err) {\n        res.status(500).send(err);\n      }\n      res.status(200).json(task);\n    }\n  );\n};\n\nexports.deleteTask = (req, res) => {\n  Task.remove({ _id: req.params.taskid }, (err, task) => {\n    if (err) {\n      res.status(404).send(err);\n    }\n    res.status(200).json({ message: 'Task successfully deleted' });\n  });\n};\n```\n\nThis completes our controller. The controller is the business logic that binds our endpoints/routes that we are going to define soon to what action or operation they will perform on an incoming request.\n\nEach of the above operation when sending a response does send HTTP status code which clearly determines whether the incoming request was fulfilled or was there an error. This the part of REST paradigm and is best practice. You can read more about this [here](http://www.restapitutorial.com/lessons/httpmethods.html).\n\n## Setting up Routes\n\n```js\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst taskController = require('./controllers/TaskController');\n\n// db instance connection\nrequire('./config/db');\n\nconst app = express();\n\nconst port = process.env.PORT || 3301;\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\n\n// API ENDPOINTS\n\napp\n  .route('/tasks')\n  .get(taskController.listAllTasks)\n  .post(taskController.createNewTask);\n\napp\n  .route('/tasks/:taskid')\n  .get(taskController.readTask)\n  .put(taskController.updateTask)\n  .delete(taskController.deleteTask);\n\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}`);\n});\n```\n\nWe setup our API’s endpoints by first requiring the controller and then passing on a specific endpoint it using the correct HTTP method. The endpoints can be elaborated as:\n\n- POST /tasks to create a new task\n\n- GET /tasks to get a list of all tasks\n\n- GET /tasks/:taskid to get a specific task by its unique id(the one mongodb creates for us)\n\n- PUT /tasks/:taskid to modify existing task\n\n- DELETE /tasks/:taskid to delete an existing task from our database instance\n\nAs a best practice, APIs routes should always use nouns for identifying resource.\n\nNow let us test our API routes using Postman.\n\n## Testing our API\n\nOpen postman and type http://localhost:3301/tasks and selct the POSTmethod. We will first use the POST request to create a new task since our database is currently empty and does not have any data. Use body to fill in the data which follows same schema we defined in our model.\n\n<img src='https://d6vdma9166ldh.cloudfront.net/media/images/36858c3c-1a16-4a84-9821-804b2b5435dc.png' />\n\nHitting the send button should respond with 200 status and the data we created structured exactly like our schema in JSON format.\n\n<img src='https://d6vdma9166ldh.cloudfront.net/media/images/eb03c175-41f7-4bc0-859a-0a007086af91.png' />\n\nSimilarly, we can test other endpoints of our API. Such as getting all tasks (so far we have so it will give only one task that we just created):\n\n<img src='https://d6vdma9166ldh.cloudfront.net/media/images/b1300d7d-6493-43b0-8e10-e4642e57e421.png' />\n\nGetting the task by its \\_id:\n\n<img src='https://d6vdma9166ldh.cloudfront.net/media/images/86018023-045d-4cc5-8db4-cead1261a6a4.png' />\n\nTry updating the task or removing it by using the endpoints we defined earlier and changing the HTTP method from Postman yourself.\n\nHope you learned something valuable by reading this article.\n\nYou can find the complete code at this [Github repository](https://github.com/amandeepmittal/nodejs-restapi).\n",
            "url": "https://amanhimself.dev//blog/designing-a-rest-api-with-node-js-and-mongodb-atlas",
            "title": "Designing a REST API with Node.js and MongoDB Atlas",
            "summary": "Designing a REST API with Node.js and MongoDB Atlas",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/setting-up-and-getting-used-to-gatsby",
            "content_html": "---\ntitle: 'Gatsby.js - How to set up and use the React Static Site Generator'\ndate: '2018-01-04'\nslug: 'setting-up-and-getting-used-to-gatsby'\nthumbnail: '/thumbnails/gatsby.png'\ntag: 'gatsby'\ncanonicalUrl: 'https://medium.com/free-code-camp/setting-up-and-getting-used-to-gatsby-1fc27985ae8a'\n---\n\n[Gatsby](https://www.gatsbyjs.org/) is a static site generator for React that released its first major version last month. It’s a tool that not only scaffolds projects (or websites) for you but claims that those sites are fast in performance. If you decide to use Gatsby you will be enjoying the power of the latest web technologies such as React.js, Webpack, and so on.\n\nThere are a lot of modern paradigms that Gatsby takes care for its developer behind the scenes to start building and launch their project. Another cool thing about Gatsby that I like is its ever-growing data plugin ecosystem. It lets a developer fetch data directly into a Gatsby generated application using GraphQL.\n\nHere are some of the advantages of using Gatsby:\n\n- HTML code is generated server side\n- Easily extensible by plugin ecosystem\n- Pre-configured Webpack based build system (no need to break your head)\n- Optimized for speed. Gatsby loads only critical parts, so that your site loads as fast as possible. Once loaded, Gatsby pre-fetches resources for other pages so that clicking on the site feels incredibly fast.\n- Automatic routing based on your directory structure. (no need for separate routing/navigation library)\n\nIf you know the nitty-gritty of React, you can definitely get started with Gatsbyjs in no time by reading this tutorial. I am not asking you to be advanced with React but only the familiar with its concepts. If you like to refresh your knowledge on the same or learn more about it, I recommend following links:\n\n- [Facebook’s Official](https://reactjs.org/)\n- [React Express (not the server Express.js)](http://www.react.express/)\n\nEnough with the introduction. Let’s get started.\n\n### Installing Gatsby CLI\n\nWe will be using `npm` to install our first and basic tool that we need to setup any Gatsby project. You can use `yarn` too. In your terminal, please execute this command:\n\n```shell\nnpm install --global gatsby-cli\n```\n\nYou might need to add `sudo` at the start of the command if it gives an error for permissions.\n\nTo start a new site, go to your desired project directly. Select a place on your system where you might be storing all the playground or applications in their initial stage and then in terminal:\n\n```shell\ngatsby new first-gatsby-site\n```\n\nYou can name your project anything you like, I named that just for the brevity.\n\n<img src='https://cdn-images-1.medium.com/max/800/0*D0A60lp-sDgjvHi1.png' />\n\nFinish the installation and set up of the project. Then change the directory into the newly created folder. Run `gatsby develop` from the command line to see your site running live at http://localhost:8000.\n\n<img src='https://cdn-images-1.medium.com/max/800/0*jAK-XXvfqorbpKcv.png' />\n\nIn your browser window, the default Gatsby.js application looks like this:\n\n<img src='https://cdn-images-1.medium.com/max/800/0*_ajd3MY423FW8PO6.png' />\n\nLeave the command running since it enables Hot Reloading. Now any change we make to our project will be reflected directly, without refreshing the page.\n\nCurrently, our application contains two pages. Hence, the bare minimum routing is already done for us. Before diving into the code and making any amendments to it, we need to understand the project structure. Then you can make use of it by manipulating it in your future projects.\n\n### Diving deep in the Project Structure\n\n<img src='https://cdn-images-1.medium.com/max/800/0*9eiAcl39nN1Uj08q.png' />\n\nEvery Gatsby project contains at least these files. You might be familiar with some such as `node_modules,` `public` directory, which is served when deployed. It also contains `package.json,` which contains the metadata of any modern Javascript application.\n\nOur main focus and concern are in the directory `src` and file `gatsby-config.js.`These contain the metadata and other essential information about our current application.\n\nInside the `src/` there are two sub-directories: `layouts/` and `pages/`.\n\nThe `layouts/` contain further two files: `index.css` and `index.js`. These serve as the starting point of our application.\n\n```js\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Link from 'gatsby-link';\nimport Helmet from 'react-helmet';\n\nimport './index.css';\n\nconst Header = () => (\n  <div\n    style={{\n      background: 'rebeccapurple',\n      marginBottom: '1.45rem'\n    }}\n  >\n    <div\n      style={{\n        margin: '0 auto',\n        maxWidth: 960,\n        padding: '1.45rem 1.0875rem'\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: 'white',\n            textDecoration: 'none'\n          }}\n        >\n          Gatsby\n        </Link>\n      </h1>\n    </div>\n  </div>\n);\n\nconst TemplateWrapper = ({ children }) => (\n  <div>\n    <Helmet\n      title=\"My First Gatsby Site\"\n      meta={[\n        { name: 'author', content: 'amanhimself' },\n        { name: 'keywords', content: 'sample, something' }\n      ]}\n    />\n    <Header />\n    <div\n      style={{\n        margin: '0 auto',\n        maxWidth: 960,\n        padding: '0px 1.0875rem 1.45rem',\n        paddingTop: 0\n      }}\n    >\n      {children()}\n    </div>\n  </div>\n);\n\nTemplateWrapper.propTypes = {\n  children: PropTypes.func\n};\n\nexport default TemplateWrapper;\n```\n\nThe `Header` component contains the styles and markup that is currently serving as the header of our application. It is reflected on every page by `TempplateWrapper` which is our main layout component in the application. This certainly means that this component can be used for displaying navigation menu (which we are going to do in a while) or a footer.\n\nThe `Link` tag you are seeing is the way Gatsby let our visitors navigate from one page to another. The `react-helmet` library that serves the purpose of attaching header information in HTML. It is being currently generated by the JSX. You can read about this useful, beginner friendly library on its [official doc here](https://github.com/nfl/react-helmet).\n\nDo notice the `{children()}` prop. This is a function that executes within the JSX code to determine the exact location for the child components to render.\n\n### Main Application Page\n\nOur second concerned directory `pages/` contain rest of the pages that build up our application. They are plain React components. Let's take a look at the `index.js` file inside this directory which currently serves as the main page of our application.\n\n```js\nimport React from 'react';\nimport Link from 'gatsby-link';\n\nconst IndexPage = () => (\n  <div>\n    <h1>Hi people</h1>\n    <p>Welcome to your new Gatsby site.</p>\n    <p>Now go build something great.</p>\n    <Link to=\"/page-2/\">Go to page 2</Link>\n  </div>\n);\n\nexport default IndexPage;\n```\n\nSimilarly, you will find the code in `page-2.js`. If in our browser window, we try to navigate to the second page, notice the URL of the site when the second page loads.\n\n<img src='https://cdn-images-1.medium.com/max/800/0*6-NTcYa0m_ZMiJmx.png' />\n\nIt is same as the file name. We are also using `Link` tag from Gatsby to navigate back to the homepage.\n\nLet’s add another page to our site. Inside the `pages` directory, create a new file `page-3.js`.\n\n```js\nimport React from 'react';\nimport Link from 'gatsby-link';\n\nconst ThirdPage = () => (\n  <div>\n    <h1>Third Page</h1>\n    <p>This is my first Gtasby site</p>\n    <Link to=\"/page-2/\">Back to Page 2</Link>\n    <br />\n    <Link to=\"/\">Go back to the homepage</Link>\n  </div>\n);\n\nexport default ThirdPage;\n```\n\nNow let’s add the link to our new page to the homepage. Open `index.js` file:\n\n```js\nimport React from 'react';\nimport Link from 'gatsby-link';\n\nconst IndexPage = () => (\n  <div>\n    <h1>Hi people</h1>\n    <p>Welcome to your new Gatsby site.</p>\n    <p>Now go build something great.</p>\n    <Link to=\"/page-2/\">Go to page 2</Link>\n    <br />\n    <Link to=\"/page-3\">New Page!</Link>\n  </div>\n);\n\nexport default IndexPage;\n```\n\n<img src='https://cdn-images-1.medium.com/max/800/0*y_FCYqu-Zne_IfXH.png' />\n\nThis renders correctly on our page. Do notice the `404.js` file in the directory. This file is rendered when no desired URL is found. More info can be read in [official Gatsby docs](https://www.gatsbyjs.org/docs/add-404-page/).\n\nNow to make things a bit more interesting. Let’s add a navigation menu in the `Header` component of our layout.\n\n### Adding Navigation Menu\n\nOpen `layouts/index.js` and inside the `Header` component, add the following code:\n\n```js\nconst Header = () => (\n  <div\n    style={{\n      background: 'rebeccapurple',\n      marginBottom: '1.45rem'\n    }}\n  >\n    <div\n      style={{\n        margin: '0 auto',\n        maxWidth: 960,\n        padding: '1.45rem 1.0875rem'\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: 'white',\n            textDecoration: 'none'\n          }}\n        >\n          Gatsby\n        </Link>\n        <ul style={{ listStyle: 'none', float: 'right' }}>\n          <li style={{ display: 'inline-block', marginRight: '1rem' }}>\n            <Link\n              style={{\n                color: 'white',\n                textDecoration: 'none',\n                fontSize: 'x-large'\n              }}\n              to=\"/\"\n            >\n              Home\n            </Link>\n          </li>\n          <li style={{ display: 'inline-block', marginRight: '1rem' }}>\n            <Link\n              style={{\n                color: 'white',\n                textDecoration: 'none',\n                fontSize: 'x-large'\n              }}\n              to=\"/page-2\"\n            >\n              Page 2\n            </Link>\n          </li>\n          <li style={{ display: 'inline-block', marginRight: '1rem' }}>\n            <Link\n              style={{\n                color: 'white',\n                textDecoration: 'none',\n                fontSize: 'x-large'\n              }}\n              to=\"/page-3\"\n            >\n              Page 3\n            </Link>\n          </li>\n        </ul>\n      </h1>\n    </div>\n  </div>\n);\n```\n\nIf you save the file, the results are reflected immediately on the homepage and on every page.\n\n<img src='https://cdn-images-1.medium.com/max/800/0*0ZgP3U6tQtz1rIyz.png' />\n\n### Configuration File\n\n```js\nmodule.exports = {\n  siteMetadata: {\n    title: `Gatsby Default Starter`\n  },\n  plugins: [`gatsby-plugin-react-helmet`]\n};\n```\n\nThe last important file of our concern is `gatsby-config.js` in the root folder. This file can contain site's metadata and additional information such plugins that we install using `npm` command. However, their scope of usage and concern are only with a project generated using Gatsby CLI. By default the plugin `gatsby-plugin-react-helmet` is installed.\n\nA complete list of plugins is listed [here](https://www.gatsbyjs.org/docs/plugins/).\n\n### Deployment of our Static site\n\nSo far we have come out with a bare minimum static site that serves the purpose of this walk-through. The last step that I want to focus is on deployment. I will be using GitHub Pages for deployment.\n\nTo deploy a project on GitHub pages make sure your current working directory is initialized as a git repository and hosted on GitHub. If that is good, let us add a module called `gh-pages` as a dev dependency.\n\n```shell\nnpm install --save-dev gh-pages\n```\n\nAdd a deployment script in `package.json`:\n\n```json\n\"scripts\": {\n  \"deploy\": \"gatsby build --prefix-paths && gh-pages -d public\",\n}\n```\n\nIn `gatsby.config.js` add the pathname prefix of the repo such:\n\n```js\nmodule.exports = {\n  siteMetadata: {\n    title: `Gatsby Default Starter`\n  },\n  pathPrefix: `/first-gatsby-site`,\n  plugins: [`gatsby-plugin-react-helmet`]\n};\n```\n\nSee [official docs](https://www.gatsbyjs.org/docs/path-prefix/) on path prefixing.\n\nNow from your terminal run:\n\n```shell\nnpm run deploy\n```\n\n**Great!** Your site is now live on `[https://username.github.io/project-name/](https://username.github.io/project-name/.)`[.](https://username.github.io/project-name/.)\n\nYou can find the complete code of this project at this [GitHub Repo](https://github.com/amandeepmittal/first-gatsby-site)\n\n[Originally Published at freeCodeCamp.com](https://medium.com/free-code-camp/setting-up-and-getting-used-to-gatsby-1fc27985ae8a)\n",
            "url": "https://amanhimself.dev//blog/setting-up-and-getting-used-to-gatsby",
            "title": "Gatsby.js - How to set up and use the React Static Site Generator",
            "summary": "Gatsby.js - How to set up and use the React Static Site Generator",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/ionic-2-3-cli-reference",
            "content_html": "---\ntitle: 'Ionic 2/3 CLI Reference'\ndate: '2017-12-19'\nthumbnail: '/thumbnails/ionic.png'\nslug: 'ionic-2-3-cli-reference'\ntag: 'ionic'\ncanonicalUrl: 'https://medium.com/hackernoon/ionic-2-3-cli-reference-13f9fae3f964'\n---\n\n> [Originally Published at Hackernoon.com](https://medium.com/hackernoon/ionic-2-3-cli-reference-13f9fae3f964)\n\n> _The Ionic CLI is your go-to tool for developing Ionic apps._\n\nIonic CLI is a great tool when it comes to avoid writing a lot of boilerplate code. It generates pages, services, can run or emulate your Ionic application with and generate needed resources for the mobile application such as splash screen.\n\nThis is a quick reference into Ionic CLI.\n\n### Installing the CLI Tool\n\nYou can install it with npm:\n\n```shell\n$ npm install -g ionic\n```\n\nTo check if it has installed correctly, in your terminal window, type:\n\n```shell\n$ ionic info\n\nglobal packages:\n\n    @ionic/cli-utils : 1.3.0\n    Ionic CLI        : 3.3.0\n\nSystem:\n\n    Node       : v6.11.0\n    OS         : macOS Sierra\n    Xcode      : Xcode 8.1 Build version 8B62\n    ios-deploy : not installed\n    ios-sim    : not installed\n```\n\n### Starting a new App\n\nTo start with a new mobile application, Ionic framework provides different set of ready-to-use templates:\n\n```shell\n$ ionic start --list\n\ntabs ............... ionic-angular A starting project with a simple tabbed interface\nblank .............. ionic-angular A blank starter project\nsidemenu ........... ionic-angular A starting project with\n                    a side menu with navigation in the content area\nsuper .............. ionic-angular A starting project\n                    complete with pre-built pages,\n                    providers and best practices\n                    for Ionic development.\nconference ......... ionic-angular A project that\n                    demonstrates a realworld application\ntutorial ........... ionic-angular A tutorial based\n                      project that goes along with the\n                      Ionic documentation\naws ................ ionic-angular AWS Mobile Hub Starter\n```\n\nFor creating a new project:\n\n```shell\n$ ionic start my-new-app blank\n```\n\n_With update to Ionic 3, no more adding tags such as_ `_--v2_` _after the template name in the above command. By default, Ionic app generated will be of version 2/3. To generate an Ionic app of version 1 (with good ol' Angularjs):_\n\n```shell\n$ ionic start my-new-app blank --v1\n```\n\n### Serving\n\nOnce you `cd` into your project’s directory, serve your app on your local machine with `serve`:\n\n```shell\n$ ionic serve\n```\n\nTo serve on a different port:\n\n```shell\n$ ionic serve --port 9100\n```\n\nUse `–-lab` tag to see your app side by side on multiple platforms (such as iOS, Android and Windows Mobile):\n\n```shell\n$ ionic serve --lab\n```\n\nTo serve without live reload:\n\n```shell\n$ ionic serve --nolivereload\n```\n\n### Generating Providers and Pages\n\nTo generate a new page:\n\n```shell\n$ ionic  g page Page2\n```\n\nTo generate a provider/service:\n\n```shell\n$ ionic g provider DataService\n```\n\nKnow them all- List the available generators:\n\n```shell\n$ ionic g --list\n```\n\n### Generating Resources\n\nTo generate the app icon and splash screen with resources:\n\n```shell\n$ ionic cordova resources\n```\n\nTo generate just the app icon:\n\n```shell\n$ ionic cordova resources --icon\n```\n\nOr, just the splash screen:\n\n```shell\n$ ionic cordova resources --splash\n```\n\nNow, generate resources for a specific platform:\n\n```shell\n$ ionic cordova resources android\n```\n\n## Add Ionic Plugins\n\n```shell\n$ ionic cordova plugin [action] [plugin]\n\n# Example\n$ ionic cordova plugin add cordova-plugin-x-socialsharing\n```\n\n### Adding Platform\n\nTo add a target mobile platform for the app to use:\n\n```shell\n$ ionic cordova add android\n```\n\n### App on an Emulator\n\nTo start an emulator:\n\n```shell\n$ ionic cordova emulate ios\n```\n\nEmulate with livereload:\n\n```shell\n$ ionic cordova emulate ios --livereload\n```\n\n### Running Ionic App on a Connected Device\n\nLet’s say, I have an iOS device connected, so to run the app on that device:\n\n```shell\n$ ionic cordova run ios --device\n```\n\nProduction check:\n\n```shell\n$ ionic cordova run android --prod --release\n```\n\n### Git Initialisation\n\nAnother advantage of using Ionic CLI tool is that it initialises a git repository when creating an Ionic project using the `ionic start` command from the terminal with an `initial commit` already. You can verify that by running:\n\n```shell\n$ git log --oneline --graph --decorate --color\n\n# Output\n* 029f86e (HEAD -> master) Initial commit\n```\n",
            "url": "https://amanhimself.dev//blog/ionic-2-3-cli-reference",
            "title": "Ionic 2/3 CLI Reference",
            "summary": "Ionic 2/3 CLI Reference",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/passing-data-between-pages-in-an-ionic-application",
            "content_html": "---\ndate: '2017-12-03'\ntitle: 'Passing Data Between Pages in an Ionic Application'\nthumbnail: '/thumbnails/ionic.png'\nslug: 'passing-data-between-pages-in-an-ionic-application'\ntag: 'ionic'\ncanonicalUrl: 'https://medium.com/hackernoon/passing-data-between-pages-in-an-ionic-application-129b387c93b8'\n---\n\nIn the previous posts, we have seen [how to setup a basic navigation between multiple Ionic app Pages](https://hackernoon.com/https-medium-com-amanhimself-basic-navigation-in-ionic-applications-ecb199cdf15b). This post concerns what if you want to send some data from the previous page to the next page in the stack? For the Ionic provides `NavParams` class to transfer data from one page to another.\n\n### Generate the application\n\nIn this demo application we will first setup a home page with a text box to enter data that will be transfered to the next page. First, let’s generate a new Ionic application:\n\n```shell\n$ ionic start -a 'Passing Data between Pages' -i\napp.passdata.pages ionic-pass-data-pages blank\n```\n\nCreate a new about page:\n\n```shell\n$ ionic g page about\n```\n\nAnd lastly, to complete our setup, we must add about page in the app module:\n\n```ts\nimport { BrowserModule } from '@angular/platform-browser';\nimport { ErrorHandler, NgModule } from '@angular/core';\nimport { IonicApp, IonicErrorHandler, IonicModule } from 'ionic-angular';\nimport { SplashScreen } from '@ionic-native/splash-screen';\nimport { StatusBar } from '@ionic-native/status-bar';\n\nimport { MyApp } from './app.component';\nimport { HomePage } from '../pages/home/home';\nimport { AboutPage } from '../pages/about/about';\n\n@NgModule({\n  declarations: [MyApp, HomePage, AboutPage],\n  imports: [BrowserModule, IonicModule.forRoot(MyApp)],\n  bootstrap: [IonicApp],\n  entryComponents: [MyApp, HomePage, AboutPage],\n  providers: [\n    StatusBar,\n    SplashScreen,\n    { provide: ErrorHandler, useClass: IonicErrorHandler }\n  ]\n})\nexport class AppModule {}\n```\n\n### Add Input Text in Home Page\n\nThen we will update `home.html`:\n\n```html\n<ion-header>\n  <ion-navbar>\n    <ion-title> Passing Data in Pages </ion-title>\n  </ion-navbar>\n</ion-header>\n\n<ion-content padding>\n  <ion-list>\n    <ion-item>\n      <ion-label>Enter</ion-label>\n      <ion-input placeholder=\"Your fav color...\" #color></ion-input>\n    </ion-item>\n  </ion-list>\n  <button\n    ion-button\n    color=\"secondary\"\n    (click)=\"goTo(color.\n  value)\"\n  >\n    About Page\n  </button>\n</ion-content>\n```\n\n`#color` is a local variable whose value we will be referencing to pass on to the next page in our navigation stack. We will now update our `home.ts` with business logic behind the only click event in our template:\n\n```ts\nimport { Component } from '@angular/core';\nimport { NavController } from 'ionic-angular';\nimport { AboutPage } from './../about/about';\n\n@Component({\n  selector: 'page-home',\n  templateUrl: 'home.html'\n})\nexport class HomePage {\n  constructor(public navCtrl: NavController) {}\n\n  goTo(color) {\n    color = color || 'No Color Entered';\n\n    this.navCtrl.push(AboutPage, {\n      data: color\n    });\n  }\n}\n```\n\nNote the second argument in `this.navCtrl.push()` which is being used to pass the data.\n\n### About Page\n\nTo Pass data from Home page to About page we will need to import `NavParams` class. Since, I am using Ionic CLI to generate pages, class `NavParams` will already be imported in the about page.\n\n```ts\nimport { Component } from '@angular/core';\nimport { IonicPage, NavController, NavParams } from 'ionic-angular';\n\n@IonicPage()\n@Component({\n  selector: 'page-about',\n  templateUrl: 'about.html'\n})\nexport class AboutPage {\n  color: string;\n\n  constructor(public navCtrl: NavController, public navParams: NavParams) {\n    this.color = navParams.get('data');\n  }\n\n  ionViewDidLoad() {\n    console.log('ionViewDidLoad AboutPage');\n  }\n}\n```\n\n### Display Fetched Data\n\nTo catch the data from the previous page in the navigation stack, we are using `get()` method of `NavParams` class. We fetch data inside the constructor function of `AboutPage` class.\n\nFinally, to display data on about page:\n\n```html\n<ion-header>\n  <ion-navbar>\n    <ion-title>About</ion-title>\n  </ion-navbar>\n</ion-header>\n\n<ion-content padding>\n  <label>Color Entered: {{color}}</label>\n</ion-content>\n```\n\n### Summary\n\nHere are some screenshots:\n\nHome Page:\n\n<img src='https://cdn-images-1.medium.com/max/800/0*eftZuH7QmZQqs4-Y.png' />\n\nUser Input being entered:\n\n<img src='https://cdn-images-1.medium.com/max/800/0*g25oMDTJV3TS7mTB.png' />\n\nData passed form Home Page displayed on About Page:\n\n<img src='https://cdn-images-1.medium.com/max/800/0*ay_xx0zGGCDDuXXY.png' />\n\nWhen nothing entered in the input field, a default text passed and displayed:\n\n<img src='https://cdn-images-1.medium.com/max/800/0*5lhp42R9R5pQVjSi.png' />\n\n_To get the full code of this demo app, you can visit_ [**this Github Repository**](https://github.com/amandeepmittal/ionic-pass-data-pages).\n\n> [Originally Published at Hackernoon.com](https://medium.com/hackernoon/passing-data-between-pages-in-an-ionic-application-129b387c93b8)\n",
            "url": "https://amanhimself.dev//blog/passing-data-between-pages-in-an-ionic-application",
            "title": "Passing Data Between Pages in an Ionic Application",
            "summary": "Passing Data Between Pages in an Ionic Application",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/tips-for-creating-node-js-rest-apis",
            "content_html": "---\ntitle: 'Tips for Creating Nodejs REST APIs'\ndate: '2017-11-22'\nthumbnail: '/thumbnails/node.png'\nslug: 'tips-for-creating-node-js-rest-apis'\ntag: 'nodejs'\ncanonicalUrl: 'https://codeburst.io/tips-for-creating-node-js-rest-apis-dfa0b2adb39c'\n---\n\n> [Originally Published at Codeburst.io](https://codeburst.io/tips-for-creating-node-js-rest-apis-dfa0b2adb39c)\n\nIn this article, I am going to offer you some tips for writing REST APIs in Nodejs for a production level application. Writing RESTful APIs with Nodejs is one of the most popular use case using the JavaScript server side platform.\n\n## Use HTTP Methods\n\nCRUD operations are basis of any API. In most applications you will be either:\n\n- Creating new records\n- Display them on a front end client aka reading a record from the database\n- Updating an existing record\n- Or deleting an existing record\n\nRecord here stands for anything that goes into the database. Afterall, an API is just way a to communicate from the user interface to database.\n\nTo develop an API that consist of CRUD operations, you must consider using correct HTTP method with the suitable endpoint:\n\n- `POST /record` for creating a new record\n- `PUT` or `PATCH /record/:id` for updating an existing record\n- `GET /record/:id` getting a single record\n- `GET /record` getting a list of all records\n- `DELETE /record/:id` deleting a single existing record\n\n## Use HTTP response status codes\n\nYou must consider using an HTTP status code if anything fails when serving a request.\n\n- `2xx` if everything works fine\n- `3xx` if record was moved\n- `4xx` request fails due to client error\n- `5xx` request fails due to server error (or API)\n\nYou can refer to either of these links for a detailed error code and message along with it.\n\n- [HTTP Status Codes](http://www.restapitutorial.com/httpstatuscodes.html)\n- [Mozilla HTTP Response Status Codes](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status)\n\nIf using Express, most commonly framework used with Nodejs to create APIs, consider writing your code in this format:\n\n```js\n// in case 5xx\nres.status(500).send({ error: 'Internal Server Error.' });\n\n// in case 4xx, unauthorized\nres.status(401).send({ error: 'Unauthorized. Please check.' });\n```\n\n## Consider Creating an API Documentation\n\nWorking as a team or even if individual and having a documented API, in the end will benefit all. Following open-source API documentation projects can help in this case:\n\n## Avail options for building APIs in Nodejs\n\nThere are quite a number of frameworks that you can choose from to build your next RESTful API with Nodejs.\n\nExpress, Koa, Hapi all can be used for creating browser based applications but Restify allows you to focus on building a RESTful service.\n",
            "url": "https://amanhimself.dev//blog/tips-for-creating-node-js-rest-apis",
            "title": "Tips for Creating Nodejs REST APIs",
            "summary": "Tips for Creating Nodejs REST APIs",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/multi-page-navigation-in-an-ionic-app",
            "content_html": "---\ndate: '2017-11-19'\ntitle: 'Multi Page Navigation in an Ionic App'\nthumbnail: '/thumbnails/ionic.png'\nslug: 'multi-page-navigation-in-an-ionic-app'\ntag: 'ionic'\ncanonicalUrl: 'https://medium.com/hackernoon/multi-page-navigation-in-an-ionic-app-8b008f616cdb'\n---\n\nIonic makes it easy to create multiple pages navigation using `NavController` as the genesis of navigation stack. In this little application, I will try to make the concept clear to you.\n\n### Generate Application and Pages\n\nTo start with, let’s create a new Ionic app for this showcase. Follow along with me. To get started, we have to scaffold a new project, my favorite one-to-go Ionic CLI command:\n\n```shell\nionic start -a 'Multi Page Navigation'\n-i app.multipage.nav ionic-multi-page-nav blank\n```\n\n`cd` in to the new project created by the above Ionic CLI command and run `ionic serve` to see the blank template with just a homepage available. We will create two new pages in this application to showcase our motive.\n\nTo read about the basic Navigation in an Ionic app, see this.\n\nNow, with the help of Ionic CLI, let’s generate two new pages before diving into our code base.\n\n```shell\n$ ionic g page page1\n$ ionic g page page2\n```\n\nI am naming the two new pages generic but you can name them anything you want. Just follow the convention when importing the modules. Inside the `app/pages` you can see, there are two new folders with the names we generated. Each have its own `.ts`, `.html` and `.scss` file, thus, completing a web component on which every Ionic and Angular apps are based on.\n\nTo proceed, we need to add both the pages in our `app.module.ts`:\n\n```ts\nimport { BrowserModule } from '@angular/platform-browser';\nimport { ErrorHandler, NgModule } from '@angular/core';\nimport { IonicApp, IonicErrorHandler, IonicModule } from 'ionic-angular';\nimport { SplashScreen } from '@ionic-native/splash-screen';\nimport { StatusBar } from '@ionic-native/status-bar';\n\nimport { MyApp } from './app.component';\nimport { HomePage } from '../pages/home/home';\n\n// new pages to be added in declarations and entryComponents\nimport { Page1Page } from '../pages/page1/page1';\nimport { Page2Page } from '../pages/page2/page2';\n\n@NgModule({\n  declarations: [MyApp, HomePage, Page1Page, Page2Page],\n  imports: [BrowserModule, IonicModule.forRoot(MyApp)],\n  bootstrap: [IonicApp],\n  entryComponents: [MyApp, HomePage, Page1Page, Page2Page],\n  providers: [\n    StatusBar,\n    SplashScreen,\n    { provide: ErrorHandler, useClass: IonicErrorHandler }\n  ]\n})\nexport class AppModule {}\n```\n\n### Setup Home Page for Basic Navigation\n\nAs the `app.module.ts` is updated with our changes, the scope of the whole application can now access these two new pages. To implement the navigation between them, we have to first update our `home.html` with buttons that will navigate to a specific page and business logic behind those events in `home.ts`.\n\n```html\n<ion-header>\n  <ion-navbar>\n    <ion-title>Ionic Multi Page App</ion-title>\n  </ion-navbar>\n</ion-header>\n\n<ion-content padding>\n  <ion-card>\n    <ion-card-header> Home Page </ion-card-header>\n    <ion-card-content>\n      <button ion-button (click)=\"goTo('page1')\">Page1</button>\n      <button ion-button color=\"secondary\" (click)=\"goTo('page2')\">\n        Page2\n      </button>\n      <button ion-button color=\"light\" (click)=\"back()\">Back</button>\n    </ion-card-content>\n  </ion-card>\n</ion-content>\n```\n\nLet’s update `home.ts` as well.\n\n```ts\nimport { Component } from '@angular/core';\nimport { NavController } from 'ionic-angular';\n\nimport { Page1Page } from '../page1/page1';\nimport { Page2Page } from '../page2/page2';\n\n@Component({\n  selector: 'page-home',\n  templateUrl: 'home.html'\n})\nexport class HomePage {\n  constructor(public navCtrl: NavController) {}\n\n  goTo(page) {\n    if (page === 'page1') {\n      this.navCtrl.push(Page1Page);\n    } else if (page === 'page2') {\n      this.navCtrl.push(Page2Page);\n    }\n  }\n\n  back() {\n    if (this.navCtrl.length() >= 2) {\n      this.navCtrl.pop();\n    }\n  }\n}\n```\n\nThe `goTo()` function will help us in navigating to the desired page and `back` button will bring us to the previous page in the navigation stack. This is important! I mentioned to the previous page, not the home page. If you are familiar with Ionic 1, this would how state will work.\n\n### Updating Page1 and Page2\n\nTo continue to develop our demo application, we need to update our `Page1` and `Page2` components.\n\n```html\n<!--Page1-->\n<ion-header>\n  <ion-navbar>\n    <ion-title>Ionic Multi Page App</ion-title>\n  </ion-navbar>\n</ion-header>\n\n<ion-content padding>\n  <ion-card>\n    <ion-card-header> Page 1 </ion-card-header>\n    <ion-card-content>\n      <button ion-button color=\"secondary\" (click)=\"goTo('page2')\">\n        Page2\n      </button>\n      <button ion-button color=\"light\" (click)=\"back()\">Back</button>\n    </ion-card-content>\n  </ion-card>\n</ion-content>\n```\n\n```ts\nimport { Component } from '@angular/core';\nimport { IonicPage, NavController, NavParams } from 'ionic-angular';\nimport { Page2Page } from '../page2/page2';\n\n@IonicPage()\n@Component({\n  selector: 'page-page1',\n  templateUrl: 'page1.html'\n})\nexport class Page1Page {\n  constructor(public navCtrl: NavController, public navParams: NavParams) {}\n\n  goTo(page) {\n    if (page === 'page2') {\n      this.navCtrl.push(Page2Page);\n    }\n  }\n\n  back() {\n    if (this.navCtrl.length() >= 2) {\n      this.navCtrl.pop();\n    }\n  }\n\n  ionViewDidLoad() {\n    console.log('ionViewDidLoad Page1Page');\n  }\n}\n```\n\nSimilar for the `Page2`:\n\n```html\n<ion-header>\n  <ion-navbar>\n    <ion-title>Ionic Multi Page App</ion-title>\n  </ion-navbar>\n</ion-header>\n\n<ion-content padding>\n  <ion-card>\n    <ion-card-header> Page 2 </ion-card-header>\n    <ion-card-content>\n      <button ion-button (click)=\"goTo('page1')\">Page1</button>\n      <button ion-button color=\"light\" (click)=\"back()\">Back</button>\n    </ion-card-content>\n  </ion-card>\n</ion-content>\n```\n\n```ts\nimport { Component } from '@angular/core';\nimport { IonicPage, NavController, NavParams } from 'ionic-angular';\nimport { Page1Page } from '../page1/page1';\n\n@IonicPage()\n@Component({\n  selector: 'page-page2',\n  templateUrl: 'page2.html'\n})\nexport class Page2Page {\n  constructor(public navCtrl: NavController, public navParams: NavParams) {}\n\n  goTo(page) {\n    if (page === 'page1') {\n      this.navCtrl.push(Page1Page);\n    }\n  }\n\n  back() {\n    if (this.navCtrl.length() >= 2) {\n      this.navCtrl.pop();\n    }\n  }\n\n  ionViewDidLoad() {\n    console.log('ionViewDidLoad Page2Page');\n  }\n}\n```\n\n### Running the App\n\nIf we save all the files and again from the terminal run:\n\n```shell\n$ ionic serve\n\n# OR\n\n$ ionic serve --lab\n```\n\nThe output shown can be best described in these screenshots:\n\n<img src='https://cdn-images-1.medium.com/max/800/0*sMnNW4P3ONmaUZCP.png' />\n\n<img src='https://cdn-images-1.medium.com/max/800/0*iPNMEzroixe-Dmlj.png' />\n\n<img src='https://cdn-images-1.medium.com/max/800/0*7oSIkMCTVC0JOaQ5.png' />\n\nThis is just a glimpse of how multi page navigation in Ionic might work that might help you to get started with development.\n\n_To get the full code, you can visit_ [**this Github Repository**](https://github.com/amandeepmittal/ionic-multi-page-nav)\n\n[Originally Published at Hackernoon.com](https://medium.com/hackernoon/multi-page-navigation-in-an-ionic-app-8b008f616cdb)\n",
            "url": "https://amanhimself.dev//blog/multi-page-navigation-in-an-ionic-app",
            "title": "Multi Page Navigation in an Ionic App",
            "summary": "Multi Page Navigation in an Ionic App",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/using-google-fonts-in-an-ionic-application",
            "content_html": "---\ndate: '2017-11-09'\ntitle: 'Using Google Fonts in an Ionic Application'\nthumbnail: '/thumbnails/ionic.png'\nslug: 'using-google-fonts-in-an-ionic-application'\ntag: 'ionic'\ncanonicalUrl: 'https://medium.com/hackernoon/using-google-fonts-in-an-ionic-application-c3419c342f23'\n---\n\nIn this post, I will be showing you to change font in any Ionic 2/3 application. To start with, I will be setting up a new ionic project such that you can refer back to on Github.\n\n```shell\n$ ionic start ionic-use-google-fonts blank\n```\n\n`cd` in to the new project created by the above Ionic CLI command and run `ionic serve` to see the blank template with just a homepage available. As of now, the Ionic application looks like this:\n\n<img src='https://cdn-images-1.medium.com/max/800/0*WUHLVkBP7bifnV8E.png' />\n\nThe font here used in the application at global level is default. We will be changing it to [Revalia](https://fonts.google.com/specimen/Revalia). It’s just a random suggestion, you can pick whatever you want but I’d suggest, if you are doing for the first time or new to Ionic development, pick a font in which you can see the changes reflected in the app.\n\n<img src='https://cdn-images-1.medium.com/max/2560/0*NTLwsXqYlk1SPFPD.png' />\n\nAfter selecting the font, open the highlighted link in the screenshot above, in a new tab.\n\n<img src='https://cdn-images-1.medium.com/max/2560/0*Ok2hQifn4QpJFSsM.png' />\n\nAgain, open the link provided in the `latin` section, just like in the above image and download or save the file directly in you ionic project.\n\nThe location to save the file will be `YOUR-IonicApp > src/assets/fonts`. Create a new directory `fonts` in the `assets` folder if not available. Place the file there, and rename it as per your convenience.\n\n<img src='https://cdn-images-1.medium.com/max/800/0*KIBUq3X7G1JztbmK.png' />\n\nNow since we want this font to be used at the global level of application, open `app.scss` in `src/app` and first include the local file of the font we want to use and then use that font at global level by using an asterisk `*` as css-selector:\n\n```css\n@font-face {\n  font-family: 'Revalia';\n  src: url('../assets/fonts/revalia.woff2') format('woff2');\n}\n\n* {\n  font-family: Revalia;\n}\n```\n\nRun the ionic application with:\n\n```shell\n$ ionic serve\n```\n\nOutput:\n\n<img src='https://cdn-images-1.medium.com/max/800/0*cAeEa-sD5b1zHVNG.png' />\n\nTo get the full code, you can visit [**this Github Repository**](https://github.com/amandeepmittal/ionic-use-google-fonts).\n\n[Originally Published at Hackernoon.com](https://medium.com/hackernoon/using-google-fonts-in-an-ionic-application-c3419c342f23)\n",
            "url": "https://amanhimself.dev//blog/using-google-fonts-in-an-ionic-application",
            "title": "Using Google Fonts in an Ionic Application",
            "summary": "Using Google Fonts in an Ionic Application",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/basic-navigation-in-ionic-applications",
            "content_html": "---\ntitle: 'Basic Navigation in Ionic Applications'\ndate: '2017-10-31'\nthumbnail: '/thumbnails/ionic.png'\nslug: 'basic-navigation-in-ionic-applications'\ntag: 'ionic'\ncanonicalUrl: 'https://medium.com/hackernoon/https-medium-com-amanhimself-basic-navigation-in-ionic-applications-ecb199cdf15b'\n---\n\n> [Originally Published at Hackernoon.com](https://medium.com/hackernoon/https-medium-com-amanhimself-basic-navigation-in-ionic-applications-ecb199cdf15b)\n\nNavigation in Ionic does not work using normal routing like you might have done in some of the client side web frameworks, especially when compared to browser based navigation. It uses the terminology of `pages` which I find is more generalised and correctly named as compared Ionic version 1's `states`. This approach is quite similar to navigation in a native mobile application.\n\nPages are _pushed_ and _popped_ from the navigation controller a class defined whose subclass available in Ionic is `ion-nav`. The logic here is equivalent to that of a stack. The purpose of `ion-nav` is to work with the navigation stack.\n\nTo define a nav bar in an ionic app:\n\n```html\n<!--Home.html-->\n<ion-navbar>\n  <ion-title> Ionic App </ion-title>\n</ion-navbar>\n```\n\nInside the typescript file associated to above HTML code, we will have access to Navigation Controller.\n\n```ts\n// home.ts\nimport { Component } from '@angular/core';\nimport { NavController } from 'ionic-angular';\n\n@Component({\n  selector: 'page-home',\n  templateUrl: 'home.html'\n})\nexport class HomePage {\n  constructor(public navCtrl: NavController) {}\n}\n```\n\nThus, we can access `NavController` and it's properties such as `push` and `pop` to navigate to a different page or back to the previous page.\n\nNote: _Deeplinking is available in Ionic with URLs but that is altogether a different topic._\n",
            "url": "https://amanhimself.dev//blog/basic-navigation-in-ionic-applications",
            "title": "Basic Navigation in Ionic Applications",
            "summary": "Basic Navigation in Ionic Applications",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/how-to-use-font-awesome-in-an-ionic-application",
            "content_html": "---\ndate: '2017-10-18'\ntitle: 'How to use Font Awesome in an Ionic Application'\nthumbnail: '/thumbnails/ionic.png'\nslug: 'how-to-use-font-awesome-in-an-ionic-application'\ntag: 'ionic'\ncanonicalUrl: 'https://medium.com/hackernoon/how-to-use-font-awesome-in-an-ionic-application-31638ed3f77d'\n---\n\nThere is an element of confusion when it comes to use FontAwesome in an Ionic Application. To include this fonts library in Ionic needs a bit of configuration and this step by step guide will provide just that.\n\n### Bootstrap an Ionic Application\n\nCreate a new Ionic application or you can follow these steps to include FontAwesome in your Ionic application. Nothing will break down.\n\n```shell\n$ ionic start ionic-use-fontawesome\n```\n\nNow, install the FontAwesome package from `npm` and save it in the app's dependencies:\n\n```shell\n$ npm install font-awesome --save\n```\n\nType the above in the root folder of your app. This will add the `font-awesome` folder under `node_modules`. The `--save` option will include the package inside the dependencies section of `package.json` file.\n\n### Include the fonts\n\nNow wander to the `src/index.html` file and add the following `link` tag just above `build/main.css`:\n\n```html\n<link rel=\"stylesheet\" href=\"assets/css/font-awesome.min.css\" />\n<link href=\"build/main.css\" rel=\"stylesheet\" />\n```\n\n### Add a Custom Copy Script\n\nIonic includes a copy script file that is called during the build process when the command `ionic serve` executes and it is responsible for moving specific and required resources from `node_modules` to the `www` folder such as ionicons.\n\nThe location of this script file is under `node_modules` folder:\n\n<img src='https://cdn-images-1.medium.com/max/800/0*samQXT4FoWTgUXK1.png' />\n\nCopy this file and paste in inside a new directory called `config` under the root directory of your Ionic application. Open the file and add fontawesome entries at the bottom of this file.\n\n```js\ncopyFontawesomeFonts: {\n    src: ['{{ROOT}}/node_modules/font-awesome/fonts/**/*'],\n    dest: '{{WWW}}/assets/fonts'\n  },\n  copyFontawesomeCss: {\n    src: ['{{ROOT}}/node_modules/font-awesome/css/font-awesome.min.css'],\n    dest: '{{WWW}}/assets/css'\n  }\n```\n\n### Include Custom Copy Script in package.json\n\nWe must include this custom script inside our `package.json` file to override the one where we copied the original file from. Open the `package.json` file and add this json code:\n\n```json\n\"config\": {\n    \"ionic_copy\": \"./config/copy.config.js\"\n  }\n```\n\nThat’s it in the configuration part.\n\n### Use FontAwesome\n\nTo implement FontAwesome in this or any Ionic application after the above configuration, we try adding some fonts on our pre-generated home page.\n\n```html\n<ion-header>\n  <ion-navbar color=\"secondary\">\n    <ion-title> FontAwesome Icons </ion-title>\n  </ion-navbar>\n</ion-header>\n\n<ion-content padding>\n  <ion-list>\n    <ion-item>\n      <i class=\"fa fa-battery-empty\" style=\"color: red;\"></i> Battery Level\n      Empty\n    </ion-item>\n    <ion-item> <i class=\"fa fa-battery-1\"></i> Battery Level 1 </ion-item>\n    <ion-item> <i class=\"fa fa-battery-2\"></i> Battery Level 2 </ion-item>\n    <ion-item> <i class=\"fa fa-battery-3\"></i> Battery Level 3 </ion-item>\n    <ion-item>\n      <i class=\"fa fa-battery-4\" style=\"color: green;\"></i> Battery Level 4\n    </ion-item>\n  </ion-list>\n</ion-content>\n```\n\n<img src='https://cdn-images-1.medium.com/max/800/0*RnPachma2AAxR_SY.png' />\n\nThere are more than 675 icons available in FontAwesome and I think a combination of both Ionicons and FontAwesome will be enough for some the applications out there. You can even style them, change their `font-size` and color as per your needs.\n\n[**_Full source code at this Github Repository_**](https://github.com/amandeepmittal/ionic-use-font-awesome)\n\n[Originally Published at Hackernoon.com](https://medium.com/hackernoon/how-to-use-font-awesome-in-an-ionic-application-31638ed3f77d)\n",
            "url": "https://amanhimself.dev//blog/how-to-use-font-awesome-in-an-ionic-application",
            "title": "How to use Font Awesome in an Ionic Application",
            "summary": "How to use Font Awesome in an Ionic Application",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/what-is-ionic",
            "content_html": "---\ndate: '2017-10-12'\ntitle: 'What is Ionic?'\nthumbnail: '/thumbnails/ionic.png'\nslug: 'what-is-ionic'\ntag: 'ionic'\ncanonicalUrl: 'https://medium.com/hackernoon/what-is-ionic-c1da6eab0d8a'\n---\n\nIonic is an open source, front-end SDK for developing Hybrid Mobile Applications using web technologies such as HTML, CSS and JavaScript. It provides mobile optimised web technology based components as well as native APIs using Cordova and Ionic Native.\n\nIonic with it’s latest version, is performance efficient using minimal DOM manipulation. Angular also plays a major role in increasing the performance of an Ionic application.\n\nIt has it’s own command line interface tool that is really helpful to scaffold and develop an application and majorly in avoid writing boilerplate code, thus, saving precious time.\n\n### Development Setup for Ionic\n\n### Nodejs and npm\n\nTo develop and run Ionic apps, we need Nodejs, most importantly, because Ionic uses Node’s CLI to build tasks and generate resources. Navigate to [Nodejs official website](https://nodejs.org/) to download Nodejs and it’s package manager: `npm`.\n\nTo check of Nodejs is installed correctly, in your terminal window:\n\n```shell\n$ node -v\nv6.11.0\n\n$ npm -v\n3.10.10\n```\n\nnpm is a Package Manager that is used to download almost every dependency in an Ionic Project.\n\n### TypeScript\n\nNext step is to install TypeScript compiler.\n\n```shell\n$ npm install -g typescript\n\n# After installtion, to check if installed correctly:\n$ tsc -v\nVersion 2.3.4\n```\n\n### Install Cordova and Ionic CLI\n\n```shell\n$ npm install -g cordova ionic\n```\n\nVerify your installation by:\n\n```shell\n$ cordova -v\n7.0.1\n\n$ ionic info\nglobal packages:\n\n    @ionic/cli-utils : 1.3.0\n    Ionic CLI        : 3.3.0\n\nSystem:\n\n    Node       : v6.11.0\n    OS         : macOS Sierra\n    Xcode      : Xcode 8.1 Build version 8B62\n    ios-deploy : not installed\n    ios-sim    : not installed\n```\n\n### Platfrom Guides\n\nTo install platform such as iOS and espcially android, I will want you to refer the official guidelines:\n\n- for iOS: [Cordova iOS Platform Guide](https://cordova.apache.org/docs/en/latest/guide/platforms/ios/)\n- for android: [Cordova android Platform Guide](https://cordova.apache.org/docs/en/latest/guide/platforms/android/)\n\n[Originally Published at Hackernoon.com](https://medium.com/hackernoon/what-is-ionic-c1da6eab0d8a)\n",
            "url": "https://amanhimself.dev//blog/what-is-ionic",
            "title": "What is Ionic?",
            "summary": "What is Ionic?",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/introduction-to-hybrid-mobile-apps",
            "content_html": "---\ndate: '2017-10-05'\ntitle: 'Introduction to Hybrid Mobile Apps'\nthumbnail: '/thumbnails/ionic.png'\nslug: 'introduction-to-hybrid-mobile-apps'\ntag: 'ionic'\ncanonicalUrl: 'https://medium.com/hackernoon/introduction-to-hybrid-mobile-apps-c97720b30557'\n---\n\n### What is a Hybrid Mobile App?\n\n> _Hybrid application is a type of mobile application that uses browser window to display its interface._\n\nA hybrid mobile application is built with HTML, CSS and JavaScript and is contained in a native wrapper so that it can be installed on a mobile device. This can be done without having to learn the native programming languages (e.g. Swift, Java).\n\nIt does mean that there is one codebase for all different platforms such iOS, and android.\n\nThis comes under the classification of types of mobile applications that consists of three types:\n\n- Native: developed using platform specific programming language such as Objective C or Java\n- Mobile Websites: developed using web technologies such as HTML, CSS & JavaScript and are accessible only through mobile web browser. They are actually web applications.\n- Hybrid: cross-platform and have access to native APIs (mostly through plugins)\n\nFor example, an architecture of Hybrid Mobile application developed using Ionic Framework consists of two concepts that one must be familiar with ASAP: WebView & Apache Cordova.\n\n### What is a WebView?\n\nThink it of as a browser that runs inside the scope of a mobile application using a framework such as Ionic that mimics the native UI. This browser implements code written in HTML, CSS and JavaScript.\n\nThe application on a specific mobile operating system runs via tool like [Cordova](https://cordova.apache.org/). It provides APIs written in JavaScript to interact with Native features of mobile device such as access to camera or a microphone.\n\nWebView communicates with Cordova’s APIs which then further communicates with mobile devices.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*hdwWntqxD-qOL8vf87DmAQ.png' />\n\nWebViews are so common these days that you can build desktop applications using [Electron](http://electron.atom.io/).\n\n### Why To Go Hybrid?\n\nBefore answering this question mysellf, I think you should read [_Myths around Hybrid Mobile Applications?_](https://devdactic.com/myth-hybrid-development/) written by Simon of [Devdatic.com](https://devdactic.com/).\n\nThis will answer the question above and along with it, my POV is that if you already know web development and or have experience with frameworks like Angular, or React, opting for Hybrid mobile development is a good way to expand your skills and take leverage of your current coding skills. After all, I love creating stuff and for me this is a great start.\n\n### Alternatives\n\nThere are few alternates/frameworks available in the world of Hybrid Development. One of them is [Ionic Framework](https://ionicframework.com/) and with its next release earlier this year, it provides better performance for the hybrid apps. It also has a huge and helpful community to help you out whenever you get stuck.\n\nOther options which I haven’t tried yet but think are worth mentioning include compile-to-native frameworks like [React Native](https://facebook.github.io/react-native/) and [NativeScript](https://www.nativescript.org/).\n\n[Originally Published at Hackernoon.com](https://medium.com/hackernoon/introduction-to-hybrid-mobile-apps-c97720b30557)\n",
            "url": "https://amanhimself.dev//blog/introduction-to-hybrid-mobile-apps",
            "title": "Introduction to Hybrid Mobile Apps",
            "summary": "Introduction to Hybrid Mobile Apps",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/remove-node-modules-recursively",
            "content_html": "---\ndate: '2017-09-10'\ntitle: 'Remove node_modules Recursively'\nthumbnail: '/thumbnails/node.png'\nslug: 'remove-node-modules-recursively'\ntag: 'nodejs'\ncanonicalUrl: 'https://amanhimself.dev/blog/remove-node-modules-recursively/'\n---\n\n`node_modules` tend to take a lot of space in your local system especially if you work with Node.js or related frameworks (such as client side frameworks: React or Angular). They are the part and parcel of modern day JavaScript applications and workflow.\n\nEach day `npm` registry is getting around [350 million downloads](https://twitter.com/seldo/status/864298310785310720) daily, at the current time of writing this post. That's almost 2.2 billion downloads per week and you can take the calculation further.\n\nHere’s Laurie Voss [(@seldo)](https://twitter.com/seldo) [tweet](https://twitter.com/seldo/status/864298310785310720), sharing the aforementioned details:\n\n<img src='https://cdn-images-1.medium.com/max/800/0*HHMm699bdI2QMoOy.jpg' />\n\nNonetheless, after all your efforts are paid of and everything is deployed and is over cloud, either Github or some deployment service you or your client prefers, I think it will be generous to remove `node_modules` that take useful space on our local machines (especially, Mac users with limited GigaBytes of SSD).\n\nThere’s a simple command that you can run in your terminal either in a folder or from the root.\n\n```shell\nfind . -name \"node_modules\" -exec rm -rf '{}' +\n```\n\nThis will delete `node_modules` folder in every local repository/directory that's on your system so take precaution or exclude those projects that you are currently working on.\n\nHowever, don’t panic. Everything can be back to normal just by going into the project’s directory and running package installing command:\n\n```shell\nnpm install\n```\n\nI have used this command earlier today it saved me up to 9 GB of space from local system over several projects that I am currently not working or are already on [Github](https://github.com/amandeepmittal).\n\nI even replaced `node_modules` with `bower_components` to do the same thing:\n\n```shell\nfind . -name \"bower_components\" -exec rm -rf '{}' +\n```\n",
            "url": "https://amanhimself.dev//blog/remove-node-modules-recursively",
            "title": "Remove node_modules Recursively",
            "summary": "Remove node_modules Recursively",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/setup-nodemon-to-auto-restart-nodejs-application-server",
            "content_html": "---\ndate: '2017-09-10'\ntitle: 'Setup Nodemon to auto restart Nodejs application server'\nthumbnail: '/thumbnails/node.png'\nslug: 'setup-nodemon-to-auto-restart-nodejs-application-server'\ntag: 'nodejs'\ncanonicalUrl: 'https://medium.com/hackernoon/setup-nodemon-to-auto-restart-nodejs-application-server-8d8993b7dfd9'\n---\n\nManually restarting Node.js application is a tiring and tedious job. [Nodemon](https://www.npmjs.com/package/nodemon) is the best solution available to autorestart a nodejs app server in development mode.\n\n### Step 1\n\nOrganize the source directory `src` and initiate it with an `app.js` or `index.js` or `server.js` or any other convention you use to bootstrap a Node.js server.\n\nUpdate the `package.json` file accordingly by adding a `start` script.\n\n```json\n{\n  \"name\": \"nodemon-auto-restart\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"node src/index.js\"\n  },\n  \"keywords\": [],\n  \"author\": \"Aman Mittal <amandeepmittal@live.com> (http://amandeepmittal.github.io/)\",\n  \"license\": \"MIT\"\n}\n```\n\n### Step 2\n\nAdd `express` or any other framework as dependency to bootstrap a minimal server.\n\nCode for a minimal server:\n\n```js\n'use strict';\n\nconst express = require('express');\nconst app = express();\n\napp.use('/', (req, res) => {\n  res.status(200).send('Hello World!');\n});\n\napp.listen(3000);\n```\n\nIn first terminal window start the server:\n\n```shell\n$ npm run start\n> node src/index.js\n```\n\nIn second terminal window, request the url to test if the api is working and to see the response message:\n\n```shell\n$ curl -X GET http://localhost:3000/\nHello World!\n```\n\nNow if I change the response message, I have to restart the server to get the desired result:\n\n```js\napp.use('/', (req, res) => {\n  res.status(200).send('Lorem Ipsum');\n});\n```\n\nUse `Ctrl + C` to stop the currently running server and restart it by using the same command before: `npm run start`.\n\nUsing the curl command again from terminal window we get the desired result:\n\n```shell\ncurl -X GET http://localhost:3000/\nLorem Ipsum\n```\n\nThis whole process is repetitive will slow your development of any package or application. Better solution is to use `nodemon`.\n\n### Step 3\n\nAdd nodemon as `devDependency`:\n\n```shell\n$ npm i -D nodemon\n```\n\n```json\n{\n  \"name\": \"nodemon-auto-restart\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"node src/index.js\"\n  },\n  \"keywords\": [],\n  \"author\": \"Aman Mittal <amandeepmittal@live.com> (http://amandeepmittal.github.io/)\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"express\": \"4.15.3\"\n  },\n  \"devDependencies\": {\n    \"nodemon\": \"1.11.0\"\n  }\n}\n```\n\n### Step 4\n\nMake another script `dev` under npm scripts in `package.json` file:\n\n```json\n{\n  \"scripts\": {\n    \"start\": \"node src/index.js\",\n    \"dev\": \"nodemon --watch src src/index.js\"\n  }\n}\n```\n\nNow run `$ npm run dev` and request using curl command, we will see the last familiar result:\n\n```shell\ncurl -X GET http://localhost:3000/\nLorem Ipsum\n```\n\nIf I change the response message in `index.js` file back to `Hello World`, this time I don't I have to restart the server since `nodemon` is watching for the changes using inside the src directory, through its `--watch`parameter. If I use the curl command again, the result is familiar with the update:\n\n```shell\ncurl -X GET http://localhost:3000/\nHello World\n```\n\nOne can verify by observing the log messages in the terminal window where nodemon is running:\n\n```shell\n$ npm run dev\n\n> nodemon-auto-restart@1.0.0 dev /Users/amandeepmittal/github/nodemon-auto-restart\n> nodemon --watch src src/index.js\n\n[nodemon] 1.11.0\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching: /Users/amandeepmittal/github/nodemon-auto-restart/src/**/*\n[nodemon] starting `node src/index.js`\n[nodemon] restarting due to changes...\n[nodemon] starting `node src/index.js`\n```\n\nTo stop the nodemon process, use `Ctrl + C`.\n\nFull Source at [this Github Repository](https://github.com/amandeepmittal/nodemon-auto-restart).\n\n[Originally Published at Hackernoon.com](https://medium.com/hackernoon/setup-nodemon-to-auto-restart-nodejs-application-server-8d8993b7dfd9)\n",
            "url": "https://amanhimself.dev//blog/setup-nodemon-to-auto-restart-nodejs-application-server",
            "title": "Setup Nodemon to auto restart Nodejs application server",
            "summary": "Setup Nodemon to auto restart Nodejs application server",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/whats-new-in-npm-5",
            "content_html": "---\ntitle: 'What’s New in npm 5?'\ndate: '2017-08-24'\nthumbnail: '/thumbnails/node.png'\nslug: 'whats-new-in-npm-5'\ntag: 'tools'\ncanonicalUrl: 'https://amanhimself.dev/blog/whats-new-in-npm-5/'\n---\n\nIn May, in the very last week, [**npm**](https://npmjs.com/) announced the new major release for the JavaScript package manager. **5.0.0**, hopefully, will be shipped with upcoming version of [**Nodejs**](https://nodejs.org/en/) **(>=8.0.0)**as well. It seems a big step towards providing better tooling with significantly improved performance as quite a lot of developers made a switch to `yarn`, just because it could download the packages from the `npm` registery at a faster rate. However, this point is debatable, so let’s not get into that.\n\n## A Peek at Major Changes\n\nSome of the major changes which I want to hightlight in this article and am eagerly looking forward to are:\n\n- `npm will --save` is available by default now. See the [demo](https://twitter.com/maybekatz/status/859229741676625920) with your own eyes.\n- Running `npm` while offline will no longer insist on retrying network requests. npm will now immediately fall back to cache if possible, or fail.\n- `--cache-min` and `--cache-max` have been deprecated, so, existing npm caches will no longer be used.\n- A new `--prefer-offline` option will make npm skip any conditional requests for stale cache data, and only hit the network if something is missing from the cache.\n- A new `--prefer-online` option that will force npm to revalidate cached data, ignoring any staleness checks, and refreshing the cache with revalidated, fresh data.\n- A new `--offline` option will force npm to use the cache or exit. It will error with an `ENOTCACHED` code if anything it tries to install isn’t already in the cache.\n- A standardised lockfile feature is available by default and will be for cross-package-manager compatibility (`package-lock.json`), and a new format and semantics for shrinkwrap.\n- Downloads for large packages are streamed in and out of disk. npm is now able to install packages of any size without running out of memory.\n- Last, it’s a bit faster. [Demo here](https://twitter.com/maybekatz/status/865393382260056064?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed&ref_url=https%3A%2F%2Fcdn.embedly.com%2Fwidgets%2Fmedia.html%3Ftype%3Dtext%252Fhtml%26key%3Da19fcc184b9711e1b4764040d3dc5c07%26schema%3Dtwitter%26url%3Dhttps%253A%2F%2Ftwitter.com%2Fmaybekatz%2Fstatus%2F865393382260056064%26image%3Dhttps%253A%2F%2Fi.embed.ly%2F1%2Fimage%253Furl%253Dhttps%25253A%25252F%25252Fpbs.twimg.com%25252Fprofile_images%25252F848625085942349824%25252FBZtSBqtV_400x400.jpg%2526key%253Da19fcc184b9711e1b4764040d3dc5c07)\n\nHopefully, they update their docs quickly with this new update and more users like me will be able to switch or access much of these key features. For detailed look into npm5’s features have a look at their [official blog post](http://blog.npmjs.org/post/161081169345/v500) in which they have listed every other breaking change coming with the new release.\n\nTo start using the latest version of npm, you can in your terminal window or preferable shell:\n\n```shell\nnpm install -g npm@next\n\n# Or\n\nnpm install -g npm@latest\n```\n",
            "url": "https://amanhimself.dev//blog/whats-new-in-npm-5",
            "title": "What’s New in npm 5?",
            "summary": "What’s New in npm 5?",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/converting-a-buffer-to-json-and-utf8-strings-in-nodejs",
            "content_html": "---\ntitle: 'Converting a Buffer to JSON and Utf8 Strings in Nodejs'\ndate: '2017-08-10'\nthumbnail: '/thumbnails/node.png'\nslug: 'converting-a-buffer-to-json-and-utf8-strings-in-nodejs'\ntag: 'nodejs'\ncanonicalUrl: 'https://amanhimself.dev/blog/converting-a-buffer-to-json-and-utf8-strings-in-nodejs'\n---\n\nNodejs and browser based JavaScript differ because Node has a way to handle binary data even before the ES6 draft came up with `ArrayBuffer`. In Node, `Buffer` class is the primary data structure used with most I/O operations. It is a raw binary data that is allocated outside the V8 heap and once allocated, cannot be resized.\n\nBefore Nodejs v6.0, to create a new buffer you could just call the constructor function with `new` keyword:\n\n```js\nlet newBuff = new Buffer('New String');\n```\n\nTo create a new buffer instance, in latest and current stable releases of Node:\n\n```js\nlet newBuff = Buffer.from('New String');\n```\n\nThe `new Buffer()` constructor have been deprecated and replaced by separate `Buffer.from()`, `Buffer.alloc()`, and `Buffer.allocUnsafe()` methods.\n\nMore information can be read through [**official documentation**](https://nodejs.org/api/buffer.html).\n\n### Convert a Buffer to JSON\n\nBuffers can convert to JSON.\n\n```js\nlet bufferOne = Buffer.from('This is a buffer example.');\nconsole.log(bufferOne);\n\n// Output: <Buffer 54 68 69 73 20 69 73 20 61 20 62 75 66\n// 66 65 72 20 65 78 61 6d 70 6c 65 2e>\n\nlet json = JSON.stringify(bufferOne);\nconsole.log(json);\n\n// Output: {\"type\":\"Buffer\",\"data\":[84,104,105,115,32,105,\n// 115,32,97,32,98,117,102,102,101,114,32,101,120,97,109,\n// 112,108,101,46]}\n```\n\nThe JSON specifies that the type of object being transformed is a `Buffer`, and its data.\n\n### Convert JSON to Buffer\n\n```js\nlet bufferOriginal = Buffer.from(JSON.parse(json).data);\nconsole.log(bufferOriginal);\n\n// Output: <Buffer 54 68 69 73 20 69 73 20 61 20 62 75 66\n// 66 65 72 20 65 78 61 6d 70 6c 65 2e>\n```\n\n### Convert Buffer to Utf-8 String\n\n```js\nconsole.log(bufferOriginal.toString('utf8'));\n\n// Output: This is a buffer example.\n```\n\n`.toString()` is not the only way to convert a buffer to a string. Also, it by defaults converts to a utf-8 format string.\n\nThe other way to convert a buffer to a string is using `StringDecoder` core module from Nodejs API.\n",
            "url": "https://amanhimself.dev//blog/converting-a-buffer-to-json-and-utf8-strings-in-nodejs",
            "title": "Converting a Buffer to JSON and Utf8 Strings in Nodejs",
            "summary": "Converting a Buffer to JSON and Utf8 Strings in Nodejs",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/setting-up-mean-stack-with-webstorm",
            "content_html": "---\ndate: '2017-07-02'\ntitle: 'Setting up MEAN Stack with Webstorm'\nthumbnail: '/thumbnails/node.png'\nslug: 'setting-up-mean-stack-with-webstorm'\ntag: 'tools'\ncanonicalUrl: 'https://amanhimself.dev/blog/setting-up-mean-stack-with-webstorm/'\n---\n\nEver since I got interested in Node.js and started learning to program in JavaScript, both the programming language and the server side platform have been most relevant to me. Due them, I have made my first PR to an open source project on Github, heck, I even built one of my own using them (_see_ [_#100DaysOfCode_](https://github.com/freeCodeCamp/100DaysOfCode-twitter-bot)) which currently has more than 6 people actively contributing and enhancing it.\n\nWith Node.js, from quickly building server side application to build fullstack application is not much of a hassle. There are two important solutions to this:\n\n- MEAN Stack\n- Meteor.js\n\n### MEAN Stack\n\nMEAN Stack is the used to create complete web development solutions. With JavaScript it’s base, it has lot of advantages to offer and the important of all is one programming language both on server and client side. No context switching. A perfect fullstack solution for me personally.\n\nMEAN is an acronym for MongoDB, ExpressJS, AngularJS, and Node.js. So instead of learning four different programming languages, you just need to know JavaScript.\n\n### Setup MEAN Stack in Webstorm\n\nI am sharing a video here which shows on how to get started with MEAN using JetBrain’s Webstorm (_A JavaScript IDE_) by [John Lindquist](https://www.youtube.com/watch?feature=player_embedded&v=JnMvok0Yks8).\n",
            "url": "https://amanhimself.dev//blog/setting-up-mean-stack-with-webstorm",
            "title": "Setting up MEAN Stack with Webstorm",
            "summary": "Setting up MEAN Stack with Webstorm",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/paginate-records-in-mysql-using-sequelize-and-nodejs",
            "content_html": "---\ndate: '2017-06-20'\ntitle: 'How to paginate records in MySQL using Sequelize and Nodejs'\nthumbnail: '/thumbnails/node.png'\nslug: 'paginate-records-in-mysql-using-sequelize-and-nodejs'\ntag: 'nodejs'\ncanonicalUrl: 'https://medium.com/hackernoon/how-to-paginate-records-in-mysql-using-sequelize-and-nodejs-a3465d12aad5'\n---\n\nOften at times, I find my self struggling with Sequelize to find a direct answer for my query. Recently, I have been working on a fullstack application in which there was a basic requirement of paginating results from backend (REST API) to the frontend. I struggled for two reasons. Firstly, coming from NoSQL background it’s hard to grasp SQL DBs. Second reason being is Sequelize documentation does not provide a clear and direct solution to this very basic abstraction. Lot of people assume things in the world of SQL databases.\n\nThus, in this post we will be talking about a basic paginating module using Sequelize, MySQL and Node.js. I am using you have some tables and records inside your MySQL database. To setup a new app and making database connection, read my post on [**Getting started with Sequelize**](https://hackernoon.com/getting-started-with-sequelize-for-nodejs-applications-2854c58ffb8c)**.**\n\n### Defining a Model\n\nI am directly jumping on `user` model definition:\n\n```js\n'use strict';\nmodule.exports = function (sequelize, DataTypes) {\n  var user = sequelize.define(\n    'user',\n    {\n      id: {\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n        type: DataTypes.INTEGER\n      },\n      username: DataTypes.INTEGER,\n      first_name: DataTypes.STRING,\n      last_name: DataTypes.STRING,\n      date_of_birth: DataTypes.STRING,\n      created: DataTypes.INTEGER,\n      updated: DataTypes.INTEGER\n    },\n    {\n      timestamps: false,\n      freezeTableName: true,\n      underscore: true\n    }\n  );\n  return user;\n};\n```\n\nI am using that we a table that contains hundred of user records that we want to display on an web application, say in the admin panel, and we want to show just 50 records at once.\n\nIn the `api/user.js` I am defining an endpoint `/:page` that will fetch number of results we need from the database.\n\n```js\nrouter.get('/:page', (req, res) => {\n  let limit = 50; // number of records per page\n  let offset = 0;\n  db.user\n    .findAndCountAll()\n    .then(data => {\n      let page = req.params.page; // page number\n      let pages = Math.ceil(data.count / limit);\n      offset = limit * (page - 1);\n      db.user\n        .findAll({\n          attributes: ['id', 'first_name', 'last_name', 'date_of_birth'],\n          limit: limit,\n          offset: offset,\n          $sort: { id: 1 }\n        })\n        .then(users => {\n          res\n            .status(200)\n            .json({ result: users, count: data.count, pages: pages });\n        });\n    })\n    .catch(function (error) {\n      res.status(500).send('Internal Server Error');\n    });\n});\n```\n\n`findAndCountAll` is the model for searching multiple records in the database and it returns both the data required and the count of elements in that table. The above query will get 50 user records at once until the next page is called to fetch the next 50 records. `limit` and `offset` are required in queries related to pagination in which `limit` fetches the number of rows based on the query whereas `offset` is used to skip the number of rows in the database table.\n\n> [Originally Published at Hackernoon.com](https://medium.com/hackernoon/how-to-paginate-records-in-mysql-using-sequelize-and-nodejs-a3465d12aad5)\n",
            "url": "https://amanhimself.dev//blog/paginate-records-in-mysql-using-sequelize-and-nodejs",
            "title": "How to paginate records in MySQL using Sequelize and Nodejs",
            "summary": "How to paginate records in MySQL using Sequelize and Nodejs",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/getting-started-with-sequelize-for-nodejs",
            "content_html": "---\ntitle: 'Getting Started with Sequelize for Nodejs Applications'\ndate: '2017-05-30'\nthumbnail: '/thumbnails/node.png'\nslug: 'getting-started-with-sequelize-for-nodejs'\ntag: 'nodejs'\ncanonicalUrl: 'https://medium.com/hackernoon/getting-started-with-sequelize-for-nodejs-applications-2854c58ffb8c'\n---\n\n> [Originally Published at Hackernoon.com](https://medium.com/hackernoon/getting-started-with-sequelize-for-nodejs-applications-2854c58ffb8c)\n\n### Introduction to ORM\n\nORM or Object Relation Mapping is a process of mapping between objects and relation database systems. An ORM acts like an interface between two system. ORM provide advantages for developers from basic ones like saving time and effort and rather focusing on business logic. The code is robust instead of redundant. ORM helps in managing queries for multiple tables in an effective manner. Lastly, an ORM (like [sequelize](http://docs.sequelizejs.com/en/v3/)) is capable to connect with different databases (which comes in handy when switching from one database to another).\n\n### Getting Started with Sequelize\n\n[Sequelize](https://github.com/sequelize/sequelize) is a promise-based ORM for Node.js. Sequelize is easy to learn and has dozens of cool features like synchronization, association, validation, etc. It also has support for PostgreSQL, MySQL, MariaDB, SQLite, and MSSQL. I am assuming you have some form of SQL database service started on your machine. I am currently using MySQL.\n\n### Installation\n\nSequelize is available via npm.\n\n```shell\n$ npm install --save sequelize\n\n# And one of the following:\n$ npm install --save pg pg-hstore\n$ npm install --save mysql // For both mysql and mariadb dialects\n$ npm install --save sqlite3\n$ npm install --save tedious // MSSQL\n```\n\n### Setting up a Connection\n\nSequelize does setup a connection between the rest api/application and your SQL database. To setup basic connection between the two:\n\n```js\nconst sequelize = new Sequelize('database', 'username', 'password', {\n  host: 'localhost',\n  //choose anyone between them\n  dialect: 'mysql' | 'mariadb' | 'sqlite' | 'postgres' | 'mssql',\n\n  // To create a pool of connections\n  pool: {\n    max: 5,\n    min: 0,\n    idle: 10000\n  },\n\n  // For SQLite only\n  storage: 'path/to/database.sqlite'\n});\n```\n\n### How do I setup my Sequelize Connection?\n\nFor the sake brevity, I like to divide code into modules. After all, the Unix philosophy of [_one program/module should do one thing_](https://amandeepmittal.github.io/blog/2017/04/05/The-Node-Way-Philosophy-of-a-Platform/) is major part of the philosophy behind writing code in JavaScript (and using Node.js as a server side platform) these days.\n\nI start with `config.json`/`config.js` file in the root of my application/api folder in which I define the general constraints needed to setup the connection with database:\n\n```json\n{\n  \"development\": {\n    \"username\": \"root\",\n    \"password\": \"root\",\n    \"database\": \"articles\",\n    \"host\": \"localhost\",\n    \"dialect\": \"mysql\"\n  },\n  \"test\": {\n    \"username\": \"root\",\n    \"password\": \"root\",\n    \"database\": \"articles\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\"\n  },\n  \"production\": {\n    \"username\": \"root\",\n    \"password\": \"root\",\n    \"database\": \"articles\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\"\n  }\n}\n```\n\nYou can do this in your `.env` file if you like to follow that pattern. For more info on this see `[dotenv](https://www.npmjs.com/package/dotenv)`.\n\nAfter defining the configuration variables, in my `models/` folder or where I define schema of tables in the database at application level, I create the connection in an `index.js` file:\n\n```js\n'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst Sequelize = require('sequelize');\nconst basename = path.basename(module.filename);\nconst env = process.env.NODE_ENV || 'development';\nconst config = require(__dirname + '/config.json')[env];\nconst db = {};\n\nif (config.use_env_variable) {\n  const sequelize = new Sequelize(process.env[config.use_env_variable]);\n} else {\n  const sequelize = new Sequelize(\n    config.database,\n    config.username,\n    config.password,\n    config\n  );\n}\n\nfs.readdirSync(__dirname)\n  .filter(file => {\n    return (\n      file.indexOf('.') !== 0 && file !== basename && file.slice(-3) === '.js'\n    );\n  })\n  .forEach(file => {\n    const model = sequelize['import'](path.join(__dirname, file));\n    db[model.name] = model;\n  });\n\nObject.keys(db).forEach(modelName => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\nsequelize\n  .authenticate()\n  .then(() => {\n    console.log('Connection has been established successfully.');\n  })\n  .catch(err => {\n    console.log('Unable to connect to the database:', err);\n  });\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\n// Import Models such that I can use them in the api just by importing 'db'\ndb.user = require('./user')(sequelize, Sequelize);\ndb.admin = require('./admin')(sequelize, Sequelize);\ndb.articles = require('./articles')(sequelize, Sequelize);\n\nmodule.exports = db;\n```\n\nIt’s important to notice that I am exposing `db` object which contains every model/table schema definition. From now, I just have to import the `db` object to apply operations on specific database tables using it.\n\nThis setup can be auto-generated with the help of [Sequelize CLI](https://github.com/sequelize/cli) tool that helps in bootstrapping a new project in an effective manner (like the above) and handle database migrations directly from the terminal.\n\n### Conclusion\n\nSequelize is feature rich ORM for Node.js. It has a documentation that at times may not provide direct solutions to your problems but there always Github issues for that. What I like about is its Promise based control flow. Coming from NoSQL background (and using MongoDB), understanding Sequelize really took less time. Most of the query based models are quite similar to that in MongoDB (especially the CRUD operations). I am looking for a brighter, more improved documentation and ease of support from Sequelize.\n",
            "url": "https://amanhimself.dev//blog/getting-started-with-sequelize-for-nodejs",
            "title": "Getting Started with Sequelize for Nodejs Applications",
            "summary": "Getting Started with Sequelize for Nodejs Applications",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/how-to-use-eslint-in-node-js-applications",
            "content_html": "---\ntitle: 'How to use ESLint in Node.js Applications'\ndate: '2017-04-28'\nthumbnail: '/thumbnails/node.png'\nslug: 'blog/how-to-use-eslint-in-node-js-applications'\ntag: 'nodejs'\ncanonicalUrl: 'https://medium.com/hackernoon/how-to-use-eslint-in-node-js-applications-cc4b2298ce55'\n---\n\n> [Originally Published at Hackernoon.com](https://medium.com/hackernoon/how-to-use-eslint-in-node-js-applications-cc4b2298ce55)\n\nESLint is an open source JavaScript linting utility that help you overcome developer errors as JavaScript is loosely-typed language. There are quite a few options such as JSHint and JSCS in Javascript community for code linting and this post doesn’t suggest that you cannot use them.\n\nESLint is designed to have all rules completely pluggable. That’s one of the primary reasons it came into existence. It allows developers to create their own linting rules. Every rule provided in the [ESLint official guide](http://eslint.org/docs/user-guide) is standalone rule and a developer at any point can decide whether to use a specific rule or not.\n\n### Installing\n\n_Note_: You must have Node.js installed in order to access ESLint via it’s package manager `npm`.\n\nFor local installation to a project directory:\n\n```shell\nnpm install eslint --save-dev\n```\n\nFor a global installation in your working system:\n\n```shell\nnpm install eslint -g\n```\n\nESLint will now be available via `eslint` command in your terminal.\n\n### Configuration\n\nEasiest way to configure it to setup a `.eslintrc` JSON file where are all the linting rules can be described.\n\nAn example of `.eslintrc`:\n\n```json\n{\n  \"env\": {\n    \"node\": 1,\n    \"browser\": 1\n  },\n  \"globals\": {\n    \"exampleGlobalVariable\": true\n  },\n  \"rules\": {\n    \"eqeqeq\": 1\n  },\n  \"plugins\": []\n}\n```\n\nIf you installed eslint globally, you can also generate config file using:\n\n```shell\neslint --init\n```\n\nOther case, if you have installed it locally to a project, you will need to type in your terminal:\n\n```shell\n./node_modules/.bin/eslint --init\n```\n\nIn both cases, you will be prompted with set of basic questions to generate `.eslintrc` file.\n\n<img src='https://cdn-images-1.medium.com/max/800/0*RMPR1vjmB6jsHtHw.png' />\n\nAn example of file generated after above prompt:\n\n```json\n{\n  \"env\": {\n    \"browser\": true,\n    \"commonjs\": true\n  },\n  \"extends\": \"eslint:recommended\",\n  \"rules\": {\n    \"indent\": [\"error\", \"tab\"],\n    \"linebreak-style\": [\"error\", \"unix\"],\n    \"quotes\": [\"error\", \"single\"],\n    \"semi\": [\"error\", \"never\"]\n  }\n}\n```\n\nFor detailed information on Configuration, [read here](http://eslint.org/docs/user-guide/configuring).\n\n### Rules\n\nRules in ESLint are added individually. No rules are enforced by default. You have to specify rules explicitly, then only it will be enabled for the linting process.\n\nYou can find a complete list of rules in the [official documentation here](http://eslint.org/docs/rules/)\n\nAfter deciding which rules to include, you have to set there error levels. Each error level can be defined as following:\n\n- `0` - Turn the rule off\n- `1` - Turn the rule on as a warning\n- `2` - Turn the rule on as an error\n\nThe difference between an error and a warning is the exit code that eslint will have when it finishes. If any errors are found, eslint will exit with a `1` exit code, otherwise it will exit with a `0`. If you are linting within a build step this allows you to control which rules should \"break your build\" and which ones should be considered as warnings.\n\nLearn how to [configure rules in detail here](http://eslint.org/docs/user-guide/configuring#configuring-rules).\n\n### Environments\n\nThe code you are writing might be suitable for a particular environment such as, you might be writing a REST API in Node.js application using Express Framework (Sinatra) and the frontend of that application is going to be built in AngularJS. Two different projects, two different environments and both can have separate eslint configurations in one file even though the client and the server are under one project directory that is been considered as root of your project.\n\nHow is it done? By setting the environment id to true in the `\"env\"` section of `.eslintrc`.\n\n### Linting\n\nESLint comes with a command line interface (CLI) to lint your files or directory.\n\n```js\neslint file.js\neslint dir/\n```\n\nThe output generated will be grouped by file, and will specify the `line:column` number, warning/error, reason for the error, and the name of the rule for each failure.\n\n### Use ESLint with your preferred Coding Style\n\nESLint personally does not promote any coding style. You can setup `.eslintrc` file to enforce coding style using [style rules](http://eslint.org/docs/rules/#stylistic-issues) that you like.\n\nYou can also use ESLint with Style guides such as [JavaScript Standard Style](http://standardjs.com/). You have to use extra plugin for that. The full guide can be found here [https://github.com/feross/eslint-config-standard](https://github.com/feross/eslint-config-standard).\n\nTo add a plugin to `.eslintrc`:\n\nSome plugins for popular libraries: [Angular](https://www.npmjs.com/package/eslint-plugin-angular) | [React](https://www.npmjs.com/package/eslint-plugin-react)\n\nAnother plugin, I find very useful is [one variable per var](https://www.npmjs.com/package/eslint-plugin-one-variable-per-var) just to maintain code consistency over a large/open-source project.\n",
            "url": "https://amanhimself.dev//blog/how-to-use-eslint-in-node-js-applications",
            "title": "How to use ESLint in Node.js Applications",
            "summary": "How to use ESLint in Node.js Applications",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/how-to-mock-data-for-nodejs-applications-using-fakerjs",
            "content_html": "---\ntitle: 'How to Mock Data for Node.js Applications using faker.js'\ndate: '2017-04-01'\nthumbnail: '/thumbnails/node.png'\nslug: 'how-to-mock-data-for-nodejs-applications-using-fakerjs'\ntag: 'nodejs'\ncanonicalUrl: 'https://hackernoon.com/how-to-mock-data-for-node-js-applications-using-faker-js-b1f4c0e78102'\n---\n\n> [Originally Published at Hackernoon.com](https://hackernoon.com/how-to-mock-data-for-node-js-applications-using-faker-js-b1f4c0e78102)\n\nWhen we start to build an application, we generally do not want to worry much about data. To create a database and fill it with sample data seems much of a hassle to me personally. I instead focus more on creating RESTful API and the front end of the application when I am prototyping.\n\nHowever, this doesn’t mean I don’t pay attention to data organization in the database. It’s important to have schemas of collections and documents or any other way you want to organize your data. With this aspect complete, it clarifies _what_ and _how_ questions when creating APIs.\n\nIn a recent scenario, building a prototype of an E-Commerce web application for a client, I found myself in a similar situation. I had a deadline to deliver the prototype with a maximum number of functionalities checked required by the client. After settling on how to architecture database’s schemas, I went on searching​ and finding a gem to solve this issue: **faker.js.**\n\n### Enter faker.js\n\nIt’s a wonderful node module to create fake/mock data when you face a similar situation. fakerjs has its own API, and it’s huge. All credit goes to [**Marak**](https://twitter.com/marak), who built it. It has a vast API for almost every use case with an excellent [_documentation_ that can help you get familiar in minutes on Github.](https://github.com/marak/Faker.js/)\n\nLet’s consider a test case where I want some _a user_ to have the following amount of fields:\n\n- name\n- email\n- website\n- address\n- bio\n- image/avatar\n\n```js\nconst faker = require('faker');\n\nconst User = {\n  name: faker.name.findName(),\n  email: faker.internet.email(),\n  website: faker.internet.url(),\n  address:\n    faker.address.streetAddress() +\n    faker.address.city() +\n    faker.address.country(),\n  bio: faker.lorem.sentences(),\n  image: faker.image.avatar()\n};\n\nmodule.exports = User;\n```\n\n<img src='https://cdn-images-1.medium.com/max/1200/1*t8BjRlFjuUnbf0iXl-FZCQ.png' />\n\nThat’s it. This is how you mock data using faker.js. It’s quick, simple to setup and no hassle at all. You just have to add it to your `npm` dependencies:\n\n```shell\nnpm install faker --save\n```\n\n#### faker.js Data\n\nList of data that can generate faker.js:\n\n- address\n- commerce\n- company\n- date\n- finance\n- hacker\n- helpers\n- image\n- internet\n- lorem\n- name\n- phone\n- random\n- system\n\nEach element has many sub-items that you can check [here](https://github.com/Marak/faker.js) in the documentation.\n\nAnother good thing about Faker I like is that it’s not only restricted to server-side JavaScript only. You can mock data for browser JavaScript too. A little snippet from the documentation shows how to do this:\n\n```html\n<script src=\"faker.js\" type=\"text/javascript\"></script>\n<script>\n  var randomName = faker.name.findName(); // Caitlyn Kerluke\n  var randomEmail = faker.internet.email(); // Rusty@arne.info\n  var randomCard = faker.helpers.createCard(); // random contact card containing many properties\n</script>\n```\n\nThis API will help you to prototype your JavaScript/Node.js applications at a faster rate. Not only that, you can easily mock your TDD/BDD tests when creating a RESTful API utilizing this library.\n\nFor full source code at [this Github Repository](https://github.com/amandeepmittal/fakerjs)\n",
            "url": "https://amanhimself.dev//blog/how-to-mock-data-for-nodejs-applications-using-fakerjs",
            "title": "How to Mock Data for Node.js Applications using faker.js",
            "summary": "How to Mock Data for Node.js Applications using faker.js",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/getting-started-with-ionic-framework",
            "content_html": "---\ntitle: 'Getting Started with Ionic Framework'\ndate: '2017-02-26'\nthumbnail: '/thumbnails/ionic.png'\nslug: 'getting-started-with-ionic-framework'\ntag: 'ionic'\ncanonicalUrl: 'https://hackernoon.com/getting-started-with-ionic-framework-an-overview-6725b687779b'\n---\n\n> [Originally Published at Hackernoon.com](https://hackernoon.com/getting-started-with-ionic-framework-an-overview-6725b687779b)\n\nI have been getting familiar with [Ionic Framework](http://ionicframework.com/) in past recent days. To start, I had a question in mind which might be similar to yours. **_Why choose Ionic Framework?_**\n\nThe reasons I chose Ionic as my next framework to elaborate my skill-set, are listed here:\n\n- Ionic is all about **HTML**, **CSS**, **JavaScript**\n- Since I have been following JavaScript closely in past months and recently worked on a freelance project using technologies and framework (I am familiar with) such as Node.js, Express.js & **AngularJS.**\n- To build mobile applications using my current knowledge (that is of AngularJS)\n- Learning curve is if you are familiar with AngularJS\n- Ionic is cross-platform\n- has its own UI components that feels _Bootstrapish_ and is easy to customize\n- It’s open-source and has an active ever-growing community ([with the release of version 2, especially](http://blog.ionic.io/announcing-ionic-2-0-0-final/))\n\nWith above “list of reasoning” I am also including few more points that Ionic provides:\n\n- has its own Command Line interface (CLI) to _scaffold, develop_ and _deploy_ applications.\n- it gives access to mobile device APIs through two options: ngCordova & ionic-native\n- application written in Ionic can be converted for a specific device (such as Android & iOS) using Apache’s Cordova.\n\nWith all that said, I am going to briefly discuss few things in this article that you should know of if/when you are planning to start developing applications using _Ionic Framework_.\n\n### Hybrid Mobile Architecture\n\nDid you think I am going to start this article by discussing some [**myths around Hybrid Mobile Applications**](https://devdactic.com/myth-hybrid-development/)? Well I am not because there’s already an awesome article written by Simon on [DevDactic.com](https://devdactic.com)\n\nThe genesis of Hybrid Mobile applications is to understand _what an Hybrid application is?_\n\n> Hybrid application is a type of mobile application that uses browser window to display its interface.\n\nThis comes under the classification of **types of mobile applications** that consists of three types:\n\n- Native: developed using platform specific programming language such as Objective C or Java\n- Mobile Websites: developed using web technologies such as HTML, CSS & JavaScript and are accessible only through mobile web browser. They are actually web applications.\n- Hybrid: cross-platform and have access to native APIs (mostly through plugins)\n\nArchitecture of Hybrid Mobile applications developed using Ionic Framework consists of two concepts that one must be familiar with ASAP: WebView & Apache Cordova.\n\n### What is WebView?\n\nThink it of as a browser that runs inside the scope of a mobile application using Ionic. This browser implements code written in HTML, CSS and JavaScript.\n\nThe application on a specific mobile operating system runs via tool like [Cordova](https://cordova.apache.org/). It provides APIs written in JavaScript to interact with Native features of mobile device such as access to camera or a microphone.\n\nWebView communicates with Cordova’s APIs which then further communicates with mobile devices.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*hdwWntqxD-qOL8vf87DmAQ.png' />\n\nWebViews are so common these days that you can build desktop applications using [Electron](http://electron.atom.io/).\n\n_For detailed information on Hybrid Mobile Applications, I would like you to consider reading John Bristowe’s_ [_article_](http://developer.telerik.com/featured/what-is-a-hybrid-mobile-app/)_._\n\n### Pre-requisites for developing an Ionic Application?\n\nYou will need these tools as a part of your environment setup with your Operating System.\n\n- [Node.js](http://www.nodejs.org)\n\nEven if you do not use Node.js as a part of your development environment, to use Ionic you have to install it to get access to command line tools such as Bower, Gulp, and Ionic’s own Command Line Interface using its Node’s package manager: [_npm_](http://www.npmjs.com).\n\n#### Installing Ionic\n\nIonic is a collection of Angular.js, UI Router, Angular directives, Angular services, JS utilities, and mobile focused CSS styles. These are bundled together as ionic.bundle.js and ionic.css.\n\nFrom your command line:\n\n`$ npm install cordova ionic -g`\n\nThis will install a tool you are going make use of: Ionic CLI which is a command line utility.\n\nFor detailed information on what it can do:\n\n`$ ionic --help` which list all the things tasks you can perform using this utility.\n\n### Ionic App Development Process\n\nAfter installing the command line utility, you can start by creating an app using Ionic’s starter templates. Ionic provides three starter templates:\n\n- blank `ionic start myApp blank`\n- tabs `ionic start myApp tabs`\n- sidemenu tart `myApp sidemenu`\n\nTo get a list of all Ionic templates available type in terminal:\n\n`$ ionic start -l`\n\n`ionic start` is the command that is used to scaffold an Ionic application.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*zYrkeFhqj6-YCDaF0LcWMg.png' />\n\n#### Scaffolding an Ionic Application\n\n`$ ionic start -a \"Example\" -i app.example example blank`\n\nThis command can help you scaffold an Ionic Project with following options:\n\n- `-a \"Example\"` human readable name of application\n- `-i app.example` application ID\n- `example` project folder’s name\n- `blank` ionic template\n\nThis steps allows the config file to update with application name and its ID. (We will learn more about the config file later).\n\nAfter this step, if you look closely at your terminal window, a script runs which installs six Cordova plugins mentioned `package.json` file.\n\n- `cordova-plugin-device` to get device information\n- `cordova-plugin-console` defines a global instance of `console.log()`\n- `cordova-plugin-whitelist` implements whitelist policy for navigating the application’s WebView\n- `cordova-plugin-splashscreen` it shows and hides a splash screen during the start of the application on a device\n- `cordova-plugin-statusbar` provides functions to customize the iOS and Android StatusBar\n- `ionic-plugin-keyboard` provides functions to interact with the keyboard\n\nSo now you have an Ionic project setup and you are familiar the basic elements of a project’s setup. It’s time to run the application from the command line using `ionic serve` command to run the app locally on a port.\n\n$ cd example  \n$ ionic serve\n\nIt will open a browser window in the default web browser and you will see similar to this:\n\n<img src='https://cdn-images-1.medium.com/max/800/1*JNQywRjia3Z98oF1cdwByA.png' />\n\n`ionic serve --lab` will run the app locally showing two instances of the app for iOS & Android.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*LMFf8hdbrt1zPB1EAfoNPg.png' />\n\nTo run the application deliberately on a different port number: `ionic serve -p 8080`\n\n### Ionic Project Structure\n\nFollowing is the root structure of an Ionic Project after scaffolding:\n\n<img src='https://cdn-images-1.medium.com/max/800/1*k9wGw8Kg_lr2yjaGWIefPA.png' />\n\nI will start describing what each folder/file in the root folder of the app contains, from top to bottom.\n\n- `hooks` consists of scripts that are executed when a specific Cordova task is performed\n- `plugins` contains all plugins that comes added to project\n- `www` ionic app code that we write to build app\n- `scss` consists base scss file (styles of ionic UI components)\n- `.bowerrc` path to directory where Bower dependencies get installed\n- `.editorconfig` default editor configuration for brevity\n- `bower.json` list of Bower dependencies\n- `config.xml` meta information needed by Cordova when converting Ionic application to platform specific. It consists of XML tags that describes the project\n- `gulpfile.js` build tasks used while developing application\n- `ionic.config.json` information regarding ionic application\n\n#### www/ Folder\n\nThis folder is the main folder of our application and its where the code of our application is written. It consists of a app startup file `index.html` which act as first page of app, `css` to define custom styles, `images` to add images to app, `js` which further consists of `app.js` where we bootstrap AngularJS framework. In this file, `ionic` is passed as dependency using [Angular Dependency Injection](https://docs.angularjs.org/guide/di). `$ionicPlatform` is the service that is injected to `run` method which enables Cordova plugins discussed earlier and the app itself.\n\nThe last folder, `lib` contain the packages/dependencies that are installed using Bower. It contains a pre-loaded dependency of Ionic and Angular files.\n\n_I guess, you now have the idea of how an Hybrid application using Ionic Framework works._\n",
            "url": "https://amanhimself.dev//blog/getting-started-with-ionic-framework",
            "title": "Getting Started with Ionic Framework",
            "summary": "Getting Started with Ionic Framework",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/migrating-from-expressjs-4-to-5",
            "content_html": "---\ndate: '2017-01-11'\ntitle: 'Migrating from Expressjs 4 to 5'\nthumbnail: '/thumbnails/node.png'\nslug: 'migrating-from-expressjs-4-to-5'\ntag: ' nodejs'\ncanonicalUrl: 'https://hackernoon.com/migrating-from-expressjs-4-to-5-156dcd80eb11'\n---\n\nExpressJS 5.0 is in alpha release stage but I believe we’ll be adding it as a dependency in our `package.json` files in matter of no time. This article gives some tips regarding the way we are writing code using this framework and how we should adapt the new changes even if we are using ExpressJS _version 4.0_.\n\nI’ll start with most common thing such as `response`.\n\nExpress 5 no longer supports the signature `res.send`, instead we should adapt using this method in this form:\n\n`res.status(statusCode).send();`\n\nWe have to set the status code before sending the response object. This new version of `res.send` is basically a chain of two methods: `res.status` & `res.send`.\n\nWith that mind, ExpressJS 5 deprecates `res.send(statusCode)` method where `statusCode` is the number representing the HTTP response header status code. To send just the statusCode, that is, without sending the response object, we can use `res.sendStatus(statusCode)` method.\n\nIn similar manner, other methods that have been changed are:\n\n```js\nres.json()-- > res.status().json();\nres.jsonp()-- > res.status.jsonp();\n```\n\nAnother notable method that is going to be deprecated in next version of ExpressJS is `res.sendfile()`. Instead, we must adapt its new form, the camelCase one: `res.sendFile()` which is already been supported by the ExpressJS versions later than `4.8.x`. It comes with optional parameters that you can check them [**here**](http://expressjs.com/en/4x/api.html#res.sendFile)**.**\n\nWhether you are planning to use the alpha release of Express 5.0 or still going on with the latest versions of Express 4.0, I would suggest to start adapting these methods immediately.\n\n_The full list of changes or the official Express Migration Guide is to be found_ [here](http://expressjs.com/en/guide/migrating-5.html)**_._**\n\n[Originally Published at Hackernoon.com](https://hackernoon.com/migrating-from-expressjs-4-to-5-156dcd80eb11)\n",
            "url": "https://amanhimself.dev//blog/migrating-from-expressjs-4-to-5",
            "title": "Migrating from Expressjs 4 to 5",
            "summary": "Migrating from Expressjs 4 to 5",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/using-bower-with-heroku",
            "content_html": "---\ntitle: 'Using Bower With Heroku'\ndate: '2016-12-29'\nthumbnail: '/thumbnails/heroku.png'\nslug: 'using-bower-with-heroku'\ntag: 'tools'\ncanonicalUrl: 'https://hackernoon.com/using-bower-with-heroku-cdc791320c88'\n---\n\n> [Originally Published at Hackernoon.com](https://hackernoon.com/using-bower-with-heroku-cdc791320c88)\n\nYes, I use [Bower](http://bower.io) to maintain front-end dependencies, mostly for my side projects. Whatever you say, Bower is good and I am too anxious to mess with npm dependencies for front-end development. Plus, I feel that maintaining front-end dependencies with Bower helps in keeping my application’s skeleton clean.\n\nSo for last two of my projects, I have been using [Heroku](http://heroku.com) for deployment. Since I am maintaining front-end dependencies using Bower, I went through [_this article_](https://devcenter.heroku.com/articles/buildpacks) which is about generating buildpacks on Heroku. I find generating buildpacks adds unnecessary complexity in the process of application deployment, at least for _rapid prototyping_. Thus, I choose a different path. Adding Bower as an npm dependency seems an easy process and doesn’t add any kind of complexity. I find it’s great only if you are using Bower for rapid prototyping JavaScript applications.\n\nAfter you are done with building your application, all you have to do is add `Bower` as an npm dependency in `package.json` file and then add a script under `npm scripts` to execute a command that will install bower dependencies before the application is deployed on Heroku.\n\nBower as dependency in `package.json` :\n\n```json\n\"dependencies\": {\n     \"bower\": \"1.8.0\"\n}\n```\n\nAnd then add a`postinstall` command in `npm scripts` :\n\n```json\n\"scripts\": {\n    \"postinstall\": \"./node\\_modules/bower/bin/bower install\"\n}\n```\n\nYou can read more about customizing [**Heroku Build Process here**](https://devcenter.heroku.com/articles/nodejs-support#customizing-the-build-process)**.**\n",
            "url": "https://amanhimself.dev//blog/using-bower-with-heroku",
            "title": "Using Bower With Heroku",
            "summary": "Using Bower With Heroku",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/node-js-twitter-bot-tutorial",
            "content_html": "---\ndate: '2016-12-25'\ntitle: 'Writing a Node.js Twitter Bot Part 1'\nthumbnail: '/thumbnails/node.png'\nslug: 'node-js-twitter-bot-tutorial'\ntag: 'nodejs'\ncanonicalUrl: 'https://community.risingstack.com/node-js-twitter-bot-tutorial/'\n---\n\nIn this tutorial, we will create a Twitter Bot with Node.js that retweets or favorites based on hashtags, and replies to users if they follow the account.\n\n## What do you need to create this bot?\n\n- You must have [Node.js](http://nodejs.org) installed on your system.\n- A Twitter Account.\n- Your bot will be using [`twit`](https://www.npmjs.com/package/twit) which is an npm module to manipulate tweets and streams, and to communicate with the [Twitter API](https://dev.twitter.com/docs).\n\n## Let’s Start\n\nSetup an empty directory and initialise it with:`$ npm init` to configure this web application with `package.json` file. Then create two new files: `bot.js` & `config.js` in that directory.\n\n`bot.js` will be our main app file in which we will be writing the source code of our Twitter Bot, and so in `package.json` edit the `main` field to:\n\n```json\n{\n  \"main\": \"bot.js\"\n}\n```\n\nYour current directory structure should look like this:\n\n```shell\nroot/project-name\n|- bot.js\n|- config.js\n|- package.json\n```\n\n## Configuring and granting permissions from Twitter API\n\nAfter logging to to your Twitter account, follow to this link: [https://apps.twitter.com/app/new](https://apps.twitter.com/app/new) to create a new application. Fill out the necessary fields in the form click on the button _Create Your Twitter Application._ After creating the application, look for `Keys and Access Tokens` under the nav-panes and click on `Generate Token Actions\\` and then copy:\n\n- Consumer Key\n- Consumer Secret\n- Access Token\n- Access Token Secret\n\nOpen the `config.js` file and paste all four values inside it. Expose those values using `module.export`:\n\n```js\n//config.js\n/\\*\\* TWITTER APP CONFIGURATION\n \\* consumer\\_key\n \\* consumer\\_secret\n \\* access\\_token\n \\* access\\_token\\_secret\n \\*/\n\nmodule.exports = {\n  consumer\\_key: '',\n  consumer\\_secret: '',\n  access\\_token: '',\n  access\\_token\\_secret: ''\n}\n```\n\nNow, the Twitter bot’s configuration is step is complete. _Please note,_ for every different application, the `consumer key`, `consumer secret`, `access_token` and `access_token_secret` will differ.\n\n## Building the bot\n\nSince the configuration step is complete, now let’s install our third requisite that is [Twitter API client for node](https://www.npmjs.com/package/twit) and will help us to communicate to Twitter API and provide an API for all necessary actions _(such as retweet and favorite a tweet)._\n\nWe will start by installing the dependency we need for our application.\n\n```shell\n$ npm install --save twit\n```\n\nAfter the dependency has finished installing, go to the `bot.js` file and require the dependency and `config.js` file.\n\n```js\nvar twit = require(’twit’);\nvar config = require(’./config.js’);\n```\n\nPass the configuration (_consumer and access tokens_) of our Twitter application in `config.js` to `twit:`\n\n```js\nvar Twitter = new twit(config);\n```\n\nSo far, so good?\n\n**PLEASE NOTE: You must refer to** `[**twit**](https://www.npmjs.com/package/twit)` [**documentation**](https://www.npmjs.com/package/twit) **for a deep reference.**\n\n#### Retweet Bot\n\nLet’s write a function expression that finds the latest tweets according to the query passed as a parameter. We will initialise a `params` object that will hold various properties to search a tweet, but most importantly `query` or `q` property that will refine our searches. Whatever value you feed in this property, our bot will search the tweets to retweet based on this criteria. You can feed this property values like a twitter handler, to monitor a specific twitter account or a #hashtag. For our example bot, we have find latest tweets on #nodejs.\n\nThis is how the functionality of the retweet bot starts:\n\n```js\nvar retweet = function() {\n  var params = {\n    q: '#nodejs, #Nodejs',\n    result\\_type: 'recent',\n    lang: 'en'\n  }\n```\n\nThe other two properties: `result_type` and `lang` are optional. On defining the `result_type: 'recent'` notifies bot to only search for the latest tweets, tweets that have occurred in the time period since our bot has started or it made the last retweet.\n\n[There is a list of parameters provided by the Twitter API](//%20for%20more%20parametes,%20see:%20https://dev.twitter.com/rest/reference/get/search/tweets).\n\nOur next step is to search for the tweets based on our parameters. For this, we will use `Twitter.get` function provided by `twit` API to GET any of the REST API endpoints. The REST API endpoint is a reference to the T[witter API endpoint](https://dev.twitter.com/docs) we are going to make a call to search for tweets. The `Twitter.get` function accepts three arguments: API endpoint, params object (defined by us) and a callback.\n\n```js\n// RETWEET BOT ==========================\n\n// find latest tweet according the query 'q' in params\nvar retweet = function () {\n  var params = {\n    q: '#nodejs, #Nodejs', // REQUIRED\n    result_type: 'recent',\n    lang: 'en'\n  };\n  // for more parametes, see: https://dev.twitter.com/rest/reference/get/search/tweets\n\n  Twitter.get('search/tweets', params, function (err, data) {\n    // if there no errors\n    if (!err) {\n      // grab ID of tweet to retweet\n      var retweetId = data.statuses[0].id_str;\n      // Tell TWITTER to retweet\n      Twitter.post(\n        'statuses/retweet/:id',\n        {\n          id: retweetId\n        },\n        function (err, response) {\n          if (response) {\n            console.log('Retweeted!!!');\n          }\n          // if there was an error while tweeting\n          if (err) {\n            console.log(\n              'Something went wrong while RETWEETING... Duplication maybe...'\n            );\n          }\n        }\n      );\n    }\n    // if unable to Search a tweet\n    else {\n      console.log('Something went wrong while SEARCHING...');\n    }\n  });\n};\n```\n\nTo post or to retweet the tweet our bot has found we use `Twitter.post()` method to _POST any of the REST API endpoints_. It also takes the same number of arguments as `Twitter.get()`.\n\nNow to automate this action we defined above, we can use JavaScript’s timer function `setInterval()` to search and retweet after a specific period of time.\n\n```js\n// grab & retweet as soon as program is running...\nretweet();\n// retweet in every 50 minutes\nsetInterval(retweet, 3000000);\n```\n\nPlease note that all JavaScript’s Timer functions take the _amount of time_ argument in milliseconds.\n\n#### Favorite Bot\n\nSimilar to `retweet` bot we can define and initialise another function expression that will search and _favorite_ a tweet randomly. Yes, the difference here is to search and grab the tweet randomly. We will start by creating a parameter object `params` that will consist of three properties as in `retweet()` function expression. The bot will search for tweets using the same `.get()` function provided by `twit` API to GET any of the Twitter API endpoints. In our case, we need `search/tweets`. Then we will store the status of the search for tweet to _favorite_ in a variable and in a another variable we will apply the random function by passing the “status of the search” variable as an argument.\n\n```js\n// FAVORITE BOT====================\n\n// find a random tweet and 'favorite' it\nvar favoriteTweet = function () {\n  var params = {\n    q: '#nodejs, #Nodejs', // REQUIRED\n    result_type: 'recent',\n    lang: 'en'\n  };\n  // for more parametes, see: https://dev.twitter.com/rest/reference\n\n  // find the tweet\n  Twitter.get('search/tweets', params, function (err, data) {\n    // find tweets\n    var tweet = data.statuses;\n    var randomTweet = ranDom(tweet); // pick a random tweet\n\n    // if random tweet exists\n    if (typeof randomTweet != 'undefined') {\n      // Tell TWITTER to 'favorite'\n      Twitter.post(\n        'favorites/create',\n        { id: randomTweet.id_str },\n        function (err, response) {\n          // if there was an error while 'favorite'\n          if (err) {\n            console.log('CANNOT BE FAVORITE... Error');\n          } else {\n            console.log('FAVORITED... Success!!!');\n          }\n        }\n      );\n    }\n  });\n};\n// grab & 'favorite' as soon as program is running...\nfavoriteTweet();\n// 'favorite' a tweet in every 60 minutes\nsetInterval(favoriteTweet, 3600000);\n\n// function to generate a random tweet tweet\nfunction ranDom(arr) {\n  var index = Math.floor(Math.random() * arr.length);\n  return arr[index];\n}\n```\n\nNote that the tweets searched by our bot are all stored in an array. Again, we use JavaScript’s timer function `setInterval()`to search and favorite the tweet after a specific period of time in milliseconds.\n\nThe complete module: `bot.js` :\n\n```js\n// Dependencies =========================\nvar twit = require('twit'),\n  config = require('./config');\n\nvar Twitter = new twit(config);\n\n// RETWEET BOT ==========================\n\n// find latest tweet according the query 'q' in params\nvar retweet = function () {\n  var params = {\n    q: '#nodejs, #Nodejs', // REQUIRED\n    result_type: 'recent',\n    lang: 'en'\n  };\n  Twitter.get('search/tweets', params, function (err, data) {\n    // if there no errors\n    if (!err) {\n      // grab ID of tweet to retweet\n      var retweetId = data.statuses[0].id_str;\n      // Tell TWITTER to retweet\n      Twitter.post(\n        'statuses/retweet/:id',\n        {\n          id: retweetId\n        },\n        function (err, response) {\n          if (response) {\n            console.log('Retweeted!!!');\n          }\n          // if there was an error while tweeting\n          if (err) {\n            console.log(\n              'Something went wrong while RETWEETING... Duplication maybe...'\n            );\n          }\n        }\n      );\n    }\n    // if unable to Search a tweet\n    else {\n      console.log('Something went wrong while SEARCHING...');\n    }\n  });\n};\n\n// grab & retweet as soon as program is running...\nretweet();\n// retweet in every 50 minutes\nsetInterval(retweet, 3000000);\n\n// FAVORITE BOT====================\n\n// find a random tweet and 'favorite' it\nvar favoriteTweet = function () {\n  var params = {\n    q: '#nodejs, #Nodejs', // REQUIRED\n    result_type: 'recent',\n    lang: 'en'\n  };\n  // find the tweet\n  Twitter.get('search/tweets', params, function (err, data) {\n    // find tweets\n    var tweet = data.statuses;\n    var randomTweet = ranDom(tweet); // pick a random tweet\n\n    // if random tweet exists\n    if (typeof randomTweet != 'undefined') {\n      // Tell TWITTER to 'favorite'\n      Twitter.post(\n        'favorites/create',\n        { id: randomTweet.id_str },\n        function (err, response) {\n          // if there was an error while 'favorite'\n          if (err) {\n            console.log('CANNOT BE FAVORITE... Error');\n          } else {\n            console.log('FAVORITED... Success!!!');\n          }\n        }\n      );\n    }\n  });\n};\n// grab & 'favorite' as soon as program is running...\nfavoriteTweet();\n// 'favorite' a tweet in every 60 minutes\nsetInterval(favoriteTweet, 3600000);\n\n// function to generate a random tweet tweet\nfunction ranDom(arr) {\n  var index = Math.floor(Math.random() * arr.length);\n  return arr[index];\n}\n```\n\n#### Usage\n\nTo run this bot, go to your terminal:\n\n```shell\n$ node bot.js\n```\n\nTo avoid this monotonous process you can use `npm scripts` or `nodemon.` You can also deploy this app on `Heroku` for a continuous integration.\n\nTo use npm scripts, make this edit under `scripts` in `package.json` :\n\n```json\n{\n  \"scripts\": {\n    \"start\": \"node bot.js\"\n  }\n}\n```\n\nThen from terminal:\n\n```shell\n$ npm start\n```\n\n## Conclusion\n\nThere are various ways to write a Twitter Bot, this is just one way. Your bot can be smart and you can do various things with it. You just have to refer to [twit documentation](https://www.npmjs.com/package/twit) for other RESTful API methods to manipulate [Twitter API endpoints](http://REST%20API%20Endpoints:%20https://dev.twitter.com/rest/public).\n\nFor further reading check out [Botwiki.org](https://botwiki.org/bots/twitterbots/) for various types of bots on vast amount of platforms. For advanced reading, check out [Botwiki’s list of tutorials of Twitter Bots in different programming languages](https://botwiki.org/tutorials/twitterbots/).\n\nUpdate: the second part of this tutorial is available [here!](https://community.risingstack.com/how-to-make-a-twitter-bot-with-node-js/)\n\n[Originally Published at RisingStack.com](https://community.risingstack.com/node-js-twitter-bot-tutorial/)\n",
            "url": "https://amanhimself.dev//blog/node-js-twitter-bot-tutorial",
            "title": "Writing a Node.js Twitter Bot Part 1",
            "summary": "Writing a Node.js Twitter Bot Part 1",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/node-js-twitter-bot-tutorial-part-2",
            "content_html": "---\ndate: '2016-12-25'\ntitle: 'Writing a Node.js Twitter Bot Part 2'\nthumbnail: '/thumbnails/node.png'\nslug: 'node-js-twitter-bot-tutorial-part-2'\ntag: 'nodejs'\ncanonicalUrl: 'https://community.risingstack.com/how-to-make-a-twitter-bot-with-node-js/'\n---\n\nIf you read the [first part of my tutorial](https://community.risingstack.com/node-js-twitter-bot-tutorial/), you already know how to make a Twitter Bot with Node.js that retweets and favorites tweets using the Twitter API.\n\nIn the second part of the Twitter Bot tutorial, we will continue to extend our Bot by adding functionality that will tweet back to any Twitter user who follows our bot.\n\nBefore starting this, make sure your directory structure includes:\n\n- `package.json` (the configuration file for our Node.js application)\n- `config.js` (the configuration file of our Twitter application that contains both consumer and access key & tokens)\n- `bot.js` (our main application file)\n\nThe representation would be:\n\n```shell\nroot/project-name\n|- bot.js\n|- config.js\n|- package.json\n```\n\nYou can take a look at the complete bot.js file from [the first part of this tutorial](https://community.risingstack.com/node-js-twitter-bot-tutorial/).\n\nAlso, make sure you have the [twit](https://www.npmjs.com/search?q=twit) npm module installed.\n\n## How to make a Twitter bot that replies\n\nAfter setting up the dependencies and loading/requiring the configuration related to our application, we are going to develop a functionality that is going to tweet back to a Twitter user who follows the Bot's Twitter Handler.\n\nWe are going to use [Twitter's Streaming API](https://dev.twitter.com/streaming/overview) to interact with our followers.\n\n## Setting up the Streams API\n\nFirst, we have to set up a stream. Fortunately, the third party npm dependency `twit` provides an API function `.stream()` to do this task.\n\n```js\n// Use Streams API for interacting with a USER\n// set up a user stream\n\nvar stream = Twitter.stream('user');\n```\n\n`.stream()` keeps the connection alive, and returns an `EventEmitter`.\n\n`twit` provides a list of stream events to listen on, such as 'follow', 'unfollow', 'favorite' and 'unfavorite'.\n\nRight now we are only interested in the follow event, however the basic syntax is similar to every event.\n\n```js\n// when someone follows\nstream.on('follow', followed);\n```\n\nWhen a user follows our Twitter Bot, the `follow` event will trigger the callback associated with it, in our case `followed`.\n\n```js\n// ...trigger the callback\nfunction followed(event) {\n    console.log('Follow Event is running');\n    //get user's twitter handler (screen name)\n    var name = event.source.name,\n    var screenName = event.source.screen_name;\n    // function that replies back to the user who followed\n    tweetNow('@' + screenName + ' Thank you for the follow up.');\n}\n```\n\n## Replying with tweetnow()\n\nIn the followed callback, we pass an event argument which gets the Twitter handle and the screen name of the user. In the last line, we invoke a `tweetnow()` function that replies back to the user who followed our bot.\n\nThe `tweetnow()` function takes a string as an argument and updates our bots status. In other terms, it tweets by using `.post()`function provided by the `twit` API to post to the `statuses/update`Twitter API endpoint.\n\nThis endpoint gets called whenever you tweet from your Twitter account.\n\nIf you noticed in the [previous tutorial](https://community.risingstack.com/node-js-twitter-bot-tutorial/) when retweeting or to favorite a tweet, we used `.post()` to update our status.\n\n```js\nfunction tweetNow(tweetTxt) {\n  var tweet = {\n    status: tweetTxt\n  };\n  Twitter.post('statuses/update', tweet, function (err, data, response) {\n    if (err) {\n      console.log('Error in Replying');\n    } else {\n      console.log('Gratitude shown successfully');\n    }\n  });\n}\n```\n\nUnlike in the previous tutorial, we don't need JavaScripts Timer function this time, since we are using the Streaming API which helps to keep the connection alive.\n\nHere comes the complete code of our bot:\n\n```js\n// Use Streams API for interacting with a USER ==========\n// set up a user stream\n\nvar stream = Twitter.stream('user');\n\n// FOLLOW-Reply BOT ===========================\n\n// when someone follows\nstream.on('follow', followed);\n\n// ...trigger the callback\nfunction followed(event) {\n  console.log('Follow Event is running');\n  //get their twitter handler (screen name)\n  var name = event.source.name,\n    screenName = event.source.screen_name;\n  // function that replies back to the user who followed\n  tweetNow('@' + screenName + ' Thank you for the follow up.');\n}\n\n// function definition to tweet back to user who followed\nfunction tweetNow(tweetTxt) {\n  var tweet = {\n    status: tweetTxt\n  };\n  Twitter.post('statuses/update', tweet, function (err, data, response) {\n    if (err) {\n      console.log('Error in Replying');\n    } else {\n      console.log('Gratitude shown successfully');\n    }\n  });\n}\n```\n\n## Running the Twitter Bot\n\nTo run this bot, go to your terminal:\n\n```shell\nnode bot.js\n```\n\nTo avoid this monotonous process, you can use npm scripts or `nodemon`. You can also deploy this app on Heroku for a continuous deployment.\n\nIf you are planning to deploy on Heroku, make sure to include a `Procfile` in the root of your directory structure and add the following line to the file:\n\n```shell\nworker: node bot.js\n```\n\nIf you are using npm scripts, make sure you edit the `scripts` attribute in the`package.json` file:\n\n```json\n{\n  \"scripts\": {\n    \"start\": \"node bot.js\"\n  }\n}\n```\n\nThen to run from terminal:\n\n```shell\n$ npm start\n```\n\n## Next up\n\nTo do further smart things with your bot, go and check out the [twit documentation](https://www.npmjs.com/package/twit) for other RESTful API methods and Streaming API events.\n\nIf you are interested in Twitter Bots, check [Botwiki.org](https://botwiki.org/bots/twitterbots/) - as they have the vast collection of Twitter Bots in different programming languages.\n\nThe sole purpose of Bot as a web application is automation. For example, when I created my first Twitter Bot [@nodejstweets](https://twitter.com/nodejstweet), the whole idea was to remain up to date with the most recent happenings.\n\nYou can do a lot of things with a Twitter Bot, whether for your own sole purpose or to solve a purpose for a community. See [@100DaysOfCode](http://twitter.com/@_100DaysOfCode) as a great example.\n\n[Originally Published at RisingStack.com](https://community.risingstack.com/how-to-make-a-twitter-bot-with-node-js/)\n",
            "url": "https://amanhimself.dev//blog/node-js-twitter-bot-tutorial-part-2",
            "title": "Writing a Node.js Twitter Bot Part 2",
            "summary": "Writing a Node.js Twitter Bot Part 2",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/create-a-simple-twitter-bot-with-node-js",
            "content_html": "---\ntitle: 'Create a Simple Twitter Bot with Node.js'\ndate: '2016-11-23'\nthumbnail: '/thumbnails/node.png'\nslug: 'create-a-simple-twitter-bot-with-node-js'\ntag: 'nodejs'\ncanonicalUrl: 'https://medium.com/hackernoon/create-a-simple-twitter-bot-with-node-js-5b14eb006c08'\n---\n\n> [Originally Published at Hackernoon.com](https://medium.com/hackernoon/create-a-simple-twitter-bot-with-node-js-5b14eb006c08)\n\nHow about a Twitter Bot that retweets, favorites, on the basis of hashtags and replies to other users if they follow it? I made a similar kind of a Twitter Bot [(@nodejstweet)](https://twitter.com/nodejstweet) that feeds me the latest or the ongoing news/articles/how-to’s on a set of hashtags such as #Nodejs, #MongoDB, #AngularJS, #IonicFramework, et cetera. At the time I never expected it having more followers than me but that has been surpassed.\n\n<img src='https://cdn-images-1.medium.com/max/800/1*DcLASOdtPlO8p86oUg86JA.png' />\n\n### What this bot will do?\n\nThis is a simple Twitter bot and will retweet, favorite/like randomly on the basis of hashtags as a query that we will use and continue to do so after a certain period of time interval.\n\n## What you need?\n\n- You must have [Node.js](http://nodejs.org) installed on your system.\n- A Twitter Account.\n- Your bot will be using [`twit`](https://www.npmjs.com/package/twit) which is an npm module to manipulate tweets and streams, and to communicate with the [Twitter API](https://dev.twitter.com/docs).\n\n## Let’s Start\n\nSetup an empty directory and initialise it with:`$ npm init` to configure this web application with `package.json` file. Then create two new files: `bot.js` & `config.js` in that directory.\n\n`bot.js` will be our main app file in which we will be writing the source code of our Twitter Bot, and so in `package.json` edit the `main` field to:\n\n```json\n{\n  \"main\": \"bot.js\"\n}\n```\n\nYour current directory structure should look like this:\n\n```shell\nroot/project-name\n|- bot.js\n|- config.js\n|- package.json\n```\n\n## Configuring and granting permissions from Twitter API\n\nAfter logging to to your Twitter account, follow to this link: [https://apps.twitter.com/app/new](https://apps.twitter.com/app/new) to create a new application. Fill out the necessary fields in the form click on the button _Create Your Twitter Application._ After creating the application, look for `Keys and Access Tokens` under the nav-panes and click on `Generate Token Actions\\` and then copy:\n\n- Consumer Key\n- Consumer Secret\n- Access Token\n- Access Token Secret\n\nOpen the `config.js` file and paste all four values inside it. Expose those values using `module.export`:\n\n```js\n//config.js\n/* TWITTER APP CONFIGURATION\n * consumer_key\n * consumer_secret\n * access_token\n * access_token_secret\n */\n\nmodule.exports = {\n  consumerconsumer_key: '',\n  consumerconsumer_secret: '',\n  accessaccess_token: '',\n  accessaccess_tokenaccess_token_secret: ''\n};\n```\n\nNow, the Twitter bot’s configuration is step is complete. _Please note,_ for every different application, the `consumer key`, `consumer secret`, `access_token` and `access_token_secret` will differ.\n\n## Building the bot\n\nSince the configuration step is complete, now let’s install our third requisite that is [Twitter API client for node](https://www.npmjs.com/package/twit) and will help us to communicate to Twitter API and provide an API for all necessary actions _(such as retweet and favorite a tweet)._\n\nWe will start by installing the dependency we need for our application.\n\n```shell\n$ npm install --save twit\n```\n\nAfter the dependency has finished installing, go to the `bot.js` file and require the dependency and `config.js` file.\n\n```js\nvar twit = require(’twit’);\nvar config = require(’./config.js’);\n```\n\nPass the configuration (_consumer and access tokens_) of our Twitter application in `config.js` to `twit:`\n\n```js\nvar Twitter = new twit(config);\n```\n\nSo far, so good?\n\n**PLEASE NOTE: You must refer to** [twit documentation](https://www.npmjs.com/package/twit) **for a deep reference.**\n\n#### Retweet Bot\n\nLet’s write a function expression that finds the latest tweets according to the query passed as a parameter. We will initialise a `params` object that will hold various properties to search a tweet, but most importantly `query` or `q` property that will refine our searches. Whatever value you feed in this property, our bot will search the tweets to retweet based on this criteria. You can feed this property values like a twitter handler, to monitor a specific twitter account or a #hashtag. For our example bot, we have find latest tweets on #nodejs.\n\nThis is how the functionality of the retweet bot starts:\n\n```js\nvar retweet = function() {\n  var params = {\n    q: '#nodejs, #Nodejs',\n    result\\_type: 'recent',\n    lang: 'en'\n  }\n```\n\nThe other two properties: `result_type` and `lang` are optional. On defining the `result_type: 'recent'` notifies bot to only search for the latest tweets, tweets that have occurred in the time period since our bot has started or it made the last retweet.\n\n[There is a list of parameters provided by the Twitter API](https://dev.twitter.com/rest/reference/get/search/tweets).\n\nOur next step is to search for the tweets based on our parameters. For this, we will use `Twitter.get` function provided by `twit` API to GET any of the REST API endpoints. The REST API endpoint is a reference to the T[witter API endpoint](https://dev.twitter.com/docs) we are going to make a call to search for tweets. The `Twitter.get` function accepts three arguments: API endpoint, params object (defined by us) and a callback.\n\n```js\n// RETWEET BOT ==========================\n\n// find latest tweet according the query 'q' in params\nvar retweet = function () {\n  var params = {\n    q: '#nodejs, #Nodejs', // REQUIRED\n    result_type: 'recent',\n    lang: 'en'\n  };\n  // for more parametes, see: https://dev.twitter.com/rest/reference/get/search/tweets\n\n  Twitter.get('search/tweets', params, function (err, data) {\n    // if there no errors\n    if (!err) {\n      // grab ID of tweet to retweet\n      var retweetId = data.statuses[0].id_str;\n      // Tell TWITTER to retweet\n      Twitter.post(\n        'statuses/retweet/:id',\n        {\n          id: retweetId\n        },\n        function (err, response) {\n          if (response) {\n            console.log('Retweeted!!!');\n          }\n          // if there was an error while tweeting\n          if (err) {\n            console.log(\n              'Something went wrong while RETWEETING... Duplication maybe...'\n            );\n          }\n        }\n      );\n    }\n    // if unable to Search a tweet\n    else {\n      console.log('Something went wrong while SEARCHING...');\n    }\n  });\n};\n```\n\nTo post or to retweet the tweet our bot has found we use `Twitter.post()` method to _POST any of the REST API endpoints_. It also takes the same number of arguments as `Twitter.get()`.\n\nNow to automate this action we defined above, we can use JavaScript’s timer function `setInterval()` to search and retweet after a specific period of time.\n\n```js\n// grab & retweet as soon as program is running...\nretweet();\n// retweet in every 50 minutes\nsetInterval(retweet, 3000000);\n```\n\nPlease note that all JavaScript’s Timer functions take the _amount of time_ argument in milliseconds.\n\n#### Favorite Bot\n\nSimilar to `retweet` bot we can define and initialise another function expression that will search and _favorite_ a tweet randomly. Yes, the difference here is to search and grab the tweet randomly. We will start by creating a parameter object `params` that will consist of three properties as in `retweet()` function expression. The bot will search for tweets using the same `.get()` function provided by `twit` API to GET any of the Twitter API endpoints. In our case, we need `search/tweets`. Then we will store the status of the search for tweet to _favorite_ in a variable and in a another variable we will apply the random function by passing the “status of the search” variable as an argument.\n\n```js\n// FAVORITE BOT====================\n\n// find a random tweet and 'favorite' it\nvar favoriteTweet = function () {\n  var params = {\n    q: '#nodejs, #Nodejs', // REQUIRED\n    result_type: 'recent',\n    lang: 'en'\n  };\n  // for more parametes, see: https://dev.twitter.com/rest/reference\n\n  // find the tweet\n  Twitter.get('search/tweets', params, function (err, data) {\n    // find tweets\n    var tweet = data.statuses;\n    var randomTweet = ranDom(tweet); // pick a random tweet\n\n    // if random tweet exists\n    if (typeof randomTweet != 'undefined') {\n      // Tell TWITTER to 'favorite'\n      Twitter.post(\n        'favorites/create',\n        { id: randomTweet.id_str },\n        function (err, response) {\n          // if there was an error while 'favorite'\n          if (err) {\n            console.log('CANNOT BE FAVORITE... Error');\n          } else {\n            console.log('FAVORITED... Success!!!');\n          }\n        }\n      );\n    }\n  });\n};\n// grab & 'favorite' as soon as program is running...\nfavoriteTweet();\n// 'favorite' a tweet in every 60 minutes\nsetInterval(favoriteTweet, 3600000);\n\n// function to generate a random tweet tweet\nfunction ranDom(arr) {\n  var index = Math.floor(Math.random() * arr.length);\n  return arr[index];\n}\n```\n\nNote that the tweets searched by our bot are all stored in an array. Again, we use JavaScript’s timer function `setInterval()`to search and favorite the tweet after a specific period of time in milliseconds.\n\nThe complete module: `bot.js` :\n\n```js\n// Dependencies =========================\nvar twit = require('twit'),\n  config = require('./config');\n\nvar Twitter = new twit(config);\n\n// RETWEET BOT ==========================\n\n// find latest tweet according the query 'q' in params\nvar retweet = function () {\n  var params = {\n    q: '#nodejs, #Nodejs', // REQUIRED\n    result_type: 'recent',\n    lang: 'en'\n  };\n  Twitter.get('search/tweets', params, function (err, data) {\n    // if there no errors\n    if (!err) {\n      // grab ID of tweet to retweet\n      var retweetId = data.statuses[0].id_str;\n      // Tell TWITTER to retweet\n      Twitter.post(\n        'statuses/retweet/:id',\n        {\n          id: retweetId\n        },\n        function (err, response) {\n          if (response) {\n            console.log('Retweeted!!!');\n          }\n          // if there was an error while tweeting\n          if (err) {\n            console.log(\n              'Something went wrong while RETWEETING... Duplication maybe...'\n            );\n          }\n        }\n      );\n    }\n    // if unable to Search a tweet\n    else {\n      console.log('Something went wrong while SEARCHING...');\n    }\n  });\n};\n\n// grab & retweet as soon as program is running...\nretweet();\n// retweet in every 50 minutes\nsetInterval(retweet, 3000000);\n\n// FAVORITE BOT====================\n\n// find a random tweet and 'favorite' it\nvar favoriteTweet = function () {\n  var params = {\n    q: '#nodejs, #Nodejs', // REQUIRED\n    result_type: 'recent',\n    lang: 'en'\n  };\n  // find the tweet\n  Twitter.get('search/tweets', params, function (err, data) {\n    // find tweets\n    var tweet = data.statuses;\n    var randomTweet = ranDom(tweet); // pick a random tweet\n\n    // if random tweet exists\n    if (typeof randomTweet != 'undefined') {\n      // Tell TWITTER to 'favorite'\n      Twitter.post(\n        'favorites/create',\n        { id: randomTweet.id_str },\n        function (err, response) {\n          // if there was an error while 'favorite'\n          if (err) {\n            console.log('CANNOT BE FAVORITE... Error');\n          } else {\n            console.log('FAVORITED... Success!!!');\n          }\n        }\n      );\n    }\n  });\n};\n// grab & 'favorite' as soon as program is running...\nfavoriteTweet();\n// 'favorite' a tweet in every 60 minutes\nsetInterval(favoriteTweet, 3600000);\n\n// function to generate a random tweet tweet\nfunction ranDom(arr) {\n  var index = Math.floor(Math.random() * arr.length);\n  return arr[index];\n}\n```\n\n## Usage\n\nTo run this bot, go to your terminal:\n\n```shell\n$ node bot.js\n```\n\nTo avoid this monotonous process you can use `npm scripts` or `nodemon.` You can also deploy this app on `Heroku` for a continuous integration.\n\nTo use npm scripts, make this edit under `scripts` in `package.json` :\n\n```json\n{\n  \"scripts\": {\n    \"start\": \"node bot.js\"\n  }\n}\n```\n\nThen from terminal:\n\n```shell\n$ npm start\n```\n\nThere are various ways to write a Twitter Bot, this is just one way. Your bot can be smart and you can do various things with it. You just have to refer to [twit documentation](https://www.npmjs.com/package/twit) for other RESTful API methods to manipulate [Twitter API endpoints](http://REST%20API%20Endpoints:%20https://dev.twitter.com/rest/public).\n\nFor further reading check out [Botwiki.org](https://botwiki.org/bots/twitterbots/) for various types of bots on vast amount of platforms. For advanced reading, check out [Botwiki’s list of tutorials of Twitter Bots in different programming languages](https://botwiki.org/tutorials/twitterbots/).\n",
            "url": "https://amanhimself.dev//blog/create-a-simple-twitter-bot-with-node-js",
            "title": "Create a Simple Twitter Bot with Node.js",
            "summary": "Create a Simple Twitter Bot with Node.js",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/atom-an-editor-of-21st-century",
            "content_html": "---\ntitle: 'ATOM- An Editor of 21st Century'\ndate: '2016-07-14'\nthumbnail: '/thumbnails/atom.png'\nslug: 'atom-an-editor-of-21st-century'\ntag: 'tools'\ncanonicalUrl: 'https://amanhimself.dev/blog/atom-an-editor-of-21st-century'\n---\n\nThe [Atom](http://atom.io/) I am talking about is not a small particle in the world of developers. Built and maintained by Github and the community, it is more than just an editor.\n\nIn our world, in the world of developers, an editor plays an amount of significant role when it comes to writing code. They might seem just a tool, as a matter of fact, they are, but for someone who takes pleasure in writing code, it is an essential piece in their setup.\n\nUsing an editor is really a matter of choice, your comfort zone but the game of plugins have a big role to play. As yourself, I have tried my hands on different editors & IDEs and for now I have decide to settle with Atom for its enormous amount of plugins available. Another reason for me is that it’s written in JavaScript (exactly CoffeScript & since I am a JS enthusiast) and is completely free to use because of its open source normality.\n\nIt is inspiring to open-source community as well. Few months back, Facebook released there version called Nuclide which focus more on mobile development. Then there is Electron for building cross-platform desktop application. Both are based on Atom Shell.\n\nAtom is mature in terms of plugins when comes to keeping the pace with newer technologies. When I started out with Node.js, I tried to stick with Webstorm IDE but soon Atom lured me for its support of frameworks like Ionic (a plugin called Ionic-Preview and I am still exploring) thanks to the community plugins and the other matter of fact that it’s open source.\n\n![1](https://i.imgur.com/a5Ziwot.jpg)\n\n## Packages\n\nThere are more than 4.5k +packages published already. To view, Open the Settings view by clicking Packages > Settings View > Open in the menu bar or by using the (cmd + ,) keyboard shortcut.\n\nAtom Packages are categorized further into:\n\n- Community packages: Packages written by people outside of GitHub’s Atom team.\n- Core packages: These are developed by the Atom team and come bundled with Atom but you can disable them if they are no use to you.\n- Development packages: Packages which you have on your machine and use in Atom from that local source.\n\nCore Packages do provide support for most favorable programming/scripting languages but if you are using something out of the box then you must check the Community packages. Chances of finding the one are in your favour there.\n\nIf you are still unable to find what you are looking, you should try developing a package for yourself and then if you like share it with the community.\n\n## TIP- Decreasing Startup Time\n\nThere may come a period of time when your Atom might behave sluggishly. What will you do?\n\n- You’ll remove all the packages (a.k.a plugins) you don’t use but for some reason you had them installed,\n- or there isn’t much use of that particular package and you can do without it,\n- or it was there just for fun. But before removing the packages, one must know which package is consuming how much startup time. You might want some of those unnecessary packages to stay with you if you know they are not the real culprits who are slowing down your development environment.\n\n![2](https://i.imgur.com/HEqlVPv.png)\n\nI have seen (mostly on online forums) some developers groan about this kind of sluggishness but I haven’t met it yet.\n\n**Recommended Packages**\n\nMost of these packages are helpful in my daily JavaScript coding environment. I think they will be helpful to you too.\n\n- open-recent (to continue where you left)\n- sync-settings (do you work more than one machine? This for you)\n- Ionic-Preview (for people who are working Ionic Framework)\n- terminal-plus (terminal inside atom)\n- atom-jade (there is support for ejs, handlebars, mustache too)\n- jade (if you are into jade, this is a snippets package)\n- js-hyperclick (as your project goes bigger, you will get addicted to it)\n- atom-lupa (nice one if your daily musings includes React)\n- autocomplete-modules (Node.js devs: autocompletes require statements)\n- atom-pair (developed by the guys at Pusher, a must if you do pair coding)\n- javascript-snippets (JavaScript and Node.js snippets)\n- atom-nodejs-snippets (this is another Nodejs & JavaScript snippet package, made by me. Supports ES6 syntax)\n- linter + linter-jshint\n- atom-ternjs (JavaScript code intelligence for Atom)\n- encourage (a nice one to have, if you are having a dark day, fun)\n\nThe main advantage of an editor like Atom is that you can highly customize it. You can hack it, make your own packages, or use the one that are already there in the community and bend them as per your needs.\n\n## Lastly\n\n![3](https://i.imgur.com/HIgoDE2.jpg)\n\n_Note: At the time of writing this post, Webstorm IDE did not have support for frameworks like Ionic and the latest Atom Version is 1.8.0._\n",
            "url": "https://amanhimself.dev//blog/atom-an-editor-of-21st-century",
            "title": "ATOM- An Editor of 21st Century",
            "summary": "ATOM- An Editor of 21st Century",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/how-process-nexttick-works-in-node-js",
            "content_html": "---\ntitle: 'How process.nextTick() works in Node.js?'\ndate: '2016-06-25'\nthumbnail: '/thumbnails/node.png'\nslug: 'how-process-nexttick-works-in-node-js'\ntag: 'nodejs'\ncanonicalUrl: 'https://amanhimself.dev/blog/how-process-nexttick-works-in-node-js/'\n---\n\nThe [process](https://nodejs.org/api/process.html) object is a one of the few global objects provided by the Node.js core API. It can be access from anywhere, thus its methods can also be accessed. Such is a method called `process.nextTick()` which is used by developers in realtime applications everyday to defer the execution of a function until the next [Event Loop Iteration](https://medium.com/@amanhimself/the-node-js-system-51090c35dddc).\n\nBrowser JavaScript introduced us functions like `setTimeout()` to defer tasks in the near future. The `setTimeout()` function takes a callback function and a number value representing the time after which the callback function will be executed, in milliseconds.\n\n```js\nsetTimeout(callback, 0);\n```\n\nIn Node.js, each iteration of an Event Loop is called a tick. To schedule a callback function to be invoked in the next iteration of the Event Loop, we use process.nextTick(). It just takes a callback with no time bound, since it will be executing in the next iteration of the Event Loop.\n\n```js\nprocess.nextTick(callback);\n```\n\nThe difference between setTimeout() and process.nextTick() is that the process.nextTick() function is specific to the Node.js Event Loop. setTimeout() uses JavaScript runtime to schedule its own queue of events. When using process.nextTick(), callback function associated with [it runs immediately after events in the Event Queue are processed by the Event Loop in a single iteration. In comparison to setTimeout(), it is faster since queue associated with setTimeout() or the JavaScript runtime](https://gist.github.com/mmalecki/1257394).\n\n```js\nfunction cb() {\n  console.log('Processed in next iteration');\n}\nprocess.nextTick(cb);\nconsole.log('Processed in the first iteration');\n```\n\nThe above snippet is an example of how `process.nextTick()` works. You can save the snippet in a file.js and run using \\$node file.js from your terminal. You will definitely notice that the second console.log printed before the console.log associated with function `cb()`.\n\n```js\nProcessed in the first iteration\nProcessed in next iteration\n```\n\n### Further Reading:\n\n- [process.nextTick vs setTimeout(fn, 0)](https://gist.github.com/mmalecki/1257394)\n- [Nodejs Official Docs](https://nodejs.org/docs/latest/api/process.html#process_process_nexttick_callback_args)\n- [Understanding process.nextTick()](https://howtonode.org/understanding-process-next-tick)\n",
            "url": "https://amanhimself.dev//blog/how-process-nexttick-works-in-node-js",
            "title": "How process.nextTick() works in Node.js?",
            "summary": "How process.nextTick() works in Node.js?",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/nodejs-system",
            "content_html": "---\ntitle: 'The Node.js system'\ndate: '2016-04-22'\nthumbnail: '/thumbnails/node.png'\nslug: 'nodejs-system'\ntag: 'nodejs'\ncanonicalUrl: 'https://medium.com/hackernoon/the-node-js-system-51090c35dddc'\n---\n\nWhen I started learning Node.js, I always wondered, how does it work? How is it inside Node.js? Event loop and Event Queue jargons are digested. But what exactly is going on? Where do those jargons Event Loop and Event Queue come from.To satisfy my curiosity as well to know the answer to my previous question, I went in depth as much as I can and came across some things which I’d like to share with you. In brief, this article is about **Node.js System** — a glimpse of internal workings of Node.\n\nIf you are familiar with Node.js, it is a known fact that Node.js is single threaded. If you are from programming/computer science background you know what a thread means. Consider this scenario: traditionally — an I/O request comes to a web server and is assigned to an available thread, and for each concurrent connection there is one thread available. That request is handled on the specific thread until it is fulfilled and the response is sent.\n\nThis scenario is a perfect example of **Blocking I/O** because while handling a particular request by a specific thread, there will be some idle time when the operations are being done (such as retrieving a file, opening it, reading it, etc.). A single thread consumes memory. A longer running thread for each connection and then sitting idly for some amount of time is not considered an efficient way in the [world of Node.js](https://medium.com/@amanhimself/the-node-way-philosophy-of-a-platform-f9738ed5f9d2).\n\n## Enter Reactor Pattern- Heart of Node.js\n\nReactor Pattern is an idea of non-blocking I/O operations in Node.js. This pattern provides a handler(in case of Node.js, a callback function) that is associated with each I/O operation. When an I/O request is generated, it is submitted to a demultiplexer.\n\nThis demultiplexer is a notification interface that is used to handle concurrency in non-blocking I/O mode and collects every request in form of an event and queues each event in a queue. Thus, the demultiplexer provides the Event Queue, which we often hear. When a request is collected by the demultiplexer, it returns the control back to the system and does not blocks the I/O. At the same time, there is an Event Loop which iterates over the items in the Event Queue. Every event has a callback function associated with it, and that callback function is invoked when the Event Loop iterates.\n\nThe callback function further mostly have other callbacks associated within representing some asynchronous operations. These operations are inserted in the Event Queue by the demultiplexer and are ready to be processed once the Event Loop iterates over them. That is why calls to other operations must be asynchronous.\n\nWhen all the items in the Event Queue are processed and there are no pending operations left, Node.js terminates the application automatically.\n\n## Building Blocks of Node.js\n\n- Reactor Pattern\n- [libuv](http://docs.libuv.org/en/v1.x/)\n- A set of Bindings\n- Chrome’s V8\n- Core JS Library\n\n## libuv\n\nPronounced as “lib u v”, is library written in C language to make Node.js compatible with every OS and provide the non-blocking I/O behaviour. libuv is the low-level engine that implements reactor pattern thus providing an API for creating the Event Loop, managing an Event Queue and running asynchronous I/O operations. It is built specifically to provide a unified experience over different Operating Systems.\n\n## Need for libuv?\n\nEach operating system has its own interface for the demultiplexer. Such as Kqueue for Mac OS X, IOCP for Windows and Epoll for Linux. Different multiplexers will behave differently when handling an I/O request. And then, each I/O operation can differ in its behaviour within the same operating system. This creates an inconsistency and to overcome this inconsistency libuv is the solution.\n\nI am not going to talk about internal workings of libuv here, not an expert on that, myself. For more info on libuv [check their docs](http://docs.libuv.org/) or this [slide](http://www.slideshare.net/saghul/libuv-nodejs-and-everything-in-between) by Saúl Ibarra Corretgé [(@saghul)](https://twitter.com/saghul) is a good start.\n\n[Also, libuv is independently maintained by awesome developers.](https://github.com/libuv/libuv)\n\n## Set of Bindings\n\nThese set of bindings are responsible for wrapping and exposing libuv and other low-level functionality to JavaScript.\n\n## V8\n\nIt’s a runtime engine[ developed by Google for Chrome browser for JavaScript](https://developers.google.com/v8/). It is the reason Node.js is fast and efficient.\n\n## Core Library\n\nThis is a JavaScript library that implements high-level Node.js API (a.k.a. node-core).\n\n<img src='https://miro.medium.com/max/451/1*dTYKv5fII4doUAqJSA51Qg.png' />\n\nThe image borrowed above clarifies and represents a complete Node.js System. I hope this article has made things more clear as it did to me.\n\n> [Orignally Published at Hackernoon.com](https://medium.com/hackernoon/the-node-js-system-51090c35dddc)\n",
            "url": "https://amanhimself.dev//blog/nodejs-system",
            "title": "The Node.js system",
            "summary": "The Node.js system",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/the-node-way",
            "content_html": "---\ntitle: 'The Node way - Philosophy of a Platform'\ndate: '2016-03-10'\nthumbnail: '/thumbnails/node.png'\nslug: 'the-node-way'\ntag: 'nodejs'\ncanonicalUrl: 'https:/amanhimself.dev/blog/the-node-way/'\n---\n\nLast week, when [Node.js](https://nodejs.org/en/blog/) community introduced its logo, it got me into thinking of why this technology as fresh in my mind as when I was first introduced to it a few months back. Why is that spark still ignited in the back of my head? The answer to this is the philosophy behind the technology of Node.js platform.\n\nEvery platform has its own philosophy, its own set of rules, its own principles and guidelines. This is necessary for the evolution of a platform and is important for developing an application using that platform. (Otherwise, we all can get carried away.) Node.js has its own philosophy, since its a platform, and it manages to find a middleground between JavaScript and UNIX.\n\nTwo of the most important principles of UNIX that are adaptable in Node.js are:\n\n- Modularity, keeping simple parts short, connected with clean interfaces.\n- A program should do one thing and it should do that awesomely.\n\nOther rules described by Eric Steven Raymond in [The Art of UNIX Programming](http://www.catb.org/esr/writings/taoup/html/index.html) might fit to some extent but the two aforementioned are necessary to use Node.js pragmatically.\n\nIn Node.js this pragmaticism is provided the by a ‘module’. Module is the fundamental to structure the code of a program in Node.js. Module is also the building block of a package. (A package is any application or reusable libraries).\n\nThe principle here is to design small modules in terms of code and in terms of application scope. This principle provides:\n\n- reusability of code\n- easier to understand the code\n- thus, making it simple to test and maintain\n\n---\n\nAnother important aspect in the Node Philosophy is the dependency of each package. Writing a Node.js application, one tends to use a lot of packages (which is the genesis of Node.js Ecosystem: npm) and this might create a common problem known as: dependency hell. To overcome this conflict, Node.js manages dependencies of each installed package to have its own separate set of dependencies.\n",
            "url": "https://amanhimself.dev//blog/the-node-way",
            "title": "The Node way - Philosophy of a Platform",
            "summary": "The Node way - Philosophy of a Platform",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        },
        {
            "id": "https://amanhimself.dev//blog/javascript-code-convetions",
            "content_html": "---\ndate: '2016-01-08'\ntitle: 'JavaScript Code Conventions'\nthumbnail: '/thumbnails/js.png'\nslug: 'javascript-code-conventions'\ntag: 'javascript'\ncanonicalUrl: 'https://amanhimself.dev/blog/javascript-code-conventions/'\n---\n\nThis article is about coding conventions. Everywhere I read articles about complex things in programming, links to other good/better/awesome articles, but nobody seems to talk about the basic things in programming.\n\nLike the coding conventions used by programmers in their work, I am a JavaScript enthusiast, and never once did I came across a good article on basic conventions and guidelines to write code that is helpful for me and others to read my code.\n\nThus, this is my attempt, and this article contains some general coding conventions as well as some specific guidelines only applicable to JavaScript.\n\n## So what are Code Conventions?\n\nThese are the guidelines about programming practices, file and directory structure, and commenting.\n\nNow you may be wondering why do you need guidelines for files and directory structure? Well, to keep it simple, and when working in a team, you have to follow some rules for a specific file structure for that application. Otherwise, it will be a huge mess.\n\n## Style Guidelines\n\nThey are the type of Code Convention that includes the layout of the code within a file.\n\n## Indentation\n\nThe first thing to do when writing code in a file is how to handle indentation.\n\n```js\nif (num === 1) {\n  for (i = 0; i < array.length; i++) {\n    if (array[i] !== 0) {\n      //some code\n    } else if (array[i] === array.length) {\n      // code\n    }\n  }\n}\n```\n\nObserve in the previous example there is a flow. This is what indentation is all about. It makes the program readable. The else if statement is used for the if statement inside the for loop and not the outside if statement.\n\nTwo ways to achieve indentation:\n\n- using tabs\n- using spaces\n\n**Using Tabs**\nFor each indentation level, use one tab character. Thus, the second level will have two tab characters and so on.\n\n**Using Space**\n\nEach indentation level is made up of multiple spaces. The levels contain spaces in pairs, like two spaces for the first level, four spaces for the second level, etc.\n\nThe advantage of using spaces over tabs is that all text editors are configured according to spaces and are treated exactly the same. The disadvantage here is to put spaces in each line. Thankfully, we are in an era where text editors are smart enough and they automatically do indentation.\n\n## Avoid ASI Automatic Semicolon Insertion\n\nAvoiding semicolons is possible, and if JavaScript has a mechanism called ASI, why the hell care about semicolons? If you are comfortable with ASI carry on. But the rules of ASI are complex, and using your time in writing code rather than worrying about ASI is better.\n\nIt causes errors, and sometimes things won’t work because the JavaScript parser may read things differently from the way they are written.\n\nAlso, semicolons improve the readability of the code for other programmers too. If you are working collaboratively, it’s a great help.\n\n## Avoid Horizontal Scrolling\n\nThe recommended length of code in a line is 80 characters. Even though the text editors have become smart, the length of 80 characters has is still used as a convention.\n\n## Blank Lines are not harmful\n\nUsing blank lines to separate unrelated lines of code. It improves readability.\n\nWithout blank lines:\n\n```js\nif (num === 1) {\n  for (i = 0; i < array.length; i++) {\n    if (array[i] !== 0) {\n      //some code\n    } else if (array[i] === array.length) {\n      // code\n    }\n  }\n}\n```\n\nWith blank lines:\n\n```js\nif (num === 1) {\n  for (i = 0; i < array.length; i++) {\n    if (array[i] !== 0) {\n      //some code\n    } else if (array[i] === array.length) {\n      // code\n    }\n  }\n}\n```\n\n## Naming Convention\n\nECMAScript uses camelCase convention. You should too when naming Variables and Functions. And try to use meaningful names for those variables and functions and keep them short.\n\n## Function Naming\n\nIn JS, all we do is make functions in the form of callbacks and events. Author of Maintainable Javascript Nicholas Zakas introduces some common conventions for functions. I find this helpful:\n\n- can Function that returns a boolean\n- has Function that returns a boolean\n- is a Function that returns a boolean\n- get Function that returns a non boolean\n- set Function that is used to save a value\n\n## Constructors\n\nConstructors are functions too and are used to create objects via a new operator. But avoid using camelCase and use PascalCase instead.\n\nIt is helpful since JavaScript uses the same for naming pre-defined constructors.\n\n## Comments\n\nFor single-line comments, I observed this when using JSLint, after // use a space between them(the two slashes) and the comment.\n\n```js\n// Single-Line Comment\n```\n\n> Following all conventions can be hard and a stressful matter at times when you are focusing on the logic part of the code. Thus, there is an alternative that works for me most of the time, is the [Beautify](https://atom.io/packages/atom-beautify) package that I use in the text editor [Atom](http://www.atom.io/) and I am sure it is available for the majority of other text editors.\n",
            "url": "https://amanhimself.dev//blog/javascript-code-convetions",
            "title": "JavaScript Code Conventions",
            "summary": "JavaScript Code Conventions",
            "date_modified": "2022-03-27T16:37:20.238Z",
            "author": {
                "name": "Aman Mittal",
                "url": "https://twitter.com/amanhimself"
            }
        }
    ]
}